(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-29 14:47:00
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun list___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%stateless ($Ref $Ref) Bool)
(declare-fun list___contains__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun list___len__%precondition ($Snap $Ref) Bool)
(declare-fun list___len___0 ($Snap $Ref) Int)
(declare-fun list___len___0%limited ($Snap $Ref) Int)
(declare-fun list___len___0%stateless ($Ref) Bool)
(declare-fun list___len___0%precondition ($Snap $Ref) Bool)
(declare-fun list___contains___0 ($Snap $Ref $Ref) Bool)
(declare-fun list___contains___0%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains___0%stateless ($Ref $Ref) Bool)
(declare-fun list___contains___0%precondition ($Snap $Ref $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun min_ ($Snap $Ref $Ref) Int)
(declare-fun min%limited ($Snap $Ref $Ref) Int)
(declare-fun min%stateless ($Ref $Ref) Bool)
(declare-fun min%precondition ($Snap $Ref $Ref) Bool)
(declare-fun list___getitem___0 ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem___0%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem___0%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem___0%precondition ($Snap $Ref $Ref) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun min_0 ($Snap $Ref $Ref) Int)
(declare-fun min_0%limited ($Snap $Ref $Ref) Int)
(declare-fun min_0%stateless ($Ref $Ref) Bool)
(declare-fun min_0%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___le__ ($Snap Int Int) Bool)
(declare-fun int___le__%limited ($Snap Int Int) Bool)
(declare-fun int___le__%stateless (Int Int) Bool)
(declare-fun int___le__%precondition ($Snap Int Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___ge__ ($Snap Int Int) Bool)
(declare-fun int___ge__%limited ($Snap Int Int) Bool)
(declare-fun int___ge__%stateless (Int Int) Bool)
(declare-fun int___ge__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustTerminate_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded_0%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded_0%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun _MaySet_0%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@65@00 () $Perm)
(declare-fun $k@71@00 () $Perm)
(declare-fun $k@72@00 () $Perm)
(declare-fun $k@73@00 () $Perm)
(declare-fun $k@76@00 () $Perm)
(declare-fun $k@78@00 () $Perm)
(declare-fun $k@80@00 () $Perm)
(declare-fun $k@81@00 () $Perm)
(declare-fun $k@84@00 () $Perm)
(declare-fun letvar@82@00 ($Snap $Ref $Ref) Int)
(declare-fun $k@85@00 () $Perm)
(declare-fun $k@86@00 () $Perm)
(declare-fun $k@89@00 () $Perm)
(declare-fun letvar@87@00 ($Snap $Ref $Ref) Int)
(declare-fun $k@90@00 () $Perm)
(declare-fun $k@92@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-2204|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-2205|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-2206|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2207|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2256|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2257|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref) (item@5@00 $Ref)) (!
  (=
    (list___contains__%limited s@$ self@4@00 item@5@00)
    (list___contains__ s@$ self@4@00 item@5@00))
  :pattern ((list___contains__ s@$ self@4@00 item@5@00))
  :qid |quant-u-2208|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref) (item@5@00 $Ref)) (!
  (list___contains__%stateless self@4@00 item@5@00)
  :pattern ((list___contains__%limited s@$ self@4@00 item@5@00))
  :qid |quant-u-2209|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref) (item@5@00 $Ref)) (!
  (let ((result@6@00 (list___contains__%limited s@$ self@4@00 item@5@00))) (and
    ($Perm.isReadVar $k@65@00)
    (=>
      (list___contains__%precondition s@$ self@4@00 item@5@00)
      (=
        result@6@00
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
          item@5@00)))))
  :pattern ((list___contains__%limited s@$ self@4@00 item@5@00))
  :qid |quant-u-2258|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref) (item@5@00 $Ref)) (!
  (let ((result@6@00 (list___contains__%limited s@$ self@4@00 item@5@00))) true)
  :pattern ((list___contains__%limited s@$ self@4@00 item@5@00))
  :qid |quant-u-2259|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@7@00)
    (__prim__bool___box__ s@$ prim@7@00))
  :pattern ((__prim__bool___box__ s@$ prim@7@00))
  :qid |quant-u-2210|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (__prim__bool___box__%stateless prim@7@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@7@00))
  :qid |quant-u-2211|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (let ((result@8@00 (__prim__bool___box__%limited s@$ prim@7@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@7@00)
    (and
      (= (typeof<PyType> result@8@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@8@00) prim@7@00)
      (= (int___unbox__%limited $Snap.unit result@8@00) (ite prim@7@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@7@00))
  :qid |quant-u-2260|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (let ((result@8@00 (__prim__bool___box__%limited s@$ prim@7@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@7@00))
  :qid |quant-u-2261|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (let ((result@8@00 (__prim__bool___box__%limited s@$ prim@7@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@7@00)
    (bool___unbox__%precondition $Snap.unit result@8@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@7@00))
  :qid |quant-u-2262|)))
(assert (forall ((s@$ $Snap) (prim@7@00 Bool)) (!
  (let ((result@8@00 (__prim__bool___box__%limited s@$ prim@7@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@7@00)
    (int___unbox__%precondition $Snap.unit result@8@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@7@00))
  :qid |quant-u-2263|)))
(assert (forall ((s@$ $Snap) (box@9@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@9@00) (bool___unbox__ s@$ box@9@00))
  :pattern ((bool___unbox__ s@$ box@9@00))
  :qid |quant-u-2212|)))
(assert (forall ((s@$ $Snap) (box@9@00 $Ref)) (!
  (bool___unbox__%stateless box@9@00)
  :pattern ((bool___unbox__%limited s@$ box@9@00))
  :qid |quant-u-2213|)))
(assert (forall ((s@$ $Snap) (box@9@00 $Ref)) (!
  (let ((result@10@00 (bool___unbox__%limited s@$ box@9@00))) (=>
    (bool___unbox__%precondition s@$ box@9@00)
    (= (__prim__bool___box__%limited $Snap.unit result@10@00) box@9@00)))
  :pattern ((bool___unbox__%limited s@$ box@9@00))
  :qid |quant-u-2264|)))
(assert (forall ((s@$ $Snap) (box@9@00 $Ref)) (!
  (let ((result@10@00 (bool___unbox__%limited s@$ box@9@00))) (=>
    (bool___unbox__%precondition s@$ box@9@00)
    (__prim__bool___box__%precondition $Snap.unit result@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@9@00))
  :qid |quant-u-2265|)))
(assert (forall ((s@$ $Snap) (box@11@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@11@00) (int___unbox__ s@$ box@11@00))
  :pattern ((int___unbox__ s@$ box@11@00))
  :qid |quant-u-2214|)))
(assert (forall ((s@$ $Snap) (box@11@00 $Ref)) (!
  (int___unbox__%stateless box@11@00)
  :pattern ((int___unbox__%limited s@$ box@11@00))
  :qid |quant-u-2215|)))
(assert (forall ((s@$ $Snap) (box@11@00 $Ref)) (!
  (let ((result@12@00 (int___unbox__%limited s@$ box@11@00))) (=>
    (int___unbox__%precondition s@$ box@11@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@11@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@12@00) box@11@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@11@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@12@00 0)))
          box@11@00)))))
  :pattern ((int___unbox__%limited s@$ box@11@00))
  :qid |quant-u-2266|)))
(assert (forall ((s@$ $Snap) (box@11@00 $Ref)) (!
  (let ((result@12@00 (int___unbox__%limited s@$ box@11@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@11@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@11@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@12@00)))
  :pattern ((int___unbox__%limited s@$ box@11@00))
  :qid |quant-u-2267|)))
(assert (forall ((s@$ $Snap) (box@11@00 $Ref)) (!
  (let ((result@12@00 (int___unbox__%limited s@$ box@11@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@11@00)
      (issubtype<Bool> (typeof<PyType> box@11@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@12@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@11@00))
  :qid |quant-u-2268|)))
(assert (forall ((s@$ $Snap) (prim@13@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@13@00)
    (__prim__int___box__ s@$ prim@13@00))
  :pattern ((__prim__int___box__ s@$ prim@13@00))
  :qid |quant-u-2216|)))
(assert (forall ((s@$ $Snap) (prim@13@00 Int)) (!
  (__prim__int___box__%stateless prim@13@00)
  :pattern ((__prim__int___box__%limited s@$ prim@13@00))
  :qid |quant-u-2217|)))
(assert (forall ((s@$ $Snap) (prim@13@00 Int)) (!
  (let ((result@14@00 (__prim__int___box__%limited s@$ prim@13@00))) (=>
    (__prim__int___box__%precondition s@$ prim@13@00)
    (and
      (= (typeof<PyType> result@14@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@14@00) prim@13@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@13@00))
  :qid |quant-u-2269|)))
(assert (forall ((s@$ $Snap) (prim@13@00 Int)) (!
  (let ((result@14@00 (__prim__int___box__%limited s@$ prim@13@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@13@00))
  :qid |quant-u-2270|)))
(assert (forall ((s@$ $Snap) (prim@13@00 Int)) (!
  (let ((result@14@00 (__prim__int___box__%limited s@$ prim@13@00))) (=>
    (__prim__int___box__%precondition s@$ prim@13@00)
    (int___unbox__%precondition $Snap.unit result@14@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@13@00))
  :qid |quant-u-2271|)))
(assert (forall ((s@$ $Snap) (self@15@00 $Ref)) (!
  (= (list___len__%limited s@$ self@15@00) (list___len__ s@$ self@15@00))
  :pattern ((list___len__ s@$ self@15@00))
  :qid |quant-u-2218|)))
(assert (forall ((s@$ $Snap) (self@15@00 $Ref)) (!
  (list___len__%stateless self@15@00)
  :pattern ((list___len__%limited s@$ self@15@00))
  :qid |quant-u-2219|)))
(assert (forall ((s@$ $Snap) (self@15@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@71@00)
    (=>
      (list___len__%precondition s@$ self@15@00)
      (=
        (list___len__ s@$ self@15@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len__ s@$ self@15@00))
  :qid |quant-u-2272|)))
(assert (forall ((s@$ $Snap) (self@15@00 $Ref)) (!
  true
  :pattern ((list___len__ s@$ self@15@00))
  :qid |quant-u-2273|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref)) (!
  (= (list___len___0%limited s@$ self@17@00) (list___len___0 s@$ self@17@00))
  :pattern ((list___len___0 s@$ self@17@00))
  :qid |quant-u-2220|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref)) (!
  (list___len___0%stateless self@17@00)
  :pattern ((list___len___0%limited s@$ self@17@00))
  :qid |quant-u-2221|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@72@00)
    (=>
      (list___len___0%precondition s@$ self@17@00)
      (=
        (list___len___0 s@$ self@17@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len___0 s@$ self@17@00))
  :qid |quant-u-2274|)))
(assert (forall ((s@$ $Snap) (self@17@00 $Ref)) (!
  true
  :pattern ((list___len___0 s@$ self@17@00))
  :qid |quant-u-2275|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (item@20@00 $Ref)) (!
  (=
    (list___contains___0%limited s@$ self@19@00 item@20@00)
    (list___contains___0 s@$ self@19@00 item@20@00))
  :pattern ((list___contains___0 s@$ self@19@00 item@20@00))
  :qid |quant-u-2222|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (item@20@00 $Ref)) (!
  (list___contains___0%stateless self@19@00 item@20@00)
  :pattern ((list___contains___0%limited s@$ self@19@00 item@20@00))
  :qid |quant-u-2223|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (item@20@00 $Ref)) (!
  (let ((result@21@00 (list___contains___0%limited s@$ self@19@00 item@20@00))) (and
    ($Perm.isReadVar $k@73@00)
    (=>
      (list___contains___0%precondition s@$ self@19@00 item@20@00)
      (=
        result@21@00
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
          item@20@00)))))
  :pattern ((list___contains___0%limited s@$ self@19@00 item@20@00))
  :qid |quant-u-2276|)))
(assert (forall ((s@$ $Snap) (self@19@00 $Ref) (item@20@00 $Ref)) (!
  (let ((result@21@00 (list___contains___0%limited s@$ self@19@00 item@20@00))) true)
  :pattern ((list___contains___0%limited s@$ self@19@00 item@20@00))
  :qid |quant-u-2277|)))
(assert (forall ((s@$ $Snap) (id@22@00 Int)) (!
  (= (_isDefined%limited s@$ id@22@00) (_isDefined s@$ id@22@00))
  :pattern ((_isDefined s@$ id@22@00))
  :qid |quant-u-2224|)))
(assert (forall ((s@$ $Snap) (id@22@00 Int)) (!
  (_isDefined%stateless id@22@00)
  :pattern ((_isDefined%limited s@$ id@22@00))
  :qid |quant-u-2225|)))
(assert (forall ((s@$ $Snap) (r@24@00 $Ref)) (!
  (= (Level%limited s@$ r@24@00) (Level s@$ r@24@00))
  :pattern ((Level s@$ r@24@00))
  :qid |quant-u-2226|)))
(assert (forall ((s@$ $Snap) (r@24@00 $Ref)) (!
  (Level%stateless r@24@00)
  :pattern ((Level%limited s@$ r@24@00))
  :qid |quant-u-2227|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (=
    (str___create__%limited s@$ len@26@00 value@27@00)
    (str___create__ s@$ len@26@00 value@27@00))
  :pattern ((str___create__ s@$ len@26@00 value@27@00))
  :qid |quant-u-2228|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (str___create__%stateless len@26@00 value@27@00)
  :pattern ((str___create__%limited s@$ len@26@00 value@27@00))
  :qid |quant-u-2229|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (let ((result@28@00 (str___create__%limited s@$ len@26@00 value@27@00))) (=>
    (str___create__%precondition s@$ len@26@00 value@27@00)
    (and
      (= (str___len__ $Snap.unit result@28@00) len@26@00)
      (= (str___val__ $Snap.unit result@28@00) value@27@00)
      (= (typeof<PyType> result@28@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@26@00 value@27@00))
  :qid |quant-u-2278|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (let ((result@28@00 (str___create__%limited s@$ len@26@00 value@27@00))) (=>
    (str___create__%precondition s@$ len@26@00 value@27@00)
    (str___len__%precondition $Snap.unit result@28@00)))
  :pattern ((str___create__%limited s@$ len@26@00 value@27@00))
  :qid |quant-u-2279|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (let ((result@28@00 (str___create__%limited s@$ len@26@00 value@27@00))) (=>
    (str___create__%precondition s@$ len@26@00 value@27@00)
    (str___val__%precondition $Snap.unit result@28@00)))
  :pattern ((str___create__%limited s@$ len@26@00 value@27@00))
  :qid |quant-u-2280|)))
(assert (forall ((s@$ $Snap) (len@26@00 Int) (value@27@00 Int)) (!
  (let ((result@28@00 (str___create__%limited s@$ len@26@00 value@27@00))) true)
  :pattern ((str___create__%limited s@$ len@26@00 value@27@00))
  :qid |quant-u-2281|)))
(assert (forall ((s@$ $Snap) (a@29@00 $Ref) (b@30@00 $Ref)) (!
  (= (min%limited s@$ a@29@00 b@30@00) (min_ s@$ a@29@00 b@30@00))
  :pattern ((min_ s@$ a@29@00 b@30@00))
  :qid |quant-u-2230|)))
(assert (forall ((s@$ $Snap) (a@29@00 $Ref) (b@30@00 $Ref)) (!
  (min%stateless a@29@00 b@30@00)
  :pattern ((min%limited s@$ a@29@00 b@30@00))
  :qid |quant-u-2231|)))
(assert (forall ((s@$ $Snap) (a@29@00 $Ref) (b@30@00 $Ref)) (!
  (let ((result@31@00 (min%limited s@$ a@29@00 b@30@00))) (and
    ($Perm.isReadVar $k@76@00)
    ($Perm.isReadVar $k@78@00)
    (=>
      (min%precondition s@$ a@29@00 b@30@00)
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> a@29@00) (as int<PyType>  PyType))
          (=
            result@31@00
            (ite
              (>
                (int___unbox__ $Snap.unit a@29@00)
                (int___unbox__ $Snap.unit b@30@00))
              (int___unbox__ $Snap.unit b@30@00)
              (int___unbox__ $Snap.unit a@29@00))))
        (=>
          (issubtype<Bool> (typeof<PyType> a@29@00) (list<PyType> (as int<PyType>  PyType)))
          (list___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second s@$))) a@29@00 (__prim__int___box__ $Snap.unit result@31@00)))))))
  :pattern ((min%limited s@$ a@29@00 b@30@00))
  :qid |quant-u-2282|)))
(assert (forall ((s@$ $Snap) (a@29@00 $Ref) (b@30@00 $Ref)) (!
  (let ((result@31@00 (min%limited s@$ a@29@00 b@30@00))) (=>
    (and
      (min%precondition s@$ a@29@00 b@30@00)
      (issubtype<Bool> (typeof<PyType> a@29@00) (as int<PyType>  PyType)))
    (and
      (and
        (int___unbox__%precondition $Snap.unit a@29@00)
        (int___unbox__%precondition $Snap.unit b@30@00))
      (ite
        (> (int___unbox__ $Snap.unit a@29@00) (int___unbox__ $Snap.unit b@30@00))
        (int___unbox__%precondition $Snap.unit b@30@00)
        (int___unbox__%precondition $Snap.unit a@29@00)))))
  :pattern ((min%limited s@$ a@29@00 b@30@00))
  :qid |quant-u-2283|)))
(assert (forall ((s@$ $Snap) (a@29@00 $Ref) (b@30@00 $Ref)) (!
  (let ((result@31@00 (min%limited s@$ a@29@00 b@30@00))) (=>
    (and
      (min%precondition s@$ a@29@00 b@30@00)
      (issubtype<Bool> (typeof<PyType> a@29@00) (list<PyType> (as int<PyType>  PyType))))
    (and
      (__prim__int___box__%precondition $Snap.unit result@31@00)
      (list___contains__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second s@$))) a@29@00 (__prim__int___box__ $Snap.unit result@31@00)))))
  :pattern ((min%limited s@$ a@29@00 b@30@00))
  :qid |quant-u-2284|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (key@33@00 $Ref)) (!
  (=
    (list___getitem___0%limited s@$ self@32@00 key@33@00)
    (list___getitem___0 s@$ self@32@00 key@33@00))
  :pattern ((list___getitem___0 s@$ self@32@00 key@33@00))
  :qid |quant-u-2232|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (key@33@00 $Ref)) (!
  (list___getitem___0%stateless self@32@00 key@33@00)
  :pattern ((list___getitem___0%limited s@$ self@32@00 key@33@00))
  :qid |quant-u-2233|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (key@33@00 $Ref)) (!
  (let ((result@34@00 (list___getitem___0%limited s@$ self@32@00 key@33@00))) (and
    ($Perm.isReadVar $k@80@00)
    ($Perm.isReadVar $k@81@00)
    ($Perm.isReadVar $k@84@00)
    (=>
      (list___getitem___0%precondition s@$ self@32@00 key@33@00)
      (and
        (=
          result@34@00
          (ite
            (>= (int___unbox__ $Snap.unit key@33@00) 0)
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (int___unbox__ $Snap.unit key@33@00))
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (+
                (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second s@$)))) self@32@00)
                (int___unbox__ $Snap.unit key@33@00)))))
        (issubtype<Bool> (typeof<PyType> result@34@00) (list_arg<PyType> (typeof<PyType> self@32@00) 0))))))
  :pattern ((list___getitem___0%limited s@$ self@32@00 key@33@00))
  :qid |quant-u-2285|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (key@33@00 $Ref)) (!
  (let ((result@34@00 (list___getitem___0%limited s@$ self@32@00 key@33@00))) (=>
    (list___getitem___0%precondition s@$ self@32@00 key@33@00)
    (and
      (int___unbox__%precondition $Snap.unit key@33@00)
      (ite
        (>= (int___unbox__ $Snap.unit key@33@00) 0)
        (int___unbox__%precondition $Snap.unit key@33@00)
        (and
          (list___len___0%precondition ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second s@$)))) self@32@00)
          (int___unbox__%precondition $Snap.unit key@33@00))))))
  :pattern ((list___getitem___0%limited s@$ self@32@00 key@33@00))
  :qid |quant-u-2286|)))
(assert (forall ((s@$ $Snap) (self@32@00 $Ref) (key@33@00 $Ref)) (!
  (let ((result@34@00 (list___getitem___0%limited s@$ self@32@00 key@33@00))) true)
  :pattern ((list___getitem___0%limited s@$ self@32@00 key@33@00))
  :qid |quant-u-2287|)))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (key@36@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@35@00 key@36@00)
    (list___getitem__ s@$ self@35@00 key@36@00))
  :pattern ((list___getitem__ s@$ self@35@00 key@36@00))
  :qid |quant-u-2234|)))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (key@36@00 $Ref)) (!
  (list___getitem__%stateless self@35@00 key@36@00)
  :pattern ((list___getitem__%limited s@$ self@35@00 key@36@00))
  :qid |quant-u-2235|)))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (key@36@00 $Ref)) (!
  (let ((result@37@00 (list___getitem__%limited s@$ self@35@00 key@36@00))) (and
    ($Perm.isReadVar $k@85@00)
    ($Perm.isReadVar $k@86@00)
    ($Perm.isReadVar $k@89@00)
    (=>
      (list___getitem__%precondition s@$ self@35@00 key@36@00)
      (and
        (=
          result@37@00
          (ite
            (>= (int___unbox__ $Snap.unit key@36@00) 0)
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (int___unbox__ $Snap.unit key@36@00))
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (+
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second s@$)))) self@35@00)
                (int___unbox__ $Snap.unit key@36@00)))))
        (issubtype<Bool> (typeof<PyType> result@37@00) (list_arg<PyType> (typeof<PyType> self@35@00) 0))))))
  :pattern ((list___getitem__%limited s@$ self@35@00 key@36@00))
  :qid |quant-u-2288|)))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (key@36@00 $Ref)) (!
  (let ((result@37@00 (list___getitem__%limited s@$ self@35@00 key@36@00))) (=>
    (list___getitem__%precondition s@$ self@35@00 key@36@00)
    (and
      (int___unbox__%precondition $Snap.unit key@36@00)
      (ite
        (>= (int___unbox__ $Snap.unit key@36@00) 0)
        (int___unbox__%precondition $Snap.unit key@36@00)
        (and
          (list___len__%precondition ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second s@$)))) self@35@00)
          (int___unbox__%precondition $Snap.unit key@36@00))))))
  :pattern ((list___getitem__%limited s@$ self@35@00 key@36@00))
  :qid |quant-u-2289|)))
(assert (forall ((s@$ $Snap) (self@35@00 $Ref) (key@36@00 $Ref)) (!
  (let ((result@37@00 (list___getitem__%limited s@$ self@35@00 key@36@00))) true)
  :pattern ((list___getitem__%limited s@$ self@35@00 key@36@00))
  :qid |quant-u-2290|)))
(assert (forall ((s@$ $Snap) (a@38@00 $Ref) (b@39@00 $Ref)) (!
  (= (min_0%limited s@$ a@38@00 b@39@00) (min_0 s@$ a@38@00 b@39@00))
  :pattern ((min_0 s@$ a@38@00 b@39@00))
  :qid |quant-u-2236|)))
(assert (forall ((s@$ $Snap) (a@38@00 $Ref) (b@39@00 $Ref)) (!
  (min_0%stateless a@38@00 b@39@00)
  :pattern ((min_0%limited s@$ a@38@00 b@39@00))
  :qid |quant-u-2237|)))
(assert (forall ((s@$ $Snap) (a@38@00 $Ref) (b@39@00 $Ref)) (!
  (let ((result@40@00 (min_0%limited s@$ a@38@00 b@39@00))) (and
    ($Perm.isReadVar $k@90@00)
    ($Perm.isReadVar $k@92@00)
    (=>
      (min_0%precondition s@$ a@38@00 b@39@00)
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> a@38@00) (as int<PyType>  PyType))
          (=
            result@40@00
            (ite
              (>
                (int___unbox__ $Snap.unit a@38@00)
                (int___unbox__ $Snap.unit b@39@00))
              (int___unbox__ $Snap.unit b@39@00)
              (int___unbox__ $Snap.unit a@38@00))))
        (=>
          (issubtype<Bool> (typeof<PyType> a@38@00) (list<PyType> (as int<PyType>  PyType)))
          (list___contains___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second s@$))) a@38@00 (__prim__int___box__ $Snap.unit result@40@00)))))))
  :pattern ((min_0%limited s@$ a@38@00 b@39@00))
  :qid |quant-u-2291|)))
(assert (forall ((s@$ $Snap) (a@38@00 $Ref) (b@39@00 $Ref)) (!
  (let ((result@40@00 (min_0%limited s@$ a@38@00 b@39@00))) (=>
    (and
      (min_0%precondition s@$ a@38@00 b@39@00)
      (issubtype<Bool> (typeof<PyType> a@38@00) (as int<PyType>  PyType)))
    (and
      (and
        (int___unbox__%precondition $Snap.unit a@38@00)
        (int___unbox__%precondition $Snap.unit b@39@00))
      (ite
        (> (int___unbox__ $Snap.unit a@38@00) (int___unbox__ $Snap.unit b@39@00))
        (int___unbox__%precondition $Snap.unit b@39@00)
        (int___unbox__%precondition $Snap.unit a@38@00)))))
  :pattern ((min_0%limited s@$ a@38@00 b@39@00))
  :qid |quant-u-2292|)))
(assert (forall ((s@$ $Snap) (a@38@00 $Ref) (b@39@00 $Ref)) (!
  (let ((result@40@00 (min_0%limited s@$ a@38@00 b@39@00))) (=>
    (and
      (min_0%precondition s@$ a@38@00 b@39@00)
      (issubtype<Bool> (typeof<PyType> a@38@00) (list<PyType> (as int<PyType>  PyType))))
    (and
      (__prim__int___box__%precondition $Snap.unit result@40@00)
      (list___contains___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second s@$))) a@38@00 (__prim__int___box__ $Snap.unit result@40@00)))))
  :pattern ((min_0%limited s@$ a@38@00 b@39@00))
  :qid |quant-u-2293|)))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@41@00 other@42@00)
    (int___lt__ s@$ self@41@00 other@42@00))
  :pattern ((int___lt__ s@$ self@41@00 other@42@00))
  :qid |quant-u-2238|)))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (int___lt__%stateless self@41@00 other@42@00)
  :pattern ((int___lt__%limited s@$ self@41@00 other@42@00))
  :qid |quant-u-2239|)))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@41@00 other@42@00)
    (= (int___lt__ s@$ self@41@00 other@42@00) (< self@41@00 other@42@00)))
  :pattern ((int___lt__ s@$ self@41@00 other@42@00))
  :qid |quant-u-2294|)))
(assert (forall ((s@$ $Snap) (self@41@00 Int) (other@42@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@41@00 other@42@00))
  :qid |quant-u-2295|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2240|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2241|)))
(assert (forall ((s@$ $Snap) (val@45@00 $Ref) (id@46@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@45@00 id@46@00)
    (_checkDefined s@$ val@45@00 id@46@00))
  :pattern ((_checkDefined s@$ val@45@00 id@46@00))
  :qid |quant-u-2242|)))
(assert (forall ((s@$ $Snap) (val@45@00 $Ref) (id@46@00 Int)) (!
  (_checkDefined%stateless val@45@00 id@46@00)
  :pattern ((_checkDefined%limited s@$ val@45@00 id@46@00))
  :qid |quant-u-2243|)))
(assert (forall ((s@$ $Snap) (val@45@00 $Ref) (id@46@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@45@00 id@46@00)
    (= (_checkDefined s@$ val@45@00 id@46@00) val@45@00))
  :pattern ((_checkDefined s@$ val@45@00 id@46@00))
  :qid |quant-u-2296|)))
(assert (forall ((s@$ $Snap) (val@45@00 $Ref) (id@46@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@45@00 id@46@00))
  :qid |quant-u-2297|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=
    (int___le__%limited s@$ self@48@00 other@49@00)
    (int___le__ s@$ self@48@00 other@49@00))
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2244|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (int___le__%stateless self@48@00 other@49@00)
  :pattern ((int___le__%limited s@$ self@48@00 other@49@00))
  :qid |quant-u-2245|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  (=>
    (int___le__%precondition s@$ self@48@00 other@49@00)
    (= (int___le__ s@$ self@48@00 other@49@00) (<= self@48@00 other@49@00)))
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2298|)))
(assert (forall ((s@$ $Snap) (self@48@00 Int) (other@49@00 Int)) (!
  true
  :pattern ((int___le__ s@$ self@48@00 other@49@00))
  :qid |quant-u-2299|)))
(assert (forall ((s@$ $Snap) (self@51@00 $Ref) (other@52@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@51@00 other@52@00)
    (str___eq__ s@$ self@51@00 other@52@00))
  :pattern ((str___eq__ s@$ self@51@00 other@52@00))
  :qid |quant-u-2246|)))
(assert (forall ((s@$ $Snap) (self@51@00 $Ref) (other@52@00 $Ref)) (!
  (str___eq__%stateless self@51@00 other@52@00)
  :pattern ((str___eq__%limited s@$ self@51@00 other@52@00))
  :qid |quant-u-2247|)))
(assert (forall ((s@$ $Snap) (self@51@00 $Ref) (other@52@00 $Ref)) (!
  (let ((result@53@00 (str___eq__%limited s@$ self@51@00 other@52@00))) (=>
    (str___eq__%precondition s@$ self@51@00 other@52@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@51@00)
          (str___val__ $Snap.unit other@52@00))
        result@53@00)
      (=>
        result@53@00
        (=
          (str___len__ $Snap.unit self@51@00)
          (str___len__ $Snap.unit other@52@00))))))
  :pattern ((str___eq__%limited s@$ self@51@00 other@52@00))
  :qid |quant-u-2300|)))
(assert (forall ((s@$ $Snap) (self@51@00 $Ref) (other@52@00 $Ref)) (!
  (let ((result@53@00 (str___eq__%limited s@$ self@51@00 other@52@00))) (=>
    (str___eq__%precondition s@$ self@51@00 other@52@00)
    (and
      (str___val__%precondition $Snap.unit self@51@00)
      (str___val__%precondition $Snap.unit other@52@00))))
  :pattern ((str___eq__%limited s@$ self@51@00 other@52@00))
  :qid |quant-u-2301|)))
(assert (forall ((s@$ $Snap) (self@51@00 $Ref) (other@52@00 $Ref)) (!
  (let ((result@53@00 (str___eq__%limited s@$ self@51@00 other@52@00))) (=>
    (and (str___eq__%precondition s@$ self@51@00 other@52@00) result@53@00)
    (and
      (str___len__%precondition $Snap.unit self@51@00)
      (str___len__%precondition $Snap.unit other@52@00))))
  :pattern ((str___eq__%limited s@$ self@51@00 other@52@00))
  :qid |quant-u-2302|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (=
    (int___ge__%limited s@$ self@54@00 other@55@00)
    (int___ge__ s@$ self@54@00 other@55@00))
  :pattern ((int___ge__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2248|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (int___ge__%stateless self@54@00 other@55@00)
  :pattern ((int___ge__%limited s@$ self@54@00 other@55@00))
  :qid |quant-u-2249|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  (=>
    (int___ge__%precondition s@$ self@54@00 other@55@00)
    (= (int___ge__ s@$ self@54@00 other@55@00) (>= self@54@00 other@55@00)))
  :pattern ((int___ge__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2303|)))
(assert (forall ((s@$ $Snap) (self@54@00 Int) (other@55@00 Int)) (!
  true
  :pattern ((int___ge__ s@$ self@54@00 other@55@00))
  :qid |quant-u-2304|)))
(assert (forall ((s@$ $Snap) (self@57@00 Int) (other@58@00 Int)) (!
  (=
    (int___add__%limited s@$ self@57@00 other@58@00)
    (int___add__ s@$ self@57@00 other@58@00))
  :pattern ((int___add__ s@$ self@57@00 other@58@00))
  :qid |quant-u-2250|)))
(assert (forall ((s@$ $Snap) (self@57@00 Int) (other@58@00 Int)) (!
  (int___add__%stateless self@57@00 other@58@00)
  :pattern ((int___add__%limited s@$ self@57@00 other@58@00))
  :qid |quant-u-2251|)))
(assert (forall ((s@$ $Snap) (self@57@00 Int) (other@58@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@57@00 other@58@00)
    (= (int___add__ s@$ self@57@00 other@58@00) (+ self@57@00 other@58@00)))
  :pattern ((int___add__ s@$ self@57@00 other@58@00))
  :qid |quant-u-2305|)))
(assert (forall ((s@$ $Snap) (self@57@00 Int) (other@58@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@57@00 other@58@00))
  :qid |quant-u-2306|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@60@00 other@61@00)
    (int___eq__ s@$ self@60@00 other@61@00))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2252|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (int___eq__%stateless self@60@00 other@61@00)
  :pattern ((int___eq__%limited s@$ self@60@00 other@61@00))
  :qid |quant-u-2253|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@60@00 other@61@00)
    (=
      (int___eq__ s@$ self@60@00 other@61@00)
      (=
        (int___unbox__ $Snap.unit self@60@00)
        (int___unbox__ $Snap.unit other@61@00))))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2307|)))
(assert (forall ((s@$ $Snap) (self@60@00 $Ref) (other@61@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@60@00 other@61@00)
    (and
      (int___unbox__%precondition $Snap.unit self@60@00)
      (int___unbox__%precondition $Snap.unit other@61@00)))
  :pattern ((int___eq__ s@$ self@60@00 other@61@00))
  :qid |quant-u-2308|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2254|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2255|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- check ----------
(declare-const p1@0@01 Bool)
(declare-const p2@1@01 Bool)
(declare-const _cthread_156@2@01 $Ref)
(declare-const _cthread_156_0@3@01 $Ref)
(declare-const _caller_measures_156@4@01 Seq<Measure$>)
(declare-const _caller_measures_156_0@5@01 Seq<Measure$>)
(declare-const _residue_156@6@01 $Perm)
(declare-const _residue_156_0@7@01 $Perm)
(declare-const password@8@01 $Ref)
(declare-const password_3@9@01 $Ref)
(declare-const inpt@10@01 $Ref)
(declare-const inpt_3@11@01 $Ref)
(declare-const _current_wait_level_156@12@01 $Perm)
(declare-const _current_wait_level_156_0@13@01 $Perm)
(declare-const _res@14@01 $Ref)
(declare-const _res_0@15@01 $Ref)
(declare-const p1@16@01 Bool)
(declare-const p2@17@01 Bool)
(declare-const _cthread_156@18@01 $Ref)
(declare-const _cthread_156_0@19@01 $Ref)
(declare-const _caller_measures_156@20@01 Seq<Measure$>)
(declare-const _caller_measures_156_0@21@01 Seq<Measure$>)
(declare-const _residue_156@22@01 $Perm)
(declare-const _residue_156_0@23@01 $Perm)
(declare-const password@24@01 $Ref)
(declare-const password_3@25@01 $Ref)
(declare-const inpt@26@01 $Ref)
(declare-const inpt_3@27@01 $Ref)
(declare-const _current_wait_level_156@28@01 $Perm)
(declare-const _current_wait_level_156_0@29@01 $Perm)
(declare-const _res@30@01 $Ref)
(declare-const _res_0@31@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(assert (= ($Snap.first $t@32@01) $Snap.unit))
; [eval] p1 ==> _cthread_156 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | p1@16@01 | live]
; [else-branch: 0 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | p1@16@01]
(assert p1@16@01)
; [eval] _cthread_156 != null
(pop) ; 3
(push) ; 3
; [else-branch: 0 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1@16@01) p1@16@01))
(assert (=> p1@16@01 (not (= _cthread_156@18@01 $Ref.null))))
(assert (=
  ($Snap.second $t@32@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@01))
    ($Snap.second ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@32@01)) $Snap.unit))
; [eval] p2 ==> _cthread_156_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | p2@17@01 | live]
; [else-branch: 1 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1 | p2@17@01]
(assert p2@17@01)
; [eval] _cthread_156_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2@17@01) p2@17@01))
(assert (=> p2@17@01 (not (= _cthread_156_0@19@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@32@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@32@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_cthread_156), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | p1@16@01 | live]
; [else-branch: 2 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 2 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> _cthread_156@18@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@32@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_cthread_156_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | p2@17@01 | live]
; [else-branch: 3 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 3 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(_cthread_156_0), Thread_0())
; [eval] typeof(_cthread_156_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 3 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> _cthread_156_0@19@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(password), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | p1@16@01 | live]
; [else-branch: 4 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(password), list(str()))
; [eval] typeof(password)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 4 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> password@24@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(password_3), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | p2@17@01 | live]
; [else-branch: 5 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 5 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(password_3), list(str()))
; [eval] typeof(password_3)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 5 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> password_3@25@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
  $Snap.unit))
; [eval] p1 ==> issubtype(typeof(inpt), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | p1@16@01 | live]
; [else-branch: 6 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 6 | p1@16@01]
(assert p1@16@01)
; [eval] issubtype(typeof(inpt), list(str()))
; [eval] typeof(inpt)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 6 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> inpt@26@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(inpt_3), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | p2@17@01 | live]
; [else-branch: 7 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | p2@17@01]
(assert p2@17@01)
; [eval] issubtype(typeof(inpt_3), list(str()))
; [eval] typeof(inpt_3)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 7 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> inpt_3@27@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | p1@16@01 | live]
; [else-branch: 8 | !(p1@16@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 8 | p1@16@01]
(assert p1@16@01)
(assert (not (= password@24@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | p2@17@01 | live]
; [else-branch: 9 | !(p2@17@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 9 | p2@17@01]
(assert p2@17@01)
(assert (not (= password_3@25@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | p1@16@01 | live]
; [else-branch: 10 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | p1@16@01]
(push) ; 5
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt@26@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | p2@17@01 | live]
; [else-branch: 11 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | p2@17@01]
(push) ; 6
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt_3@27@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  $Snap.unit))
; [eval] p1 && p2 ==> inpt == inpt_3
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 6
; [then-branch: 12 | !(p1@16@01) | live]
; [else-branch: 12 | p1@16@01 | live]
(push) ; 7
; [then-branch: 12 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 7
(push) ; 7
; [else-branch: 12 | p1@16@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p1@16@01 (not p1@16@01)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | p1@16@01 && p2@17@01 | live]
; [else-branch: 13 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 13 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [eval] inpt == inpt_3
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and p1@16@01 p2@17@01))
(assert (=> (and p1@16@01 p2@17@01) (= inpt@26@01 inpt_3@27@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | p1@16@01 | live]
; [else-branch: 14 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 14 | p1@16@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | p2@17@01 | live]
; [else-branch: 15 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 15 | p2@17@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 ($Snap.combine ($Snap.first $t@33@01) ($Snap.second $t@33@01))))
(assert (= ($Snap.first $t@33@01) $Snap.unit))
; [eval] p1 ==> (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | p1@16@01 | live]
; [else-branch: 16 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 16 | p1@16@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156) && ((forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156) && _residue_156 <= _current_wait_level_156)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(push) ; 9
; [then-branch: 17 | False | live]
; [else-branch: 17 | True | live]
(push) ; 10
; [then-branch: 17 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 17 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(push) ; 11
; [then-branch: 18 | False | live]
; [else-branch: 18 | True | live]
(push) ; 12
; [then-branch: 18 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 18 | True]
; [eval] _residue_156 <= _current_wait_level_156
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p1@16@01 (<= _residue_156@22@01 _current_wait_level_156@28@01)))
(assert (=
  ($Snap.second $t@33@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@01))
    ($Snap.second ($Snap.second $t@33@01)))))
(assert (= ($Snap.first ($Snap.second $t@33@01)) $Snap.unit))
; [eval] p2 ==> (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_156_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | p2@17@01 | live]
; [else-branch: 19 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 19 | p2@17@01]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_156_0) && ((forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_156_0) && _residue_156_0 <= _current_wait_level_156_0)
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBoundedp] :: Level(_r_1) <= _current_wait_level_156_0)
(push) ; 9
; [then-branch: 20 | False | live]
; [else-branch: 20 | True | live]
(push) ; 10
; [then-branch: 20 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 20 | True]
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnboundedp] :: Level(_r_1) <= _current_wait_level_156_0)
(push) ; 11
; [then-branch: 21 | False | live]
; [else-branch: 21 | True | live]
(push) ; 12
; [then-branch: 21 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 21 | True]
; [eval] _residue_156_0 <= _current_wait_level_156_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p2@17@01 (<= _residue_156_0@23@01 _current_wait_level_156_0@29@01)))
(assert (=
  ($Snap.second ($Snap.second $t@33@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@33@01))) $Snap.unit))
; [eval] p1 ==> issubtype(typeof(_res), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | p1@16@01 | live]
; [else-branch: 22 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 22 | p1@16@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> _res@30@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  $Snap.unit))
; [eval] p2 ==> issubtype(typeof(_res_0), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | p2@17@01 | live]
; [else-branch: 23 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 23 | p2@17@01]
; [eval] issubtype(typeof(_res_0), bool())
; [eval] typeof(_res_0)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> _res_0@31@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  $Snap.unit))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 7
; [then-branch: 24 | !(p1@16@01) | live]
; [else-branch: 24 | p1@16@01 | live]
(push) ; 8
; [then-branch: 24 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 8
(push) ; 8
; [else-branch: 24 | p1@16@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | p1@16@01 && p2@17@01 | live]
; [else-branch: 25 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 25 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [eval] _res == _res_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and p1@16@01 p2@17@01))
(assert (=> (and p1@16@01 p2@17@01) (= _res@30@01 _res_0@31@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] p1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | p1@16@01 | live]
; [else-branch: 26 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 26 | p1@16@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@01))))))
  $Snap.unit))
; [eval] p2 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | p2@17@01 | live]
; [else-branch: 27 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 27 | p2@17@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [exec]
; var ret1: Bool
(declare-const ret1@34@01 Bool)
; [exec]
; var ret2: Bool
(declare-const ret2@35@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@36@01 $Ref)
; [exec]
; var _err_0: Ref
(declare-const _err_0@37@01 $Ref)
; [exec]
; var result_0: Ref
(declare-const result_0@38@01 $Ref)
; [exec]
; var result_0_0: Ref
(declare-const result_0_0@39@01 $Ref)
; [exec]
; var i: Ref
(declare-const i@40@01 $Ref)
; [exec]
; var i_1: Ref
(declare-const i_1@41@01 $Ref)
; [exec]
; var password_1: Ref
(declare-const password_1@42@01 $Ref)
; [exec]
; var password_1_0: Ref
(declare-const password_1_0@43@01 $Ref)
; [exec]
; var inpt_1: Ref
(declare-const inpt_1@44@01 $Ref)
; [exec]
; var inpt_1_0: Ref
(declare-const inpt_1_0@45@01 $Ref)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@46@01 Seq<Measure$>)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@47@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@48@01 Bool)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@49@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@50@01 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@51@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@52@01 $Perm)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@53@01 $Perm)
; [exec]
; var _residue_158: Perm
(declare-const _residue_158@54@01 $Perm)
; [exec]
; var _residue_158_0: Perm
(declare-const _residue_158_0@55@01 $Perm)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@56@01 $Perm)
; [exec]
; var _cwl_156_0: Perm
(declare-const _cwl_156_0@57@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@58@01 Seq<Measure$>)
; [exec]
; var _method_measures_156_0: Seq[Measure$]
(declare-const _method_measures_156_0@59@01 Seq<Measure$>)
; [exec]
; var bypass1: Bool
(declare-const bypass1@60@01 Bool)
; [exec]
; var bypass2: Bool
(declare-const bypass2@61@01 Bool)
; [exec]
; var tmp1: Seq[Measure$]
(declare-const tmp1@62@01 Seq<Measure$>)
; [exec]
; var tmp2: Seq[Measure$]
(declare-const tmp2@63@01 Seq<Measure$>)
; [exec]
; var tmp1_0: Ref
(declare-const tmp1_0@64@01 $Ref)
; [exec]
; var tmp2_0: Ref
(declare-const tmp2_0@65@01 $Ref)
; [exec]
; var tmp1_1: Ref
(declare-const tmp1_1@66@01 $Ref)
; [exec]
; var tmp2_1: Ref
(declare-const tmp2_1@67@01 $Ref)
; [exec]
; var tmp1_2: Bool
(declare-const tmp1_2@68@01 Bool)
; [exec]
; var tmp2_2: Bool
(declare-const tmp2_2@69@01 Bool)
; [exec]
; var p1_0: Bool
(declare-const p1_0@70@01 Bool)
; [exec]
; var p2_0: Bool
(declare-const p2_0@71@01 Bool)
; [exec]
; var idle1: Bool
(declare-const idle1@72@01 Bool)
; [exec]
; var idle2: Bool
(declare-const idle2@73@01 Bool)
; [exec]
; inhale p1
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 $Snap.unit))
(assert p1@16@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1 := false
; [exec]
; ret2 := false
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 7
; [then-branch: 28 | !(p1@16@01) | live]
; [else-branch: 28 | p1@16@01 | live]
(push) ; 8
; [then-branch: 28 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 8
(push) ; 8
; [else-branch: 28 | p1@16@01]
; [eval] !ret1
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | p1@16@01 | live]
; [else-branch: 29 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 29 | p1@16@01]
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; password_1 := password
; [exec]
; inpt_1 := inpt
; [exec]
; result_0 := __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1))))
; [eval] __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___eq__(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> password@24@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password@24@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password@24@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password@24@01) 0))))
(declare-const $k@75@01 $Perm)
(assert ($Perm.isReadVar $k@75@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@75@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@75@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> password@24@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password@24@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> inpt@26@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt@26@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> inpt@26@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt@26@01) 0))))
(declare-const $k@76@01 $Perm)
(assert ($Perm.isReadVar $k@76@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@76@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@76@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> inpt@26@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt@26@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(declare-const result_0@77@01 $Ref)
(assert (=
  result_0@77@01
  (__prim__bool___box__ $Snap.unit (int___eq__ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))
; [exec]
; inhale _isDefined(3485632645783840114)
(declare-const $t@78@01 $Snap)
(assert (= $t@78@01 $Snap.unit))
; [eval] _isDefined(3485632645783840114)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3485632645783840114))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3485632645783840114))
(assert (_isDefined $Snap.unit 3485632645783840114))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i@79@01 $Ref)
(assert (= i@79@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(105)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 105))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 105))
(assert (_isDefined $Snap.unit 105))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_156))
; [eval] perm(MustTerminate(_cthread_156))
(declare-const _loop_original_must_terminate@81@01 $Perm)
(assert (= _loop_original_must_terminate@81@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
; [eval] p2 && !ret2
(set-option :timeout 0)
(push) ; 8
; [then-branch: 30 | !(p2@17@01) | live]
; [else-branch: 30 | p2@17@01 | live]
(push) ; 9
; [then-branch: 30 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 9
(push) ; 9
; [else-branch: 30 | p2@17@01]
(assert p2@17@01)
; [eval] !ret2
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2@17@01 (not p2@17@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | p2@17@01 | live]
; [else-branch: 31 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 31 | p2@17@01]
(assert p2@17@01)
; [exec]
; _method_measures_156_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_0 := null
; [exec]
; _err_0 := null
; [exec]
; password_1_0 := password_3
; [exec]
; inpt_1_0 := inpt_3
; [exec]
; result_0_0 := __prim__bool___box__(int___eq__(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] __prim__bool___box__(int___eq__(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___eq__(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> password_3@25@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_3@25@01) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_3@25@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_3@25@01) 0))))
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@82@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@82@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> password_3@25@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_3@25@01) 0)))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))
(set-option :timeout 0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> inpt_3@27@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_3@27@01) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> inpt_3@27@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_3@27@01) 0))))
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@83@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@83@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> inpt_3@27@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_3@27@01) 0)))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))
(set-option :timeout 0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(push) ; 9
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(pop) ; 9
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(declare-const result_0_0@84@01 $Ref)
(assert (=
  result_0_0@84@01
  (__prim__bool___box__ $Snap.unit (int___eq__ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))
; [exec]
; inhale true
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_1 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const i_1@86@01 $Ref)
(assert (= i_1@86@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale true
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_1 := perm(MustTerminate_0(_cthread_156_0))
; [eval] perm(MustTerminate_0(_cthread_156_0))
(declare-const _loop_original_must_terminate_1@88@01 $Perm)
(assert (= _loop_original_must_terminate_1@88@01 $Perm.No))
; [exec]
; _loop_termination_flag_1 := false
; [exec]
; _loop_check_before_1 := true
; [exec]
; bypass1 := !(p1 && !ret1)
; [eval] !(p1 && !ret1)
; [eval] p1 && !ret1
(set-option :timeout 0)
(push) ; 9
; [then-branch: 32 | !(p1@16@01) | live]
; [else-branch: 32 | p1@16@01 | live]
(push) ; 10
; [then-branch: 32 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 10
(push) ; 10
; [else-branch: 32 | p1@16@01]
; [eval] !ret1
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass1@89@01 Bool)
(assert (= bypass1@89@01 (not p1@16@01)))
; [exec]
; bypass2 := !(p2 && !ret2)
; [eval] !(p2 && !ret2)
; [eval] p2 && !ret2
(push) ; 9
; [then-branch: 33 | !(p2@17@01) | live]
; [else-branch: 33 | p2@17@01 | live]
(push) ; 10
; [then-branch: 33 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 10
(push) ; 10
; [else-branch: 33 | p2@17@01]
; [eval] !ret2
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass2@90@01 Bool)
(assert (= bypass2@90@01 (not p2@17@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1@89@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | bypass1@89@01 | dead]
; [else-branch: 34 | !(bypass1@89@01) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 34 | !(bypass1@89@01)]
(assert (not bypass1@89@01))
(pop) ; 9
; [eval] !bypass1
(push) ; 9
(set-option :timeout 10)
(assert (not bypass1@89@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1@89@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | !(bypass1@89@01) | live]
; [else-branch: 35 | bypass1@89@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 35 | !(bypass1@89@01)]
(assert (not bypass1@89@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not bypass2@90@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | bypass2@90@01 | dead]
; [else-branch: 36 | !(bypass2@90@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 36 | !(bypass2@90@01)]
(assert (not bypass2@90@01))
(pop) ; 10
; [eval] !bypass2
(push) ; 10
(set-option :timeout 10)
(assert (not bypass2@90@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not bypass2@90@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | !(bypass2@90@01) | live]
; [else-branch: 37 | bypass2@90@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 37 | !(bypass2@90@01)]
(assert (not bypass2@90@01))
; [exec]
; idle1 := false
; [exec]
; idle2 := false
(declare-const p1_0@91@01 Bool)
(declare-const p2_0@92@01 Bool)
(declare-const idle1@93@01 Bool)
(declare-const idle2@94@01 Bool)
(declare-const _loop_measures@95@01 Seq<Measure$>)
(declare-const result_0@96@01 $Ref)
(declare-const i@97@01 $Ref)
(declare-const _loop_check_before@98@01 Bool)
(declare-const _loop_measures_1@99@01 Seq<Measure$>)
(declare-const result_0_0@100@01 $Ref)
(declare-const i_1@101@01 $Ref)
(declare-const _loop_check_before_1@102@01 Bool)
(push) ; 11
; Loop head block: Check well-definedness of invariant
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 ($Snap.combine ($Snap.first $t@103@01) ($Snap.second $t@103@01))))
(assert (= ($Snap.first $t@103@01) $Snap.unit))
; [eval] p1 && !bypass1 ==> (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_158) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_158) && _residue_156 <= _residue_158)
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 38 | !(p1@16@01) | live]
; [else-branch: 38 | p1@16@01 | live]
(push) ; 13
; [then-branch: 38 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 38 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 39 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 39 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_158) && ((forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_158) && _residue_156 <= _residue_158)
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_158)
(push) ; 14
; [then-branch: 40 | False | live]
; [else-branch: 40 | True | live]
(push) ; 15
; [then-branch: 40 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 40 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_158)
(push) ; 16
; [then-branch: 41 | False | live]
; [else-branch: 41 | True | live]
(push) ; 17
; [then-branch: 41 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 41 | True]
; [eval] _residue_156 <= _residue_158
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (<= _residue_156@22@01 _residue_158@54@01)))
(assert (=
  ($Snap.second $t@103@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@103@01))
    ($Snap.second ($Snap.second $t@103@01)))))
(assert (= ($Snap.first ($Snap.second $t@103@01)) $Snap.unit))
; [eval] p2 && !bypass2 ==> (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_158_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_158_0) && _residue_156_0 <= _residue_158_0)
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 42 | !(p2@17@01) | live]
; [else-branch: 42 | p2@17@01 | live]
(push) ; 13
; [then-branch: 42 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 42 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 43 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 43 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_158_0) && ((forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_158_0) && _residue_156_0 <= _residue_158_0)
; [eval] (forperm _r: Ref [_r.MustReleaseBoundedp] :: Level(_r) <= _residue_158_0)
(push) ; 14
; [then-branch: 44 | False | live]
; [else-branch: 44 | True | live]
(push) ; 15
; [then-branch: 44 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 44 | True]
; [eval] (forperm _r: Ref [_r.MustReleaseUnboundedp] :: Level(_r) <= _residue_158_0)
(push) ; 16
; [then-branch: 45 | False | live]
; [else-branch: 45 | True | live]
(push) ; 17
; [then-branch: 45 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 45 | True]
; [eval] _residue_156_0 <= _residue_158_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (<= _residue_156_0@23@01 _residue_158_0@55@01)))
(assert (=
  ($Snap.second ($Snap.second $t@103@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@103@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@103@01))) $Snap.unit))
; [eval] p1 && !bypass1 ==> issubtype(typeof(result_0), bool())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 46 | !(p1@16@01) | live]
; [else-branch: 46 | p1@16@01 | live]
(push) ; 13
; [then-branch: 46 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 46 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 47 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 47 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(result_0), bool())
; [eval] typeof(result_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@96@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@103@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> issubtype(typeof(result_0_0), bool())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 48 | !(p2@17@01) | live]
; [else-branch: 48 | p2@17@01 | live]
(push) ; 13
; [then-branch: 48 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 48 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 49 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 49 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(result_0_0), bool())
; [eval] typeof(result_0_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> issubtype(typeof(i), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 50 | !(p1@16@01) | live]
; [else-branch: 50 | p1@16@01 | live]
(push) ; 13
; [then-branch: 50 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 50 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 51 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 51 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@97@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> issubtype(typeof(i_1), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 52 | !(p2@17@01) | live]
; [else-branch: 52 | p2@17@01 | live]
(push) ; 13
; [then-branch: 52 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 52 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 53 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 53 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 54 | !(p1@16@01) | live]
; [else-branch: 54 | p1@16@01 | live]
(push) ; 13
; [then-branch: 54 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 54 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 55 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 55 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
; [eval] p2 && !bypass2
(push) ; 13
; [then-branch: 56 | !(p2@17@01) | live]
; [else-branch: 56 | p2@17@01 | live]
(push) ; 14
; [then-branch: 56 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(push) ; 14
; [else-branch: 56 | p2@17@01]
; [eval] !bypass2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 57 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 57 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
; [eval] p1 && !bypass1
(push) ; 14
; [then-branch: 58 | !(p1@16@01) | live]
; [else-branch: 58 | p1@16@01 | live]
(push) ; 15
; [then-branch: 58 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 58 | p1@16@01]
; [eval] !bypass1
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 59 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 59 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
; [eval] p2 && !bypass2
(set-option :timeout 0)
(push) ; 15
; [then-branch: 60 | !(p2@17@01) | live]
; [else-branch: 60 | p2@17@01 | live]
(push) ; 16
; [then-branch: 60 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 60 | p2@17@01]
; [eval] !bypass2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 61 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 61 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] p1 && !bypass1
(set-option :timeout 0)
(push) ; 16
; [then-branch: 62 | !(p1@16@01) | live]
; [else-branch: 62 | p1@16@01 | live]
(push) ; 17
; [then-branch: 62 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 62 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 63 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 63 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))))
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> int___ge__(int___unbox__(i_1), 0)
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 64 | !(p2@17@01) | live]
; [else-branch: 64 | p2@17@01 | live]
(push) ; 17
; [then-branch: 64 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 64 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 65 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 65 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___ge__(int___unbox__(i_1), 0)
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))))
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 66 | !(p1@16@01) | live]
; [else-branch: 66 | p1@16@01 | live]
(push) ; 17
; [then-branch: 66 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 66 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 67 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 67 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] list___len__(password_1)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@104@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 68 | !(p2@17@01) | live]
; [else-branch: 68 | p2@17@01 | live]
(push) ; 17
; [then-branch: 68 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 68 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 69 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 69 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] list___len___0(password_1_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@105@01 $Perm)
(assert ($Perm.isReadVar $k@105@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@105@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@105@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@105@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 70 | !(p1@16@01) | live]
; [else-branch: 70 | p1@16@01 | live]
(push) ; 17
; [then-branch: 70 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 70 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 71 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 71 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] list___len__(inpt_1)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@106@01 $Perm)
(assert ($Perm.isReadVar $k@106@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@106@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@106@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@106@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 72 | !(p2@17@01) | live]
; [else-branch: 72 | p2@17@01 | live]
(push) ; 17
; [then-branch: 72 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 72 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 73 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 73 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] list___len___0(inpt_1_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@107@01 $Perm)
(assert ($Perm.isReadVar $k@107@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@107@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@107@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@107@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 74 | !(p1@16@01) | live]
; [else-branch: 74 | p1@16@01 | live]
(push) ; 17
; [then-branch: 74 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 74 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 75 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 75 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 76 | !(p2@17@01) | live]
; [else-branch: 76 | p2@17@01 | live]
(push) ; 17
; [then-branch: 76 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 76 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 77 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 77 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 78 | !(p1@16@01) | live]
; [else-branch: 78 | p1@16@01 | live]
(push) ; 17
; [then-branch: 78 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 78 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 79 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 79 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 80 | !(p2@17@01) | live]
; [else-branch: 80 | p2@17@01 | live]
(push) ; 17
; [then-branch: 80 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 80 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 81 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 81 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 16
; [then-branch: 82 | bypass1@89@01 | dead]
; [else-branch: 82 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 82 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_0 == result_0
(push) ; 16
; [then-branch: 83 | bypass1@89@01 | dead]
; [else-branch: 83 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 83 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_1 == i
(push) ; 16
; [then-branch: 84 | bypass1@89@01 | dead]
; [else-branch: 84 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 84 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1 ==> tmp1_2 == _loop_check_before
(push) ; 16
; [then-branch: 85 | bypass1@89@01 | dead]
; [else-branch: 85 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 85 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2 == _loop_measures_1
(push) ; 16
; [then-branch: 86 | bypass2@90@01 | dead]
; [else-branch: 86 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 86 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_0 == result_0_0
(push) ; 16
; [then-branch: 87 | bypass2@90@01 | dead]
; [else-branch: 87 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 87 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_1 == i_1
(push) ; 16
; [then-branch: 88 | bypass2@90@01 | dead]
; [else-branch: 88 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 88 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2 ==> tmp2_2 == _loop_check_before_1
(push) ; 16
; [then-branch: 89 | bypass2@90@01 | dead]
; [else-branch: 89 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 89 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; Loop head block: Establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 90 | !(p1@16@01) | live]
; [else-branch: 90 | p1@16@01 | live]
(push) ; 13
; [then-branch: 90 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 90 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 91 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 91 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 92 | !(p2@17@01) | live]
; [else-branch: 92 | p2@17@01 | live]
(push) ; 13
; [then-branch: 92 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 92 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 93 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 93 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(result_0), bool())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 94 | !(p1@16@01) | live]
; [else-branch: 94 | p1@16@01 | live]
(push) ; 13
; [then-branch: 94 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 94 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 95 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 95 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(result_0), bool())
; [eval] typeof(result_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 12
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@77@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@77@01) (as bool<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(result_0_0), bool())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 96 | !(p2@17@01) | live]
; [else-branch: 96 | p2@17@01 | live]
(push) ; 13
; [then-branch: 96 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 96 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 97 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 97 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(result_0_0), bool())
; [eval] typeof(result_0_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 12
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@84@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@84@01) (as bool<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> issubtype(typeof(i), int())
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 98 | !(p1@16@01) | live]
; [else-branch: 98 | p1@16@01 | live]
(push) ; 13
; [then-branch: 98 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 98 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 99 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 99 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 12
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@79@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@79@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(i_1), int())
; [eval] p2 && !bypass2
(push) ; 12
; [then-branch: 100 | !(p2@17@01) | live]
; [else-branch: 100 | p2@17@01 | live]
(push) ; 13
; [then-branch: 100 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 13
(push) ; 13
; [else-branch: 100 | p2@17@01]
; [eval] !bypass2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 101 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 101 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 12
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1
(push) ; 12
; [then-branch: 102 | !(p1@16@01) | live]
; [else-branch: 102 | p1@16@01 | live]
(push) ; 13
; [then-branch: 102 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 13
(push) ; 13
; [else-branch: 102 | p1@16@01]
; [eval] !bypass1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 103 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 103 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 13
; [then-branch: 104 | !(p2@17@01) | live]
; [else-branch: 104 | p2@17@01 | live]
(push) ; 14
; [then-branch: 104 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 14
(push) ; 14
; [else-branch: 104 | p2@17@01]
; [eval] !bypass2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 105 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 105 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1
(push) ; 14
; [then-branch: 106 | !(p1@16@01) | live]
; [else-branch: 106 | p1@16@01 | live]
(push) ; 15
; [then-branch: 106 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 15
(push) ; 15
; [else-branch: 106 | p1@16@01]
; [eval] !bypass1
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 107 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 107 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 15
; [then-branch: 108 | !(p2@17@01) | live]
; [else-branch: 108 | p2@17@01 | live]
(push) ; 16
; [then-branch: 108 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 16
(push) ; 16
; [else-branch: 108 | p2@17@01]
; [eval] !bypass2
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 109 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 109 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 110 | !(p1@16@01) | live]
; [else-branch: 110 | p1@16@01 | live]
(push) ; 17
; [then-branch: 110 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 110 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 111 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 111 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@79@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) 0))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 16
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) 0)))
; [eval] p2 && !bypass2 ==> int___ge__(int___unbox__(i_1), 0)
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 112 | !(p2@17@01) | live]
; [else-branch: 112 | p2@17@01 | live]
(push) ; 17
; [then-branch: 112 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 112 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 113 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 113 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___ge__(int___unbox__(i_1), 0)
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@86@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@86@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) 0))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 16
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) 0)))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 114 | !(p1@16@01) | live]
; [else-branch: 114 | p1@16@01 | live]
(push) ; 17
; [then-branch: 114 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 114 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 115 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 115 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))))
; [eval] list___len__(password_1)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@108@01 $Perm)
(assert ($Perm.isReadVar $k@108@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@108@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@108@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@108@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@79@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 16
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 116 | !(p2@17@01) | live]
; [else-branch: 116 | p2@17@01 | live]
(push) ; 17
; [then-branch: 116 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 116 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 117 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 117 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@86@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)))
; [eval] list___len___0(password_1_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@109@01 $Perm)
(assert ($Perm.isReadVar $k@109@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@109@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@109@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@109@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@86@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 16
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 118 | !(p1@16@01) | live]
; [else-branch: 118 | p1@16@01 | live]
(push) ; 17
; [then-branch: 118 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 118 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 119 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 119 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))))
; [eval] list___len__(inpt_1)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@110@01 $Perm)
(assert ($Perm.isReadVar $k@110@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@110@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@110@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@110@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@79@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 16
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 120 | !(p2@17@01) | live]
; [else-branch: 120 | p2@17@01 | live]
(push) ; 17
; [then-branch: 120 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 120 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 121 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 121 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] int___unbox__(i_1)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@86@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)))
; [eval] list___len___0(inpt_1_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@111@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@111@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@111@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@86@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 16
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 122 | !(p1@16@01) | live]
; [else-branch: 122 | p1@16@01 | live]
(push) ; 17
; [then-branch: 122 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 122 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 123 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 123 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] !idle1
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | True | live]
; [else-branch: 124 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 124 | True]
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | True | live]
; [else-branch: 125 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 125 | True]
; [eval] _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 22
; [then-branch: 126 | False | live]
; [else-branch: 126 | True | live]
(push) ; 23
; [then-branch: 126 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 126 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@79@01 105))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@112@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@113@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@113@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 127 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 127 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 127 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 127 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType])]
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 128 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 128 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 128 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 128 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 129 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 129 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 129 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 129 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 130 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 130 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
(push) ; 24
; [then-branch: 131 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@79@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))))) | live]
; [else-branch: 131 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@79@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01)))) | live]
(push) ; 25
; [then-branch: 131 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i@79@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01)))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))
(pop) ; 25
(push) ; 25
; [else-branch: 131 | int___lt__(_, int___unbox__(_, _checkDefined(_, i@79@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01)))))))))))), inpt@26@01))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 26
; [then-branch: 132 | False | live]
; [else-branch: 132 | True | live]
(push) ; 27
; [then-branch: 132 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 132 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 28
; [then-branch: 133 | False | live]
; [else-branch: 133 | True | live]
(push) ; 29
; [then-branch: 133 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 133 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 30
; [then-branch: 134 | False | live]
; [else-branch: 134 | True | live]
(push) ; 31
; [then-branch: 134 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 134 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 32
; [then-branch: 135 | False | live]
; [else-branch: 135 | True | live]
(push) ; 33
; [then-branch: 135 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 135 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i@79@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i@79@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i@79@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert ($Perm.isReadVar $k@113@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@79@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@79@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@79@01 105))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01))))
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@79@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))))))) inpt@26@01)))))))))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 136 | !(p2@17@01) | live]
; [else-branch: 136 | p2@17@01 | live]
(push) ; 17
; [then-branch: 136 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 136 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 137 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 137 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | True | live]
; [else-branch: 138 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 138 | True]
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | True | live]
; [else-branch: 139 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 139 | True]
; [eval] _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
(push) ; 22
; [then-branch: 140 | False | live]
; [else-branch: 140 | True | live]
(push) ; 23
; [then-branch: 140 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 140 | True]
; [eval] !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@86@01))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@114@01 $Perm)
(assert ($Perm.isReadVar $k@114@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@114@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@115@01 $Perm)
(assert ($Perm.isReadVar $k@115@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@115@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@115@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 141 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 141 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 141 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 141 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType])]
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 142 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 142 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 142 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 142 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 143 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 143 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 143 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 143 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 144 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 144 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
(push) ; 24
; [then-branch: 145 | !(int___lt__(_, int___unbox__(_, i_1@86@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))))) | live]
; [else-branch: 145 | int___lt__(_, int___unbox__(_, i_1@86@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01)))) | live]
(push) ; 25
; [then-branch: 145 | !(int___lt__(_, int___unbox__(_, i_1@86@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01)))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))
(pop) ; 25
(push) ; 25
; [else-branch: 145 | int___lt__(_, int___unbox__(_, i_1@86@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@32@01))))))))))))), inpt_3@27@01))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_156_0)) == none
; [eval] perm(MustTerminate_0(_cthread_156_0))
(push) ; 26
; [then-branch: 146 | False | live]
; [else-branch: 146 | True | live]
(push) ; 27
; [then-branch: 146 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 146 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 28
; [then-branch: 147 | False | live]
; [else-branch: 147 | True | live]
(push) ; 29
; [then-branch: 147 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 147 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 30
; [then-branch: 148 | False | live]
; [else-branch: 148 | True | live]
(push) ; 31
; [then-branch: 148 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 148 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 32
; [then-branch: 149 | False | live]
; [else-branch: 149 | True | live]
(push) ; 33
; [then-branch: 149 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 149 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert ($Perm.isReadVar $k@115@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert ($Perm.isReadVar $k@115@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert ($Perm.isReadVar $k@115@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@86@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert ($Perm.isReadVar $k@115@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@86@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@86@01)
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01))))
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@86@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))))))) inpt_3@27@01)))))))))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 16
; [then-branch: 150 | !(p1@16@01) | live]
; [else-branch: 150 | p1@16@01 | live]
(push) ; 17
; [then-branch: 150 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 17
(push) ; 17
; [else-branch: 150 | p1@16@01]
; [eval] !bypass1
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 151 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 151 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | True | live]
; [else-branch: 152 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 152 | True]
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 20
; [then-branch: 153 | False | dead]
; [else-branch: 153 | True | live]
(push) ; 21
; [else-branch: 153 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 16
; [then-branch: 154 | !(p2@17@01) | live]
; [else-branch: 154 | p2@17@01 | live]
(push) ; 17
; [then-branch: 154 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 17
(push) ; 17
; [else-branch: 154 | p2@17@01]
; [eval] !bypass2
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 155 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 155 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | True | live]
; [else-branch: 156 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 156 | True]
; [eval] !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1
(push) ; 20
; [then-branch: 157 | False | dead]
; [else-branch: 157 | True | live]
(push) ; 21
; [else-branch: 157 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 16
; [then-branch: 158 | bypass1@89@01 | dead]
; [else-branch: 158 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 158 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == result_0
(push) ; 16
; [then-branch: 159 | bypass1@89@01 | dead]
; [else-branch: 159 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 159 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == i
(push) ; 16
; [then-branch: 160 | bypass1@89@01 | dead]
; [else-branch: 160 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 160 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _loop_check_before
(push) ; 16
; [then-branch: 161 | bypass1@89@01 | dead]
; [else-branch: 161 | !(bypass1@89@01) | live]
(push) ; 17
; [else-branch: 161 | !(bypass1@89@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_1
(push) ; 16
; [then-branch: 162 | bypass2@90@01 | dead]
; [else-branch: 162 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 162 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == result_0_0
(push) ; 16
; [then-branch: 163 | bypass2@90@01 | dead]
; [else-branch: 163 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 163 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == i_1
(push) ; 16
; [then-branch: 164 | bypass2@90@01 | dead]
; [else-branch: 164 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 164 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _loop_check_before_1
(push) ; 16
; [then-branch: 165 | bypass2@90@01 | dead]
; [else-branch: 165 | !(bypass2@90@01) | live]
(push) ; 17
; [else-branch: 165 | !(bypass2@90@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 16
(assert ($Perm.isReadVar $k@104@01))
(assert ($Perm.isReadVar $k@105@01))
(assert ($Perm.isReadVar $k@106@01))
(assert ($Perm.isReadVar $k@107@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
(assert (= $t@103@01 ($Snap.combine ($Snap.first $t@103@01) ($Snap.second $t@103@01))))
(assert (= ($Snap.first $t@103@01) $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (<= _residue_156@22@01 _residue_158@54@01)))
(assert (=
  ($Snap.second $t@103@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@103@01))
    ($Snap.second ($Snap.second $t@103@01)))))
(assert (= ($Snap.first ($Snap.second $t@103@01)) $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (<= _residue_156_0@23@01 _residue_158_0@55@01)))
(assert (=
  ($Snap.second ($Snap.second $t@103@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@103@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@103@01))) $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@96@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@103@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  $Snap.unit))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@97@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
  $Snap.unit))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 17
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))))
(push) ; 18
; [then-branch: 166 | !(p1@16@01) | live]
; [else-branch: 166 | p1@16@01 | live]
(push) ; 19
; [then-branch: 166 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 19
(push) ; 19
; [else-branch: 166 | p1@16@01]
; [eval] !ret1
(push) ; 20
; [then-branch: 167 | False | live]
; [else-branch: 167 | True | live]
(push) ; 21
; [then-branch: 167 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 167 | True]
; [eval] !bypass1
(push) ; 22
; [then-branch: 168 | bypass1@89@01 | live]
; [else-branch: 168 | !(bypass1@89@01) | live]
(push) ; 23
; [then-branch: 168 | bypass1@89@01]
(assert bypass1@89@01)
(pop) ; 23
(push) ; 23
; [else-branch: 168 | !(bypass1@89@01)]
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@116@01 $Perm)
(assert ($Perm.isReadVar $k@116@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@116@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 169 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 169 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 169 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 169 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 170 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 170 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 170 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 170 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 171 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 171 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 171 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 171 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 172 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 172 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert ($Perm.isReadVar $k@117@01))
(assert (=>
  (not bypass1@89@01)
  (and
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(assert (or (not bypass1@89@01) bypass1@89@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert ($Perm.isReadVar $k@117@01))
(assert (and
  (=>
    (not bypass1@89@01)
    (and
      (_checkDefined%precondition $Snap.unit i@97@01 105)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (or (not bypass1@89@01) bypass1@89@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert ($Perm.isReadVar $k@117@01))
(assert (=>
  p1@16@01
  (and
    (=>
      (not bypass1@89@01)
      (and
        (_checkDefined%precondition $Snap.unit i@97@01 105)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (or (not bypass1@89@01) bypass1@89@01))))
(push) ; 18
; [then-branch: 173 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) | live]
; [else-branch: 173 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))) | live]
(push) ; 19
; [then-branch: 173 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))]
(assert (and
  p1@16@01
  (and
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 173 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))))]
(assert (not
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
; [eval] p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
(push) ; 20
; [then-branch: 174 | !(p2@17@01) | live]
; [else-branch: 174 | p2@17@01 | live]
(push) ; 21
; [then-branch: 174 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 174 | p2@17@01]
; [eval] !ret2
(push) ; 22
; [then-branch: 175 | False | live]
; [else-branch: 175 | True | live]
(push) ; 23
; [then-branch: 175 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 175 | True]
; [eval] !bypass2
(push) ; 24
; [then-branch: 176 | bypass2@90@01 | live]
; [else-branch: 176 | !(bypass2@90@01) | live]
(push) ; 25
; [then-branch: 176 | bypass2@90@01]
(assert bypass2@90@01)
(pop) ; 25
(push) ; 25
; [else-branch: 176 | !(bypass2@90@01)]
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@119@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 26
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 27
; [then-branch: 177 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 177 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 28
; [then-branch: 177 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 177 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 27
; [then-branch: 178 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 178 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 28
; [then-branch: 178 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 178 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 29
; [then-branch: 179 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 179 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 30
; [then-branch: 179 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 30
(push) ; 30
; [else-branch: 179 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 27
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 180 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 180 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 26
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 26
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert (=>
  (not bypass2@90@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
(assert (or (not bypass2@90@01) bypass2@90@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert (and
  (=>
    (not bypass2@90@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_1@101@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
  (or (not bypass2@90@01) bypass2@90@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert (=>
  p2@17@01
  (and
    (=>
      (not bypass2@90@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1@101@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
    (or (not bypass2@90@01) bypass2@90@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p1@16@01
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert ($Perm.isReadVar $k@119@01))
(assert (=>
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    (not
      (and
        p1@16@01
        (and
          (not bypass1@89@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
    (=>
      p2@17@01
      (and
        (=>
          (not bypass2@90@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1@101@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
        (or (not bypass2@90@01) bypass2@90@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
(pop) ; 17
(push) ; 17
; [eval] !(p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))))
(push) ; 18
; [then-branch: 181 | !(p1@16@01) | live]
; [else-branch: 181 | p1@16@01 | live]
(push) ; 19
; [then-branch: 181 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 19
(push) ; 19
; [else-branch: 181 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(push) ; 20
; [then-branch: 182 | False | live]
; [else-branch: 182 | True | live]
(push) ; 21
; [then-branch: 182 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 182 | True]
; [eval] !bypass1
(push) ; 22
; [then-branch: 183 | bypass1@89@01 | live]
; [else-branch: 183 | !(bypass1@89@01) | live]
(push) ; 23
; [then-branch: 183 | bypass1@89@01]
(assert bypass1@89@01)
(pop) ; 23
(push) ; 23
; [else-branch: 183 | !(bypass1@89@01)]
(assert (not bypass1@89@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@121@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 184 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 184 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 184 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 184 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 185 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 185 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 185 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 185 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 186 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 186 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 186 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 186 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 187 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert (=>
  (not bypass1@89@01)
  (and
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(assert (or (not bypass1@89@01) bypass1@89@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert (and
  (=>
    (not bypass1@89@01)
    (and
      (not bypass1@89@01)
      (_checkDefined%precondition $Snap.unit i@97@01 105)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (or (not bypass1@89@01) bypass1@89@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@120@01))
(assert ($Perm.isReadVar $k@121@01))
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not bypass1@89@01)
      (and
        (not bypass1@89@01)
        (_checkDefined%precondition $Snap.unit i@97@01 105)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (or (not bypass1@89@01) bypass1@89@01))))
(push) ; 18
; [then-branch: 188 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) | live]
; [else-branch: 188 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))) | live]
(push) ; 19
; [then-branch: 188 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))]
(assert (and
  p1@16@01
  (and
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 188 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))))]
(assert (not
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
; [eval] p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
(push) ; 20
; [then-branch: 189 | !(p2@17@01) | live]
; [else-branch: 189 | p2@17@01 | live]
(push) ; 21
; [then-branch: 189 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 189 | p2@17@01]
; [eval] !ret2
(push) ; 22
; [then-branch: 190 | False | live]
; [else-branch: 190 | True | live]
(push) ; 23
; [then-branch: 190 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 190 | True]
; [eval] !bypass2
(push) ; 24
; [then-branch: 191 | bypass2@90@01 | live]
; [else-branch: 191 | !(bypass2@90@01) | live]
(push) ; 25
; [then-branch: 191 | bypass2@90@01]
(assert bypass2@90@01)
(pop) ; 25
(push) ; 25
; [else-branch: 191 | !(bypass2@90@01)]
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@123@01 $Perm)
(assert ($Perm.isReadVar $k@123@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@123@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@123@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 26
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 27
; [then-branch: 192 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 192 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 28
; [then-branch: 192 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 192 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 27
; [then-branch: 193 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 193 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 28
; [then-branch: 193 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 193 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 29
; [then-branch: 194 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 194 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 30
; [then-branch: 194 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 30
(push) ; 30
; [else-branch: 194 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 27
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 195 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 195 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 26
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 26
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert (=>
  (not bypass2@90@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
(assert (or (not bypass2@90@01) bypass2@90@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert (and
  (=>
    (not bypass2@90@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_1@101@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
  (or (not bypass2@90@01) bypass2@90@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert (=>
  p2@17@01
  (and
    (=>
      (not bypass2@90@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1@101@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
    (or (not bypass2@90@01) bypass2@90@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p1@16@01
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert ($Perm.isReadVar $k@123@01))
(assert (=>
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    (not
      (and
        p1@16@01
        (and
          (not bypass1@89@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
    (=>
      p2@17@01
      (and
        (=>
          (not bypass2@90@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1@101@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
        (or (not bypass2@90@01) bypass2@90@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
(pop) ; 17
; Loop head block: Follow loop-internal edges
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))))
(push) ; 17
; [then-branch: 196 | !(p1@16@01) | live]
; [else-branch: 196 | p1@16@01 | live]
(push) ; 18
; [then-branch: 196 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 196 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 197 | False | live]
; [else-branch: 197 | True | live]
(push) ; 20
; [then-branch: 197 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 197 | True]
; [eval] !bypass1
(push) ; 21
; [then-branch: 198 | bypass1@89@01 | live]
; [else-branch: 198 | !(bypass1@89@01) | live]
(push) ; 22
; [then-branch: 198 | bypass1@89@01]
(assert bypass1@89@01)
(pop) ; 22
(push) ; 22
; [else-branch: 198 | !(bypass1@89@01)]
(assert (not bypass1@89@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@124@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@125@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 199 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 199 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 199 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 199 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 200 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 200 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 200 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 200 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 201 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 201 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 201 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 201 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 202 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 202 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert (=>
  (not bypass1@89@01)
  (and
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(assert (or (not bypass1@89@01) bypass1@89@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert (and
  (=>
    (not bypass1@89@01)
    (and
      (not bypass1@89@01)
      (_checkDefined%precondition $Snap.unit i@97@01 105)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (or (not bypass1@89@01) bypass1@89@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert ($Perm.isReadVar $k@125@01))
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (=>
      (not bypass1@89@01)
      (and
        (not bypass1@89@01)
        (_checkDefined%precondition $Snap.unit i@97@01 105)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (or (not bypass1@89@01) bypass1@89@01))))
(push) ; 17
; [then-branch: 203 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) | live]
; [else-branch: 203 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))) | live]
(push) ; 18
; [then-branch: 203 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))]
(assert (and
  p1@16@01
  (and
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 203 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))))]
(assert (not
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
; [eval] p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
(push) ; 19
; [then-branch: 204 | !(p2@17@01) | live]
; [else-branch: 204 | p2@17@01 | live]
(push) ; 20
; [then-branch: 204 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 20
(push) ; 20
; [else-branch: 204 | p2@17@01]
; [eval] !ret2
(push) ; 21
; [then-branch: 205 | False | live]
; [else-branch: 205 | True | live]
(push) ; 22
; [then-branch: 205 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 205 | True]
; [eval] !bypass2
(push) ; 23
; [then-branch: 206 | bypass2@90@01 | live]
; [else-branch: 206 | !(bypass2@90@01) | live]
(push) ; 24
; [then-branch: 206 | bypass2@90@01]
(assert bypass2@90@01)
(pop) ; 24
(push) ; 24
; [else-branch: 206 | !(bypass2@90@01)]
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@126@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@127@01 $Perm)
(assert ($Perm.isReadVar $k@127@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@127@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@127@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 25
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 26
; [then-branch: 207 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 207 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 27
; [then-branch: 207 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 207 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 26
; [then-branch: 208 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 208 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 27
; [then-branch: 208 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 208 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 28
; [then-branch: 209 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 209 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 29
; [then-branch: 209 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 29
(push) ; 29
; [else-branch: 209 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 26
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 210 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 210 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 25
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 25
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@127@01))
(assert (=>
  (not bypass2@90@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
(assert (or (not bypass2@90@01) bypass2@90@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@127@01))
(assert (and
  (=>
    (not bypass2@90@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_1@101@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
  (or (not bypass2@90@01) bypass2@90@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@127@01))
(assert (=>
  p2@17@01
  (and
    (=>
      (not bypass2@90@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1@101@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
    (or (not bypass2@90@01) bypass2@90@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p1@16@01
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@126@01))
(assert ($Perm.isReadVar $k@127@01))
(assert (=>
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    (not
      (and
        p1@16@01
        (and
          (not bypass1@89@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
    (=>
      p2@17@01
      (and
        (=>
          (not bypass2@90@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1@101@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
        (or (not bypass2@90@01) bypass2@90@01))))))
(assert (or
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (and
      p2@17@01
      (and
        (not bypass2@90@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p2@17@01
    (and
      (not bypass2@90@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01)))) | live]
; [else-branch: 211 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))))) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 211 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))))]
(assert (or
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p2@17@01
    (and
      (not bypass2@90@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))))
; [exec]
; p1_0 := p1 &&
;   (!ret1 &&
;   int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1)))))
; [eval] p1 && (!ret1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))
(push) ; 18
; [then-branch: 212 | !(p1@16@01) | live]
; [else-branch: 212 | p1@16@01 | live]
(push) ; 19
; [then-branch: 212 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 19
(push) ; 19
; [else-branch: 212 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(push) ; 20
; [then-branch: 213 | False | live]
; [else-branch: 213 | True | live]
(push) ; 21
; [then-branch: 213 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 213 | True]
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@128@01 $Perm)
(assert ($Perm.isReadVar $k@128@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@128@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@129@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 214 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 214 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 214 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 214 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 215 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 215 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 216 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 216 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 216 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 216 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 217 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 217 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i@97@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@128@01))
(assert ($Perm.isReadVar $k@129@01))
(assert (=>
  p1@16@01
  (and
    p1@16@01
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(declare-const p1_0@130@01 Bool)
(assert (=
  p1_0@130@01
  (and
    p1@16@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
; [exec]
; p2_0 := p2 &&
;   (!ret2 &&
;   int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0)))))
; [eval] p2 && (!ret2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))))
(push) ; 18
; [then-branch: 218 | !(p2@17@01) | live]
; [else-branch: 218 | p2@17@01 | live]
(push) ; 19
; [then-branch: 218 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 19
(push) ; 19
; [else-branch: 218 | p2@17@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 219 | False | live]
; [else-branch: 219 | True | live]
(push) ; 21
; [then-branch: 219 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 219 | True]
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@132@01 $Perm)
(assert ($Perm.isReadVar $k@132@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@132@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@132@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 220 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 220 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 220 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 220 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 221 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 221 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 221 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 221 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 222 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 222 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 222 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 222 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 223 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 223 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert ($Perm.isReadVar $k@132@01))
(assert (=>
  p2@17@01
  (and
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
(declare-const p2_0@133@01 Bool)
(assert (=
  p2_0@133@01
  (and
    p2@17@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
; [exec]
; idle1 := p1 &&
;   (!ret1 &&
;   !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1)))))
; [eval] p1 && (!ret1 && !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))
(push) ; 18
; [then-branch: 224 | !(p1@16@01) | live]
; [else-branch: 224 | p1@16@01 | live]
(push) ; 19
; [then-branch: 224 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 19
(push) ; 19
; [else-branch: 224 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(push) ; 20
; [then-branch: 225 | False | live]
; [else-branch: 225 | True | live]
(push) ; 21
; [then-branch: 225 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 225 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@134@01 $Perm)
(assert ($Perm.isReadVar $k@134@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@134@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@134@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@135@01 $Perm)
(assert ($Perm.isReadVar $k@135@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@135@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@135@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 226 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 226 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 226 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 226 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 227 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 227 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 227 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 227 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 228 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 228 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 228 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 228 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 229 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 229 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i@97@01 105)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@134@01))
(assert ($Perm.isReadVar $k@135@01))
(declare-const idle1@136@01 Bool)
(assert (=
  idle1@136@01
  (and
    p1@16@01
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
; [exec]
; idle2 := p2 &&
;   (!ret2 &&
;   !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0)))))
; [eval] p2 && (!ret2 && !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))))
(push) ; 18
; [then-branch: 230 | !(p2@17@01) | live]
; [else-branch: 230 | p2@17@01 | live]
(push) ; 19
; [then-branch: 230 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 19
(push) ; 19
; [else-branch: 230 | p2@17@01]
; [eval] !ret2
(push) ; 20
; [then-branch: 231 | False | live]
; [else-branch: 231 | True | live]
(push) ; 21
; [then-branch: 231 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 231 | True]
; [eval] !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@137@01 $Perm)
(assert ($Perm.isReadVar $k@137@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@137@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@137@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@138@01 $Perm)
(assert ($Perm.isReadVar $k@138@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@138@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@138@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 232 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 232 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 232 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 232 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 233 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 233 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 233 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 233 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 234 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 234 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 234 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 234 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 235 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 235 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@137@01))
(assert ($Perm.isReadVar $k@138@01))
(declare-const idle2@139@01 Bool)
(assert (=
  idle2@139@01
  (and
    p2@17@01
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))))
; [eval] p1_0 && !ret1
(push) ; 18
; [then-branch: 236 | !(p1_0@130@01) | live]
; [else-branch: 236 | p1_0@130@01 | live]
(push) ; 19
; [then-branch: 236 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
(pop) ; 19
(push) ; 19
; [else-branch: 236 | p1_0@130@01]
(assert p1_0@130@01)
; [eval] !ret1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p1_0@130@01 (not p1_0@130@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_0@130@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1_0@130@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | p1_0@130@01 | live]
; [else-branch: 237 | !(p1_0@130@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 237 | p1_0@130@01]
(assert p1_0@130@01)
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_0 := __prim__bool___box__(bool___unbox__(_checkDefined(result_0, 3485632645783840114)) &&
;   str___eq__(list___getitem__(password_1, _checkDefined(i, 105)), list___getitem__(inpt_1,
;   _checkDefined(i, 105))))
; [eval] __prim__bool___box__(bool___unbox__(_checkDefined(result_0, 3485632645783840114)) && str___eq__(list___getitem__(password_1, _checkDefined(i, 105)), list___getitem__(inpt_1, _checkDefined(i, 105))))
; [eval] bool___unbox__(_checkDefined(result_0, 3485632645783840114)) && str___eq__(list___getitem__(password_1, _checkDefined(i, 105)), list___getitem__(inpt_1, _checkDefined(i, 105)))
; [eval] bool___unbox__(_checkDefined(result_0, 3485632645783840114))
; [eval] _checkDefined(result_0, 3485632645783840114)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_0@96@01 3485632645783840114))
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_0@96@01 3485632645783840114))
(push) ; 19
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))))
(push) ; 19
; [then-branch: 238 | !(bool___unbox__(_, _checkDefined(_, result_0@96@01, 3485632645783840114))) | live]
; [else-branch: 238 | bool___unbox__(_, _checkDefined(_, result_0@96@01, 3485632645783840114)) | live]
(push) ; 20
; [then-branch: 238 | !(bool___unbox__(_, _checkDefined(_, result_0@96@01, 3485632645783840114)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))))
(pop) ; 20
(push) ; 20
; [else-branch: 238 | bool___unbox__(_, _checkDefined(_, result_0@96@01, 3485632645783840114))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)))
; [eval] str___eq__(list___getitem__(password_1, _checkDefined(i, 105)), list___getitem__(inpt_1, _checkDefined(i, 105)))
; [eval] list___getitem__(password_1, _checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(declare-const $k@140@01 $Perm)
(assert ($Perm.isReadVar $k@140@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@140@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@141@01 $Perm)
(assert ($Perm.isReadVar $k@141@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@141@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@141@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(declare-const letvar@142@01 Int)
(assert (=
  (as letvar@142@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 22
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0 | dead]
; [else-branch: 239 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 239 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0)]
(assert (not (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)))
(push) ; 22
; [then-branch: 240 | False | live]
; [else-branch: 240 | True | live]
(push) ; 23
; [then-branch: 240 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 240 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0 | live]
; [else-branch: 241 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 241 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
      $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
  (=
    (as letvar@142@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
  (not (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
  (=>
    (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
        $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))))
; [eval] list___getitem__(inpt_1, _checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@143@01 $Perm)
(assert ($Perm.isReadVar $k@143@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@143@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@144@01 $Perm)
(assert ($Perm.isReadVar $k@144@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@144@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@144@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(declare-const letvar@145@01 Int)
(assert (=
  (as letvar@145@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 242 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0 | dead]
; [else-branch: 242 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0) | live]
(push) ; 23
; [else-branch: 242 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) < 0)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 243 | False | live]
; [else-branch: 243 | True | live]
(push) ; 23
; [then-branch: 243 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 243 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0 | live]
; [else-branch: 244 | !(int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 244 | int___unbox__(_, _checkDefined(_, i@97@01, 105)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
      $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert (and
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
  (=
    (as letvar@145@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
  (=>
    (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
        $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))))
(push) ; 21
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
      $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
      $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
      $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
      $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
        $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
        $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
        $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105)))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@140@01))
(assert ($Perm.isReadVar $k@141@01))
(assert ($Perm.isReadVar $k@143@01))
(assert ($Perm.isReadVar $k@144@01))
(assert (=>
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (=
      (as letvar@142@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (not (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
    (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
    (=>
      (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
          $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (=
      (as letvar@145@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (=>
      (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
          $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
          $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
          $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
          $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))))))
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)))))
(push) ; 19
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
        $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
        $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))))))
(pop) ; 19
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
        $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
        $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105))))))
(declare-const result_0@146@01 $Ref)
(assert (=
  result_0@146@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_0@96@01 3485632645783840114))
    (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
          $Snap.unit))) password@24@01 (_checkDefined $Snap.unit i@97@01 105)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
          $Snap.unit))) inpt@26@01 (_checkDefined $Snap.unit i@97@01 105)))))))
; [exec]
; inhale _isDefined(3485632645783840114)
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 $Snap.unit))
; [eval] _isDefined(3485632645783840114)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i := __prim__int___box__(int___add__(int___unbox__(i), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i), 1))
; [eval] int___add__(int___unbox__(i), 1)
; [eval] int___unbox__(i)
(set-option :timeout 0)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i@97@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i@97@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i@97@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i@97@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i@97@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i@97@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i@97@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@97@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@97@01) 1)))
(declare-const i@148@01 $Ref)
(assert (=
  i@148@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i@97@01) 1))))
; [exec]
; inhale _isDefined(105)
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] _isDefined(105)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [eval] p2_0 && !ret2
(set-option :timeout 0)
(push) ; 19
; [then-branch: 245 | !(p2_0@133@01) | live]
; [else-branch: 245 | p2_0@133@01 | live]
(push) ; 20
; [then-branch: 245 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 20
(push) ; 20
; [else-branch: 245 | p2_0@133@01]
(assert p2_0@133@01)
; [eval] !ret2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p2_0@133@01 (not p2_0@133@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_0@133@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p2_0@133@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | p2_0@133@01 | live]
; [else-branch: 246 | !(p2_0@133@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 246 | p2_0@133@01]
(assert p2_0@133@01)
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_0_0 := __prim__bool___box__(bool___unbox__(result_0_0) &&
;   str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0,
;   i_1)))
; [eval] __prim__bool___box__(bool___unbox__(result_0_0) && str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1)))
; [eval] bool___unbox__(result_0_0) && str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1))
; [eval] bool___unbox__(result_0_0)
(push) ; 20
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit result_0_0@100@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit result_0_0@100@01)))
(push) ; 20
; [then-branch: 247 | !(bool___unbox__(_, result_0_0@100@01)) | live]
; [else-branch: 247 | bool___unbox__(_, result_0_0@100@01) | live]
(push) ; 21
; [then-branch: 247 | !(bool___unbox__(_, result_0_0@100@01))]
(assert (not (bool___unbox__ $Snap.unit result_0_0@100@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 247 | bool___unbox__(_, result_0_0@100@01)]
(assert (bool___unbox__ $Snap.unit result_0_0@100@01))
; [eval] str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1))
; [eval] list___getitem___0(password_1_0, i_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(declare-const $k@150@01 $Perm)
(assert ($Perm.isReadVar $k@150@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@151@01 $Perm)
(assert ($Perm.isReadVar $k@151@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@151@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@151@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(declare-const letvar@152@01 Int)
(assert (=
  (as letvar@152@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 23
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | int___unbox__(_, i_1@101@01) < 0 | dead]
; [else-branch: 248 | !(int___unbox__(_, i_1@101@01) < 0) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 248 | !(int___unbox__(_, i_1@101@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit i_1@101@01) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit i_1@101@01) 0)))
(push) ; 23
; [then-branch: 249 | False | live]
; [else-branch: 249 | True | live]
(push) ; 24
; [then-branch: 249 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 249 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | int___unbox__(_, i_1@101@01) >= 0 | live]
; [else-branch: 250 | !(int___unbox__(_, i_1@101@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 250 | int___unbox__(_, i_1@101@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
  (=
    (as letvar@152@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
  (int___unbox__%precondition $Snap.unit i_1@101@01)
  (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (=>
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (<
      (int___unbox__ $Snap.unit i_1@101@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01)))
; [eval] list___getitem___0(inpt_1_0, i_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@153@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@154@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@154@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(declare-const letvar@155@01 Int)
(assert (=
  (as letvar@155@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 251 | int___unbox__(_, i_1@101@01) < 0 | dead]
; [else-branch: 251 | !(int___unbox__(_, i_1@101@01) < 0) | live]
(push) ; 24
; [else-branch: 251 | !(int___unbox__(_, i_1@101@01) < 0)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 24
; [then-branch: 252 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 252 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | int___unbox__(_, i_1@101@01) >= 0 | live]
; [else-branch: 253 | !(int___unbox__(_, i_1@101@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 253 | int___unbox__(_, i_1@101@01) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
      $Snap.unit))) inpt_3@27@01 i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert (and
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
  (=
    (as letvar@155@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
  (=>
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (<
      (int___unbox__ $Snap.unit i_1@101@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))
(push) ; 22
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
      $Snap.unit))) inpt_3@27@01 i_1@101@01)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert ($Perm.isReadVar $k@151@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert (=>
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (and
    (bool___unbox__ $Snap.unit result_0_0@100@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (=
      (as letvar@152@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (=>
      (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
      (<
        (int___unbox__ $Snap.unit i_1@101@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (=
      (as letvar@155@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (=>
      (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
      (<
        (int___unbox__ $Snap.unit i_1@101@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(assert (or
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (not (bool___unbox__ $Snap.unit result_0_0@100@01))))
(push) ; 20
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(declare-const result_0_0@156@01 $Ref)
(assert (=
  result_0_0@156@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit result_0_0@100@01)
    (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01))))))
; [exec]
; inhale true
(declare-const $t@157@01 $Snap)
(assert (= $t@157@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(set-option :timeout 0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1)))
(declare-const i_1@158@01 $Ref)
(assert (=
  i_1@158@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))))
; [exec]
; inhale true
(declare-const $t@159@01 $Snap)
(assert (= $t@159@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_1 := false
; [exec]
; assert (p1_0 && !ret1 ==>
;   _loop_termination_flag ==>
;   !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1))))) &&
;   (p2_0 && !ret2 ==>
;   _loop_termination_flag_1 ==>
;   !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0)))))
; [eval] p1_0 && !ret1 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] p1_0 && !ret1
(set-option :timeout 0)
(push) ; 20
; [then-branch: 254 | !(p1_0@130@01) | live]
; [else-branch: 254 | p1_0@130@01 | live]
(push) ; 21
; [then-branch: 254 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 254 | p1_0@130@01]
; [eval] !ret1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_0@130@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | p1_0@130@01 | live]
; [else-branch: 255 | !(p1_0@130@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 255 | p1_0@130@01]
; [eval] _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
(push) ; 22
; [then-branch: 256 | False | dead]
; [else-branch: 256 | True | live]
(push) ; 23
; [else-branch: 256 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_0 && !ret2 ==> _loop_termination_flag_1 ==> !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] p2_0 && !ret2
(push) ; 20
; [then-branch: 257 | !(p2_0@133@01) | live]
; [else-branch: 257 | p2_0@133@01 | live]
(push) ; 21
; [then-branch: 257 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 21
(push) ; 21
; [else-branch: 257 | p2_0@133@01]
; [eval] !ret2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_0@133@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | p2_0@133@01 | live]
; [else-branch: 258 | !(p2_0@133@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 258 | p2_0@133@01]
; [eval] _loop_termination_flag_1 ==> !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
(push) ; 22
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 23
; [else-branch: 259 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 260 | !(p1@16@01) | live]
; [else-branch: 260 | p1@16@01 | live]
(push) ; 21
; [then-branch: 260 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 260 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 261 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 261 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 262 | !(p2@17@01) | live]
; [else-branch: 262 | p2@17@01 | live]
(push) ; 21
; [then-branch: 262 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 262 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 263 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 263 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(result_0), bool())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 264 | !(p1@16@01) | live]
; [else-branch: 264 | p1@16@01 | live]
(push) ; 21
; [then-branch: 264 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 264 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 265 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 265 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(result_0), bool())
; [eval] typeof(result_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 20
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@146@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@146@01) (as bool<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(result_0_0), bool())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 266 | !(p2@17@01) | live]
; [else-branch: 266 | p2@17@01 | live]
(push) ; 21
; [then-branch: 266 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 266 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 267 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 267 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(result_0_0), bool())
; [eval] typeof(result_0_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 20
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@156@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@156@01) (as bool<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> issubtype(typeof(i), int())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 268 | !(p1@16@01) | live]
; [else-branch: 268 | p1@16@01 | live]
(push) ; 21
; [then-branch: 268 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 268 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 269 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 269 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 20
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@148@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@148@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(i_1), int())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 270 | !(p2@17@01) | live]
; [else-branch: 270 | p2@17@01 | live]
(push) ; 21
; [then-branch: 270 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 270 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 271 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 271 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 20
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 272 | !(p1@16@01) | live]
; [else-branch: 272 | p1@16@01 | live]
(push) ; 21
; [then-branch: 272 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 272 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 273 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 273 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 21
; [then-branch: 274 | !(p2@17@01) | live]
; [else-branch: 274 | p2@17@01 | live]
(push) ; 22
; [then-branch: 274 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 22
(push) ; 22
; [else-branch: 274 | p2@17@01]
; [eval] !bypass2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 275 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 275 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1
(push) ; 22
; [then-branch: 276 | !(p1@16@01) | live]
; [else-branch: 276 | p1@16@01 | live]
(push) ; 23
; [then-branch: 276 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 23
(push) ; 23
; [else-branch: 276 | p1@16@01]
; [eval] !bypass1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 277 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 277 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 23
; [then-branch: 278 | !(p2@17@01) | live]
; [else-branch: 278 | p2@17@01 | live]
(push) ; 24
; [then-branch: 278 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 24
(push) ; 24
; [else-branch: 278 | p2@17@01]
; [eval] !bypass2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 279 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 279 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 280 | !(p1@16@01) | live]
; [else-branch: 280 | p1@16@01 | live]
(push) ; 25
; [then-branch: 280 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 280 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 281 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 281 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0)))
; [eval] p2 && !bypass2 ==> int___ge__(int___unbox__(i_1), 0)
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 282 | !(p2@17@01) | live]
; [else-branch: 282 | p2@17@01 | live]
(push) ; 25
; [then-branch: 282 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 282 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 283 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 283 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___ge__(int___unbox__(i_1), 0)
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@158@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@158@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@158@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) 0))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) 0)))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 284 | !(p1@16@01) | live]
; [else-branch: 284 | p1@16@01 | live]
(push) ; 25
; [then-branch: 284 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 284 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 285 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 285 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
; [eval] list___len__(password_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@160@01 $Perm)
(assert ($Perm.isReadVar $k@160@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@160@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@160@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@160@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 286 | !(p2@17@01) | live]
; [else-branch: 286 | p2@17@01 | live]
(push) ; 25
; [then-branch: 286 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 286 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 287 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 287 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@158@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@158@01)))
; [eval] list___len___0(password_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@161@01 $Perm)
(assert ($Perm.isReadVar $k@161@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@161@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@161@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@161@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@158@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 288 | !(p1@16@01) | live]
; [else-branch: 288 | p1@16@01 | live]
(push) ; 25
; [then-branch: 288 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 288 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 289 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 289 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
; [eval] list___len__(inpt_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@162@01 $Perm)
(assert ($Perm.isReadVar $k@162@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@162@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@162@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@162@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 290 | !(p2@17@01) | live]
; [else-branch: 290 | p2@17@01 | live]
(push) ; 25
; [then-branch: 290 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 290 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 291 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 291 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@158@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@158@01)))
; [eval] list___len___0(inpt_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@163@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@163@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@163@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@158@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@158@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@158@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 292 | !(p1@16@01) | live]
; [else-branch: 292 | p1@16@01 | live]
(push) ; 25
; [then-branch: 292 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 292 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 293 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 293 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1@136@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | !(idle1@136@01) | live]
; [else-branch: 294 | idle1@136@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 294 | !(idle1@136@01)]
(assert (not idle1@136@01))
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 28
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 29
; [else-branch: 295 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1@136@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and p1@16@01 (not bypass1@89@01) (not idle1@136@01))))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 296 | !(p2@17@01) | live]
; [else-branch: 296 | p2@17@01 | live]
(push) ; 25
; [then-branch: 296 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 296 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 297 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 297 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2@139@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | !(idle2@139@01) | live]
; [else-branch: 298 | idle2@139@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 298 | !(idle2@139@01)]
(assert (not idle2@139@01))
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
(push) ; 28
; [then-branch: 299 | False | dead]
; [else-branch: 299 | True | live]
(push) ; 29
; [else-branch: 299 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2@139@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and p2@17@01 (not bypass2@90@01) (not idle2@139@01))))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 300 | !(p1@16@01) | live]
; [else-branch: 300 | p1@16@01 | live]
(push) ; 25
; [then-branch: 300 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 300 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 301 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 301 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1@136@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 302 | !(idle1@136@01) | live]
; [else-branch: 302 | idle1@136@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 302 | !(idle1@136@01)]
(assert (not idle1@136@01))
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | True | live]
; [else-branch: 303 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 303 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 30
; [then-branch: 304 | False | live]
; [else-branch: 304 | True | live]
(push) ; 31
; [then-branch: 304 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 304 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 32
; [then-branch: 305 | False | live]
; [else-branch: 305 | True | live]
(push) ; 33
; [then-branch: 305 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 305 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 306 | False | live]
; [else-branch: 306 | True | live]
(push) ; 35
; [then-branch: 306 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 306 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1@136@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 307 | !(p2@17@01) | live]
; [else-branch: 307 | p2@17@01 | live]
(push) ; 25
; [then-branch: 307 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 307 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 308 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 308 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2@139@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | !(idle2@139@01) | live]
; [else-branch: 309 | idle2@139@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 309 | !(idle2@139@01)]
(assert (not idle2@139@01))
; [eval] !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | True | live]
; [else-branch: 310 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 310 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 30
; [then-branch: 311 | False | live]
; [else-branch: 311 | True | live]
(push) ; 31
; [then-branch: 311 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 311 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 32
; [then-branch: 312 | False | live]
; [else-branch: 312 | True | live]
(push) ; 33
; [then-branch: 312 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 312 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 313 | False | live]
; [else-branch: 313 | True | live]
(push) ; 35
; [then-branch: 313 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 313 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2@139@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 314 | bypass1@89@01 | dead]
; [else-branch: 314 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 314 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == result_0
(push) ; 24
; [then-branch: 315 | bypass1@89@01 | dead]
; [else-branch: 315 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 315 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == i
(push) ; 24
; [then-branch: 316 | bypass1@89@01 | dead]
; [else-branch: 316 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 316 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _loop_check_before
(push) ; 24
; [then-branch: 317 | bypass1@89@01 | dead]
; [else-branch: 317 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 317 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_1
(push) ; 24
; [then-branch: 318 | bypass2@90@01 | dead]
; [else-branch: 318 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 318 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == result_0_0
(push) ; 24
; [then-branch: 319 | bypass2@90@01 | dead]
; [else-branch: 319 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 319 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == i_1
(push) ; 24
; [then-branch: 320 | bypass2@90@01 | dead]
; [else-branch: 320 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 320 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _loop_check_before_1
(push) ; 24
; [then-branch: 321 | bypass2@90@01 | dead]
; [else-branch: 321 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 321 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 246 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 19
; [eval] !(p2_0 && !ret2)
; [eval] p2_0 && !ret2
(push) ; 19
; [then-branch: 322 | !(p2_0@133@01) | live]
; [else-branch: 322 | p2_0@133@01 | live]
(push) ; 20
; [then-branch: 322 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 20
(push) ; 20
; [else-branch: 322 | p2_0@133@01]
(assert p2_0@133@01)
; [eval] !ret2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_0@133@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_0@133@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | !(p2_0@133@01) | live]
; [else-branch: 323 | p2_0@133@01 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 323 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
; [exec]
; assert (p1_0 && !ret1 ==>
;   _loop_termination_flag ==>
;   !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1))))) &&
;   (p2_0 && !ret2 ==>
;   _loop_termination_flag_1 ==>
;   !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0)))))
; [eval] p1_0 && !ret1 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] p1_0 && !ret1
(push) ; 20
; [then-branch: 324 | !(p1_0@130@01) | live]
; [else-branch: 324 | p1_0@130@01 | live]
(push) ; 21
; [then-branch: 324 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
(pop) ; 21
(push) ; 21
; [else-branch: 324 | p1_0@130@01]
; [eval] !ret1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_0@130@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | p1_0@130@01 | live]
; [else-branch: 325 | !(p1_0@130@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 325 | p1_0@130@01]
; [eval] _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
(push) ; 22
; [then-branch: 326 | False | dead]
; [else-branch: 326 | True | live]
(push) ; 23
; [else-branch: 326 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_0 && !ret2 ==> _loop_termination_flag_1 ==> !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] p2_0 && !ret2
(push) ; 20
; [then-branch: 327 | !(p2_0@133@01) | live]
; [else-branch: 327 | p2_0@133@01 | live]
(push) ; 21
; [then-branch: 327 | !(p2_0@133@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 327 | p2_0@133@01]
(assert p2_0@133@01)
; [eval] !ret2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 328 | p2_0@133@01 | dead]
; [else-branch: 328 | !(p2_0@133@01) | live]
(push) ; 21
; [else-branch: 328 | !(p2_0@133@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 329 | !(p1@16@01) | live]
; [else-branch: 329 | p1@16@01 | live]
(push) ; 21
; [then-branch: 329 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 329 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 330 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 330 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 331 | !(p2@17@01) | live]
; [else-branch: 331 | p2@17@01 | live]
(push) ; 21
; [then-branch: 331 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 331 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 332 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 332 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 332 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(result_0), bool())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 333 | !(p1@16@01) | live]
; [else-branch: 333 | p1@16@01 | live]
(push) ; 21
; [then-branch: 333 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 333 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 334 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 334 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(result_0), bool())
; [eval] typeof(result_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 20
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@146@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> result_0@146@01) (as bool<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(result_0_0), bool())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 335 | !(p2@17@01) | live]
; [else-branch: 335 | p2@17@01 | live]
(push) ; 21
; [then-branch: 335 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 335 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 336 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 336 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(result_0_0), bool())
; [eval] typeof(result_0_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(i), int())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 337 | !(p1@16@01) | live]
; [else-branch: 337 | p1@16@01 | live]
(push) ; 21
; [then-branch: 337 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 337 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 338 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 338 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 338 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 20
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@148@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (issubtype<Bool> (typeof<PyType> i@148@01) (as int<PyType>  PyType))))
; [eval] p2 && !bypass2 ==> issubtype(typeof(i_1), int())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 339 | !(p2@17@01) | live]
; [else-branch: 339 | p2@17@01 | live]
(push) ; 21
; [then-branch: 339 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 339 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 340 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 340 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 341 | !(p1@16@01) | live]
; [else-branch: 341 | p1@16@01 | live]
(push) ; 21
; [then-branch: 341 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 341 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 342 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 342 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 342 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 21
; [then-branch: 343 | !(p2@17@01) | live]
; [else-branch: 343 | p2@17@01 | live]
(push) ; 22
; [then-branch: 343 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 22
(push) ; 22
; [else-branch: 343 | p2@17@01]
; [eval] !bypass2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 344 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 344 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1
(push) ; 22
; [then-branch: 345 | !(p1@16@01) | live]
; [else-branch: 345 | p1@16@01 | live]
(push) ; 23
; [then-branch: 345 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 23
(push) ; 23
; [else-branch: 345 | p1@16@01]
; [eval] !bypass1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 346 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 346 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 23
; [then-branch: 347 | !(p2@17@01) | live]
; [else-branch: 347 | p2@17@01 | live]
(push) ; 24
; [then-branch: 347 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 24
(push) ; 24
; [else-branch: 347 | p2@17@01]
; [eval] !bypass2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 348 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 348 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 349 | !(p1@16@01) | live]
; [else-branch: 349 | p1@16@01 | live]
(push) ; 25
; [then-branch: 349 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 349 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 350 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 350 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) 0)))
; [eval] p2 && !bypass2 ==> int___ge__(int___unbox__(i_1), 0)
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 351 | !(p2@17@01) | live]
; [else-branch: 351 | p2@17@01 | live]
(push) ; 25
; [then-branch: 351 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 351 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 352 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 352 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___ge__(int___unbox__(i_1), 0)
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 353 | !(p1@16@01) | live]
; [else-branch: 353 | p1@16@01 | live]
(push) ; 25
; [then-branch: 353 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 353 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 354 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 354 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
; [eval] list___len__(password_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@164@01 $Perm)
(assert ($Perm.isReadVar $k@164@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@164@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@164@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@164@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 355 | !(p2@17@01) | live]
; [else-branch: 355 | p2@17@01 | live]
(push) ; 25
; [then-branch: 355 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 355 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 356 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 356 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] list___len___0(password_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@165@01 $Perm)
(assert ($Perm.isReadVar $k@165@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@165@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@165@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@165@01))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 357 | !(p1@16@01) | live]
; [else-branch: 357 | p1@16@01 | live]
(push) ; 25
; [then-branch: 357 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 357 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 358 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 358 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 358 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@148@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))))
; [eval] list___len__(inpt_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@166@01 $Perm)
(assert ($Perm.isReadVar $k@166@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@166@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@166@01))
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and
    p1@16@01
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@148@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@148@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@148@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(assert (and p1@16@01 (not bypass1@89@01)))
(push) ; 24
(assert (not (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@148@01 105)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 359 | !(p2@17@01) | live]
; [else-branch: 359 | p2@17@01 | live]
(push) ; 25
; [then-branch: 359 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 359 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 360 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 360 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] list___len___0(inpt_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@167@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@167@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@167@01))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 361 | !(p1@16@01) | live]
; [else-branch: 361 | p1@16@01 | live]
(push) ; 25
; [then-branch: 361 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 361 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 362 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 362 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1@136@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !(idle1@136@01) | live]
; [else-branch: 363 | idle1@136@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 363 | !(idle1@136@01)]
(assert (not idle1@136@01))
; [eval] _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 28
; [then-branch: 364 | False | dead]
; [else-branch: 364 | True | live]
(push) ; 29
; [else-branch: 364 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1@136@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and p1@16@01 (not bypass1@89@01) (not idle1@136@01))))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 365 | !(p2@17@01) | live]
; [else-branch: 365 | p2@17@01 | live]
(push) ; 25
; [then-branch: 365 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 365 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 366 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 366 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | !(idle2@139@01) | dead]
; [else-branch: 367 | idle2@139@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 367 | idle2@139@01]
(assert idle2@139@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle2@139@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and p2@17@01 (not bypass2@90@01) idle2@139@01)))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 368 | !(p1@16@01) | live]
; [else-branch: 368 | p1@16@01 | live]
(push) ; 25
; [then-branch: 368 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 368 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 369 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 369 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1@136@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 370 | !(idle1@136@01) | live]
; [else-branch: 370 | idle1@136@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 370 | !(idle1@136@01)]
(assert (not idle1@136@01))
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | True | live]
; [else-branch: 371 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 371 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 30
; [then-branch: 372 | False | live]
; [else-branch: 372 | True | live]
(push) ; 31
; [then-branch: 372 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 372 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 32
; [then-branch: 373 | False | live]
; [else-branch: 373 | True | live]
(push) ; 33
; [then-branch: 373 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 373 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 374 | False | live]
; [else-branch: 374 | True | live]
(push) ; 35
; [then-branch: 374 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 374 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1@136@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 375 | !(p2@17@01) | live]
; [else-branch: 375 | p2@17@01 | live]
(push) ; 25
; [then-branch: 375 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 375 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 376 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 376 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 376 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | !(idle2@139@01) | dead]
; [else-branch: 377 | idle2@139@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 377 | idle2@139@01]
(assert idle2@139@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle2@139@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 378 | bypass1@89@01 | dead]
; [else-branch: 378 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 378 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == result_0
(push) ; 24
; [then-branch: 379 | bypass1@89@01 | dead]
; [else-branch: 379 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 379 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == i
(push) ; 24
; [then-branch: 380 | bypass1@89@01 | dead]
; [else-branch: 380 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 380 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _loop_check_before
(push) ; 24
; [then-branch: 381 | bypass1@89@01 | dead]
; [else-branch: 381 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 381 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_1
(push) ; 24
; [then-branch: 382 | bypass2@90@01 | dead]
; [else-branch: 382 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 382 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == result_0_0
(push) ; 24
; [then-branch: 383 | bypass2@90@01 | dead]
; [else-branch: 383 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 383 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == i_1
(push) ; 24
; [then-branch: 384 | bypass2@90@01 | dead]
; [else-branch: 384 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 384 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _loop_check_before_1
(push) ; 24
; [then-branch: 385 | bypass2@90@01 | dead]
; [else-branch: 385 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 385 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 323 | p2_0@133@01]
(assert p2_0@133@01)
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 237 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
(pop) ; 18
; [eval] !(p1_0 && !ret1)
; [eval] p1_0 && !ret1
(push) ; 18
; [then-branch: 386 | !(p1_0@130@01) | live]
; [else-branch: 386 | p1_0@130@01 | live]
(push) ; 19
; [then-branch: 386 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
(pop) ; 19
(push) ; 19
; [else-branch: 386 | p1_0@130@01]
(assert p1_0@130@01)
; [eval] !ret1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_0@130@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_0@130@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | !(p1_0@130@01) | live]
; [else-branch: 387 | p1_0@130@01 | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 387 | !(p1_0@130@01)]
(assert (not p1_0@130@01))
; [eval] p2_0 && !ret2
(push) ; 19
; [then-branch: 388 | !(p2_0@133@01) | live]
; [else-branch: 388 | p2_0@133@01 | live]
(push) ; 20
; [then-branch: 388 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 20
(push) ; 20
; [else-branch: 388 | p2_0@133@01]
(assert p2_0@133@01)
; [eval] !ret2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p2_0@133@01 (not p2_0@133@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_0@133@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p2_0@133@01))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | p2_0@133@01 | live]
; [else-branch: 389 | !(p2_0@133@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 389 | p2_0@133@01]
(assert p2_0@133@01)
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_0_0 := __prim__bool___box__(bool___unbox__(result_0_0) &&
;   str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0,
;   i_1)))
; [eval] __prim__bool___box__(bool___unbox__(result_0_0) && str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1)))
; [eval] bool___unbox__(result_0_0) && str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1))
; [eval] bool___unbox__(result_0_0)
(push) ; 20
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit result_0_0@100@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit result_0_0@100@01)))
(push) ; 20
; [then-branch: 390 | !(bool___unbox__(_, result_0_0@100@01)) | live]
; [else-branch: 390 | bool___unbox__(_, result_0_0@100@01) | live]
(push) ; 21
; [then-branch: 390 | !(bool___unbox__(_, result_0_0@100@01))]
(assert (not (bool___unbox__ $Snap.unit result_0_0@100@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 390 | bool___unbox__(_, result_0_0@100@01)]
(assert (bool___unbox__ $Snap.unit result_0_0@100@01))
; [eval] str___eq__(list___getitem___0(password_1_0, i_1), list___getitem___0(inpt_1_0, i_1))
; [eval] list___getitem___0(password_1_0, i_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(declare-const $k@168@01 $Perm)
(assert ($Perm.isReadVar $k@168@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@169@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(declare-const letvar@170@01 Int)
(assert (=
  (as letvar@170@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 23
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | int___unbox__(_, i_1@101@01) < 0 | dead]
; [else-branch: 391 | !(int___unbox__(_, i_1@101@01) < 0) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 391 | !(int___unbox__(_, i_1@101@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit i_1@101@01) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit i_1@101@01) 0)))
(push) ; 23
; [then-branch: 392 | False | live]
; [else-branch: 392 | True | live]
(push) ; 24
; [then-branch: 392 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 392 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | int___unbox__(_, i_1@101@01) >= 0 | live]
; [else-branch: 393 | !(int___unbox__(_, i_1@101@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 393 | int___unbox__(_, i_1@101@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_1@101@01) 0))
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@168@01))
(assert ($Perm.isReadVar $k@169@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
  (=
    (as letvar@170@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
  (int___unbox__%precondition $Snap.unit i_1@101@01)
  (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (=>
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (<
      (int___unbox__ $Snap.unit i_1@101@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01)))
; [eval] list___getitem___0(inpt_1_0, i_1)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@171@01 $Perm)
(assert ($Perm.isReadVar $k@171@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@172@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(declare-const letvar@173@01 Int)
(assert (=
  (as letvar@173@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 394 | int___unbox__(_, i_1@101@01) < 0 | dead]
; [else-branch: 394 | !(int___unbox__(_, i_1@101@01) < 0) | live]
(push) ; 24
; [else-branch: 394 | !(int___unbox__(_, i_1@101@01) < 0)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 395 | False | live]
; [else-branch: 395 | True | live]
(push) ; 24
; [then-branch: 395 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 395 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_1@101@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 396 | int___unbox__(_, i_1@101@01) >= 0 | live]
; [else-branch: 396 | !(int___unbox__(_, i_1@101@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 396 | int___unbox__(_, i_1@101@01) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
  (<
    (int___unbox__ $Snap.unit i_1@101@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
      $Snap.unit))) inpt_3@27@01 i_1@101@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@171@01))
(assert ($Perm.isReadVar $k@172@01))
(assert (and
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
  (=
    (as letvar@173@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
  (=>
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (<
      (int___unbox__ $Snap.unit i_1@101@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))
(push) ; 22
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
      $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
      $Snap.unit))) inpt_3@27@01 i_1@101@01)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@168@01))
(assert ($Perm.isReadVar $k@169@01))
(assert ($Perm.isReadVar $k@171@01))
(assert ($Perm.isReadVar $k@172@01))
(assert (=>
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (and
    (bool___unbox__ $Snap.unit result_0_0@100@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (=
      (as letvar@170@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (not (< (int___unbox__ $Snap.unit i_1@101@01) 0))
    (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
    (=>
      (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
      (<
        (int___unbox__ $Snap.unit i_1@101@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (=
      (as letvar@173@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (=>
      (>= (int___unbox__ $Snap.unit i_1@101@01) 0)
      (<
        (int___unbox__ $Snap.unit i_1@101@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01)) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(assert (or
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (not (bool___unbox__ $Snap.unit result_0_0@100@01))))
(push) ; 20
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_0_0@100@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
        $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
        $Snap.unit))) inpt_3@27@01 i_1@101@01)))))
(declare-const result_0_0@174@01 $Ref)
(assert (=
  result_0_0@174@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit result_0_0@100@01)
    (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
          $Snap.unit))) password_3@25@01 i_1@101@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
          $Snap.unit))) inpt_3@27@01 i_1@101@01))))))
; [exec]
; inhale true
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_1 := __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_1), 1))
; [eval] int___add__(int___unbox__(i_1), 1)
; [eval] int___unbox__(i_1)
(set-option :timeout 0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1)))
(declare-const i_1@176@01 $Ref)
(assert (=
  i_1@176@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) 1))))
; [exec]
; inhale true
(declare-const $t@177@01 $Snap)
(assert (= $t@177@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_1 := false
; [exec]
; assert (p1_0 && !ret1 ==>
;   _loop_termination_flag ==>
;   !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)),
;   __prim__int___box__(list___len__(inpt_1))))) &&
;   (p2_0 && !ret2 ==>
;   _loop_termination_flag_1 ==>
;   !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)),
;   __prim__int___box__(list___len___0(inpt_1_0)))))
; [eval] p1_0 && !ret1 ==> _loop_termination_flag ==> !int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] p1_0 && !ret1
(set-option :timeout 0)
(push) ; 20
; [then-branch: 397 | !(p1_0@130@01) | live]
; [else-branch: 397 | p1_0@130@01 | live]
(push) ; 21
; [then-branch: 397 | !(p1_0@130@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 397 | p1_0@130@01]
(assert p1_0@130@01)
; [eval] !ret1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 398 | p1_0@130@01 | dead]
; [else-branch: 398 | !(p1_0@130@01) | live]
(push) ; 21
; [else-branch: 398 | !(p1_0@130@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_0 && !ret2 ==> _loop_termination_flag_1 ==> !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] p2_0 && !ret2
(push) ; 20
; [then-branch: 399 | !(p2_0@133@01) | live]
; [else-branch: 399 | p2_0@133@01 | live]
(push) ; 21
; [then-branch: 399 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 21
(push) ; 21
; [else-branch: 399 | p2_0@133@01]
; [eval] !ret2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_0@133@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | p2_0@133@01 | live]
; [else-branch: 400 | !(p2_0@133@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 400 | p2_0@133@01]
; [eval] _loop_termination_flag_1 ==> !int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
(push) ; 22
; [then-branch: 401 | False | dead]
; [else-branch: 401 | True | live]
(push) ; 23
; [else-branch: 401 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1 && !bypass1 ==> true
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 402 | !(p1@16@01) | live]
; [else-branch: 402 | p1@16@01 | live]
(push) ; 21
; [then-branch: 402 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 402 | p1@16@01]
(assert p1@16@01)
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 403 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 403 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> true
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 404 | !(p2@17@01) | live]
; [else-branch: 404 | p2@17@01 | live]
(push) ; 21
; [then-branch: 404 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 404 | p2@17@01]
(assert p2@17@01)
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 405 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 405 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> issubtype(typeof(result_0), bool())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 406 | !(p1@16@01) | live]
; [else-branch: 406 | p1@16@01 | live]
(push) ; 21
; [then-branch: 406 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 406 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 407 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 407 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(result_0), bool())
; [eval] typeof(result_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> issubtype(typeof(result_0_0), bool())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 408 | !(p2@17@01) | live]
; [else-branch: 408 | p2@17@01 | live]
(push) ; 21
; [then-branch: 408 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 408 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 409 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 409 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(result_0_0), bool())
; [eval] typeof(result_0_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 20
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@174@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> result_0_0@174@01) (as bool<PyType>  PyType))))
; [eval] p1 && !bypass1 ==> issubtype(typeof(i), int())
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 410 | !(p1@16@01) | live]
; [else-branch: 410 | p1@16@01 | live]
(push) ; 21
; [then-branch: 410 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 410 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 411 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 411 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> issubtype(typeof(i_1), int())
; [eval] p2 && !bypass2
(push) ; 20
; [then-branch: 412 | !(p2@17@01) | live]
; [else-branch: 412 | p2@17@01 | live]
(push) ; 21
; [then-branch: 412 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 412 | p2@17@01]
; [eval] !bypass2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 413 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 413 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] issubtype(typeof(i_1), int())
; [eval] typeof(i_1)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 20
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))))
; [eval] p1 && !bypass1
(push) ; 20
; [then-branch: 414 | !(p1@16@01) | live]
; [else-branch: 414 | p1@16@01 | live]
(push) ; 21
; [then-branch: 414 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 21
(push) ; 21
; [else-branch: 414 | p1@16@01]
; [eval] !bypass1
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 415 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 415 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 21
; [then-branch: 416 | !(p2@17@01) | live]
; [else-branch: 416 | p2@17@01 | live]
(push) ; 22
; [then-branch: 416 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 22
(push) ; 22
; [else-branch: 416 | p2@17@01]
; [eval] !bypass2
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 417 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 417 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1
(push) ; 22
; [then-branch: 418 | !(p1@16@01) | live]
; [else-branch: 418 | p1@16@01 | live]
(push) ; 23
; [then-branch: 418 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 23
(push) ; 23
; [else-branch: 418 | p1@16@01]
; [eval] !bypass1
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 419 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 419 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2
(push) ; 23
; [then-branch: 420 | !(p2@17@01) | live]
; [else-branch: 420 | p2@17@01 | live]
(push) ; 24
; [then-branch: 420 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 24
(push) ; 24
; [else-branch: 420 | p2@17@01]
; [eval] !bypass2
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 421 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 421 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 422 | !(p1@16@01) | live]
; [else-branch: 422 | p1@16@01 | live]
(push) ; 25
; [then-branch: 422 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 422 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 423 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 423 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i, 105)), 0)
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> int___ge__(int___unbox__(i_1), 0)
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 424 | !(p2@17@01) | live]
; [else-branch: 424 | p2@17@01 | live]
(push) ; 25
; [then-branch: 424 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 424 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 425 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 425 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___ge__(int___unbox__(i_1), 0)
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@176@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@176@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@176@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) 0))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) 0)))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 426 | !(p1@16@01) | live]
; [else-branch: 426 | p1@16@01 | live]
(push) ; 25
; [then-branch: 426 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 426 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 427 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 427 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(password_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] list___len__(password_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 428 | !(p2@17@01) | live]
; [else-branch: 428 | p2@17@01 | live]
(push) ; 25
; [then-branch: 428 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 428 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 429 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 429 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(password_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@176@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@176@01)))
; [eval] list___len___0(password_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@176@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))))
; [eval] p1 && !bypass1 ==> int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 430 | !(p1@16@01) | live]
; [else-branch: 430 | p1@16@01 | live]
(push) ; 25
; [then-branch: 430 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 430 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 431 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 431 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i, 105)), list___len__(inpt_1))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] list___len__(inpt_1)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 432 | !(p2@17@01) | live]
; [else-branch: 432 | p2@17@01 | live]
(push) ; 25
; [then-branch: 432 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 432 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 433 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 433 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] int___le__(int___unbox__(i_1), list___len___0(inpt_1_0))
; [eval] int___unbox__(i_1)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@176@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@176@01)))
; [eval] list___len___0(inpt_1_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@181@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@181@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@181@01))
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and
    p2@17@01
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@176@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@176@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(assert (and p2@17@01 (not bypass2@90@01)))
(push) ; 24
(assert (not (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_1@176@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
; [eval] p1 && !bypass1 ==> !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 434 | !(p1@16@01) | live]
; [else-branch: 434 | p1@16@01 | live]
(push) ; 25
; [then-branch: 434 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 434 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 435 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 435 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> _loop_check_before ==> _loop_termination_flag || (!int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | !(idle1@136@01) | dead]
; [else-branch: 436 | idle1@136@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 436 | idle1@136@01]
(assert idle1@136@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle1@136@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1@16@01 (not bypass1@89@01))
  (and p1@16@01 (not bypass1@89@01) idle1@136@01)))
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 437 | !(p2@17@01) | live]
; [else-branch: 437 | p2@17@01 | live]
(push) ; 25
; [then-branch: 437 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 437 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 438 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 438 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2@139@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | !(idle2@139@01) | live]
; [else-branch: 439 | idle2@139@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 439 | !(idle2@139@01)]
(assert (not idle2@139@01))
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))) || perm(MustTerminate_0(_cthread_156_0)) == none && ((forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))))
(push) ; 28
; [then-branch: 440 | False | dead]
; [else-branch: 440 | True | live]
(push) ; 29
; [else-branch: 440 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2@139@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2@17@01 (not bypass2@90@01))
  (and p2@17@01 (not bypass2@90@01) (not idle2@139@01))))
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] p1 && !bypass1 ==> !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] p1 && !bypass1
(push) ; 24
; [then-branch: 441 | !(p1@16@01) | live]
; [else-branch: 441 | p1@16@01 | live]
(push) ; 25
; [then-branch: 441 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 25
(push) ; 25
; [else-branch: 441 | p1@16@01]
; [eval] !bypass1
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1@16@01 (not bypass1@89@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1@16@01 (not bypass1@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | p1@16@01 && !(bypass1@89@01) | live]
; [else-branch: 442 | !(p1@16@01 && !(bypass1@89@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 442 | p1@16@01 && !(bypass1@89@01)]
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] !idle1 ==> !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !idle1
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1@136@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | !(idle1@136@01) | dead]
; [else-branch: 443 | idle1@136@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 443 | idle1@136@01]
(assert idle1@136@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle1@136@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1@16@01 (not bypass1@89@01)))
; [eval] p2 && !bypass2 ==> !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] p2 && !bypass2
(push) ; 24
; [then-branch: 444 | !(p2@17@01) | live]
; [else-branch: 444 | p2@17@01 | live]
(push) ; 25
; [then-branch: 444 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 25
(push) ; 25
; [else-branch: 444 | p2@17@01]
; [eval] !bypass2
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2@17@01 (not bypass2@90@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2@17@01 (not bypass2@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | p2@17@01 && !(bypass2@90@01) | live]
; [else-branch: 445 | !(p2@17@01 && !(bypass2@90@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 445 | p2@17@01 && !(bypass2@90@01)]
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] !idle2 ==> !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !idle2
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2@139@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2@139@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 446 | !(idle2@139@01) | live]
; [else-branch: 446 | idle2@139@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 446 | !(idle2@139@01)]
(assert (not idle2@139@01))
; [eval] !_loop_check_before_1 ==> (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_1
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | True | live]
; [else-branch: 447 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 447 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded_0(_r_0)] :: false)
(push) ; 30
; [then-branch: 448 | False | live]
; [else-branch: 448 | True | live]
(push) ; 31
; [then-branch: 448 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 448 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded_0(_r_0)] :: false)
(push) ; 32
; [then-branch: 449 | False | live]
; [else-branch: 449 | True | live]
(push) ; 33
; [then-branch: 449 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 449 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 450 | False | live]
; [else-branch: 450 | True | live]
(push) ; 35
; [then-branch: 450 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 450 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2@139@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2@17@01 (not bypass2@90@01)))
; [eval] bypass1 ==> tmp1 == _loop_measures
(push) ; 24
; [then-branch: 451 | bypass1@89@01 | dead]
; [else-branch: 451 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 451 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_0 == result_0
(push) ; 24
; [then-branch: 452 | bypass1@89@01 | dead]
; [else-branch: 452 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 452 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_1 == i
(push) ; 24
; [then-branch: 453 | bypass1@89@01 | dead]
; [else-branch: 453 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 453 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1 ==> tmp1_2 == _loop_check_before
(push) ; 24
; [then-branch: 454 | bypass1@89@01 | dead]
; [else-branch: 454 | !(bypass1@89@01) | live]
(push) ; 25
; [else-branch: 454 | !(bypass1@89@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2 == _loop_measures_1
(push) ; 24
; [then-branch: 455 | bypass2@90@01 | dead]
; [else-branch: 455 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 455 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_0 == result_0_0
(push) ; 24
; [then-branch: 456 | bypass2@90@01 | dead]
; [else-branch: 456 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 456 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_1 == i_1
(push) ; 24
; [then-branch: 457 | bypass2@90@01 | dead]
; [else-branch: 457 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 457 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2 ==> tmp2_2 == _loop_check_before_1
(push) ; 24
; [then-branch: 458 | bypass2@90@01 | dead]
; [else-branch: 458 | !(bypass2@90@01) | live]
(push) ; 25
; [else-branch: 458 | !(bypass2@90@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p2_0 && !ret2)
; [eval] p2_0 && !ret2
(push) ; 19
; [then-branch: 459 | !(p2_0@133@01) | live]
; [else-branch: 459 | p2_0@133@01 | live]
(push) ; 20
; [then-branch: 459 | !(p2_0@133@01)]
(assert (not p2_0@133@01))
(pop) ; 20
(push) ; 20
; [else-branch: 459 | p2_0@133@01]
(assert p2_0@133@01)
; [eval] !ret2
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_0@133@01))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 460 | !(p2_0@133@01) | dead]
; [else-branch: 460 | p2_0@133@01 | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 460 | p2_0@133@01]
(assert p2_0@133@01)
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 387 | p1_0@130@01]
(assert p1_0@130@01)
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 211 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01)))))]
(assert (not
  (or
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (and
      p2@17@01
      (and
        (not bypass2@90@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))))
(pop) ; 17
; [eval] !(p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))))) || p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
; [eval] p1 && (!ret1 && (!bypass1 && int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))))
(push) ; 17
; [then-branch: 461 | !(p1@16@01) | live]
; [else-branch: 461 | p1@16@01 | live]
(push) ; 18
; [then-branch: 461 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 18
(push) ; 18
; [else-branch: 461 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(push) ; 19
; [then-branch: 462 | False | live]
; [else-branch: 462 | True | live]
(push) ; 20
; [then-branch: 462 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 462 | True]
; [eval] !bypass1
(push) ; 21
; [then-branch: 463 | bypass1@89@01 | live]
; [else-branch: 463 | !(bypass1@89@01) | live]
(push) ; 22
; [then-branch: 463 | bypass1@89@01]
(assert bypass1@89@01)
(pop) ; 22
(push) ; 22
; [else-branch: 463 | !(bypass1@89@01)]
(assert (not bypass1@89@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i, 105)), min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1))))
; [eval] int___unbox__(_checkDefined(i, 105))
; [eval] _checkDefined(i, 105)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i@97@01 105))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))))
; [eval] min(__prim__int___box__(list___len__(password_1)), __prim__int___box__(list___len__(inpt_1)))
; [eval] __prim__int___box__(list___len__(password_1))
; [eval] list___len__(password_1)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@182@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)))
; [eval] __prim__int___box__(list___len__(inpt_1))
; [eval] list___len__(inpt_1)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@183@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 464 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])) | live]
; [else-branch: 464 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 464 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 464 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 465 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]) | live]
; [else-branch: 465 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 465 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 465 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 466 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 466 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 466 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 466 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 467 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 467 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (=>
  (not bypass1@89@01)
  (and
    (not bypass1@89@01)
    (_checkDefined%precondition $Snap.unit i@97@01 105)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(assert (or (not bypass1@89@01) bypass1@89@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (and
  (=>
    (not bypass1@89@01)
    (and
      (not bypass1@89@01)
      (_checkDefined%precondition $Snap.unit i@97@01 105)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i@97@01 105)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i@97@01 105))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (or (not bypass1@89@01) bypass1@89@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(push) ; 17
; [then-branch: 468 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) | live]
; [else-branch: 468 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))) | live]
(push) ; 18
; [then-branch: 468 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01))))]
(assert (and
  p1@16@01
  (and
    (not bypass1@89@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 468 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))))]
(assert (not
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))))
; [eval] p2 && (!ret2 && (!bypass2 && int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))))
(push) ; 19
; [then-branch: 469 | !(p2@17@01) | live]
; [else-branch: 469 | p2@17@01 | live]
(push) ; 20
; [then-branch: 469 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 20
(push) ; 20
; [else-branch: 469 | p2@17@01]
(assert p2@17@01)
; [eval] !ret2
(push) ; 21
; [then-branch: 470 | False | live]
; [else-branch: 470 | True | live]
(push) ; 22
; [then-branch: 470 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 470 | True]
; [eval] !bypass2
(push) ; 23
; [then-branch: 471 | bypass2@90@01 | live]
; [else-branch: 471 | !(bypass2@90@01) | live]
(push) ; 24
; [then-branch: 471 | bypass2@90@01]
(assert bypass2@90@01)
(pop) ; 24
(push) ; 24
; [else-branch: 471 | !(bypass2@90@01)]
(assert (not bypass2@90@01))
; [eval] int___lt__(int___unbox__(i_1), min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0))))
; [eval] int___unbox__(i_1)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_1@101@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_1@101@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_1_0)), __prim__int___box__(list___len___0(inpt_1_0)))
; [eval] __prim__int___box__(list___len___0(password_1_0))
; [eval] list___len___0(password_1_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)))
; [eval] __prim__int___box__(list___len___0(inpt_1_0))
; [eval] list___len___0(inpt_1_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@185@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))
(push) ; 25
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 26
; [then-branch: 472 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])) | live]
; [else-branch: 472 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) | live]
(push) ; 27
; [then-branch: 472 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 472 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType)))))
(push) ; 26
; [then-branch: 473 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]) | live]
; [else-branch: 473 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])) | live]
(push) ; 27
; [then-branch: 473 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 473 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 28
; [then-branch: 474 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 474 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | live]
(push) ; 29
; [then-branch: 474 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 29
(push) ; 29
; [else-branch: 474 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))))
(push) ; 26
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 475 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 475 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 475 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 25
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 25
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
(assert (=>
  (not bypass2@90@01)
  (and
    (not bypass2@90@01)
    (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_1@101@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))
(assert (or (not bypass2@90@01) bypass2@90@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
(assert (and
  (=>
    (not bypass2@90@01)
    (and
      (not bypass2@90@01)
      (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_1@101@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
  (or (not bypass2@90@01) bypass2@90@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
(assert (=>
  p2@17@01
  (and
    p2@17@01
    (=>
      (not bypass2@90@01)
      (and
        (not bypass2@90@01)
        (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_1@101@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
    (or (not bypass2@90@01) bypass2@90@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
(assert (=>
  (not
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
  (and
    (not
      (and
        p1@16@01
        (and
          (not bypass1@89@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01)))))))
    (=>
      p2@17@01
      (and
        p2@17@01
        (=>
          (not bypass2@90@01)
          (and
            (not bypass2@90@01)
            (issubtype<Bool> (typeof<PyType> i_1@101@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_1@101@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))
        (or (not bypass2@90@01) bypass2@90@01))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1@16@01
    (and
      (not bypass1@89@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
  (and
    p2@17@01
    (and
      (not bypass2@90@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (and
      p2@17@01
      (and
        (not bypass2@90@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01))))) | live]
; [else-branch: 476 | p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01)))) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 476 | !(p1@16@01 && !(bypass1@89@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i@97@01, 105)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))), password@24@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01)))))))))), inpt@26@01)))) || p2@17@01 && !(bypass2@90@01) && int___lt__(_, int___unbox__(_, i_1@101@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))), password_3@25@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@103@01))))))))))), inpt_3@27@01)))))]
(assert (not
  (or
    (and
      p1@16@01
      (and
        (not bypass1@89@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i@97@01 105)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))) password@24@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))) inpt@26@01))))))
    (and
      p2@17@01
      (and
        (not bypass2@90@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_1@101@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))) password_3@25@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))) inpt_3@27@01)))))))))
; [eval] p1 && !ret1
(push) ; 18
; [then-branch: 477 | !(p1@16@01) | live]
; [else-branch: 477 | p1@16@01 | live]
(push) ; 19
; [then-branch: 477 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 19
(push) ; 19
; [else-branch: 477 | p1@16@01]
(assert p1@16@01)
; [eval] !ret1
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1@16@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 478 | p1@16@01 | live]
; [else-branch: 478 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 478 | p1@16@01]
(assert p1@16@01)
; [exec]
; exhale perm(MustTerminate(_cthread_156)) > none ==>
;   acc(MustTerminate(_cthread_156), perm(MustTerminate(_cthread_156)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_156)) > none
; [eval] perm(MustTerminate(_cthread_156))
; [then-branch: 479 | False | dead]
; [else-branch: 479 | True | live]
(push) ; 19
; [else-branch: 479 | True]
; [exec]
; _res := null
; [exec]
; _res := _checkDefined(result_0, 3485632645783840114)
; [eval] _checkDefined(result_0, 3485632645783840114)
(push) ; 20
; [eval] _isDefined(id)
(push) ; 21
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_0@96@01 3485632645783840114))
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_0@96@01 3485632645783840114))
(declare-const _res@186@01 $Ref)
(assert (= _res@186@01 (_checkDefined $Snap.unit result_0@96@01 3485632645783840114)))
; [exec]
; ret1 := true
; [eval] p2 && !ret2
(push) ; 20
; [then-branch: 480 | !(p2@17@01) | live]
; [else-branch: 480 | p2@17@01 | live]
(push) ; 21
; [then-branch: 480 | !(p2@17@01)]
(assert (not p2@17@01))
(pop) ; 21
(push) ; 21
; [else-branch: 480 | p2@17@01]
(assert p2@17@01)
; [eval] !ret2
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2@17@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 481 | p2@17@01 | live]
; [else-branch: 481 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 481 | p2@17@01]
(assert p2@17@01)
; [exec]
; exhale perm(MustTerminate_0(_cthread_156_0)) > none ==>
;   acc(MustTerminate_0(_cthread_156_0), perm(MustTerminate_0(_cthread_156_0)) -
;   _loop_original_must_terminate_1)
; [eval] perm(MustTerminate_0(_cthread_156_0)) > none
; [eval] perm(MustTerminate_0(_cthread_156_0))
; [then-branch: 482 | False | dead]
; [else-branch: 482 | True | live]
(push) ; 21
; [else-branch: 482 | True]
; [exec]
; _res_0 := null
; [exec]
; _res_0 := result_0_0
; [exec]
; ret2 := true
; [exec]
; assert true
; [eval] p1 ==> true
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | p1@16@01 | live]
; [else-branch: 483 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 483 | p1@16@01]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; [eval] p2 ==> true
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 484 | p2@17@01 | live]
; [else-branch: 484 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 484 | p2@17@01]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; [eval] p1 ==> issubtype(typeof(_res), bool())
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not p1@16@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 485 | p1@16@01 | live]
; [else-branch: 485 | !(p1@16@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 485 | p1@16@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 23
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> _res@186@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1@16@01
  (issubtype<Bool> (typeof<PyType> _res@186@01) (as bool<PyType>  PyType))))
; [eval] p2 ==> issubtype(typeof(_res_0), bool())
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2@17@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 486 | p2@17@01 | live]
; [else-branch: 486 | !(p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 486 | p2@17@01]
; [eval] issubtype(typeof(_res_0), bool())
; [eval] typeof(_res_0)
; [eval] bool()
(pop) ; 23
(pop) ; 22
; Joined path conditions
(push) ; 22
(assert (not (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2@17@01
  (issubtype<Bool> (typeof<PyType> result_0_0@100@01) (as bool<PyType>  PyType))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(push) ; 22
; [then-branch: 487 | !(p1@16@01) | live]
; [else-branch: 487 | p1@16@01 | live]
(push) ; 23
; [then-branch: 487 | !(p1@16@01)]
(assert (not p1@16@01))
(pop) ; 23
(push) ; 23
; [else-branch: 487 | p1@16@01]
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 488 | p1@16@01 && p2@17@01 | live]
; [else-branch: 488 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 488 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [eval] _res == _res_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and p1@16@01 p2@17@01))
(push) ; 22
(assert (not (=> (and p1@16@01 p2@17@01) (= _res@186@01 result_0_0@100@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= password@24@01 inpt@26@01)) (not (= inpt@26@01 password@24@01)))
  (and
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 22
; [then-branch: 489 | !(p1@16@01) | live]
; [else-branch: 489 | p1@16@01 | live]
(push) ; 23
; [then-branch: 489 | !(p1@16@01)]
(assert (not p1@16@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(assert false)
(pop) ; 23
(set-option :timeout 0)
(push) ; 23
; [else-branch: 489 | p1@16@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= inpt@26@01 password@24@01)) (not (= password@24@01 inpt@26@01)))
  (and
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=> (not p1@16@01) false))
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (not (= inpt@26@01 password@24@01))
    (not (= password@24@01 inpt@26@01))
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 490 | p1@16@01 && p2@17@01 | live]
; [else-branch: 490 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 490 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= inpt@26@01 password@24@01)) (not (= password@24@01 inpt@26@01)))
  (and
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
; [eval] _res == _res_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=>
  (and p1@16@01 p2@17@01)
  (and
    p1@16@01
    p2@17@01
    (not (= inpt@26@01 password@24@01))
    (not (= password@24@01 inpt@26@01))
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
(assert (and p1@16@01 p2@17@01))
(set-option :timeout 0)
(push) ; 22
(assert (not (=> (and p1@16@01 p2@17@01) (= _res@186@01 result_0_0@100@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= password@24@01 inpt@26@01)) (not (= inpt@26@01 password@24@01)))
  (and
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 22
; [then-branch: 491 | !(p1@16@01) | live]
; [else-branch: 491 | p1@16@01 | live]
(push) ; 23
; [then-branch: 491 | !(p1@16@01)]
(assert (not p1@16@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
(assert false)
(pop) ; 23
(set-option :timeout 0)
(push) ; 23
; [else-branch: 491 | p1@16@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= password@24@01 inpt@26@01)) (not (= inpt@26@01 password@24@01)))
  (and
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (=>
  p1@16@01
  (and
    (not (= password@24@01 inpt@26@01))
    (not (= inpt@26@01 password@24@01))
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | p1@16@01 && p2@17@01 | live]
; [else-branch: 492 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 492 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= password@24@01 inpt@26@01)) (not (= inpt@26@01 password@24@01)))
  (and
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
; [eval] _res == _res_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=>
  (and p1@16@01 p2@17@01)
  (and
    p1@16@01
    p2@17@01
    (not (= password@24@01 inpt@26@01))
    (not (= inpt@26@01 password@24@01))
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
(assert (and p1@16@01 p2@17@01))
(set-option :timeout 0)
(push) ; 22
(assert (not (=> (and p1@16@01 p2@17@01) (= _res@186@01 result_0_0@100@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt_3@27@01 password_3@25@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= inpt@26@01 password@24@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= password@24@01 inpt@26@01)) (not (= inpt@26@01 password@24@01)))
  (and
    (not (= password_3@25@01 inpt_3@27@01))
    (not (= inpt_3@27@01 password_3@25@01)))))
; [eval] p1 && p2 ==> _res == _res_0
; [eval] p1 && p2
(set-option :timeout 0)
(push) ; 22
; [then-branch: 493 | !(p1@16@01) | live]
; [else-branch: 493 | p1@16@01 | live]
(push) ; 23
; [then-branch: 493 | !(p1@16@01)]
(assert (not p1@16@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(assert false)
(pop) ; 23
(set-option :timeout 0)
(push) ; 23
; [else-branch: 493 | p1@16@01]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= inpt@26@01 password@24@01)) (not (= password@24@01 inpt@26@01)))
  (and
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p1@16@01 p2@17@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p1@16@01 p2@17@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 494 | p1@16@01 && p2@17@01 | live]
; [else-branch: 494 | !(p1@16@01 && p2@17@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 494 | p1@16@01 && p2@17@01]
(assert (and p1@16@01 p2@17@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password@24@01 inpt@26@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (= password_3@25@01 inpt_3@27@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and (not (= inpt@26@01 password@24@01)) (not (= password@24@01 inpt@26@01)))
  (and
    (not (= inpt_3@27@01 password_3@25@01))
    (not (= password_3@25@01 inpt_3@27@01)))))
; [eval] _res == _res_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and p1@16@01 p2@17@01))
(set-option :timeout 0)
(push) ; 22
(assert (not (=> (and p1@16@01 p2@17@01) (= _res@186@01 result_0_0@100@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- check_fixed ----------
(declare-const p1_1@187@01 Bool)
(declare-const p2_1@188@01 Bool)
(declare-const _cthread_157@189@01 $Ref)
(declare-const _cthread_157_0@190@01 $Ref)
(declare-const _caller_measures_157@191@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@192@01 Seq<Measure$>)
(declare-const _residue_157@193@01 $Perm)
(declare-const _residue_157_0@194@01 $Perm)
(declare-const password_0@195@01 $Ref)
(declare-const password_0_0@196@01 $Ref)
(declare-const inpt_0@197@01 $Ref)
(declare-const inpt_0_0@198@01 $Ref)
(declare-const _current_wait_level_157@199@01 $Perm)
(declare-const _current_wait_level_157_0@200@01 $Perm)
(declare-const _res@201@01 $Ref)
(declare-const _res_1@202@01 $Ref)
(declare-const p1_1@203@01 Bool)
(declare-const p2_1@204@01 Bool)
(declare-const _cthread_157@205@01 $Ref)
(declare-const _cthread_157_0@206@01 $Ref)
(declare-const _caller_measures_157@207@01 Seq<Measure$>)
(declare-const _caller_measures_157_0@208@01 Seq<Measure$>)
(declare-const _residue_157@209@01 $Perm)
(declare-const _residue_157_0@210@01 $Perm)
(declare-const password_0@211@01 $Ref)
(declare-const password_0_0@212@01 $Ref)
(declare-const inpt_0@213@01 $Ref)
(declare-const inpt_0_0@214@01 $Ref)
(declare-const _current_wait_level_157@215@01 $Perm)
(declare-const _current_wait_level_157_0@216@01 $Perm)
(declare-const _res@217@01 $Ref)
(declare-const _res_1@218@01 $Ref)
(push) ; 1
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] p1_1 ==> _cthread_157 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | p1_1@203@01 | live]
; [else-branch: 495 | !(p1_1@203@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 495 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] _cthread_157 != null
(pop) ; 3
(push) ; 3
; [else-branch: 495 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_1@203@01) p1_1@203@01))
(assert (=> p1_1@203@01 (not (= _cthread_157@205@01 $Ref.null))))
(assert (=
  ($Snap.second $t@219@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@219@01))
    ($Snap.second ($Snap.second $t@219@01)))))
(assert (= ($Snap.first ($Snap.second $t@219@01)) $Snap.unit))
; [eval] p2_1 ==> _cthread_157_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | p2_1@204@01 | live]
; [else-branch: 496 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 496 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] _cthread_157_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 496 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_1@204@01) p2_1@204@01))
(assert (=> p2_1@204@01 (not (= _cthread_157_0@206@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@219@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@219@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@219@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_cthread_157), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 497 | p1_1@203@01 | live]
; [else-branch: 497 | !(p1_1@203@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 497 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 497 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _cthread_157@205@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@219@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_cthread_157_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | p2_1@204@01 | live]
; [else-branch: 498 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 498 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] issubtype(typeof(_cthread_157_0), Thread_0())
; [eval] typeof(_cthread_157_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 498 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> _cthread_157_0@206@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(password_0), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | p1_1@203@01 | live]
; [else-branch: 499 | !(p1_1@203@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 499 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] issubtype(typeof(password_0), list(str()))
; [eval] typeof(password_0)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 499 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(password_0_0), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | p2_1@204@01 | live]
; [else-branch: 500 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 500 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] issubtype(typeof(password_0_0), list(str()))
; [eval] typeof(password_0_0)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 500 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> password_0_0@212@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(inpt_0), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | p1_1@203@01 | live]
; [else-branch: 501 | !(p1_1@203@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 501 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] issubtype(typeof(inpt_0), list(str()))
; [eval] typeof(inpt_0)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 501 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(inpt_0_0), list(str()))
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 502 | p2_1@204@01 | live]
; [else-branch: 502 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 502 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] issubtype(typeof(inpt_0_0), list(str()))
; [eval] typeof(inpt_0_0)
; [eval] list(str())
; [eval] str()
(pop) ; 3
(push) ; 3
; [else-branch: 502 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> inpt_0_0@214@01) (list<PyType> (as str<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 503 | p1_1@203@01 | live]
; [else-branch: 503 | !(p1_1@203@01) | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 503 | p1_1@203@01]
(assert p1_1@203@01)
(assert (not (= password_0@211@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | p2_1@204@01 | live]
; [else-branch: 504 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 504 | p2_1@204@01]
(assert p2_1@204@01)
(assert (not (= password_0_0@212@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 505 | p1_1@203@01 | live]
; [else-branch: 505 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 505 | p1_1@203@01]
(push) ; 5
(set-option :timeout 10)
(assert (not (= password_0@211@01 inpt_0@213@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt_0@213@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | p2_1@204@01 | live]
; [else-branch: 506 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 506 | p2_1@204@01]
(push) ; 6
(set-option :timeout 10)
(assert (not (= password_0_0@212@01 inpt_0_0@214@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt_0_0@214@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> inpt_0 == inpt_0_0
; [eval] p1_1 && p2_1
(set-option :timeout 0)
(push) ; 6
; [then-branch: 507 | !(p1_1@203@01) | live]
; [else-branch: 507 | p1_1@203@01 | live]
(push) ; 7
; [then-branch: 507 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 7
(push) ; 7
; [else-branch: 507 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p1_1@203@01 (not p1_1@203@01)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and p1_1@203@01 p2_1@204@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 508 | p1_1@203@01 && p2_1@204@01 | live]
; [else-branch: 508 | !(p1_1@203@01 && p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 508 | p1_1@203@01 && p2_1@204@01]
(assert (and p1_1@203@01 p2_1@204@01))
; [eval] inpt_0 == inpt_0_0
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and p1_1@203@01 p2_1@204@01))
(assert (=> (and p1_1@203@01 p2_1@204@01) (= inpt_0@213@01 inpt_0_0@214@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 509 | p1_1@203@01 | live]
; [else-branch: 509 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 509 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | p2_1@204@01 | live]
; [else-branch: 510 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 510 | p2_1@204@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] p1_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 511 | p1_1@203@01 | live]
; [else-branch: 511 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 511 | p1_1@203@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 512 | False | live]
; [else-branch: 512 | True | live]
(push) ; 10
; [then-branch: 512 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 512 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157)
(push) ; 11
; [then-branch: 513 | False | live]
; [else-branch: 513 | True | live]
(push) ; 12
; [then-branch: 513 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 513 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p1_1@203@01 (<= _residue_157@209@01 _current_wait_level_157@215@01)))
(assert (=
  ($Snap.second $t@220@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@220@01))
    ($Snap.second ($Snap.second $t@220@01)))))
(assert (= ($Snap.first ($Snap.second $t@220@01)) $Snap.unit))
; [eval] p2_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | p2_1@204@01 | live]
; [else-branch: 514 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 514 | p2_1@204@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0)
(push) ; 9
; [then-branch: 515 | False | live]
; [else-branch: 515 | True | live]
(push) ; 10
; [then-branch: 515 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 515 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0)
(push) ; 11
; [then-branch: 516 | False | live]
; [else-branch: 516 | True | live]
(push) ; 12
; [then-branch: 516 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 516 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p2_1@204@01 (<= _residue_157_0@210@01 _current_wait_level_157_0@216@01)))
(assert (=
  ($Snap.second ($Snap.second $t@220@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@220@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@220@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@220@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | p1_1@203@01 | live]
; [else-branch: 517 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 517 | p1_1@203@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@217@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@220@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@220@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@220@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | p2_1@204@01 | live]
; [else-branch: 518 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 518 | p2_1@204@01]
; [eval] issubtype(typeof(_res_1), bool())
; [eval] typeof(_res_1)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> _res_1@218@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01)))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 519 | !(p1_1@203@01) | live]
; [else-branch: 519 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 519 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 519 | p1_1@203@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and p1_1@203@01 p2_1@204@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | p1_1@203@01 && p2_1@204@01 | live]
; [else-branch: 520 | !(p1_1@203@01 && p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 520 | p1_1@203@01 && p2_1@204@01]
(assert (and p1_1@203@01 p2_1@204@01))
; [eval] _res == _res_1
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (and p1_1@203@01 p2_1@204@01))
(assert (=> (and p1_1@203@01 p2_1@204@01) (= _res@217@01 _res_1@218@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | p1_1@203@01 | live]
; [else-branch: 521 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 521 | p1_1@203@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@220@01))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | p2_1@204@01 | live]
; [else-branch: 522 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 522 | p2_1@204@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@221@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@222@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@223@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@224@01 $Ref)
; [exec]
; var result_1: Ref
(declare-const result_1@225@01 $Ref)
; [exec]
; var result_1_0: Ref
(declare-const result_1_0@226@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@227@01 $Ref)
; [exec]
; var i_0_0: Ref
(declare-const i_0_0@228@01 $Ref)
; [exec]
; var password_2: Ref
(declare-const password_2@229@01 $Ref)
; [exec]
; var password_2_0: Ref
(declare-const password_2_0@230@01 $Ref)
; [exec]
; var inpt_2: Ref
(declare-const inpt_2@231@01 $Ref)
; [exec]
; var inpt_2_0: Ref
(declare-const inpt_2_0@232@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@233@01 Seq<Measure$>)
; [exec]
; var _loop_measures_0_0: Seq[Measure$]
(declare-const _loop_measures_0_0@234@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@235@01 Bool)
; [exec]
; var _loop_check_before_0_0: Bool
(declare-const _loop_check_before_0_0@236@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@237@01 Bool)
; [exec]
; var _loop_termination_flag_0_0: Bool
(declare-const _loop_termination_flag_0_0@238@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@239@01 $Perm)
; [exec]
; var _loop_original_must_terminate_0_0: Perm
(declare-const _loop_original_must_terminate_0_0@240@01 $Perm)
; [exec]
; var _residue_159: Perm
(declare-const _residue_159@241@01 $Perm)
; [exec]
; var _residue_159_0: Perm
(declare-const _residue_159_0@242@01 $Perm)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@243@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@244@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@245@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@246@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@247@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@248@01 Bool)
; [exec]
; var tmp1_3: Seq[Measure$]
(declare-const tmp1_3@249@01 Seq<Measure$>)
; [exec]
; var tmp2_3: Seq[Measure$]
(declare-const tmp2_3@250@01 Seq<Measure$>)
; [exec]
; var tmp1_4: Ref
(declare-const tmp1_4@251@01 $Ref)
; [exec]
; var tmp2_4: Ref
(declare-const tmp2_4@252@01 $Ref)
; [exec]
; var tmp1_5: Ref
(declare-const tmp1_5@253@01 $Ref)
; [exec]
; var tmp2_5: Ref
(declare-const tmp2_5@254@01 $Ref)
; [exec]
; var tmp1_6: Bool
(declare-const tmp1_6@255@01 Bool)
; [exec]
; var tmp2_6: Bool
(declare-const tmp2_6@256@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@257@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@258@01 Bool)
; [exec]
; var idle1_0: Bool
(declare-const idle1_0@259@01 Bool)
; [exec]
; var idle2_0: Bool
(declare-const idle2_0@260@01 Bool)
; [exec]
; inhale p1_1
(declare-const $t@261@01 $Snap)
(assert (= $t@261@01 $Snap.unit))
(assert p1_1@203@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 7
; [then-branch: 523 | !(p1_1@203@01) | live]
; [else-branch: 523 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 523 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 523 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 524 | p1_1@203@01 | live]
; [else-branch: 524 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 524 | p1_1@203@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; password_2 := password_0
; [exec]
; inpt_2 := inpt_0
; [exec]
; result_1 := __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))
; [eval] __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___eq__(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0))))
(declare-const $k@262@01 $Perm)
(assert ($Perm.isReadVar $k@262@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@262@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@262@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0))))
(declare-const $k@263@01 $Perm)
(assert ($Perm.isReadVar $k@263@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@263@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@263@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(declare-const result_1@264@01 $Ref)
(assert (=
  result_1@264@01
  (__prim__bool___box__ $Snap.unit (int___eq__ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
; [exec]
; inhale _isDefined(3557690239821768050)
(declare-const $t@265@01 $Snap)
(assert (= $t@265@01 $Snap.unit))
; [eval] _isDefined(3557690239821768050)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3557690239821768050))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3557690239821768050))
(assert (_isDefined $Snap.unit 3557690239821768050))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_0@266@01 $Ref)
(assert (= i_0@266@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@267@01 $Snap)
(assert (= $t@267@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3170153))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170153))
(assert (_isDefined $Snap.unit 3170153))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_157))
; [eval] perm(MustTerminate(_cthread_157))
(declare-const _loop_original_must_terminate_0@268@01 $Perm)
(assert (= _loop_original_must_terminate_0@268@01 $Perm.No))
; [exec]
; _loop_termination_flag_0 := false
; [exec]
; _loop_check_before_0 := true
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 8
; [then-branch: 525 | !(p2_1@204@01) | live]
; [else-branch: 525 | p2_1@204@01 | live]
(push) ; 9
; [then-branch: 525 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 9
(push) ; 9
; [else-branch: 525 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_1@204@01 (not p2_1@204@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | p2_1@204@01 | live]
; [else-branch: 526 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 526 | p2_1@204@01]
(assert p2_1@204@01)
; [exec]
; _method_measures_157_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res_1 := null
; [exec]
; _err_1 := null
; [exec]
; password_2_0 := password_0_0
; [exec]
; inpt_2_0 := inpt_0_0
; [exec]
; result_1_0 := __prim__bool___box__(int___eq__(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] __prim__bool___box__(int___eq__(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___eq__(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> password_0_0@212@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0_0@212@01) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_0_0@212@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0_0@212@01) 0))))
(declare-const $k@269@01 $Perm)
(assert ($Perm.isReadVar $k@269@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@269@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@269@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> password_0_0@212@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0_0@212@01) 0)))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))
(set-option :timeout 0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 9
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> inpt_0_0@214@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0_0@214@01) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> inpt_0_0@214@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0_0@214@01) 0))))
(declare-const $k@270@01 $Perm)
(assert ($Perm.isReadVar $k@270@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@270@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@270@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> inpt_0_0@214@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0_0@214@01) 0)))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))
(set-option :timeout 0)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(push) ; 9
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(pop) ; 9
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(declare-const result_1_0@271@01 $Ref)
(assert (=
  result_1_0@271@01
  (__prim__bool___box__ $Snap.unit (int___eq__ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))
; [exec]
; inhale true
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(declare-const i_0_0@273@01 $Ref)
(assert (= i_0_0@273@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale true
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_0_0 := perm(MustTerminate_0(_cthread_157_0))
; [eval] perm(MustTerminate_0(_cthread_157_0))
(declare-const _loop_original_must_terminate_0_0@275@01 $Perm)
(assert (= _loop_original_must_terminate_0_0@275@01 $Perm.No))
; [exec]
; _loop_termination_flag_0_0 := false
; [exec]
; _loop_check_before_0_0 := true
; [exec]
; bypass1_0 := !(p1_1 && !ret1_0)
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 9
; [then-branch: 527 | !(p1_1@203@01) | live]
; [else-branch: 527 | p1_1@203@01 | live]
(push) ; 10
; [then-branch: 527 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 10
(push) ; 10
; [else-branch: 527 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass1_0@276@01 Bool)
(assert (= bypass1_0@276@01 (not p1_1@203@01)))
; [exec]
; bypass2_0 := !(p2_1 && !ret2_0)
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 9
; [then-branch: 528 | !(p2_1@204@01) | live]
; [else-branch: 528 | p2_1@204@01 | live]
(push) ; 10
; [then-branch: 528 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 10
(push) ; 10
; [else-branch: 528 | p2_1@204@01]
; [eval] !ret2_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass2_0@277@01 Bool)
(assert (= bypass2_0@277@01 (not p2_1@204@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1_0@276@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | bypass1_0@276@01 | dead]
; [else-branch: 529 | !(bypass1_0@276@01) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 529 | !(bypass1_0@276@01)]
(assert (not bypass1_0@276@01))
(pop) ; 9
; [eval] !bypass1_0
(push) ; 9
(set-option :timeout 10)
(assert (not bypass1_0@276@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1_0@276@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | !(bypass1_0@276@01) | live]
; [else-branch: 530 | bypass1_0@276@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 530 | !(bypass1_0@276@01)]
(assert (not bypass1_0@276@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not bypass2_0@277@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 531 | bypass2_0@277@01 | dead]
; [else-branch: 531 | !(bypass2_0@277@01) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 531 | !(bypass2_0@277@01)]
(assert (not bypass2_0@277@01))
(pop) ; 10
; [eval] !bypass2_0
(push) ; 10
(set-option :timeout 10)
(assert (not bypass2_0@277@01))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not bypass2_0@277@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 532 | !(bypass2_0@277@01) | live]
; [else-branch: 532 | bypass2_0@277@01 | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 532 | !(bypass2_0@277@01)]
(assert (not bypass2_0@277@01))
; [exec]
; idle1_0 := false
; [exec]
; idle2_0 := false
(declare-const p1_2@278@01 Bool)
(declare-const p2_2@279@01 Bool)
(declare-const idle1_0@280@01 Bool)
(declare-const idle2_0@281@01 Bool)
(declare-const _loop_measures_0@282@01 Seq<Measure$>)
(declare-const result_1@283@01 $Ref)
(declare-const i_0@284@01 $Ref)
(declare-const _loop_check_before_0@285@01 Bool)
(declare-const _loop_measures_0_0@286@01 Seq<Measure$>)
(declare-const result_1_0@287@01 $Ref)
(declare-const i_0_0@288@01 $Ref)
(declare-const _loop_check_before_0_0@289@01 Bool)
(push) ; 11
; Loop head block: Check well-definedness of invariant
(declare-const $t@290@01 $Snap)
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159) && _residue_157 <= _residue_159)
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 533 | !(p1_1@203@01) | live]
; [else-branch: 533 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 533 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 533 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 534 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 534 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159) && _residue_157 <= _residue_159)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159)
(push) ; 14
; [then-branch: 535 | False | live]
; [else-branch: 535 | True | live]
(push) ; 15
; [then-branch: 535 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 535 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159)
(push) ; 16
; [then-branch: 536 | False | live]
; [else-branch: 536 | True | live]
(push) ; 17
; [then-branch: 536 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 536 | True]
; [eval] _residue_157 <= _residue_159
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (<= _residue_157@209@01 _residue_159@241@01)))
(assert (=
  ($Snap.second $t@290@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@290@01))
    ($Snap.second ($Snap.second $t@290@01)))))
(assert (= ($Snap.first ($Snap.second $t@290@01)) $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_159_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_159_0) && _residue_157_0 <= _residue_159_0)
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 537 | !(p2_1@204@01) | live]
; [else-branch: 537 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 537 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 537 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 538 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 538 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 538 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_159_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_159_0) && _residue_157_0 <= _residue_159_0)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_159_0)
(push) ; 14
; [then-branch: 539 | False | live]
; [else-branch: 539 | True | live]
(push) ; 15
; [then-branch: 539 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 539 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_159_0)
(push) ; 16
; [then-branch: 540 | False | live]
; [else-branch: 540 | True | live]
(push) ; 17
; [then-branch: 540 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 540 | True]
; [eval] _residue_157_0 <= _residue_159_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (<= _residue_157_0@210@01 _residue_159_0@242@01)))
(assert (=
  ($Snap.second ($Snap.second $t@290@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@290@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@290@01))) $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 541 | !(p1_1@203@01) | live]
; [else-branch: 541 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 541 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 541 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 542 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 542 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@283@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@290@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 543 | !(p2_1@204@01) | live]
; [else-branch: 543 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 543 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 543 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 544 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 544 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 544 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(result_1_0), bool())
; [eval] typeof(result_1_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 545 | !(p1_1@203@01) | live]
; [else-branch: 545 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 545 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 545 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 546 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 546 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@284@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 547 | !(p2_1@204@01) | live]
; [else-branch: 547 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 547 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 547 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 548 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 548 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 549 | !(p1_1@203@01) | live]
; [else-branch: 549 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 549 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 549 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 550 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 550 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 550 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
; [eval] p2_1 && !bypass2_0
(push) ; 13
; [then-branch: 551 | !(p2_1@204@01) | live]
; [else-branch: 551 | p2_1@204@01 | live]
(push) ; 14
; [then-branch: 551 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 14
(push) ; 14
; [else-branch: 551 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 552 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 552 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
; [eval] p1_1 && !bypass1_0
(push) ; 14
; [then-branch: 553 | !(p1_1@203@01) | live]
; [else-branch: 553 | p1_1@203@01 | live]
(push) ; 15
; [then-branch: 553 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 15
(push) ; 15
; [else-branch: 553 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 554 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 554 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 554 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (= password_0@211@01 inpt_0@213@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
; [eval] p2_1 && !bypass2_0
(set-option :timeout 0)
(push) ; 15
; [then-branch: 555 | !(p2_1@204@01) | live]
; [else-branch: 555 | p2_1@204@01 | live]
(push) ; 16
; [then-branch: 555 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 16
(push) ; 16
; [else-branch: 555 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 556 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 556 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 556 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (= password_0_0@212@01 inpt_0_0@214@01)))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(set-option :timeout 0)
(push) ; 16
; [then-branch: 557 | !(p1_1@203@01) | live]
; [else-branch: 557 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 557 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 557 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 558 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 558 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 558 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 559 | !(p2_1@204@01) | live]
; [else-branch: 559 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 559 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 559 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 560 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 560 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 560 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___ge__(int___unbox__(i_0_0), 0)
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 561 | !(p1_1@203@01) | live]
; [else-branch: 561 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 561 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 561 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 562 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 562 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 562 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@291@01 $Perm)
(assert ($Perm.isReadVar $k@291@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@291@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@291@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@291@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 563 | !(p2_1@204@01) | live]
; [else-branch: 563 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 563 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 563 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 564 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 564 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] list___len___0(password_2_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@292@01 $Perm)
(assert ($Perm.isReadVar $k@292@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@292@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@292@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 565 | !(p1_1@203@01) | live]
; [else-branch: 565 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 565 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 565 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 566 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 566 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 566 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@293@01 $Perm)
(assert ($Perm.isReadVar $k@293@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@293@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@293@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 567 | !(p2_1@204@01) | live]
; [else-branch: 567 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 567 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 567 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 568 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 568 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 568 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] list___len___0(inpt_2_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@294@01 $Perm)
(assert ($Perm.isReadVar $k@294@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@294@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@294@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@294@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 569 | !(p1_1@203@01) | live]
; [else-branch: 569 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 569 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 569 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 570 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 570 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 570 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 571 | !(p2_1@204@01) | live]
; [else-branch: 571 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 571 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 571 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 572 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 572 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 573 | !(p1_1@203@01) | live]
; [else-branch: 573 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 573 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 573 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 574 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 574 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 575 | !(p2_1@204@01) | live]
; [else-branch: 575 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 575 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 575 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 576 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 576 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 576 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 16
; [then-branch: 577 | bypass1_0@276@01 | dead]
; [else-branch: 577 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 577 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 16
; [then-branch: 578 | bypass1_0@276@01 | dead]
; [else-branch: 578 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 578 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 16
; [then-branch: 579 | bypass1_0@276@01 | dead]
; [else-branch: 579 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 579 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 16
; [then-branch: 580 | bypass1_0@276@01 | dead]
; [else-branch: 580 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 580 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 16
; [then-branch: 581 | bypass2_0@277@01 | dead]
; [else-branch: 581 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 581 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 16
; [then-branch: 582 | bypass2_0@277@01 | dead]
; [else-branch: 582 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 582 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 16
; [then-branch: 583 | bypass2_0@277@01 | dead]
; [else-branch: 583 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 583 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 16
; [then-branch: 584 | bypass2_0@277@01 | dead]
; [else-branch: 584 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 584 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; Loop head block: Establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 585 | !(p1_1@203@01) | live]
; [else-branch: 585 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 585 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 585 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 586 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 586 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 587 | !(p2_1@204@01) | live]
; [else-branch: 587 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 587 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 587 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 588 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 588 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 589 | !(p1_1@203@01) | live]
; [else-branch: 589 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 589 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 589 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 590 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 590 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 590 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 12
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@264@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@264@01) (as bool<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 591 | !(p2_1@204@01) | live]
; [else-branch: 591 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 591 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 591 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 592 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 592 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(result_1_0), bool())
; [eval] typeof(result_1_0)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 12
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@271@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@271@01) (as bool<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 593 | !(p1_1@203@01) | live]
; [else-branch: 593 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 593 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 593 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 594 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 594 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 594 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 12
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@266@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@266@01) (as int<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 595 | !(p2_1@204@01) | live]
; [else-branch: 595 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 595 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 13
(push) ; 13
; [else-branch: 595 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 596 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 596 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 596 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 12
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 597 | !(p1_1@203@01) | live]
; [else-branch: 597 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 597 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 597 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 598 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 598 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 598 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 13
; [then-branch: 599 | !(p2_1@204@01) | live]
; [else-branch: 599 | p2_1@204@01 | live]
(push) ; 14
; [then-branch: 599 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 14
(push) ; 14
; [else-branch: 599 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 600 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 600 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 600 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0
(push) ; 14
; [then-branch: 601 | !(p1_1@203@01) | live]
; [else-branch: 601 | p1_1@203@01 | live]
(push) ; 15
; [then-branch: 601 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 15
(push) ; 15
; [else-branch: 601 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 602 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 602 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 602 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 15
; [then-branch: 603 | !(p2_1@204@01) | live]
; [else-branch: 603 | p2_1@204@01 | live]
(push) ; 16
; [then-branch: 603 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 16
(push) ; 16
; [else-branch: 603 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 604 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 604 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 605 | !(p1_1@203@01) | live]
; [else-branch: 605 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 605 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 605 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 606 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 606 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) 0)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 607 | !(p2_1@204@01) | live]
; [else-branch: 607 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 607 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 607 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 608 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 608 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 608 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___ge__(int___unbox__(i_0_0), 0)
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@273@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@273@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) 0))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 16
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) 0)))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 609 | !(p1_1@203@01) | live]
; [else-branch: 609 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 609 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 609 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 610 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 610 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@295@01 $Perm)
(assert ($Perm.isReadVar $k@295@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@295@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@295@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@295@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 611 | !(p2_1@204@01) | live]
; [else-branch: 611 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 611 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 611 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 612 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 612 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 612 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@273@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)))
; [eval] list___len___0(password_2_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@296@01 $Perm)
(assert ($Perm.isReadVar $k@296@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@296@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@296@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@296@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@273@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 16
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 613 | !(p1_1@203@01) | live]
; [else-branch: 613 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 613 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 613 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 614 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 614 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@297@01 $Perm)
(assert ($Perm.isReadVar $k@297@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@297@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@297@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@297@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 615 | !(p2_1@204@01) | live]
; [else-branch: 615 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 615 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 615 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 616 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 616 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@273@01))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)))
; [eval] list___len___0(inpt_2_0)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@298@01 $Perm)
(assert ($Perm.isReadVar $k@298@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@298@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@298@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@298@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@273@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 16
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 617 | !(p1_1@203@01) | live]
; [else-branch: 617 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 617 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 617 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 618 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 618 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 618 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 619 | True | live]
; [else-branch: 619 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 619 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 620 | True | live]
; [else-branch: 620 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 620 | True]
; [eval] _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 22
; [then-branch: 621 | False | live]
; [else-branch: 621 | True | live]
(push) ; 23
; [then-branch: 621 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 621 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@266@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@299@01 $Perm)
(assert ($Perm.isReadVar $k@299@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@299@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@300@01 $Perm)
(assert ($Perm.isReadVar $k@300@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@300@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@300@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 622 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 622 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 622 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 622 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType])]
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 623 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 623 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 623 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 623 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 624 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 624 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 624 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 624 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 625 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 625 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 625 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(push) ; 24
; [then-branch: 626 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@266@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))))) | live]
; [else-branch: 626 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@266@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01)))) | live]
(push) ; 25
; [then-branch: 626 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@266@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01)))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
(pop) ; 25
(push) ; 25
; [else-branch: 626 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@266@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 26
; [then-branch: 627 | False | live]
; [else-branch: 627 | True | live]
(push) ; 27
; [then-branch: 627 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 627 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 28
; [then-branch: 628 | False | live]
; [else-branch: 628 | True | live]
(push) ; 29
; [then-branch: 628 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 628 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 30
; [then-branch: 629 | False | live]
; [else-branch: 629 | True | live]
(push) ; 31
; [then-branch: 629 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 629 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 32
; [then-branch: 630 | False | live]
; [else-branch: 630 | True | live]
(push) ; 33
; [then-branch: 630 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 630 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(assert ($Perm.isReadVar $k@300@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(assert ($Perm.isReadVar $k@300@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(assert ($Perm.isReadVar $k@300@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(assert ($Perm.isReadVar $k@300@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@266@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@266@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@266@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 631 | !(p2_1@204@01) | live]
; [else-branch: 631 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 631 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 631 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 632 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 632 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 632 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 633 | True | live]
; [else-branch: 633 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 633 | True]
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | True | live]
; [else-branch: 634 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 634 | True]
; [eval] _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
(push) ; 22
; [then-branch: 635 | False | live]
; [else-branch: 635 | True | live]
(push) ; 23
; [then-branch: 635 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 635 | True]
; [eval] !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@273@01))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@301@01 $Perm)
(assert ($Perm.isReadVar $k@301@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@301@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@302@01 $Perm)
(assert ($Perm.isReadVar $k@302@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@302@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@302@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 636 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 636 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 636 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 636 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType])]
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 637 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 637 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 637 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 637 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 638 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 638 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 638 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 638 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 639 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 639 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 639 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
(push) ; 24
; [then-branch: 640 | !(int___lt__(_, int___unbox__(_, i_0_0@273@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))))) | live]
; [else-branch: 640 | int___lt__(_, int___unbox__(_, i_0_0@273@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01)))) | live]
(push) ; 25
; [then-branch: 640 | !(int___lt__(_, int___unbox__(_, i_0_0@273@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01)))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))
(pop) ; 25
(push) ; 25
; [else-branch: 640 | int___lt__(_, int___unbox__(_, i_0_0@273@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01))))))))))))), inpt_0_0@214@01))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false))))
; [eval] perm(MustTerminate_0(_cthread_157_0)) == none
; [eval] perm(MustTerminate_0(_cthread_157_0))
(push) ; 26
; [then-branch: 641 | False | live]
; [else-branch: 641 | True | live]
(push) ; 27
; [then-branch: 641 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 641 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 28
; [then-branch: 642 | False | live]
; [else-branch: 642 | True | live]
(push) ; 29
; [then-branch: 642 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 642 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 30
; [then-branch: 643 | False | live]
; [else-branch: 643 | True | live]
(push) ; 31
; [then-branch: 643 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 643 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 32
; [then-branch: 644 | False | live]
; [else-branch: 644 | True | live]
(push) ; 33
; [then-branch: 644 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 644 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@273@01)
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert ($Perm.isReadVar $k@302@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@273@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@273@01)
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01))))
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@273@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))) inpt_0_0@214@01)))))))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 645 | !(p1_1@203@01) | live]
; [else-branch: 645 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 645 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 645 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 646 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 646 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 647 | True | live]
; [else-branch: 647 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 647 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 20
; [then-branch: 648 | False | dead]
; [else-branch: 648 | True | live]
(push) ; 21
; [else-branch: 648 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 649 | !(p2_1@204@01) | live]
; [else-branch: 649 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 649 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 17
(push) ; 17
; [else-branch: 649 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 650 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 650 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 650 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 651 | True | live]
; [else-branch: 651 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 651 | True]
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 20
; [then-branch: 652 | False | dead]
; [else-branch: 652 | True | live]
(push) ; 21
; [else-branch: 652 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 16
; [then-branch: 653 | bypass1_0@276@01 | dead]
; [else-branch: 653 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 653 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 16
; [then-branch: 654 | bypass1_0@276@01 | dead]
; [else-branch: 654 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 654 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 16
; [then-branch: 655 | bypass1_0@276@01 | dead]
; [else-branch: 655 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 655 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 16
; [then-branch: 656 | bypass1_0@276@01 | dead]
; [else-branch: 656 | !(bypass1_0@276@01) | live]
(push) ; 17
; [else-branch: 656 | !(bypass1_0@276@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 16
; [then-branch: 657 | bypass2_0@277@01 | dead]
; [else-branch: 657 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 657 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 16
; [then-branch: 658 | bypass2_0@277@01 | dead]
; [else-branch: 658 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 658 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 16
; [then-branch: 659 | bypass2_0@277@01 | dead]
; [else-branch: 659 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 659 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 16
; [then-branch: 660 | bypass2_0@277@01 | dead]
; [else-branch: 660 | !(bypass2_0@277@01) | live]
(push) ; 17
; [else-branch: 660 | !(bypass2_0@277@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 16
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
  $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
  $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))))
(assert (= $t@290@01 ($Snap.combine ($Snap.first $t@290@01) ($Snap.second $t@290@01))))
(assert (= ($Snap.first $t@290@01) $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (<= _residue_157@209@01 _residue_159@241@01)))
(assert (=
  ($Snap.second $t@290@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@290@01))
    ($Snap.second ($Snap.second $t@290@01)))))
(assert (= ($Snap.first ($Snap.second $t@290@01)) $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (<= _residue_157_0@210@01 _residue_159_0@242@01)))
(assert (=
  ($Snap.second ($Snap.second $t@290@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@290@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@290@01))) $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@283@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@290@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@284@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
  $Snap.unit))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 17
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 18
; [then-branch: 661 | !(p1_1@203@01) | live]
; [else-branch: 661 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 661 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 661 | p1_1@203@01]
; [eval] !ret1_0
(push) ; 20
; [then-branch: 662 | False | live]
; [else-branch: 662 | True | live]
(push) ; 21
; [then-branch: 662 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 662 | True]
; [eval] !bypass1_0
(push) ; 22
; [then-branch: 663 | bypass1_0@276@01 | live]
; [else-branch: 663 | !(bypass1_0@276@01) | live]
(push) ; 23
; [then-branch: 663 | bypass1_0@276@01]
(assert bypass1_0@276@01)
(pop) ; 23
(push) ; 23
; [else-branch: 663 | !(bypass1_0@276@01)]
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@303@01 $Perm)
(assert ($Perm.isReadVar $k@303@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@303@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@304@01 $Perm)
(assert ($Perm.isReadVar $k@304@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@304@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@304@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 664 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 664 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 664 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 664 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 665 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 665 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 665 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 665 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 666 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 666 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 666 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 666 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 667 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 667 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 667 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert (=>
  (not bypass1_0@276@01)
  (and
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@276@01) bypass1_0@276@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert (and
  (=>
    (not bypass1_0@276@01)
    (and
      (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@276@01) bypass1_0@276@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert (=>
  p1_1@203@01
  (and
    (=>
      (not bypass1_0@276@01)
      (and
        (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@276@01) bypass1_0@276@01))))
(push) ; 18
; [then-branch: 668 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 668 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 19
; [then-branch: 668 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 668 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 20
; [then-branch: 669 | !(p2_1@204@01) | live]
; [else-branch: 669 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 669 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 669 | p2_1@204@01]
; [eval] !ret2_0
(push) ; 22
; [then-branch: 670 | False | live]
; [else-branch: 670 | True | live]
(push) ; 23
; [then-branch: 670 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 670 | True]
; [eval] !bypass2_0
(push) ; 24
; [then-branch: 671 | bypass2_0@277@01 | live]
; [else-branch: 671 | !(bypass2_0@277@01) | live]
(push) ; 25
; [then-branch: 671 | bypass2_0@277@01]
(assert bypass2_0@277@01)
(pop) ; 25
(push) ; 25
; [else-branch: 671 | !(bypass2_0@277@01)]
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@305@01 $Perm)
(assert ($Perm.isReadVar $k@305@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@306@01 $Perm)
(assert ($Perm.isReadVar $k@306@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@306@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 26
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 27
; [then-branch: 672 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 672 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 28
; [then-branch: 672 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 672 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 27
; [then-branch: 673 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 673 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 28
; [then-branch: 673 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 673 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 29
; [then-branch: 674 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 674 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 30
; [then-branch: 674 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 30
(push) ; 30
; [else-branch: 674 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 27
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 675 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 675 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 675 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 26
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 26
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (=>
  (not bypass2_0@277@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
(assert (or (not bypass2_0@277@01) bypass2_0@277@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (and
  (=>
    (not bypass2_0@277@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_0_0@288@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
  (or (not bypass2_0@277@01) bypass2_0@277@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (=>
  p2_1@204@01
  (and
    (=>
      (not bypass2_0@277@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_0_0@288@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
    (or (not bypass2_0@277@01) bypass2_0@277@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert (=>
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    (not
      (and
        p1_1@203@01
        (and
          (not bypass1_0@276@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
    (=>
      p2_1@204@01
      (and
        (=>
          (not bypass2_0@277@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_0_0@288@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
        (or (not bypass2_0@277@01) bypass2_0@277@01))))))
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
(pop) ; 17
(push) ; 17
; [eval] !(p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 18
; [then-branch: 676 | !(p1_1@203@01) | live]
; [else-branch: 676 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 676 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 676 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 677 | False | live]
; [else-branch: 677 | True | live]
(push) ; 21
; [then-branch: 677 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 677 | True]
; [eval] !bypass1_0
(push) ; 22
; [then-branch: 678 | bypass1_0@276@01 | live]
; [else-branch: 678 | !(bypass1_0@276@01) | live]
(push) ; 23
; [then-branch: 678 | bypass1_0@276@01]
(assert bypass1_0@276@01)
(pop) ; 23
(push) ; 23
; [else-branch: 678 | !(bypass1_0@276@01)]
(assert (not bypass1_0@276@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@307@01 $Perm)
(assert ($Perm.isReadVar $k@307@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@307@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@308@01 $Perm)
(assert ($Perm.isReadVar $k@308@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@308@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@308@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 679 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 679 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 679 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 679 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 680 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 680 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 680 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 680 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 681 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 681 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 681 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 681 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 682 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 682 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 682 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert (=>
  (not bypass1_0@276@01)
  (and
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@276@01) bypass1_0@276@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert (and
  (=>
    (not bypass1_0@276@01)
    (and
      (not bypass1_0@276@01)
      (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@276@01) bypass1_0@276@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (=>
      (not bypass1_0@276@01)
      (and
        (not bypass1_0@276@01)
        (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@276@01) bypass1_0@276@01))))
(push) ; 18
; [then-branch: 683 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 683 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 19
; [then-branch: 683 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 683 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 20
; [then-branch: 684 | !(p2_1@204@01) | live]
; [else-branch: 684 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 684 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 684 | p2_1@204@01]
; [eval] !ret2_0
(push) ; 22
; [then-branch: 685 | False | live]
; [else-branch: 685 | True | live]
(push) ; 23
; [then-branch: 685 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 685 | True]
; [eval] !bypass2_0
(push) ; 24
; [then-branch: 686 | bypass2_0@277@01 | live]
; [else-branch: 686 | !(bypass2_0@277@01) | live]
(push) ; 25
; [then-branch: 686 | bypass2_0@277@01]
(assert bypass2_0@277@01)
(pop) ; 25
(push) ; 25
; [else-branch: 686 | !(bypass2_0@277@01)]
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@309@01 $Perm)
(assert ($Perm.isReadVar $k@309@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@309@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@310@01 $Perm)
(assert ($Perm.isReadVar $k@310@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@310@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@310@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 26
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 26
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 26
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 27
; [then-branch: 687 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 687 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 28
; [then-branch: 687 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 687 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 27
; [then-branch: 688 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 688 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 28
; [then-branch: 688 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 28
(push) ; 28
; [else-branch: 688 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 29
; [then-branch: 689 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 689 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 30
; [then-branch: 689 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 30
(push) ; 30
; [else-branch: 689 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 27
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 690 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 690 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 690 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 26
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 26
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (=>
  (not bypass2_0@277@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
(assert (or (not bypass2_0@277@01) bypass2_0@277@01))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (and
  (=>
    (not bypass2_0@277@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_0_0@288@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
  (or (not bypass2_0@277@01) bypass2_0@277@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (=>
  p2_1@204@01
  (and
    (=>
      (not bypass2_0@277@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_0_0@288@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
    (or (not bypass2_0@277@01) bypass2_0@277@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert (=>
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    (not
      (and
        p1_1@203@01
        (and
          (not bypass1_0@276@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
    (=>
      p2_1@204@01
      (and
        (=>
          (not bypass2_0@277@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_0_0@288@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
        (or (not bypass2_0@277@01) bypass2_0@277@01))))))
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
(pop) ; 17
; Loop head block: Follow loop-internal edges
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 17
; [then-branch: 691 | !(p1_1@203@01) | live]
; [else-branch: 691 | p1_1@203@01 | live]
(push) ; 18
; [then-branch: 691 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 18
(push) ; 18
; [else-branch: 691 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 692 | False | live]
; [else-branch: 692 | True | live]
(push) ; 20
; [then-branch: 692 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 692 | True]
; [eval] !bypass1_0
(push) ; 21
; [then-branch: 693 | bypass1_0@276@01 | live]
; [else-branch: 693 | !(bypass1_0@276@01) | live]
(push) ; 22
; [then-branch: 693 | bypass1_0@276@01]
(assert bypass1_0@276@01)
(pop) ; 22
(push) ; 22
; [else-branch: 693 | !(bypass1_0@276@01)]
(assert (not bypass1_0@276@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@311@01 $Perm)
(assert ($Perm.isReadVar $k@311@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@311@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@311@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@312@01 $Perm)
(assert ($Perm.isReadVar $k@312@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@312@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@312@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 694 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 694 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 694 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 694 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 695 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 695 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 695 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 695 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 696 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 696 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 696 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 696 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 697 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 697 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 697 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (=>
  (not bypass1_0@276@01)
  (and
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@276@01) bypass1_0@276@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (and
  (=>
    (not bypass1_0@276@01)
    (and
      (not bypass1_0@276@01)
      (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@276@01) bypass1_0@276@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (=>
      (not bypass1_0@276@01)
      (and
        (not bypass1_0@276@01)
        (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@276@01) bypass1_0@276@01))))
(push) ; 17
; [then-branch: 698 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 698 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 18
; [then-branch: 698 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 698 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 19
; [then-branch: 699 | !(p2_1@204@01) | live]
; [else-branch: 699 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 699 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 20
(push) ; 20
; [else-branch: 699 | p2_1@204@01]
; [eval] !ret2_0
(push) ; 21
; [then-branch: 700 | False | live]
; [else-branch: 700 | True | live]
(push) ; 22
; [then-branch: 700 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 700 | True]
; [eval] !bypass2_0
(push) ; 23
; [then-branch: 701 | bypass2_0@277@01 | live]
; [else-branch: 701 | !(bypass2_0@277@01) | live]
(push) ; 24
; [then-branch: 701 | bypass2_0@277@01]
(assert bypass2_0@277@01)
(pop) ; 24
(push) ; 24
; [else-branch: 701 | !(bypass2_0@277@01)]
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@313@01 $Perm)
(assert ($Perm.isReadVar $k@313@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@314@01 $Perm)
(assert ($Perm.isReadVar $k@314@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@314@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@314@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 25
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 26
; [then-branch: 702 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 702 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 27
; [then-branch: 702 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 702 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 26
; [then-branch: 703 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 703 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 27
; [then-branch: 703 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 703 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 28
; [then-branch: 704 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 704 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 29
; [then-branch: 704 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 29
(push) ; 29
; [else-branch: 704 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 26
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 705 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 705 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 705 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 25
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 25
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  (not bypass2_0@277@01)
  (and
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
(assert (or (not bypass2_0@277@01) bypass2_0@277@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (and
  (=>
    (not bypass2_0@277@01)
    (and
      (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_0_0@288@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
  (or (not bypass2_0@277@01) bypass2_0@277@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  p2_1@204@01
  (and
    (=>
      (not bypass2_0@277@01)
      (and
        (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_0_0@288@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
    (or (not bypass2_0@277@01) bypass2_0@277@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(assert (=>
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    (not
      (and
        p1_1@203@01
        (and
          (not bypass1_0@276@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
    (=>
      p2_1@204@01
      (and
        (=>
          (not bypass2_0@277@01)
          (and
            (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_0_0@288@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
        (or (not bypass2_0@277@01) bypass2_0@277@01))))))
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (and
      p2_1@204@01
      (and
        (not bypass2_0@277@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p2_1@204@01
    (and
      (not bypass2_0@277@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 706 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01)))) | live]
; [else-branch: 706 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))))) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 706 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))))]
(assert (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p2_1@204@01
    (and
      (not bypass2_0@277@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))))
; [exec]
; p1_2 := p1_1 &&
;   (!ret1_0 &&
;   int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2)))))
; [eval] p1_1 && (!ret1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))
(push) ; 18
; [then-branch: 707 | !(p1_1@203@01) | live]
; [else-branch: 707 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 707 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 707 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 708 | False | live]
; [else-branch: 708 | True | live]
(push) ; 21
; [then-branch: 708 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 708 | True]
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@315@01 $Perm)
(assert ($Perm.isReadVar $k@315@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@315@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@315@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@316@01 $Perm)
(assert ($Perm.isReadVar $k@316@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@316@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@316@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 709 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 709 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 709 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 709 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 710 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 710 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 710 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 710 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 711 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 711 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 711 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 711 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 712 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 712 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 712 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@315@01))
(assert ($Perm.isReadVar $k@316@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@315@01))
(assert ($Perm.isReadVar $k@316@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(declare-const p1_2@317@01 Bool)
(assert (=
  p1_2@317@01
  (and
    p1_1@203@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
; [exec]
; p2_2 := p2_1 &&
;   (!ret2_0 &&
;   int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p2_1 && (!ret2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))
(push) ; 18
; [then-branch: 713 | !(p2_1@204@01) | live]
; [else-branch: 713 | p2_1@204@01 | live]
(push) ; 19
; [then-branch: 713 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 19
(push) ; 19
; [else-branch: 713 | p2_1@204@01]
; [eval] !ret2_0
(push) ; 20
; [then-branch: 714 | False | live]
; [else-branch: 714 | True | live]
(push) ; 21
; [then-branch: 714 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 714 | True]
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@318@01 $Perm)
(assert ($Perm.isReadVar $k@318@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@318@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@318@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@319@01 $Perm)
(assert ($Perm.isReadVar $k@319@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@319@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@319@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 715 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 715 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 715 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 715 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 716 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 716 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 716 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 716 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 717 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 717 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 717 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 717 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 718 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 718 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 718 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@318@01))
(assert ($Perm.isReadVar $k@319@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@318@01))
(assert ($Perm.isReadVar $k@319@01))
(assert (=>
  p2_1@204@01
  (and
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
(declare-const p2_2@320@01 Bool)
(assert (=
  p2_2@320@01
  (and
    p2_1@204@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
; [exec]
; idle1_0 := p1_1 &&
;   (!ret1_0 &&
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2)))))
; [eval] p1_1 && (!ret1_0 && !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))
(push) ; 18
; [then-branch: 719 | !(p1_1@203@01) | live]
; [else-branch: 719 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 719 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 719 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 720 | False | live]
; [else-branch: 720 | True | live]
(push) ; 21
; [then-branch: 720 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 720 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@321@01 $Perm)
(assert ($Perm.isReadVar $k@321@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@321@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@321@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@322@01 $Perm)
(assert ($Perm.isReadVar $k@322@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@322@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 721 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 721 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 721 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 721 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 722 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 722 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 722 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 722 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 723 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 723 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 723 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 723 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 724 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 724 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 724 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@321@01))
(assert ($Perm.isReadVar $k@322@01))
(declare-const idle1_0@323@01 Bool)
(assert (=
  idle1_0@323@01
  (and
    p1_1@203@01
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
; [exec]
; idle2_0 := p2_1 &&
;   (!ret2_0 &&
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p2_1 && (!ret2_0 && !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))
(push) ; 18
; [then-branch: 725 | !(p2_1@204@01) | live]
; [else-branch: 725 | p2_1@204@01 | live]
(push) ; 19
; [then-branch: 725 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 19
(push) ; 19
; [else-branch: 725 | p2_1@204@01]
; [eval] !ret2_0
(push) ; 20
; [then-branch: 726 | False | live]
; [else-branch: 726 | True | live]
(push) ; 21
; [then-branch: 726 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 726 | True]
; [eval] !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@324@01 $Perm)
(assert ($Perm.isReadVar $k@324@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@324@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@324@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@325@01 $Perm)
(assert ($Perm.isReadVar $k@325@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@325@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@325@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 727 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 727 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 727 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 727 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 728 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 728 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 728 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 728 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 729 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 729 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 729 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 729 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 730 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 730 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 730 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@324@01))
(assert ($Perm.isReadVar $k@325@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
  (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@324@01))
(assert ($Perm.isReadVar $k@325@01))
(declare-const idle2_0@326@01 Bool)
(assert (=
  idle2_0@326@01
  (and
    p2_1@204@01
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))))
; [eval] p1_2 && !ret1_0
(push) ; 18
; [then-branch: 731 | !(p1_2@317@01) | live]
; [else-branch: 731 | p1_2@317@01 | live]
(push) ; 19
; [then-branch: 731 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
(pop) ; 19
(push) ; 19
; [else-branch: 731 | p1_2@317@01]
(assert p1_2@317@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p1_2@317@01 (not p1_2@317@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_2@317@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1_2@317@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 732 | p1_2@317@01 | live]
; [else-branch: 732 | !(p1_2@317@01) | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 732 | p1_2@317@01]
(assert p1_2@317@01)
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_1 := __prim__bool___box__(bool___unbox__(_checkDefined(result_1, 3557690239821768050)) &&
;   str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2,
;   _checkDefined(i_0, 3170153))))
; [eval] __prim__bool___box__(bool___unbox__(_checkDefined(result_1, 3557690239821768050)) && str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153))))
; [eval] bool___unbox__(_checkDefined(result_1, 3557690239821768050)) && str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153)))
; [eval] bool___unbox__(_checkDefined(result_1, 3557690239821768050))
; [eval] _checkDefined(result_1, 3557690239821768050)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(push) ; 19
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))))
(push) ; 19
; [then-branch: 733 | !(bool___unbox__(_, _checkDefined(_, result_1@283@01, 3557690239821768050))) | live]
; [else-branch: 733 | bool___unbox__(_, _checkDefined(_, result_1@283@01, 3557690239821768050)) | live]
(push) ; 20
; [then-branch: 733 | !(bool___unbox__(_, _checkDefined(_, result_1@283@01, 3557690239821768050)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))))
(pop) ; 20
(push) ; 20
; [else-branch: 733 | bool___unbox__(_, _checkDefined(_, result_1@283@01, 3557690239821768050))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)))
; [eval] str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153)))
; [eval] list___getitem__(password_2, _checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(declare-const $k@327@01 $Perm)
(assert ($Perm.isReadVar $k@327@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@327@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@328@01 $Perm)
(assert ($Perm.isReadVar $k@328@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@328@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@328@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(declare-const letvar@329@01 Int)
(assert (=
  (as letvar@329@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 734 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0 | dead]
; [else-branch: 734 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 734 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)))
(push) ; 22
; [then-branch: 735 | False | live]
; [else-branch: 735 | True | live]
(push) ; 23
; [then-branch: 735 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 735 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 736 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0 | live]
; [else-branch: 736 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 736 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
  (=
    (as letvar@329@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
  (not
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      0))
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)
  (=>
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] list___getitem__(inpt_2, _checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@330@01 $Perm)
(assert ($Perm.isReadVar $k@330@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@330@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@331@01 $Perm)
(assert ($Perm.isReadVar $k@331@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@331@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@331@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(declare-const letvar@332@01 Int)
(assert (=
  (as letvar@332@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 737 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0 | dead]
; [else-branch: 737 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0) | live]
(push) ; 23
; [else-branch: 737 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) < 0)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 738 | False | live]
; [else-branch: 738 | True | live]
(push) ; 23
; [then-branch: 738 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 738 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 739 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0 | live]
; [else-branch: 739 | !(int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 739 | int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
      $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert (and
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
  (=
    (as letvar@332@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
  (=>
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))
(push) ; 21
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
      $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153)))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert (=>
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (=
      (as letvar@329@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (not
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        0))
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      0)
    (=>
      (>=
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (=
      (as letvar@332@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (=>
      (>=
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))))
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)))))
(push) ; 19
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))))
(pop) ; 19
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153))))))
(declare-const result_1@333@01 $Ref)
(assert (=
  result_1@333@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@283@01 3557690239821768050))
    (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@284@01 3170153)))))))
; [exec]
; inhale _isDefined(3557690239821768050)
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 $Snap.unit))
; [eval] _isDefined(3557690239821768050)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] int___add__(int___unbox__(i_0), 1)
; [eval] int___unbox__(i_0)
(set-option :timeout 0)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i_0@284@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@284@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0@284@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@284@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0@284@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@284@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@284@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@284@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@284@01) 1)))
(declare-const i_0@335@01 $Ref)
(assert (=
  i_0@335@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@284@01) 1))))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_0 := false
; [eval] p2_2 && !ret2_0
(set-option :timeout 0)
(push) ; 19
; [then-branch: 740 | !(p2_2@320@01) | live]
; [else-branch: 740 | p2_2@320@01 | live]
(push) ; 20
; [then-branch: 740 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 20
(push) ; 20
; [else-branch: 740 | p2_2@320@01]
(assert p2_2@320@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p2_2@320@01 (not p2_2@320@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_2@320@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p2_2@320@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 741 | p2_2@320@01 | live]
; [else-branch: 741 | !(p2_2@320@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 741 | p2_2@320@01]
(assert p2_2@320@01)
; [exec]
; _loop_measures_0_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_1_0 := __prim__bool___box__(bool___unbox__(result_1_0) &&
;   str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0,
;   i_0_0)))
; [eval] __prim__bool___box__(bool___unbox__(result_1_0) && str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0)))
; [eval] bool___unbox__(result_1_0) && str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0))
; [eval] bool___unbox__(result_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit result_1_0@287@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit result_1_0@287@01)))
(push) ; 20
; [then-branch: 742 | !(bool___unbox__(_, result_1_0@287@01)) | live]
; [else-branch: 742 | bool___unbox__(_, result_1_0@287@01) | live]
(push) ; 21
; [then-branch: 742 | !(bool___unbox__(_, result_1_0@287@01))]
(assert (not (bool___unbox__ $Snap.unit result_1_0@287@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 742 | bool___unbox__(_, result_1_0@287@01)]
(assert (bool___unbox__ $Snap.unit result_1_0@287@01))
; [eval] str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0))
; [eval] list___getitem___0(password_2_0, i_0_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(declare-const $k@337@01 $Perm)
(assert ($Perm.isReadVar $k@337@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@338@01 $Perm)
(assert ($Perm.isReadVar $k@338@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@338@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@338@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(declare-const letvar@339@01 Int)
(assert (=
  (as letvar@339@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 23
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 743 | int___unbox__(_, i_0_0@288@01) < 0 | dead]
; [else-branch: 743 | !(int___unbox__(_, i_0_0@288@01) < 0) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 743 | !(int___unbox__(_, i_0_0@288@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(push) ; 23
; [then-branch: 744 | False | live]
; [else-branch: 744 | True | live]
(push) ; 24
; [then-branch: 744 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 744 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 745 | int___unbox__(_, i_0_0@288@01) >= 0 | live]
; [else-branch: 745 | !(int___unbox__(_, i_0_0@288@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 745 | int___unbox__(_, i_0_0@288@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@337@01))
(assert ($Perm.isReadVar $k@338@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
  (=
    (as letvar@339@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)
  (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (=>
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (<
      (int___unbox__ $Snap.unit i_0_0@288@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01)))
; [eval] list___getitem___0(inpt_2_0, i_0_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@340@01 $Perm)
(assert ($Perm.isReadVar $k@340@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@340@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@341@01 $Perm)
(assert ($Perm.isReadVar $k@341@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@341@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(declare-const letvar@342@01 Int)
(assert (=
  (as letvar@342@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 746 | int___unbox__(_, i_0_0@288@01) < 0 | dead]
; [else-branch: 746 | !(int___unbox__(_, i_0_0@288@01) < 0) | live]
(push) ; 24
; [else-branch: 746 | !(int___unbox__(_, i_0_0@288@01) < 0)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 747 | False | live]
; [else-branch: 747 | True | live]
(push) ; 24
; [then-branch: 747 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 747 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 748 | int___unbox__(_, i_0_0@288@01) >= 0 | live]
; [else-branch: 748 | !(int___unbox__(_, i_0_0@288@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 748 | int___unbox__(_, i_0_0@288@01) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
      $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@340@01))
(assert ($Perm.isReadVar $k@341@01))
(assert (and
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
  (=
    (as letvar@342@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
  (=>
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (<
      (int___unbox__ $Snap.unit i_0_0@288@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))
(push) ; 22
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
      $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@337@01))
(assert ($Perm.isReadVar $k@338@01))
(assert ($Perm.isReadVar $k@340@01))
(assert ($Perm.isReadVar $k@341@01))
(assert (=>
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (and
    (bool___unbox__ $Snap.unit result_1_0@287@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (=
      (as letvar@339@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (=>
      (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
      (<
        (int___unbox__ $Snap.unit i_0_0@288@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (=
      (as letvar@342@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (=>
      (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
      (<
        (int___unbox__ $Snap.unit i_0_0@288@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(assert (or
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (not (bool___unbox__ $Snap.unit result_1_0@287@01))))
(push) ; 20
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(declare-const result_1_0@343@01 $Ref)
(assert (=
  result_1_0@343@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit result_1_0@287@01)
    (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))))))
; [exec]
; inhale true
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0_0 := __prim__int___box__(int___add__(int___unbox__(i_0_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_0_0), 1))
; [eval] int___add__(int___unbox__(i_0_0), 1)
; [eval] int___unbox__(i_0_0)
(set-option :timeout 0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1)))
(declare-const i_0_0@345@01 $Ref)
(assert (=
  i_0_0@345@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))))
; [exec]
; inhale true
(declare-const $t@346@01 $Snap)
(assert (= $t@346@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_0_0 := false
; [exec]
; assert (p1_2 && !ret1_0 ==>
;   _loop_termination_flag_0 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))) &&
;   (p2_2 && !ret2_0 ==>
;   _loop_termination_flag_0_0 ==>
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p1_2 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] p1_2 && !ret1_0
(set-option :timeout 0)
(push) ; 20
; [then-branch: 749 | !(p1_2@317@01) | live]
; [else-branch: 749 | p1_2@317@01 | live]
(push) ; 21
; [then-branch: 749 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
(pop) ; 21
(push) ; 21
; [else-branch: 749 | p1_2@317@01]
; [eval] !ret1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_2@317@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 750 | p1_2@317@01 | live]
; [else-branch: 750 | !(p1_2@317@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 750 | p1_2@317@01]
; [eval] _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
(push) ; 22
; [then-branch: 751 | False | dead]
; [else-branch: 751 | True | live]
(push) ; 23
; [else-branch: 751 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_2 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] p2_2 && !ret2_0
(push) ; 20
; [then-branch: 752 | !(p2_2@320@01) | live]
; [else-branch: 752 | p2_2@320@01 | live]
(push) ; 21
; [then-branch: 752 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 21
(push) ; 21
; [else-branch: 752 | p2_2@320@01]
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_2@320@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 753 | p2_2@320@01 | live]
; [else-branch: 753 | !(p2_2@320@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 753 | p2_2@320@01]
; [eval] _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
(push) ; 22
; [then-branch: 754 | False | dead]
; [else-branch: 754 | True | live]
(push) ; 23
; [else-branch: 754 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 755 | !(p1_1@203@01) | live]
; [else-branch: 755 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 755 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 755 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 756 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 756 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 756 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 757 | !(p2_1@204@01) | live]
; [else-branch: 757 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 757 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 757 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 758 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 758 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 758 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 759 | !(p1_1@203@01) | live]
; [else-branch: 759 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 759 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 759 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 760 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 760 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 760 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@333@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@333@01) (as bool<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 761 | !(p2_1@204@01) | live]
; [else-branch: 761 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 761 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 761 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 762 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 762 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 762 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(result_1_0), bool())
; [eval] typeof(result_1_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 20
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@343@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@343@01) (as bool<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 763 | !(p1_1@203@01) | live]
; [else-branch: 763 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 763 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 763 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 764 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 764 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 764 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@335@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@335@01) (as int<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 765 | !(p2_1@204@01) | live]
; [else-branch: 765 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 765 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 765 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 766 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 766 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 766 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 20
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 767 | !(p1_1@203@01) | live]
; [else-branch: 767 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 767 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 767 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 768 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 768 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 768 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 21
; [then-branch: 769 | !(p2_1@204@01) | live]
; [else-branch: 769 | p2_1@204@01 | live]
(push) ; 22
; [then-branch: 769 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 22
(push) ; 22
; [else-branch: 769 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 770 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 770 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 770 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0
(push) ; 22
; [then-branch: 771 | !(p1_1@203@01) | live]
; [else-branch: 771 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 771 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 771 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 772 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 772 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 772 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 23
; [then-branch: 773 | !(p2_1@204@01) | live]
; [else-branch: 773 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 773 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 24
(push) ; 24
; [else-branch: 773 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 774 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 774 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 774 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 775 | !(p1_1@203@01) | live]
; [else-branch: 775 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 775 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 775 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 776 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 776 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 776 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 777 | !(p2_1@204@01) | live]
; [else-branch: 777 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 777 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 777 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 778 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 778 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 778 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___ge__(int___unbox__(i_0_0), 0)
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@345@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@345@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@345@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) 0))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) 0)))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 779 | !(p1_1@203@01) | live]
; [else-branch: 779 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 779 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 779 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 780 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 780 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 780 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@347@01 $Perm)
(assert ($Perm.isReadVar $k@347@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@347@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@347@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@347@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 781 | !(p2_1@204@01) | live]
; [else-branch: 781 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 781 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 781 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 782 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 782 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@345@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@345@01)))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@348@01 $Perm)
(assert ($Perm.isReadVar $k@348@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@348@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@348@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@348@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@345@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 783 | !(p1_1@203@01) | live]
; [else-branch: 783 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 783 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 783 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 784 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 784 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 784 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@349@01 $Perm)
(assert ($Perm.isReadVar $k@349@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@349@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@349@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@349@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 785 | !(p2_1@204@01) | live]
; [else-branch: 785 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 785 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 785 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 786 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 786 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 786 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@345@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@345@01)))
; [eval] list___len___0(inpt_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@350@01 $Perm)
(assert ($Perm.isReadVar $k@350@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@350@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@350@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@350@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@345@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@345@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@345@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 787 | !(p1_1@203@01) | live]
; [else-branch: 787 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 787 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 787 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 788 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 788 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 788 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@323@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 789 | !(idle1_0@323@01) | live]
; [else-branch: 789 | idle1_0@323@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 789 | !(idle1_0@323@01)]
(assert (not idle1_0@323@01))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 28
; [then-branch: 790 | False | dead]
; [else-branch: 790 | True | live]
(push) ; 29
; [else-branch: 790 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@323@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and p1_1@203@01 (not bypass1_0@276@01) (not idle1_0@323@01))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 791 | !(p2_1@204@01) | live]
; [else-branch: 791 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 791 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 791 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 792 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 792 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 792 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2_0@326@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 793 | !(idle2_0@326@01) | live]
; [else-branch: 793 | idle2_0@326@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 793 | !(idle2_0@326@01)]
(assert (not idle2_0@326@01))
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
(push) ; 28
; [then-branch: 794 | False | dead]
; [else-branch: 794 | True | live]
(push) ; 29
; [else-branch: 794 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2_0@326@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and p2_1@204@01 (not bypass2_0@277@01) (not idle2_0@326@01))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 795 | !(p1_1@203@01) | live]
; [else-branch: 795 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 795 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 795 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 796 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 796 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 796 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@323@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 797 | !(idle1_0@323@01) | live]
; [else-branch: 797 | idle1_0@323@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 797 | !(idle1_0@323@01)]
(assert (not idle1_0@323@01))
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 798 | True | live]
; [else-branch: 798 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 798 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 30
; [then-branch: 799 | False | live]
; [else-branch: 799 | True | live]
(push) ; 31
; [then-branch: 799 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 799 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 32
; [then-branch: 800 | False | live]
; [else-branch: 800 | True | live]
(push) ; 33
; [then-branch: 800 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 800 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 801 | False | live]
; [else-branch: 801 | True | live]
(push) ; 35
; [then-branch: 801 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 801 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@323@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 802 | !(p2_1@204@01) | live]
; [else-branch: 802 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 802 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 802 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 803 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 803 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 803 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2_0@326@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 804 | !(idle2_0@326@01) | live]
; [else-branch: 804 | idle2_0@326@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 804 | !(idle2_0@326@01)]
(assert (not idle2_0@326@01))
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 805 | True | live]
; [else-branch: 805 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 805 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 30
; [then-branch: 806 | False | live]
; [else-branch: 806 | True | live]
(push) ; 31
; [then-branch: 806 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 806 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 32
; [then-branch: 807 | False | live]
; [else-branch: 807 | True | live]
(push) ; 33
; [then-branch: 807 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 807 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 808 | False | live]
; [else-branch: 808 | True | live]
(push) ; 35
; [then-branch: 808 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 808 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2_0@326@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 24
; [then-branch: 809 | bypass1_0@276@01 | dead]
; [else-branch: 809 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 809 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 24
; [then-branch: 810 | bypass1_0@276@01 | dead]
; [else-branch: 810 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 810 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 24
; [then-branch: 811 | bypass1_0@276@01 | dead]
; [else-branch: 811 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 811 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 24
; [then-branch: 812 | bypass1_0@276@01 | dead]
; [else-branch: 812 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 812 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 24
; [then-branch: 813 | bypass2_0@277@01 | dead]
; [else-branch: 813 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 813 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 24
; [then-branch: 814 | bypass2_0@277@01 | dead]
; [else-branch: 814 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 814 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 24
; [then-branch: 815 | bypass2_0@277@01 | dead]
; [else-branch: 815 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 815 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 24
; [then-branch: 816 | bypass2_0@277@01 | dead]
; [else-branch: 816 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 816 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 741 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 19
; [eval] !(p2_2 && !ret2_0)
; [eval] p2_2 && !ret2_0
(push) ; 19
; [then-branch: 817 | !(p2_2@320@01) | live]
; [else-branch: 817 | p2_2@320@01 | live]
(push) ; 20
; [then-branch: 817 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 20
(push) ; 20
; [else-branch: 817 | p2_2@320@01]
(assert p2_2@320@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_2@320@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_2@320@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 818 | !(p2_2@320@01) | live]
; [else-branch: 818 | p2_2@320@01 | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 818 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
; [exec]
; assert (p1_2 && !ret1_0 ==>
;   _loop_termination_flag_0 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))) &&
;   (p2_2 && !ret2_0 ==>
;   _loop_termination_flag_0_0 ==>
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p1_2 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] p1_2 && !ret1_0
(push) ; 20
; [then-branch: 819 | !(p1_2@317@01) | live]
; [else-branch: 819 | p1_2@317@01 | live]
(push) ; 21
; [then-branch: 819 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
(pop) ; 21
(push) ; 21
; [else-branch: 819 | p1_2@317@01]
; [eval] !ret1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_2@317@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 820 | p1_2@317@01 | live]
; [else-branch: 820 | !(p1_2@317@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 820 | p1_2@317@01]
; [eval] _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
(push) ; 22
; [then-branch: 821 | False | dead]
; [else-branch: 821 | True | live]
(push) ; 23
; [else-branch: 821 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_2 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] p2_2 && !ret2_0
(push) ; 20
; [then-branch: 822 | !(p2_2@320@01) | live]
; [else-branch: 822 | p2_2@320@01 | live]
(push) ; 21
; [then-branch: 822 | !(p2_2@320@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 822 | p2_2@320@01]
(assert p2_2@320@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 823 | p2_2@320@01 | dead]
; [else-branch: 823 | !(p2_2@320@01) | live]
(push) ; 21
; [else-branch: 823 | !(p2_2@320@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 824 | !(p1_1@203@01) | live]
; [else-branch: 824 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 824 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 824 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 825 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 825 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 825 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 826 | !(p2_1@204@01) | live]
; [else-branch: 826 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 826 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 826 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 827 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 827 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 827 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 828 | !(p1_1@203@01) | live]
; [else-branch: 828 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 828 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 828 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 829 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 829 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 829 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@333@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> result_1@333@01) (as bool<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 830 | !(p2_1@204@01) | live]
; [else-branch: 830 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 830 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 830 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 831 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 831 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 831 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(result_1_0), bool())
; [eval] typeof(result_1_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 832 | !(p1_1@203@01) | live]
; [else-branch: 832 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 832 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 832 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 833 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 833 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 833 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@335@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (issubtype<Bool> (typeof<PyType> i_0@335@01) (as int<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 834 | !(p2_1@204@01) | live]
; [else-branch: 834 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 834 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 834 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 835 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 835 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 835 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 836 | !(p1_1@203@01) | live]
; [else-branch: 836 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 836 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 836 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 837 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 837 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 837 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 21
; [then-branch: 838 | !(p2_1@204@01) | live]
; [else-branch: 838 | p2_1@204@01 | live]
(push) ; 22
; [then-branch: 838 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 22
(push) ; 22
; [else-branch: 838 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 839 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 839 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 839 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0
(push) ; 22
; [then-branch: 840 | !(p1_1@203@01) | live]
; [else-branch: 840 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 840 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 840 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 841 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 841 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 841 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 23
; [then-branch: 842 | !(p2_1@204@01) | live]
; [else-branch: 842 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 842 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 24
(push) ; 24
; [else-branch: 842 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 843 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 843 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 843 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 844 | !(p1_1@203@01) | live]
; [else-branch: 844 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 844 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 844 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 845 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 845 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 845 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) 0)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 846 | !(p2_1@204@01) | live]
; [else-branch: 846 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 846 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 846 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 847 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 847 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 847 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___ge__(int___unbox__(i_0_0), 0)
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 848 | !(p1_1@203@01) | live]
; [else-branch: 848 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 848 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 848 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 849 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 849 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@351@01 $Perm)
(assert ($Perm.isReadVar $k@351@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@351@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@351@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@351@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 850 | !(p2_1@204@01) | live]
; [else-branch: 850 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 850 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 850 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 851 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 851 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 851 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@352@01 $Perm)
(assert ($Perm.isReadVar $k@352@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@352@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@352@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@352@01))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 852 | !(p1_1@203@01) | live]
; [else-branch: 852 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 852 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 852 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 853 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 853 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 853 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@335@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@353@01 $Perm)
(assert ($Perm.isReadVar $k@353@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@353@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and
    p1_1@203@01
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@335@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@335@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@335@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 854 | !(p2_1@204@01) | live]
; [else-branch: 854 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 854 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 854 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 855 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 855 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] list___len___0(inpt_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@354@01 $Perm)
(assert ($Perm.isReadVar $k@354@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@354@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@354@01))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 856 | !(p1_1@203@01) | live]
; [else-branch: 856 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 856 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 856 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 857 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 857 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 857 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@323@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 858 | !(idle1_0@323@01) | live]
; [else-branch: 858 | idle1_0@323@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 858 | !(idle1_0@323@01)]
(assert (not idle1_0@323@01))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 28
; [then-branch: 859 | False | dead]
; [else-branch: 859 | True | live]
(push) ; 29
; [else-branch: 859 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@323@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and p1_1@203@01 (not bypass1_0@276@01) (not idle1_0@323@01))))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 860 | !(p2_1@204@01) | live]
; [else-branch: 860 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 860 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 860 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 861 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 861 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 861 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 862 | !(idle2_0@326@01) | dead]
; [else-branch: 862 | idle2_0@326@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 862 | idle2_0@326@01]
(assert idle2_0@326@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle2_0@326@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and p2_1@204@01 (not bypass2_0@277@01) idle2_0@326@01)))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 863 | !(p1_1@203@01) | live]
; [else-branch: 863 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 863 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 863 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 864 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 864 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 864 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@323@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 865 | !(idle1_0@323@01) | live]
; [else-branch: 865 | idle1_0@323@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 865 | !(idle1_0@323@01)]
(assert (not idle1_0@323@01))
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 866 | True | live]
; [else-branch: 866 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 866 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 30
; [then-branch: 867 | False | live]
; [else-branch: 867 | True | live]
(push) ; 31
; [then-branch: 867 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 867 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 32
; [then-branch: 868 | False | live]
; [else-branch: 868 | True | live]
(push) ; 33
; [then-branch: 868 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 868 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 869 | False | live]
; [else-branch: 869 | True | live]
(push) ; 35
; [then-branch: 869 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 869 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@323@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 870 | !(p2_1@204@01) | live]
; [else-branch: 870 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 870 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 870 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 871 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 871 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 871 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 872 | !(idle2_0@326@01) | dead]
; [else-branch: 872 | idle2_0@326@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 872 | idle2_0@326@01]
(assert idle2_0@326@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle2_0@326@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 24
; [then-branch: 873 | bypass1_0@276@01 | dead]
; [else-branch: 873 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 873 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 24
; [then-branch: 874 | bypass1_0@276@01 | dead]
; [else-branch: 874 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 874 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 24
; [then-branch: 875 | bypass1_0@276@01 | dead]
; [else-branch: 875 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 875 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 24
; [then-branch: 876 | bypass1_0@276@01 | dead]
; [else-branch: 876 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 876 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 24
; [then-branch: 877 | bypass2_0@277@01 | dead]
; [else-branch: 877 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 877 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 24
; [then-branch: 878 | bypass2_0@277@01 | dead]
; [else-branch: 878 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 878 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 24
; [then-branch: 879 | bypass2_0@277@01 | dead]
; [else-branch: 879 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 879 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 24
; [then-branch: 880 | bypass2_0@277@01 | dead]
; [else-branch: 880 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 880 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(push) ; 19
; [else-branch: 818 | p2_2@320@01]
(assert p2_2@320@01)
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 732 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
(pop) ; 18
; [eval] !(p1_2 && !ret1_0)
; [eval] p1_2 && !ret1_0
(push) ; 18
; [then-branch: 881 | !(p1_2@317@01) | live]
; [else-branch: 881 | p1_2@317@01 | live]
(push) ; 19
; [then-branch: 881 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
(pop) ; 19
(push) ; 19
; [else-branch: 881 | p1_2@317@01]
(assert p1_2@317@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_2@317@01))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_2@317@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 882 | !(p1_2@317@01) | live]
; [else-branch: 882 | p1_2@317@01 | live]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 882 | !(p1_2@317@01)]
(assert (not p1_2@317@01))
; [eval] p2_2 && !ret2_0
(push) ; 19
; [then-branch: 883 | !(p2_2@320@01) | live]
; [else-branch: 883 | p2_2@320@01 | live]
(push) ; 20
; [then-branch: 883 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 20
(push) ; 20
; [else-branch: 883 | p2_2@320@01]
(assert p2_2@320@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or p2_2@320@01 (not p2_2@320@01)))
(push) ; 19
(set-option :timeout 10)
(assert (not (not p2_2@320@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not p2_2@320@01))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 884 | p2_2@320@01 | live]
; [else-branch: 884 | !(p2_2@320@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 884 | p2_2@320@01]
(assert p2_2@320@01)
; [exec]
; _loop_measures_0_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_1_0 := __prim__bool___box__(bool___unbox__(result_1_0) &&
;   str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0,
;   i_0_0)))
; [eval] __prim__bool___box__(bool___unbox__(result_1_0) && str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0)))
; [eval] bool___unbox__(result_1_0) && str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0))
; [eval] bool___unbox__(result_1_0)
(push) ; 20
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit result_1_0@287@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit result_1_0@287@01)))
(push) ; 20
; [then-branch: 885 | !(bool___unbox__(_, result_1_0@287@01)) | live]
; [else-branch: 885 | bool___unbox__(_, result_1_0@287@01) | live]
(push) ; 21
; [then-branch: 885 | !(bool___unbox__(_, result_1_0@287@01))]
(assert (not (bool___unbox__ $Snap.unit result_1_0@287@01)))
(pop) ; 21
(push) ; 21
; [else-branch: 885 | bool___unbox__(_, result_1_0@287@01)]
(assert (bool___unbox__ $Snap.unit result_1_0@287@01))
; [eval] str___eq__(list___getitem___0(password_2_0, i_0_0), list___getitem___0(inpt_2_0, i_0_0))
; [eval] list___getitem___0(password_2_0, i_0_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(declare-const $k@355@01 $Perm)
(assert ($Perm.isReadVar $k@355@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@355@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@356@01 $Perm)
(assert ($Perm.isReadVar $k@356@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@356@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@356@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(declare-const letvar@357@01 Int)
(assert (=
  (as letvar@357@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 23
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 886 | int___unbox__(_, i_0_0@288@01) < 0 | dead]
; [else-branch: 886 | !(int___unbox__(_, i_0_0@288@01) < 0) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 886 | !(int___unbox__(_, i_0_0@288@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(push) ; 23
; [then-branch: 887 | False | live]
; [else-branch: 887 | True | live]
(push) ; 24
; [then-branch: 887 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 887 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 888 | int___unbox__(_, i_0_0@288@01) >= 0 | live]
; [else-branch: 888 | !(int___unbox__(_, i_0_0@288@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 888 | int___unbox__(_, i_0_0@288@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@355@01))
(assert ($Perm.isReadVar $k@356@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
  (=
    (as letvar@357@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)
  (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (=>
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (<
      (int___unbox__ $Snap.unit i_0_0@288@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01)))
; [eval] list___getitem___0(inpt_2_0, i_0_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len___0(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len___0(self)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@359@01 $Perm)
(assert ($Perm.isReadVar $k@359@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@359@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(declare-const letvar@360@01 Int)
(assert (=
  (as letvar@360@01  Int)
  (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 889 | int___unbox__(_, i_0_0@288@01) < 0 | dead]
; [else-branch: 889 | !(int___unbox__(_, i_0_0@288@01) < 0) | live]
(push) ; 24
; [else-branch: 889 | !(int___unbox__(_, i_0_0@288@01) < 0)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
(push) ; 23
; [then-branch: 890 | False | live]
; [else-branch: 890 | True | live]
(push) ; 24
; [then-branch: 890 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 890 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 25
; Joined path conditions
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not (not (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0))))
(check-sat)
; unknown
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 891 | int___unbox__(_, i_0_0@288@01) >= 0 | live]
; [else-branch: 891 | !(int___unbox__(_, i_0_0@288@01) >= 0) | dead]
(set-option :timeout 0)
(push) ; 26
; [then-branch: 891 | int___unbox__(_, i_0_0@288@01) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 27
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(assert (not (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
  (<
    (int___unbox__ $Snap.unit i_0_0@288@01)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(assert (list___getitem___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
      $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@358@01))
(assert ($Perm.isReadVar $k@359@01))
(assert (and
  (list___len___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
  (=
    (as letvar@360@01  Int)
    (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
  (=>
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (<
      (int___unbox__ $Snap.unit i_0_0@288@01)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
  (list___getitem___0%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))
(push) ; 22
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
      $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
      $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@355@01))
(assert ($Perm.isReadVar $k@356@01))
(assert ($Perm.isReadVar $k@358@01))
(assert ($Perm.isReadVar $k@359@01))
(assert (=>
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (and
    (bool___unbox__ $Snap.unit result_1_0@287@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (=
      (as letvar@357@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (not (< (int___unbox__ $Snap.unit i_0_0@288@01) 0))
    (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
    (=>
      (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
      (<
        (int___unbox__ $Snap.unit i_0_0@288@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (=
      (as letvar@360@01  Int)
      (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (=>
      (>= (int___unbox__ $Snap.unit i_0_0@288@01) 0)
      (<
        (int___unbox__ $Snap.unit i_0_0@288@01)
        (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
    (list___getitem___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01)) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(assert (or
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (not (bool___unbox__ $Snap.unit result_1_0@287@01))))
(push) ; 20
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(pop) ; 20
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit result_1_0@287@01)
  (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
        $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
        $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01)))))
(declare-const result_1_0@361@01 $Ref)
(assert (=
  result_1_0@361@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit result_1_0@287@01)
    (str___eq__ $Snap.unit (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))
          $Snap.unit))) password_0_0@212@01 i_0_0@288@01) (list___getitem___0 ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))
          $Snap.unit))) inpt_0_0@214@01 i_0_0@288@01))))))
; [exec]
; inhale true
(declare-const $t@362@01 $Snap)
(assert (= $t@362@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0_0 := __prim__int___box__(int___add__(int___unbox__(i_0_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_0_0), 1))
; [eval] int___add__(int___unbox__(i_0_0), 1)
; [eval] int___unbox__(i_0_0)
(set-option :timeout 0)
(push) ; 20
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 21
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
(push) ; 20
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))
(pop) ; 20
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))
(push) ; 20
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1)))
(pop) ; 20
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1)))
(declare-const i_0_0@363@01 $Ref)
(assert (=
  i_0_0@363@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) 1))))
; [exec]
; inhale true
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_0_0 := false
; [exec]
; assert (p1_2 && !ret1_0 ==>
;   _loop_termination_flag_0 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))) &&
;   (p2_2 && !ret2_0 ==>
;   _loop_termination_flag_0_0 ==>
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p1_2 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] p1_2 && !ret1_0
(set-option :timeout 0)
(push) ; 20
; [then-branch: 892 | !(p1_2@317@01) | live]
; [else-branch: 892 | p1_2@317@01 | live]
(push) ; 21
; [then-branch: 892 | !(p1_2@317@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 892 | p1_2@317@01]
(assert p1_2@317@01)
; [eval] !ret1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 893 | p1_2@317@01 | dead]
; [else-branch: 893 | !(p1_2@317@01) | live]
(push) ; 21
; [else-branch: 893 | !(p1_2@317@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_2 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] p2_2 && !ret2_0
(push) ; 20
; [then-branch: 894 | !(p2_2@320@01) | live]
; [else-branch: 894 | p2_2@320@01 | live]
(push) ; 21
; [then-branch: 894 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 21
(push) ; 21
; [else-branch: 894 | p2_2@320@01]
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p2_2@320@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 895 | p2_2@320@01 | live]
; [else-branch: 895 | !(p2_2@320@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 895 | p2_2@320@01]
; [eval] _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
(push) ; 22
; [then-branch: 896 | False | dead]
; [else-branch: 896 | True | live]
(push) ; 23
; [else-branch: 896 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 897 | !(p1_1@203@01) | live]
; [else-branch: 897 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 897 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 897 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 898 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 898 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 898 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 899 | !(p2_1@204@01) | live]
; [else-branch: 899 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 899 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 899 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 900 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 900 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 900 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 901 | !(p1_1@203@01) | live]
; [else-branch: 901 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 901 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 901 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 902 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 902 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 902 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 903 | !(p2_1@204@01) | live]
; [else-branch: 903 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 903 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 903 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 904 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 904 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 904 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(result_1_0), bool())
; [eval] typeof(result_1_0)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 20
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@361@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> result_1_0@361@01) (as bool<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 905 | !(p1_1@203@01) | live]
; [else-branch: 905 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 905 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 905 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 906 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 906 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 906 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 907 | !(p2_1@204@01) | live]
; [else-branch: 907 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 907 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 907 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 908 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 908 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 908 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] issubtype(typeof(i_0_0), int())
; [eval] typeof(i_0_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 20
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))))
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 909 | !(p1_1@203@01) | live]
; [else-branch: 909 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 909 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 909 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 910 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 910 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 910 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 21
; [then-branch: 911 | !(p2_1@204@01) | live]
; [else-branch: 911 | p2_1@204@01 | live]
(push) ; 22
; [then-branch: 911 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 22
(push) ; 22
; [else-branch: 911 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 912 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 912 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 912 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0
(push) ; 22
; [then-branch: 913 | !(p1_1@203@01) | live]
; [else-branch: 913 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 913 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 913 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 914 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 914 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 914 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 23
; [then-branch: 915 | !(p2_1@204@01) | live]
; [else-branch: 915 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 915 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 24
(push) ; 24
; [else-branch: 915 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 916 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 916 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 916 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 917 | !(p1_1@203@01) | live]
; [else-branch: 917 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 917 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 917 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 918 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 918 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 918 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 919 | !(p2_1@204@01) | live]
; [else-branch: 919 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 919 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 919 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 920 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 920 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 920 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___ge__(int___unbox__(i_0_0), 0)
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@363@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@363@01)))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@363@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) 0))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) 0)))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 921 | !(p1_1@203@01) | live]
; [else-branch: 921 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 921 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 921 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 922 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 922 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 922 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@365@01 $Perm)
(assert ($Perm.isReadVar $k@365@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@365@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@365@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@365@01))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 923 | !(p2_1@204@01) | live]
; [else-branch: 923 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 923 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 923 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 924 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 924 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 924 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@363@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@363@01)))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@366@01 $Perm)
(assert ($Perm.isReadVar $k@366@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@366@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@366@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@366@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@363@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 925 | !(p1_1@203@01) | live]
; [else-branch: 925 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 925 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 925 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 926 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 926 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 926 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@367@01 $Perm)
(assert ($Perm.isReadVar $k@367@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@367@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@367@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@367@01))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 927 | !(p2_1@204@01) | live]
; [else-branch: 927 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 927 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 927 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 928 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 928 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 928 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@363@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@363@01)))
; [eval] list___len___0(inpt_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@368@01 $Perm)
(assert ($Perm.isReadVar $k@368@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@368@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@368@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@368@01))
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and
    p2_1@204@01
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@363@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@363@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
(push) ; 24
(assert (not (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@363@01) (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 929 | !(p1_1@203@01) | live]
; [else-branch: 929 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 929 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 929 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 930 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 930 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 930 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 931 | !(idle1_0@323@01) | dead]
; [else-branch: 931 | idle1_0@323@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 931 | idle1_0@323@01]
(assert idle1_0@323@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle1_0@323@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@276@01))
  (and p1_1@203@01 (not bypass1_0@276@01) idle1_0@323@01)))
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 932 | !(p2_1@204@01) | live]
; [else-branch: 932 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 932 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 932 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 933 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 933 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 933 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2_0@326@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 934 | !(idle2_0@326@01) | live]
; [else-branch: 934 | idle2_0@326@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 934 | !(idle2_0@326@01)]
(assert (not idle2_0@326@01))
; [eval] _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
(push) ; 28
; [then-branch: 935 | False | dead]
; [else-branch: 935 | True | live]
(push) ; 29
; [else-branch: 935 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2_0@326@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p2_1@204@01 (not bypass2_0@277@01))
  (and p2_1@204@01 (not bypass2_0@277@01) (not idle2_0@326@01))))
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 936 | !(p1_1@203@01) | live]
; [else-branch: 936 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 936 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 936 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@276@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@276@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 937 | p1_1@203@01 && !(bypass1_0@276@01) | live]
; [else-branch: 937 | !(p1_1@203@01 && !(bypass1_0@276@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 937 | p1_1@203@01 && !(bypass1_0@276@01)]
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@323@01))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 938 | !(idle1_0@323@01) | dead]
; [else-branch: 938 | idle1_0@323@01 | live]
(set-option :timeout 0)
(push) ; 27
; [else-branch: 938 | idle1_0@323@01]
(assert idle1_0@323@01)
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert idle1_0@323@01)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@276@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 939 | !(p2_1@204@01) | live]
; [else-branch: 939 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 939 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 25
(push) ; 25
; [else-branch: 939 | p2_1@204@01]
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@277@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p2_1@204@01 (not bypass2_0@277@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 940 | p2_1@204@01 && !(bypass2_0@277@01) | live]
; [else-branch: 940 | !(p2_1@204@01 && !(bypass2_0@277@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 940 | p2_1@204@01 && !(bypass2_0@277@01)]
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !idle2_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle2_0@326@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle2_0@326@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 941 | !(idle2_0@326@01) | live]
; [else-branch: 941 | idle2_0@326@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 941 | !(idle2_0@326@01)]
(assert (not idle2_0@326@01))
; [eval] !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] !_loop_check_before_0_0
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 942 | True | live]
; [else-branch: 942 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 942 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false)
(push) ; 30
; [then-branch: 943 | False | live]
; [else-branch: 943 | True | live]
(push) ; 31
; [then-branch: 943 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 943 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false)
(push) ; 32
; [then-branch: 944 | False | live]
; [else-branch: 944 | True | live]
(push) ; 33
; [then-branch: 944 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 944 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false)
(push) ; 34
; [then-branch: 945 | False | live]
; [else-branch: 945 | True | live]
(push) ; 35
; [then-branch: 945 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 945 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle2_0@326@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p2_1@204@01 (not bypass2_0@277@01)))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 24
; [then-branch: 946 | bypass1_0@276@01 | dead]
; [else-branch: 946 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 946 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 24
; [then-branch: 947 | bypass1_0@276@01 | dead]
; [else-branch: 947 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 947 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 24
; [then-branch: 948 | bypass1_0@276@01 | dead]
; [else-branch: 948 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 948 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 24
; [then-branch: 949 | bypass1_0@276@01 | dead]
; [else-branch: 949 | !(bypass1_0@276@01) | live]
(push) ; 25
; [else-branch: 949 | !(bypass1_0@276@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 24
; [then-branch: 950 | bypass2_0@277@01 | dead]
; [else-branch: 950 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 950 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 24
; [then-branch: 951 | bypass2_0@277@01 | dead]
; [else-branch: 951 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 951 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 24
; [then-branch: 952 | bypass2_0@277@01 | dead]
; [else-branch: 952 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 952 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 24
; [then-branch: 953 | bypass2_0@277@01 | dead]
; [else-branch: 953 | !(bypass2_0@277@01) | live]
(push) ; 25
; [else-branch: 953 | !(bypass2_0@277@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
; [eval] !(p2_2 && !ret2_0)
; [eval] p2_2 && !ret2_0
(push) ; 19
; [then-branch: 954 | !(p2_2@320@01) | live]
; [else-branch: 954 | p2_2@320@01 | live]
(push) ; 20
; [then-branch: 954 | !(p2_2@320@01)]
(assert (not p2_2@320@01))
(pop) ; 20
(push) ; 20
; [else-branch: 954 | p2_2@320@01]
(assert p2_2@320@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_2@320@01))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 955 | !(p2_2@320@01) | dead]
; [else-branch: 955 | p2_2@320@01 | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 955 | p2_2@320@01]
(assert p2_2@320@01)
(pop) ; 19
(pop) ; 18
(push) ; 18
; [else-branch: 882 | p1_2@317@01]
(assert p1_2@317@01)
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 706 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01)))))]
(assert (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (and
      p2_1@204@01
      (and
        (not bypass2_0@277@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))))
(pop) ; 17
; [eval] !(p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 17
; [then-branch: 956 | !(p1_1@203@01) | live]
; [else-branch: 956 | p1_1@203@01 | live]
(push) ; 18
; [then-branch: 956 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 18
(push) ; 18
; [else-branch: 956 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 957 | False | live]
; [else-branch: 957 | True | live]
(push) ; 20
; [then-branch: 957 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 957 | True]
; [eval] !bypass1_0
(push) ; 21
; [then-branch: 958 | bypass1_0@276@01 | live]
; [else-branch: 958 | !(bypass1_0@276@01) | live]
(push) ; 22
; [then-branch: 958 | bypass1_0@276@01]
(assert bypass1_0@276@01)
(pop) ; 22
(push) ; 22
; [else-branch: 958 | !(bypass1_0@276@01)]
(assert (not bypass1_0@276@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@284@01 3170153))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@369@01 $Perm)
(assert ($Perm.isReadVar $k@369@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@369@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@370@01 $Perm)
(assert ($Perm.isReadVar $k@370@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@370@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@370@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 959 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 959 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 959 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 959 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 960 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 960 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 960 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 960 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 961 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 961 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 961 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 961 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 962 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 962 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 962 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert ($Perm.isReadVar $k@370@01))
(assert (=>
  (not bypass1_0@276@01)
  (and
    (not bypass1_0@276@01)
    (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@276@01) bypass1_0@276@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert ($Perm.isReadVar $k@370@01))
(assert (and
  (=>
    (not bypass1_0@276@01)
    (and
      (not bypass1_0@276@01)
      (_checkDefined%precondition $Snap.unit i_0@284@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@284@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@276@01) bypass1_0@276@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert ($Perm.isReadVar $k@370@01))
(push) ; 17
; [then-branch: 963 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 963 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 18
; [then-branch: 963 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@276@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 963 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 19
; [then-branch: 964 | !(p2_1@204@01) | live]
; [else-branch: 964 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 964 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 20
(push) ; 20
; [else-branch: 964 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 21
; [then-branch: 965 | False | live]
; [else-branch: 965 | True | live]
(push) ; 22
; [then-branch: 965 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 965 | True]
; [eval] !bypass2_0
(push) ; 23
; [then-branch: 966 | bypass2_0@277@01 | live]
; [else-branch: 966 | !(bypass2_0@277@01) | live]
(push) ; 24
; [then-branch: 966 | bypass2_0@277@01]
(assert bypass2_0@277@01)
(pop) ; 24
(push) ; 24
; [else-branch: 966 | !(bypass2_0@277@01)]
(assert (not bypass2_0@277@01))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@288@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@288@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@371@01 $Perm)
(assert ($Perm.isReadVar $k@371@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@371@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@371@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)))
; [eval] __prim__int___box__(list___len___0(inpt_2_0))
; [eval] list___len___0(inpt_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@372@01 $Perm)
(assert ($Perm.isReadVar $k@372@01))
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(pop) ; 25
; Joined path conditions
(assert ($Perm.isReadVar $k@372@01))
(assert (list___len___0%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
(set-option :timeout 0)
(push) ; 25
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(pop) ; 25
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))
(push) ; 25
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 26
; [then-branch: 967 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])) | live]
; [else-branch: 967 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) | live]
(push) ; 27
; [then-branch: 967 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 967 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType)))))
(push) ; 26
; [then-branch: 968 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]) | live]
; [else-branch: 968 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])) | live]
(push) ; 27
; [then-branch: 968 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
(pop) ; 27
(push) ; 27
; [else-branch: 968 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 28
; [then-branch: 969 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 969 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | live]
(push) ; 29
; [then-branch: 969 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 29
(push) ; 29
; [else-branch: 969 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))))
(push) ; 26
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 970 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 970 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 970 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 25
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 25
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@371@01))
(assert ($Perm.isReadVar $k@372@01))
(assert (=>
  (not bypass2_0@277@01)
  (and
    (not bypass2_0@277@01)
    (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit i_0_0@288@01)
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
    (list___len___0%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
    (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))
(assert (or (not bypass2_0@277@01) bypass2_0@277@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@371@01))
(assert ($Perm.isReadVar $k@372@01))
(assert (and
  (=>
    (not bypass2_0@277@01)
    (and
      (not bypass2_0@277@01)
      (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit i_0_0@288@01)
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
      (list___len___0%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
      (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
  (or (not bypass2_0@277@01) bypass2_0@277@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@371@01))
(assert ($Perm.isReadVar $k@372@01))
(assert (=>
  p2_1@204@01
  (and
    p2_1@204@01
    (=>
      (not bypass2_0@277@01)
      (and
        (not bypass2_0@277@01)
        (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit i_0_0@288@01)
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
        (list___len___0%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
        (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
    (or (not bypass2_0@277@01) bypass2_0@277@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@371@01))
(assert ($Perm.isReadVar $k@372@01))
(assert (=>
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
  (and
    (not
      (and
        p1_1@203@01
        (and
          (not bypass1_0@276@01)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
            $Snap.unit
            $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01)))))))
    (=>
      p2_1@204@01
      (and
        p2_1@204@01
        (=>
          (not bypass2_0@277@01)
          (and
            (not bypass2_0@277@01)
            (issubtype<Bool> (typeof<PyType> i_0_0@288@01) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit i_0_0@288@01)
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))
            (list___len___0%precondition ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)
            (__prim__int___box__%precondition $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))))
            (=>
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (not
                  (and
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
                (or
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                  (not
                    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                      $Snap.unit
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))))))
            (or
              (not
                (and
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType))))
            (or
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))) (as int<PyType>  PyType)))
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType)))
                (=
                  (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))
                  $Ref.null)))
            (=>
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
              (and
                (not
                  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                    $Snap.unit
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
                (min_0%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01))) (list<PyType> (as int<PyType>  PyType))))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
              $Snap.unit
              $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))
        (or (not bypass2_0@277@01) bypass2_0@277@01))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p2_1@204@01
    (and
      (not bypass2_0@277@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (and
      p2_1@204@01
      (and
        (not bypass2_0@277@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 971 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))))) | live]
; [else-branch: 971 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01)))) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 971 | !(p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01)))))]
(assert (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@276@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
    (and
      p2_1@204@01
      (and
        (not bypass2_0@277@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01)))))))))
; [eval] p1_1 && !ret1_0
(push) ; 18
; [then-branch: 972 | !(p1_1@203@01) | live]
; [else-branch: 972 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 972 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 972 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 973 | p1_1@203@01 | live]
; [else-branch: 973 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 973 | p1_1@203@01]
(assert p1_1@203@01)
; [exec]
; exhale perm(MustTerminate(_cthread_157)) > none ==>
;   acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) -
;   _loop_original_must_terminate_0)
; [eval] perm(MustTerminate(_cthread_157)) > none
; [eval] perm(MustTerminate(_cthread_157))
; [then-branch: 974 | False | dead]
; [else-branch: 974 | True | live]
(push) ; 19
; [else-branch: 974 | True]
; [exec]
; _res := null
; [eval] p2_1 && !ret2_0
(push) ; 20
; [then-branch: 975 | !(p2_1@204@01) | live]
; [else-branch: 975 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 975 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 975 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 976 | p2_1@204@01 | live]
; [else-branch: 976 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 976 | p2_1@204@01]
(assert p2_1@204@01)
; [exec]
; exhale perm(MustTerminate_0(_cthread_157_0)) > none ==>
;   acc(MustTerminate_0(_cthread_157_0), perm(MustTerminate_0(_cthread_157_0)) -
;   _loop_original_must_terminate_0_0)
; [eval] perm(MustTerminate_0(_cthread_157_0)) > none
; [eval] perm(MustTerminate_0(_cthread_157_0))
; [then-branch: 977 | False | dead]
; [else-branch: 977 | True | live]
(push) ; 21
; [else-branch: 977 | True]
; [exec]
; _res_1 := null
; [exec]
; inhale p1_1 && (!ret1_0 && (p2_1 && !ret2_0)) ==>
;   _checkDefined(result_1, 3557690239821768050) == result_1_0
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 $Snap.unit))
; [eval] p1_1 && (!ret1_0 && (p2_1 && !ret2_0)) ==> _checkDefined(result_1, 3557690239821768050) == result_1_0
; [eval] p1_1 && (!ret1_0 && (p2_1 && !ret2_0))
(push) ; 22
; [then-branch: 978 | !(p1_1@203@01) | live]
; [else-branch: 978 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 978 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 978 | p1_1@203@01]
; [eval] !ret1_0
(push) ; 24
; [then-branch: 979 | False | live]
; [else-branch: 979 | True | live]
(push) ; 25
; [then-branch: 979 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 979 | True]
(push) ; 26
; [then-branch: 980 | !(p2_1@204@01) | live]
; [else-branch: 980 | p2_1@204@01 | live]
(push) ; 27
; [then-branch: 980 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 27
(push) ; 27
; [else-branch: 980 | p2_1@204@01]
; [eval] !ret2_0
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (and p1_1@203@01 p2_1@204@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 981 | p1_1@203@01 && p2_1@204@01 | live]
; [else-branch: 981 | !(p1_1@203@01 && p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 981 | p1_1@203@01 && p2_1@204@01]
(assert (and p1_1@203@01 p2_1@204@01))
; [eval] _checkDefined(result_1, 3557690239821768050) == result_1_0
; [eval] _checkDefined(result_1, 3557690239821768050)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (=>
  (and p1_1@203@01 p2_1@204@01)
  (and
    p1_1@203@01
    p2_1@204@01
    (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))))
(assert (and p1_1@203@01 p2_1@204@01))
(assert (=>
  (and p1_1@203@01 p2_1@204@01)
  (=
    (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)
    result_1_0@287@01)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 22
; [then-branch: 982 | !(p1_1@203@01) | live]
; [else-branch: 982 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 982 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 982 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | p1_1@203@01 | live]
; [else-branch: 983 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 983 | p1_1@203@01]
; [exec]
; _res := _checkDefined(result_1, 3557690239821768050)
; [eval] _checkDefined(result_1, 3557690239821768050)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@283@01 3557690239821768050))
(declare-const _res@374@01 $Ref)
(assert (= _res@374@01 (_checkDefined $Snap.unit result_1@283@01 3557690239821768050)))
; [exec]
; ret1_0 := true
; [eval] p2_1 && !ret2_0
(push) ; 23
; [then-branch: 984 | !(p2_1@204@01) | live]
; [else-branch: 984 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 984 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 24
(push) ; 24
; [else-branch: 984 | p2_1@204@01]
; [eval] !ret2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 985 | p2_1@204@01 | live]
; [else-branch: 985 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 985 | p2_1@204@01]
; [exec]
; _res_1 := result_1_0
; [exec]
; ret2_0 := true
; [exec]
; assert true
; [eval] p1_1 ==> true
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 986 | p1_1@203@01 | live]
; [else-branch: 986 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 986 | p1_1@203@01]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_1 ==> true
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 987 | p2_1@204@01 | live]
; [else-branch: 987 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 987 | p2_1@204@01]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 988 | p1_1@203@01 | live]
; [else-branch: 988 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 988 | p1_1@203@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(push) ; 24
(assert (not (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@374@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@374@01) (as bool<PyType>  PyType))))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 989 | p2_1@204@01 | live]
; [else-branch: 989 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 989 | p2_1@204@01]
; [eval] issubtype(typeof(_res_1), bool())
; [eval] typeof(_res_1)
; [eval] bool()
(pop) ; 25
(pop) ; 24
; Joined path conditions
(push) ; 24
(assert (not (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> result_1_0@287@01) (as bool<PyType>  PyType))))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 24
; [then-branch: 990 | !(p1_1@203@01) | live]
; [else-branch: 990 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 990 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 990 | p1_1@203@01]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 p2_1@204@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 991 | p1_1@203@01 && p2_1@204@01 | live]
; [else-branch: 991 | !(p1_1@203@01 && p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 991 | p1_1@203@01 && p2_1@204@01]
(assert (and p1_1@203@01 p2_1@204@01))
; [eval] _res == _res_1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 p2_1@204@01))
(push) ; 24
(assert (not (=> (and p1_1@203@01 p2_1@204@01) (= _res@374@01 result_1_0@287@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=> (and p1_1@203@01 p2_1@204@01) (= _res@374@01 result_1_0@287@01)))
; [eval] p1_1 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 992 | p1_1@203@01 | live]
; [else-branch: 992 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 992 | p1_1@203@01]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 26
; [then-branch: 993 | False | live]
; [else-branch: 993 | True | live]
(push) ; 27
; [then-branch: 993 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 993 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 28
; [then-branch: 994 | False | live]
; [else-branch: 994 | True | live]
(push) ; 29
; [then-branch: 994 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 994 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 30
; [then-branch: 995 | False | live]
; [else-branch: 995 | True | live]
(push) ; 31
; [then-branch: 995 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 995 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p2_1 ==> (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 996 | p2_1@204@01 | live]
; [else-branch: 996 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 996 | p2_1@204@01]
; [eval] (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false)
(push) ; 26
; [then-branch: 997 | False | live]
; [else-branch: 997 | True | live]
(push) ; 27
; [then-branch: 997 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 997 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false)
(push) ; 28
; [then-branch: 998 | False | live]
; [else-branch: 998 | True | live]
(push) ; 29
; [then-branch: 998 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 998 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false)
(push) ; 30
; [then-branch: 999 | False | live]
; [else-branch: 999 | True | live]
(push) ; 31
; [then-branch: 999 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 999 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 23
; [then-branch: 1000 | !(p2_1@204@01) | live]
; [else-branch: 1000 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 1000 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1000 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1001 | !(p2_1@204@01) | dead]
; [else-branch: 1001 | p2_1@204@01 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1001 | p2_1@204@01]
(assert p2_1@204@01)
(pop) ; 23
(pop) ; 22
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 22
; [then-branch: 1002 | !(p1_1@203@01) | live]
; [else-branch: 1002 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 1002 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1002 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1003 | !(p1_1@203@01) | dead]
; [else-branch: 1003 | p1_1@203@01 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 1003 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 22
(pop) ; 21
(pop) ; 20
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 20
; [then-branch: 1004 | !(p2_1@204@01) | live]
; [else-branch: 1004 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1004 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1004 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1005 | !(p2_1@204@01) | dead]
; [else-branch: 1005 | p2_1@204@01 | live]
(set-option :timeout 0)
(push) ; 20
; [else-branch: 1005 | p2_1@204@01]
(assert p2_1@204@01)
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 18
; [then-branch: 1006 | !(p1_1@203@01) | live]
; [else-branch: 1006 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1006 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1006 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1007 | !(p1_1@203@01) | dead]
; [else-branch: 1007 | p1_1@203@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 1007 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 971 | p1_1@203@01 && !(bypass1_0@276@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@284@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@277@01) && int___lt__(_, int___unbox__(_, i_0_0@288@01), min_0((_, _), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))), password_0_0@212@01)), __prim__int___box__(_, list___len___0((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@290@01))))))))))), inpt_0_0@214@01))))]
(assert (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@276@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@284@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01)))))))))) inpt_0@213@01))))))
  (and
    p2_1@204@01
    (and
      (not bypass2_0@277@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit i_0_0@288@01) (min_0 ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))) password_0_0@212@01)) (__prim__int___box__ $Snap.unit (list___len___0 ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@290@01))))))))))) inpt_0_0@214@01))))))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 8
; [then-branch: 1008 | !(p2_1@204@01) | live]
; [else-branch: 1008 | p2_1@204@01 | live]
(push) ; 9
; [then-branch: 1008 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(pop) ; 9
(push) ; 9
; [else-branch: 1008 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1009 | !(p2_1@204@01) | dead]
; [else-branch: 1009 | p2_1@204@01 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 1009 | p2_1@204@01]
(assert p2_1@204@01)
(pop) ; 8
(pop) ; 7
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 7
; [then-branch: 1010 | !(p1_1@203@01) | live]
; [else-branch: 1010 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1010 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1010 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1011 | !(p1_1@203@01) | dead]
; [else-branch: 1011 | p1_1@203@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1011 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 504 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1012 | p1_1@203@01 | live]
; [else-branch: 1012 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1012 | p1_1@203@01]
(assert p1_1@203@01)
(push) ; 5
(set-option :timeout 10)
(assert (not (= password_0@211@01 inpt_0@213@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt_0@213@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
; [then-branch: 1013 | p2_1@204@01 | dead]
; [else-branch: 1013 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1013 | !(p2_1@204@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> inpt_0 == inpt_0_0
; [eval] p1_1 && p2_1
(push) ; 6
; [then-branch: 1014 | !(p1_1@203@01) | live]
; [else-branch: 1014 | p1_1@203@01 | live]
(push) ; 7
; [then-branch: 1014 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 7
(push) ; 7
; [else-branch: 1014 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p1_1@203@01 (not p1_1@203@01)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1015 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1015 | !(p1_1@203@01 && p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1015 | !(p1_1@203@01 && p2_1@204@01)]
(assert (not (and p1_1@203@01 p2_1@204@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (and p1_1@203@01 p2_1@204@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1016 | p1_1@203@01 | live]
; [else-branch: 1016 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1016 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 6
; [then-branch: 1017 | p2_1@204@01 | dead]
; [else-branch: 1017 | !(p2_1@204@01) | live]
(push) ; 7
; [else-branch: 1017 | !(p2_1@204@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 ($Snap.combine ($Snap.first $t@375@01) ($Snap.second $t@375@01))))
(assert (= ($Snap.first $t@375@01) $Snap.unit))
; [eval] p1_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1018 | p1_1@203@01 | live]
; [else-branch: 1018 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1018 | p1_1@203@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157)
(push) ; 9
; [then-branch: 1019 | False | live]
; [else-branch: 1019 | True | live]
(push) ; 10
; [then-branch: 1019 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1019 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157)
(push) ; 11
; [then-branch: 1020 | False | live]
; [else-branch: 1020 | True | live]
(push) ; 12
; [then-branch: 1020 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1020 | True]
; [eval] _residue_157 <= _current_wait_level_157
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p1_1@203@01 (<= _residue_157@209@01 _current_wait_level_157@215@01)))
(assert (=
  ($Snap.second $t@375@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@375@01))
    ($Snap.second ($Snap.second $t@375@01)))))
(assert (= ($Snap.first ($Snap.second $t@375@01)) $Snap.unit))
; [eval] p2_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 1021 | p2_1@204@01 | dead]
; [else-branch: 1021 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1021 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@375@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@375@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@375@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1022 | p1_1@203@01 | live]
; [else-branch: 1022 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1022 | p1_1@203@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@217@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@375@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 7
; [then-branch: 1023 | p2_1@204@01 | dead]
; [else-branch: 1023 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1023 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 1024 | !(p1_1@203@01) | live]
; [else-branch: 1024 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1024 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1024 | p1_1@203@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1025 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1025 | !(p1_1@203@01 && p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1025 | !(p1_1@203@01 && p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1026 | p1_1@203@01 | live]
; [else-branch: 1026 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1026 | p1_1@203@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
; [then-branch: 1027 | p2_1@204@01 | dead]
; [else-branch: 1027 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1027 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@376@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@377@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@378@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@379@01 $Ref)
; [exec]
; var result_1: Ref
(declare-const result_1@380@01 $Ref)
; [exec]
; var result_1_0: Ref
(declare-const result_1_0@381@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@382@01 $Ref)
; [exec]
; var i_0_0: Ref
(declare-const i_0_0@383@01 $Ref)
; [exec]
; var password_2: Ref
(declare-const password_2@384@01 $Ref)
; [exec]
; var password_2_0: Ref
(declare-const password_2_0@385@01 $Ref)
; [exec]
; var inpt_2: Ref
(declare-const inpt_2@386@01 $Ref)
; [exec]
; var inpt_2_0: Ref
(declare-const inpt_2_0@387@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@388@01 Seq<Measure$>)
; [exec]
; var _loop_measures_0_0: Seq[Measure$]
(declare-const _loop_measures_0_0@389@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@390@01 Bool)
; [exec]
; var _loop_check_before_0_0: Bool
(declare-const _loop_check_before_0_0@391@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@392@01 Bool)
; [exec]
; var _loop_termination_flag_0_0: Bool
(declare-const _loop_termination_flag_0_0@393@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@394@01 $Perm)
; [exec]
; var _loop_original_must_terminate_0_0: Perm
(declare-const _loop_original_must_terminate_0_0@395@01 $Perm)
; [exec]
; var _residue_159: Perm
(declare-const _residue_159@396@01 $Perm)
; [exec]
; var _residue_159_0: Perm
(declare-const _residue_159_0@397@01 $Perm)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@398@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@399@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@400@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@401@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@402@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@403@01 Bool)
; [exec]
; var tmp1_3: Seq[Measure$]
(declare-const tmp1_3@404@01 Seq<Measure$>)
; [exec]
; var tmp2_3: Seq[Measure$]
(declare-const tmp2_3@405@01 Seq<Measure$>)
; [exec]
; var tmp1_4: Ref
(declare-const tmp1_4@406@01 $Ref)
; [exec]
; var tmp2_4: Ref
(declare-const tmp2_4@407@01 $Ref)
; [exec]
; var tmp1_5: Ref
(declare-const tmp1_5@408@01 $Ref)
; [exec]
; var tmp2_5: Ref
(declare-const tmp2_5@409@01 $Ref)
; [exec]
; var tmp1_6: Bool
(declare-const tmp1_6@410@01 Bool)
; [exec]
; var tmp2_6: Bool
(declare-const tmp2_6@411@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@412@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@413@01 Bool)
; [exec]
; var idle1_0: Bool
(declare-const idle1_0@414@01 Bool)
; [exec]
; var idle2_0: Bool
(declare-const idle2_0@415@01 Bool)
; [exec]
; inhale p1_1
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1028 | !(p1_1@203@01) | live]
; [else-branch: 1028 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1028 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1028 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1029 | p1_1@203@01 | live]
; [else-branch: 1029 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1029 | p1_1@203@01]
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; password_2 := password_0
; [exec]
; inpt_2 := inpt_0
; [exec]
; result_1 := __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))
; [eval] __prim__bool___box__(int___eq__(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___eq__(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0))))
(declare-const $k@417@01 $Perm)
(assert ($Perm.isReadVar $k@417@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@417@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@417@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> password_0@211@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_0@211@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0))))
(declare-const $k@418@01 $Perm)
(assert ($Perm.isReadVar $k@418@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@418@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@418@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> inpt_0@213@01) (list<PyType> (list_arg<PyType> (typeof<PyType> inpt_0@213@01) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(push) ; 8
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(pop) ; 8
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (int___eq__ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(declare-const result_1@419@01 $Ref)
(assert (=
  result_1@419@01
  (__prim__bool___box__ $Snap.unit (int___eq__ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
; [exec]
; inhale _isDefined(3557690239821768050)
(declare-const $t@420@01 $Snap)
(assert (= $t@420@01 $Snap.unit))
; [eval] _isDefined(3557690239821768050)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3557690239821768050))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3557690239821768050))
(assert (_isDefined $Snap.unit 3557690239821768050))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0 := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const i_0@421@01 $Ref)
(assert (= i_0@421@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3170153))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170153))
(assert (_isDefined $Snap.unit 3170153))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_157))
; [eval] perm(MustTerminate(_cthread_157))
(declare-const _loop_original_must_terminate_0@423@01 $Perm)
(assert (= _loop_original_must_terminate_0@423@01 $Perm.No))
; [exec]
; _loop_termination_flag_0 := false
; [exec]
; _loop_check_before_0 := true
; [eval] p2_1 && !ret2_0
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1030 | !(p2_1@204@01) | live]
; [else-branch: 1030 | p2_1@204@01 | live]
(push) ; 9
; [then-branch: 1030 | !(p2_1@204@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1030 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or p2_1@204@01 (not p2_1@204@01)))
; [then-branch: 1031 | p2_1@204@01 | dead]
; [else-branch: 1031 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1031 | !(p2_1@204@01)]
(pop) ; 8
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 8
; [then-branch: 1032 | !(p2_1@204@01) | live]
; [else-branch: 1032 | p2_1@204@01 | live]
(push) ; 9
; [then-branch: 1032 | !(p2_1@204@01)]
(pop) ; 9
(push) ; 9
; [else-branch: 1032 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1033 | !(p2_1@204@01) | live]
; [else-branch: 1033 | p2_1@204@01 | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1033 | !(p2_1@204@01)]
; [exec]
; bypass1_0 := !(p1_1 && !ret1_0)
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 9
; [then-branch: 1034 | !(p1_1@203@01) | live]
; [else-branch: 1034 | p1_1@203@01 | live]
(push) ; 10
; [then-branch: 1034 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 10
(push) ; 10
; [else-branch: 1034 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass1_0@424@01 Bool)
(assert (= bypass1_0@424@01 (not p1_1@203@01)))
; [exec]
; bypass2_0 := !(p2_1 && !ret2_0)
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 9
; [then-branch: 1035 | !(p2_1@204@01) | live]
; [else-branch: 1035 | p2_1@204@01 | live]
(push) ; 10
; [then-branch: 1035 | !(p2_1@204@01)]
(pop) ; 10
(push) ; 10
; [else-branch: 1035 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(declare-const bypass2_0@425@01 Bool)
(assert (= bypass2_0@425@01 (not p2_1@204@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1_0@424@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1036 | bypass1_0@424@01 | dead]
; [else-branch: 1036 | !(bypass1_0@424@01) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 1036 | !(bypass1_0@424@01)]
(assert (not bypass1_0@424@01))
(pop) ; 9
; [eval] !bypass1_0
(push) ; 9
(set-option :timeout 10)
(assert (not bypass1_0@424@01))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not bypass1_0@424@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1037 | !(bypass1_0@424@01) | live]
; [else-branch: 1037 | bypass1_0@424@01 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1037 | !(bypass1_0@424@01)]
(assert (not bypass1_0@424@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not bypass2_0@425@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1038 | bypass2_0@425@01 | live]
; [else-branch: 1038 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 1038 | bypass2_0@425@01]
(assert bypass2_0@425@01)
; [exec]
; tmp2_3 := _loop_measures_0_0
; [exec]
; tmp2_4 := result_1_0
; [exec]
; tmp2_5 := i_0_0
; [exec]
; tmp2_6 := _loop_check_before_0_0
; [exec]
; idle1_0 := false
; [exec]
; idle2_0 := false
(declare-const p1_2@426@01 Bool)
(declare-const p2_2@427@01 Bool)
(declare-const idle1_0@428@01 Bool)
(declare-const idle2_0@429@01 Bool)
(declare-const _loop_measures_0@430@01 Seq<Measure$>)
(declare-const result_1@431@01 $Ref)
(declare-const i_0@432@01 $Ref)
(declare-const _loop_check_before_0@433@01 Bool)
(declare-const _loop_measures_0_0@434@01 Seq<Measure$>)
(declare-const result_1_0@435@01 $Ref)
(declare-const i_0_0@436@01 $Ref)
(declare-const _loop_check_before_0_0@437@01 Bool)
(push) ; 11
; Loop head block: Check well-definedness of invariant
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159) && _residue_157 <= _residue_159)
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1039 | !(p1_1@203@01) | live]
; [else-branch: 1039 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1039 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1039 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1040 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1040 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1040 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159) && ((forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159) && _residue_157 <= _residue_159)
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_159)
(push) ; 14
; [then-branch: 1041 | False | live]
; [else-branch: 1041 | True | live]
(push) ; 15
; [then-branch: 1041 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 1041 | True]
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_159)
(push) ; 16
; [then-branch: 1042 | False | live]
; [else-branch: 1042 | True | live]
(push) ; 17
; [then-branch: 1042 | False]
(assert false)
(pop) ; 17
(push) ; 17
; [else-branch: 1042 | True]
; [eval] _residue_157 <= _residue_159
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (<= _residue_157@209@01 _residue_159@396@01)))
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> (forperm _r_4: Ref [_r_4.MustReleaseBoundedp] :: Level(_r_4) <= _residue_159_0) && ((forperm _r_4: Ref [_r_4.MustReleaseUnboundedp] :: Level(_r_4) <= _residue_159_0) && _residue_157_0 <= _residue_159_0)
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1043 | !(p2_1@204@01) | live]
; [else-branch: 1043 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1043 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1043 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@425@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1044 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1044 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 1044 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(assert (not (and p2_1@204@01 (not bypass2_0@425@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not (and p2_1@204@01 (not bypass2_0@425@01))))
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1045 | !(p1_1@203@01) | live]
; [else-branch: 1045 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1045 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1045 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1046 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1046 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1046 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@431@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@438@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1047 | !(p2_1@204@01) | live]
; [else-branch: 1047 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1047 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1047 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 1048 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1048 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1048 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1049 | !(p1_1@203@01) | live]
; [else-branch: 1049 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1049 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1049 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1050 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1050 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1050 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@432@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1051 | !(p2_1@204@01) | live]
; [else-branch: 1051 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1051 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1051 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 1052 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1052 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1052 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1053 | !(p1_1@203@01) | live]
; [else-branch: 1053 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1053 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1053 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1054 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1054 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1054 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
; [eval] p2_1 && !bypass2_0
(push) ; 13
; [then-branch: 1055 | !(p2_1@204@01) | live]
; [else-branch: 1055 | p2_1@204@01 | live]
(push) ; 14
; [then-branch: 1055 | !(p2_1@204@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 1055 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 1056 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1056 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1056 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
; [eval] p1_1 && !bypass1_0
(push) ; 14
; [then-branch: 1057 | !(p1_1@203@01) | live]
; [else-branch: 1057 | p1_1@203@01 | live]
(push) ; 15
; [then-branch: 1057 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1057 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1058 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1058 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1058 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (= password_0@211@01 inpt_0@213@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
; [eval] p2_1 && !bypass2_0
(set-option :timeout 0)
(push) ; 15
; [then-branch: 1059 | !(p2_1@204@01) | live]
; [else-branch: 1059 | p2_1@204@01 | live]
(push) ; 16
; [then-branch: 1059 | !(p2_1@204@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 1059 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1060 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1060 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 15
; [else-branch: 1060 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1061 | !(p1_1@203@01) | live]
; [else-branch: 1061 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1061 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1061 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1062 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1062 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1062 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1063 | !(p2_1@204@01) | live]
; [else-branch: 1063 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1063 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1063 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1064 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1064 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1064 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1065 | !(p1_1@203@01) | live]
; [else-branch: 1065 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1065 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1065 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1066 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1066 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1066 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@439@01 $Perm)
(assert ($Perm.isReadVar $k@439@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@439@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@439@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@439@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1067 | !(p2_1@204@01) | live]
; [else-branch: 1067 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1067 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1067 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1068 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1068 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1068 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1069 | !(p1_1@203@01) | live]
; [else-branch: 1069 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1069 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1069 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1070 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1070 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1070 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@440@01 $Perm)
(assert ($Perm.isReadVar $k@440@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@440@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1071 | !(p2_1@204@01) | live]
; [else-branch: 1071 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1071 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1071 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1072 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1072 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1072 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1073 | !(p1_1@203@01) | live]
; [else-branch: 1073 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1073 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1073 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1074 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1074 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1074 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1075 | !(p2_1@204@01) | live]
; [else-branch: 1075 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1075 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1075 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1076 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1076 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1076 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
  $Snap.unit))
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1077 | !(p1_1@203@01) | live]
; [else-branch: 1077 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1077 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1077 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1078 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1078 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1078 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
  $Snap.unit))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1079 | !(p2_1@204@01) | live]
; [else-branch: 1079 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1079 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1079 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1080 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1080 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1080 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 16
; [then-branch: 1081 | bypass1_0@424@01 | dead]
; [else-branch: 1081 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1081 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 16
; [then-branch: 1082 | bypass1_0@424@01 | dead]
; [else-branch: 1082 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1082 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 16
; [then-branch: 1083 | bypass1_0@424@01 | dead]
; [else-branch: 1083 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1083 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 16
; [then-branch: 1084 | bypass1_0@424@01 | dead]
; [else-branch: 1084 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1084 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1085 | bypass2_0@425@01 | live]
; [else-branch: 1085 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1085 | bypass2_0@425@01]
; [eval] tmp2_3 == _loop_measures_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  bypass2_0@425@01
  (Seq_equal _loop_measures_0_0@389@01 _loop_measures_0_0@434@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1086 | bypass2_0@425@01 | live]
; [else-branch: 1086 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1086 | bypass2_0@425@01]
; [eval] tmp2_4 == result_1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> bypass2_0@425@01 (= result_1_0@381@01 result_1_0@435@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1087 | bypass2_0@425@01 | live]
; [else-branch: 1087 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1087 | bypass2_0@425@01]
; [eval] tmp2_5 == i_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=> bypass2_0@425@01 (= i_0_0@383@01 i_0_0@436@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1088 | bypass2_0@425@01 | live]
; [else-branch: 1088 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1088 | bypass2_0@425@01]
; [eval] tmp2_6 == _loop_check_before_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  bypass2_0@425@01
  (= _loop_check_before_0_0@391@01 _loop_check_before_0_0@437@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; Loop head block: Establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1089 | !(p1_1@203@01) | live]
; [else-branch: 1089 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1089 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1089 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1090 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1090 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1090 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1091 | !(p2_1@204@01) | live]
; [else-branch: 1091 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1091 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1091 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p2_1@204@01 (not bypass2_0@425@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1092 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1092 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 1092 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(assert (not (and p2_1@204@01 (not bypass2_0@425@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not (and p2_1@204@01 (not bypass2_0@425@01))))
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1093 | !(p1_1@203@01) | live]
; [else-branch: 1093 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1093 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1093 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1094 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1094 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1094 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 12
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@419@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@419@01) (as bool<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1095 | !(p2_1@204@01) | live]
; [else-branch: 1095 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1095 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1095 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 1096 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1096 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1096 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1097 | !(p1_1@203@01) | live]
; [else-branch: 1097 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1097 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1097 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1098 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1098 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 1098 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 12
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@421@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@421@01) (as int<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 12
; [then-branch: 1099 | !(p2_1@204@01) | live]
; [else-branch: 1099 | p2_1@204@01 | live]
(push) ; 13
; [then-branch: 1099 | !(p2_1@204@01)]
(pop) ; 13
(push) ; 13
; [else-branch: 1099 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 1100 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1100 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1100 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] p1_1 && !bypass1_0
(push) ; 12
; [then-branch: 1101 | !(p1_1@203@01) | live]
; [else-branch: 1101 | p1_1@203@01 | live]
(push) ; 13
; [then-branch: 1101 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 13
(push) ; 13
; [else-branch: 1101 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1102 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1102 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 1102 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 13
; [then-branch: 1103 | !(p2_1@204@01) | live]
; [else-branch: 1103 | p2_1@204@01 | live]
(push) ; 14
; [then-branch: 1103 | !(p2_1@204@01)]
(pop) ; 14
(push) ; 14
; [else-branch: 1103 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
; [then-branch: 1104 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1104 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 13
; [else-branch: 1104 | !(p2_1@204@01 && !(bypass2_0@425@01))]
; [eval] p1_1 && !bypass1_0
(push) ; 14
; [then-branch: 1105 | !(p1_1@203@01) | live]
; [else-branch: 1105 | p1_1@203@01 | live]
(push) ; 15
; [then-branch: 1105 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 15
(push) ; 15
; [else-branch: 1105 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1106 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1106 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 1106 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 15
; [then-branch: 1107 | !(p2_1@204@01) | live]
; [else-branch: 1107 | p2_1@204@01 | live]
(push) ; 16
; [then-branch: 1107 | !(p2_1@204@01)]
(pop) ; 16
(push) ; 16
; [else-branch: 1107 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
; [then-branch: 1108 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1108 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 15
; [else-branch: 1108 | !(p2_1@204@01 && !(bypass2_0@425@01))]
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1109 | !(p1_1@203@01) | live]
; [else-branch: 1109 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1109 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1109 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1110 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1110 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1110 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))))
(push) ; 18
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) 0))
(pop) ; 18
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) 0))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) 0)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1111 | !(p2_1@204@01) | live]
; [else-branch: 1111 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1111 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1111 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1112 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1112 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1112 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1113 | !(p1_1@203@01) | live]
; [else-branch: 1113 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1113 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1113 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1114 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1114 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1114 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@441@01 $Perm)
(assert ($Perm.isReadVar $k@441@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@441@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@441@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@441@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1115 | !(p2_1@204@01) | live]
; [else-branch: 1115 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1115 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1115 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1116 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1116 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1116 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1117 | !(p1_1@203@01) | live]
; [else-branch: 1117 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1117 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1117 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1118 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1118 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1118 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 18
; [eval] _isDefined(id)
(push) ; 19
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(pop) ; 18
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(push) ; 18
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 19
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)))
(pop) ; 18
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 18
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@442@01 $Perm)
(assert ($Perm.isReadVar $k@442@01))
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(set-option :timeout 0)
(push) ; 18
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 18
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 16
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1119 | !(p2_1@204@01) | live]
; [else-branch: 1119 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1119 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1119 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1120 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1120 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1120 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1121 | !(p1_1@203@01) | live]
; [else-branch: 1121 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1121 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1121 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1122 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1122 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1122 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1123 | True | live]
; [else-branch: 1123 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1123 | True]
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1124 | True | live]
; [else-branch: 1124 | False | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1124 | True]
; [eval] _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 22
; [then-branch: 1125 | False | live]
; [else-branch: 1125 | True | live]
(push) ; 23
; [then-branch: 1125 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1125 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@421@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@443@01 $Perm)
(assert ($Perm.isReadVar $k@443@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@443@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@444@01 $Perm)
(assert ($Perm.isReadVar $k@444@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@444@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@444@01))
(set-option :timeout 0)
(push) ; 24
(pop) ; 24
; Joined path conditions
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 1126 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1126 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 1126 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1126 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType])]
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 1127 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1127 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 1127 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1127 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 1128 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1128 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 1128 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 1128 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1129 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1129 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 1129 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
(push) ; 24
; [then-branch: 1130 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@421@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))))) | live]
; [else-branch: 1130 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@421@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01)))) | live]
(push) ; 25
; [then-branch: 1130 | !(int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@421@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01)))))]
(assert (not
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))
(pop) ; 25
(push) ; 25
; [else-branch: 1130 | int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@421@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@219@01)))))))))))), inpt_0@213@01))))]
(assert (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 26
; [then-branch: 1131 | False | live]
; [else-branch: 1131 | True | live]
(push) ; 27
; [then-branch: 1131 | False]
(assert false)
(pop) ; 27
(push) ; 27
; [else-branch: 1131 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 28
; [then-branch: 1132 | False | live]
; [else-branch: 1132 | True | live]
(push) ; 29
; [then-branch: 1132 | False]
(assert false)
(pop) ; 29
(push) ; 29
; [else-branch: 1132 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 30
; [then-branch: 1133 | False | live]
; [else-branch: 1133 | True | live]
(push) ; 31
; [then-branch: 1133 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 1133 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 32
; [then-branch: 1134 | False | live]
; [else-branch: 1134 | True | live]
(push) ; 33
; [then-branch: 1134 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1134 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (not
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
  (or
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@421@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@421@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
    (or
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01))))
      (not
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@421@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))) inpt_0@213@01)))))))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1135 | !(p2_1@204@01) | live]
; [else-branch: 1135 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1135 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1135 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1136 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1136 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1136 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 16
; [then-branch: 1137 | !(p1_1@203@01) | live]
; [else-branch: 1137 | p1_1@203@01 | live]
(push) ; 17
; [then-branch: 1137 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 17
(push) ; 17
; [else-branch: 1137 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1138 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1138 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1138 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1139 | True | live]
; [else-branch: 1139 | False | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1139 | True]
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 20
; [then-branch: 1140 | False | dead]
; [else-branch: 1140 | True | live]
(push) ; 21
; [else-branch: 1140 | True]
(pop) ; 21
(pop) ; 20
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 16
; [then-branch: 1141 | !(p2_1@204@01) | live]
; [else-branch: 1141 | p2_1@204@01 | live]
(push) ; 17
; [then-branch: 1141 | !(p2_1@204@01)]
(pop) ; 17
(push) ; 17
; [else-branch: 1141 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 1142 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1142 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 17
; [else-branch: 1142 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 16
; [then-branch: 1143 | bypass1_0@424@01 | dead]
; [else-branch: 1143 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1143 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 16
; [then-branch: 1144 | bypass1_0@424@01 | dead]
; [else-branch: 1144 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1144 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 16
; [then-branch: 1145 | bypass1_0@424@01 | dead]
; [else-branch: 1145 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1145 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 16
; [then-branch: 1146 | bypass1_0@424@01 | dead]
; [else-branch: 1146 | !(bypass1_0@424@01) | live]
(push) ; 17
; [else-branch: 1146 | !(bypass1_0@424@01)]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1147 | bypass2_0@425@01 | live]
; [else-branch: 1147 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1147 | bypass2_0@425@01]
; [eval] tmp2_3 == _loop_measures_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1148 | bypass2_0@425@01 | live]
; [else-branch: 1148 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1148 | bypass2_0@425@01]
; [eval] tmp2_4 == result_1_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1149 | bypass2_0@425@01 | live]
; [else-branch: 1149 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1149 | bypass2_0@425@01]
; [eval] tmp2_5 == i_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1150 | bypass2_0@425@01 | live]
; [else-branch: 1150 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1150 | bypass2_0@425@01]
; [eval] tmp2_6 == _loop_check_before_0_0
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 16
(assert ($Perm.isReadVar $k@439@01))
(assert ($Perm.isReadVar $k@440@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
  $Snap.unit))
(assert (=>
  bypass2_0@425@01
  (Seq_equal _loop_measures_0_0@389@01 _loop_measures_0_0@434@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2_0@425@01 (= result_1_0@381@01 result_1_0@435@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=> bypass2_0@425@01 (= i_0_0@383@01 i_0_0@436@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (=>
  bypass2_0@425@01
  (= _loop_check_before_0_0@391@01 _loop_check_before_0_0@437@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))))
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (<= _residue_157@209@01 _residue_159@396@01)))
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@431@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@438@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
  $Snap.unit))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@432@01) (as int<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 17
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 18
; [then-branch: 1151 | !(p1_1@203@01) | live]
; [else-branch: 1151 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1151 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1151 | p1_1@203@01]
; [eval] !ret1_0
(push) ; 20
; [then-branch: 1152 | False | live]
; [else-branch: 1152 | True | live]
(push) ; 21
; [then-branch: 1152 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1152 | True]
; [eval] !bypass1_0
(push) ; 22
; [then-branch: 1153 | bypass1_0@424@01 | live]
; [else-branch: 1153 | !(bypass1_0@424@01) | live]
(push) ; 23
; [then-branch: 1153 | bypass1_0@424@01]
(assert bypass1_0@424@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1153 | !(bypass1_0@424@01)]
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@445@01 $Perm)
(assert ($Perm.isReadVar $k@445@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@445@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@446@01 $Perm)
(assert ($Perm.isReadVar $k@446@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@446@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 1154 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1154 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 1154 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1154 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 1155 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1155 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 1155 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1155 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 1156 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1156 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 1156 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 1156 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1157 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1157 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 1157 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert (=>
  (not bypass1_0@424@01)
  (and
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@424@01) bypass1_0@424@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert (and
  (=>
    (not bypass1_0@424@01)
    (and
      (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@424@01) bypass1_0@424@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert (=>
  p1_1@203@01
  (and
    (=>
      (not bypass1_0@424@01)
      (and
        (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@424@01) bypass1_0@424@01))))
(push) ; 18
; [then-branch: 1158 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 1158 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 19
; [then-branch: 1158 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 1158 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 20
; [then-branch: 1159 | !(p2_1@204@01) | live]
; [else-branch: 1159 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1159 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1159 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 22
; [then-branch: 1160 | False | live]
; [else-branch: 1160 | True | live]
(push) ; 23
; [then-branch: 1160 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1160 | True]
; [eval] !bypass2_0
(push) ; 24
; [then-branch: 1161 | bypass2_0@425@01 | live]
; [else-branch: 1161 | !(bypass2_0@425@01) | live]
(push) ; 25
; [then-branch: 1161 | bypass2_0@425@01]
(pop) ; 25
(push) ; 25
; [else-branch: 1161 | !(bypass2_0@425@01)]
(assert (not bypass2_0@425@01))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@447@01 $Perm)
(assert ($Perm.isReadVar $k@447@01))
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
(pop) ; 17
(push) ; 17
; [eval] !(p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 18
; [then-branch: 1162 | !(p1_1@203@01) | live]
; [else-branch: 1162 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1162 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1162 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 1163 | False | live]
; [else-branch: 1163 | True | live]
(push) ; 21
; [then-branch: 1163 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1163 | True]
; [eval] !bypass1_0
(push) ; 22
; [then-branch: 1164 | bypass1_0@424@01 | live]
; [else-branch: 1164 | !(bypass1_0@424@01) | live]
(push) ; 23
; [then-branch: 1164 | bypass1_0@424@01]
(assert bypass1_0@424@01)
(pop) ; 23
(push) ; 23
; [else-branch: 1164 | !(bypass1_0@424@01)]
(assert (not bypass1_0@424@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 24
; [eval] _isDefined(id)
(push) ; 25
(pop) ; 25
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 25
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 24
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@448@01 $Perm)
(assert ($Perm.isReadVar $k@448@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@448@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 24
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@449@01 $Perm)
(assert ($Perm.isReadVar $k@449@01))
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No $k@449@01)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@449@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 24
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 24
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 24
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 25
; [then-branch: 1165 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1165 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 26
; [then-branch: 1165 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1165 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 25
; [then-branch: 1166 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1166 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 26
; [then-branch: 1166 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 26
(push) ; 26
; [else-branch: 1166 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 27
; [then-branch: 1167 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1167 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 28
; [then-branch: 1167 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 28
(push) ; 28
; [else-branch: 1167 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 25
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1168 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1168 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 1168 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 24
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 24
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert (=>
  (not bypass1_0@424@01)
  (and
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@424@01) bypass1_0@424@01))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert (and
  (=>
    (not bypass1_0@424@01)
    (and
      (not bypass1_0@424@01)
      (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@424@01) bypass1_0@424@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@448@01))
(assert ($Perm.isReadVar $k@449@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (=>
      (not bypass1_0@424@01)
      (and
        (not bypass1_0@424@01)
        (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@424@01) bypass1_0@424@01))))
(push) ; 18
; [then-branch: 1169 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 1169 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 19
; [then-branch: 1169 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(pop) ; 19
(push) ; 19
; [else-branch: 1169 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 20
; [then-branch: 1170 | !(p2_1@204@01) | live]
; [else-branch: 1170 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1170 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1170 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 22
; [then-branch: 1171 | False | live]
; [else-branch: 1171 | True | live]
(push) ; 23
; [then-branch: 1171 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1171 | True]
; [eval] !bypass2_0
(push) ; 24
; [then-branch: 1172 | bypass2_0@425@01 | live]
; [else-branch: 1172 | !(bypass2_0@425@01) | live]
(push) ; 25
; [then-branch: 1172 | bypass2_0@425@01]
(pop) ; 25
(push) ; 25
; [else-branch: 1172 | !(bypass2_0@425@01)]
(assert (not bypass2_0@425@01))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@450@01 $Perm)
(assert ($Perm.isReadVar $k@450@01))
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
(pop) ; 17
; Loop head block: Follow loop-internal edges
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 17
; [then-branch: 1173 | !(p1_1@203@01) | live]
; [else-branch: 1173 | p1_1@203@01 | live]
(push) ; 18
; [then-branch: 1173 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1173 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 1174 | False | live]
; [else-branch: 1174 | True | live]
(push) ; 20
; [then-branch: 1174 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1174 | True]
; [eval] !bypass1_0
(push) ; 21
; [then-branch: 1175 | bypass1_0@424@01 | live]
; [else-branch: 1175 | !(bypass1_0@424@01) | live]
(push) ; 22
; [then-branch: 1175 | bypass1_0@424@01]
(assert bypass1_0@424@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1175 | !(bypass1_0@424@01)]
(assert (not bypass1_0@424@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@451@01 $Perm)
(assert ($Perm.isReadVar $k@451@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@451@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@452@01 $Perm)
(assert ($Perm.isReadVar $k@452@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@452@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@452@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 1176 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1176 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 1176 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 1176 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 1177 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1177 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 1177 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 1177 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 1178 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1178 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 1178 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 1178 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1179 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1179 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 1179 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  (not bypass1_0@424@01)
  (and
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@424@01) bypass1_0@424@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (and
  (=>
    (not bypass1_0@424@01)
    (and
      (not bypass1_0@424@01)
      (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@424@01) bypass1_0@424@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (=>
      (not bypass1_0@424@01)
      (and
        (not bypass1_0@424@01)
        (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
        (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
        (=>
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (not
              (and
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
            (or
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
              (not
                (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
        (or
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (=
              (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
              $Ref.null)))
        (=>
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (and
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
            (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (or (not bypass1_0@424@01) bypass1_0@424@01))))
(push) ; 17
; [then-branch: 1180 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 1180 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 18
; [then-branch: 1180 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 1180 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 19
; [then-branch: 1181 | !(p2_1@204@01) | live]
; [else-branch: 1181 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 1181 | !(p2_1@204@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 1181 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 21
; [then-branch: 1182 | False | live]
; [else-branch: 1182 | True | live]
(push) ; 22
; [then-branch: 1182 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1182 | True]
; [eval] !bypass2_0
(push) ; 23
; [then-branch: 1183 | bypass2_0@425@01 | live]
; [else-branch: 1183 | !(bypass2_0@425@01) | live]
(push) ; 24
; [then-branch: 1183 | bypass2_0@425@01]
(pop) ; 24
(push) ; 24
; [else-branch: 1183 | !(bypass2_0@425@01)]
(assert (not bypass2_0@425@01))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@453@01 $Perm)
(assert ($Perm.isReadVar $k@453@01))
(check-sat)
; unsat
(pop) ; 25
(pop) ; 24
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
(assert (=>
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (and p2_1@204@01 (not bypass2_0@425@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and p2_1@204@01 (not bypass2_0@425@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1184 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01) | live]
; [else-branch: 1184 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01)) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1184 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01)]
(assert (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and p2_1@204@01 (not bypass2_0@425@01))))
; [exec]
; p1_2 := p1_1 &&
;   (!ret1_0 &&
;   int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2)))))
; [eval] p1_1 && (!ret1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))
(push) ; 18
; [then-branch: 1185 | !(p1_1@203@01) | live]
; [else-branch: 1185 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1185 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1185 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 1186 | False | live]
; [else-branch: 1186 | True | live]
(push) ; 21
; [then-branch: 1186 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1186 | True]
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@454@01 $Perm)
(assert ($Perm.isReadVar $k@454@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@454@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@454@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@455@01 $Perm)
(assert ($Perm.isReadVar $k@455@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@455@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 1187 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1187 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 1187 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 1187 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 1188 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1188 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 1188 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 1188 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 1189 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1189 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 1189 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 1189 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1190 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1190 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1190 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@454@01))
(assert ($Perm.isReadVar $k@455@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@454@01))
(assert ($Perm.isReadVar $k@455@01))
(assert (=>
  p1_1@203@01
  (and
    p1_1@203@01
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(declare-const p1_2@456@01 Bool)
(assert (=
  p1_2@456@01
  (and
    p1_1@203@01
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
; [exec]
; p2_2 := p2_1 &&
;   (!ret2_0 &&
;   int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p2_1 && (!ret2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))
(push) ; 18
; [then-branch: 1191 | !(p2_1@204@01) | live]
; [else-branch: 1191 | p2_1@204@01 | live]
(push) ; 19
; [then-branch: 1191 | !(p2_1@204@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 1191 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 20
; [then-branch: 1192 | False | live]
; [else-branch: 1192 | True | live]
(push) ; 21
; [then-branch: 1192 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1192 | True]
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@457@01 $Perm)
(assert ($Perm.isReadVar $k@457@01))
(check-sat)
; unsat
(pop) ; 22
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (=> p2_1@204@01 false))
; [exec]
; idle1_0 := p1_1 &&
;   (!ret1_0 &&
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2)))))
; [eval] p1_1 && (!ret1_0 && !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))
(push) ; 18
; [then-branch: 1193 | !(p1_1@203@01) | live]
; [else-branch: 1193 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1193 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1193 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 20
; [then-branch: 1194 | False | live]
; [else-branch: 1194 | True | live]
(push) ; 21
; [then-branch: 1194 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1194 | True]
; [eval] !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@458@01 $Perm)
(assert ($Perm.isReadVar $k@458@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@458@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@458@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@459@01 $Perm)
(assert ($Perm.isReadVar $k@459@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@459@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@459@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 22
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 22
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 22
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 23
; [then-branch: 1195 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1195 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 24
; [then-branch: 1195 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 1195 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 23
; [then-branch: 1196 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1196 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 24
; [then-branch: 1196 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 24
(push) ; 24
; [else-branch: 1196 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 25
; [then-branch: 1197 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1197 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 26
; [then-branch: 1197 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 26
(push) ; 26
; [else-branch: 1197 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 23
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1198 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1198 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1198 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 22
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@458@01))
(assert ($Perm.isReadVar $k@459@01))
(assert (and
  (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
  (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))
  (=>
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (and
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
    $Snap.unit
    $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@458@01))
(assert ($Perm.isReadVar $k@459@01))
(declare-const idle1_0@460@01 Bool)
(assert (=
  idle1_0@460@01
  (and
    p1_1@203@01
    (not
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
; [exec]
; idle2_0 := p2_1 &&
;   (!ret2_0 &&
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p2_1 && (!ret2_0 && !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))
(push) ; 18
; [then-branch: 1199 | !(p2_1@204@01) | live]
; [else-branch: 1199 | p2_1@204@01 | live]
(push) ; 19
; [then-branch: 1199 | !(p2_1@204@01)]
(pop) ; 19
(push) ; 19
; [else-branch: 1199 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 20
; [then-branch: 1200 | False | live]
; [else-branch: 1200 | True | live]
(push) ; 21
; [then-branch: 1200 | False]
(assert false)
(pop) ; 21
(push) ; 21
; [else-branch: 1200 | True]
; [eval] !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 22
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 23
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@461@01 $Perm)
(assert ($Perm.isReadVar $k@461@01))
(check-sat)
; unsat
(pop) ; 22
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert false)
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
; [eval] p1_2 && !ret1_0
(push) ; 18
; [then-branch: 1201 | !(p1_2@456@01) | live]
; [else-branch: 1201 | p1_2@456@01 | live]
(push) ; 19
; [then-branch: 1201 | !(p1_2@456@01)]
(assert (not p1_2@456@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1201 | p1_2@456@01]
(assert p1_2@456@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or p1_2@456@01 (not p1_2@456@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_2@456@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1_2@456@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1202 | p1_2@456@01 | live]
; [else-branch: 1202 | !(p1_2@456@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1202 | p1_2@456@01]
(assert p1_2@456@01)
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; result_1 := __prim__bool___box__(bool___unbox__(_checkDefined(result_1, 3557690239821768050)) &&
;   str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2,
;   _checkDefined(i_0, 3170153))))
; [eval] __prim__bool___box__(bool___unbox__(_checkDefined(result_1, 3557690239821768050)) && str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153))))
; [eval] bool___unbox__(_checkDefined(result_1, 3557690239821768050)) && str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153)))
; [eval] bool___unbox__(_checkDefined(result_1, 3557690239821768050))
; [eval] _checkDefined(result_1, 3557690239821768050)
(push) ; 19
; [eval] _isDefined(id)
(push) ; 20
(pop) ; 20
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@431@01 3557690239821768050))
(pop) ; 19
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@431@01 3557690239821768050))
(push) ; 19
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)) (as bool<PyType>  PyType)))
(assert (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)) (as bool<PyType>  PyType))
  (bool___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))))
(push) ; 19
; [then-branch: 1203 | !(bool___unbox__(_, _checkDefined(_, result_1@431@01, 3557690239821768050))) | live]
; [else-branch: 1203 | bool___unbox__(_, _checkDefined(_, result_1@431@01, 3557690239821768050)) | live]
(push) ; 20
; [then-branch: 1203 | !(bool___unbox__(_, _checkDefined(_, result_1@431@01, 3557690239821768050)))]
(assert (not
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))))
(pop) ; 20
(push) ; 20
; [else-branch: 1203 | bool___unbox__(_, _checkDefined(_, result_1@431@01, 3557690239821768050))]
(assert (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)))
; [eval] str___eq__(list___getitem__(password_2, _checkDefined(i_0, 3170153)), list___getitem__(inpt_2, _checkDefined(i_0, 3170153)))
; [eval] list___getitem__(password_2, _checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 21
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(declare-const $k@462@01 $Perm)
(assert ($Perm.isReadVar $k@462@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@462@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@463@01 $Perm)
(assert ($Perm.isReadVar $k@463@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@463@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@463@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(declare-const letvar@464@01 Int)
(assert (=
  (as letvar@464@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 22
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(push) ; 22
(push) ; 23
(set-option :timeout 10)
(assert (not (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1204 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0 | dead]
; [else-branch: 1204 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0) | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 1204 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0)]
(assert (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
(assert (not
  (< (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)))
(push) ; 22
; [then-branch: 1205 | False | live]
; [else-branch: 1205 | True | live]
(push) ; 23
; [then-branch: 1205 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1205 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1206 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0 | live]
; [else-branch: 1206 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1206 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0]
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(assert (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
  (=
    (as letvar@464@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
  (not
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      0))
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)
  (=>
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] list___getitem__(inpt_2, _checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 21
; [eval] _isDefined(id)
(push) ; 22
(pop) ; 22
; Joined path conditions
(pop) ; 21
; Joined path conditions
(push) ; 21
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@465@01 $Perm)
(assert ($Perm.isReadVar $k@465@01))
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No $k@465@01)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@466@01 $Perm)
(assert ($Perm.isReadVar $k@466@01))
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No $k@466@01)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 22
; Joined path conditions
(assert ($Perm.isReadVar $k@466@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(declare-const letvar@467@01 Int)
(assert (=
  (as letvar@467@01  Int)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 22
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 1207 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0 | dead]
; [else-branch: 1207 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0) | live]
(push) ; 23
; [else-branch: 1207 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) < 0)]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(push) ; 22
; [then-branch: 1208 | False | live]
; [else-branch: 1208 | True | live]
(push) ; 23
; [then-branch: 1208 | False]
(assert false)
(pop) ; 23
(push) ; 23
; [else-branch: 1208 | True]
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 24
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 24
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1209 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0 | live]
; [else-branch: 1209 | !(int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1209 | int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)) >= 0]
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(assert (not (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>= (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) 0)
  (<
    (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
      $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 21
; Joined path conditions
(assert ($Perm.isReadVar $k@465@01))
(assert ($Perm.isReadVar $k@466@01))
(assert (and
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
  (=
    (as letvar@467@01  Int)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
  (=>
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      0)
    (<
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))
(push) ; 21
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 22
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
      $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
      $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))
(pop) ; 21
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153)))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@462@01))
(assert ($Perm.isReadVar $k@463@01))
(assert ($Perm.isReadVar $k@465@01))
(assert ($Perm.isReadVar $k@466@01))
(assert (=>
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
  (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (=
      (as letvar@464@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (not
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        0))
    (>=
      (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      0)
    (=>
      (>=
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (=
      (as letvar@467@01  Int)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (=>
      (>=
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        0)
      (<
        (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
        (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153))) (as str<PyType>  PyType))
    (str___eq__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))))
(assert (or
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
  (not
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)))))
(push) ; 19
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))))
(pop) ; 19
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit (and
  (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
  (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
        $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
        $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153))))))
(declare-const result_1@468@01 $Ref)
(assert (=
  result_1@468@01
  (__prim__bool___box__ $Snap.unit (and
    (bool___unbox__ $Snap.unit (_checkDefined $Snap.unit result_1@431@01 3557690239821768050))
    (str___eq__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
          $Snap.unit))) password_0@211@01 (_checkDefined $Snap.unit i_0@432@01 3170153)) (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))
          $Snap.unit))) inpt_0@213@01 (_checkDefined $Snap.unit i_0@432@01 3170153)))))))
; [exec]
; inhale _isDefined(3557690239821768050)
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 $Snap.unit))
; [eval] _isDefined(3557690239821768050)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_0 := __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] __prim__int___box__(int___add__(int___unbox__(i_0), 1))
; [eval] int___add__(int___unbox__(i_0), 1)
; [eval] int___unbox__(i_0)
(set-option :timeout 0)
(push) ; 19
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 20
(assert (not (issubtype<Bool> (typeof<PyType> i_0@432@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0@432@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0@432@01))
(pop) ; 19
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0@432@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0@432@01)))
(push) ; 19
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@432@01) 1))
(pop) ; 19
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit i_0@432@01) 1))
(push) ; 19
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@432@01) 1)))
(pop) ; 19
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@432@01) 1)))
(declare-const i_0@470@01 $Ref)
(assert (=
  i_0@470@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit i_0@432@01) 1))))
; [exec]
; inhale _isDefined(3170153)
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; [eval] _isDefined(3170153)
(push) ; 19
(pop) ; 19
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_0 := false
; [eval] p2_2 && !ret2_0
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1210 | !(p2_1@204@01) | live]
; [else-branch: 1210 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 1210 | !(p2_1@204@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 1210 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
; [then-branch: 1211 | p2_1@204@01 | dead]
; [else-branch: 1211 | !(p2_1@204@01) | live]
(push) ; 19
; [else-branch: 1211 | !(p2_1@204@01)]
(pop) ; 19
; [eval] !(p2_2 && !ret2_0)
; [eval] p2_2 && !ret2_0
(push) ; 19
; [then-branch: 1212 | !(p2_1@204@01) | live]
; [else-branch: 1212 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 1212 | !(p2_1@204@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 1212 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(push) ; 19
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1213 | !(p2_1@204@01) | live]
; [else-branch: 1213 | p2_1@204@01 | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 1213 | !(p2_1@204@01)]
; [exec]
; assert (p1_2 && !ret1_0 ==>
;   _loop_termination_flag_0 ==>
;   !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)),
;   __prim__int___box__(list___len__(inpt_2))))) &&
;   (p2_2 && !ret2_0 ==>
;   _loop_termination_flag_0_0 ==>
;   !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)),
;   __prim__int___box__(list___len___0(inpt_2_0)))))
; [eval] p1_2 && !ret1_0 ==> _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] p1_2 && !ret1_0
(push) ; 20
; [then-branch: 1214 | !(p1_2@456@01) | live]
; [else-branch: 1214 | p1_2@456@01 | live]
(push) ; 21
; [then-branch: 1214 | !(p1_2@456@01)]
(assert (not p1_2@456@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1214 | p1_2@456@01]
; [eval] !ret1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_2@456@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1215 | p1_2@456@01 | live]
; [else-branch: 1215 | !(p1_2@456@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1215 | p1_2@456@01]
; [eval] _loop_termination_flag_0 ==> !int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
(push) ; 22
; [then-branch: 1216 | False | dead]
; [else-branch: 1216 | True | live]
(push) ; 23
; [else-branch: 1216 | True]
(pop) ; 23
(pop) ; 22
; Joined path conditions
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p2_2 && !ret2_0 ==> _loop_termination_flag_0_0 ==> !int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] p2_2 && !ret2_0
(push) ; 20
; [then-branch: 1217 | !(p2_1@204@01) | live]
; [else-branch: 1217 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1217 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1217 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 1218 | p2_1@204@01 | dead]
; [else-branch: 1218 | !(p2_1@204@01) | live]
(push) ; 21
; [else-branch: 1218 | !(p2_1@204@01)]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] p1_1 && !bypass1_0 ==> true
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 1219 | !(p1_1@203@01) | live]
; [else-branch: 1219 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 1219 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1219 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1220 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1220 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1220 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> true
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 1221 | !(p2_1@204@01) | live]
; [else-branch: 1221 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1221 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1221 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 1222 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1222 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 21
; [else-branch: 1222 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(result_1), bool())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 1223 | !(p1_1@203@01) | live]
; [else-branch: 1223 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 1223 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1223 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1224 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1224 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1224 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(result_1), bool())
; [eval] typeof(result_1)
; [eval] bool()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@468@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> result_1@468@01) (as bool<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(result_1_0), bool())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 1225 | !(p2_1@204@01) | live]
; [else-branch: 1225 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1225 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1225 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 1226 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1226 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 21
; [else-branch: 1226 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> issubtype(typeof(i_0), int())
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 1227 | !(p1_1@203@01) | live]
; [else-branch: 1227 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 1227 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1227 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(push) ; 21
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1228 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1228 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1228 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] issubtype(typeof(i_0), int())
; [eval] typeof(i_0)
; [eval] int()
(pop) ; 21
(pop) ; 20
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 20
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@470@01) (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (issubtype<Bool> (typeof<PyType> i_0@470@01) (as int<PyType>  PyType))))
; [eval] p2_1 && !bypass2_0 ==> issubtype(typeof(i_0_0), int())
; [eval] p2_1 && !bypass2_0
(push) ; 20
; [then-branch: 1229 | !(p2_1@204@01) | live]
; [else-branch: 1229 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1229 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1229 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
; [then-branch: 1230 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1230 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 21
; [else-branch: 1230 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 21
(pop) ; 20
; Joined path conditions
; [eval] p1_1 && !bypass1_0
(push) ; 20
; [then-branch: 1231 | !(p1_1@203@01) | live]
; [else-branch: 1231 | p1_1@203@01 | live]
(push) ; 21
; [then-branch: 1231 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 21
(push) ; 21
; [else-branch: 1231 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1232 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1232 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1232 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 21
; [then-branch: 1233 | !(p2_1@204@01) | live]
; [else-branch: 1233 | p2_1@204@01 | live]
(push) ; 22
; [then-branch: 1233 | !(p2_1@204@01)]
(pop) ; 22
(push) ; 22
; [else-branch: 1233 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1234 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1234 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 21
; [else-branch: 1234 | !(p2_1@204@01 && !(bypass2_0@425@01))]
; [eval] p1_1 && !bypass1_0
(push) ; 22
; [then-branch: 1235 | !(p1_1@203@01) | live]
; [else-branch: 1235 | p1_1@203@01 | live]
(push) ; 23
; [then-branch: 1235 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 23
(push) ; 23
; [else-branch: 1235 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1236 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1236 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1236 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0
(push) ; 23
; [then-branch: 1237 | !(p2_1@204@01) | live]
; [else-branch: 1237 | p2_1@204@01 | live]
(push) ; 24
; [then-branch: 1237 | !(p2_1@204@01)]
(pop) ; 24
(push) ; 24
; [else-branch: 1237 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
; [then-branch: 1238 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1238 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 23
; [else-branch: 1238 | !(p2_1@204@01 && !(bypass2_0@425@01))]
; [eval] p1_1 && !bypass1_0 ==> int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 1239 | !(p1_1@203@01) | live]
; [else-branch: 1239 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 1239 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1239 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1240 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1240 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1240 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___ge__(int___unbox__(_checkDefined(i_0, 3170153)), 0)
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))))
(push) ; 26
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) 0))
(pop) ; 26
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) 0))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@470@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) 0))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) 0)))
; [eval] p2_1 && !bypass2_0 ==> int___ge__(int___unbox__(i_0_0), 0)
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 1241 | !(p2_1@204@01) | live]
; [else-branch: 1241 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 1241 | !(p2_1@204@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1241 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 1242 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1242 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 25
; [else-branch: 1242 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 1243 | !(p1_1@203@01) | live]
; [else-branch: 1243 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 1243 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1243 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1244 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1244 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1244 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(password_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))))
; [eval] list___len__(password_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@472@01 $Perm)
(assert ($Perm.isReadVar $k@472@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@472@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@472@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@472@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@470@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(password_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 1245 | !(p2_1@204@01) | live]
; [else-branch: 1245 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 1245 | !(p2_1@204@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1245 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 1246 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1246 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 25
; [else-branch: 1246 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 1247 | !(p1_1@203@01) | live]
; [else-branch: 1247 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 1247 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1247 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1248 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1248 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1248 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] int___le__(int___unbox__(_checkDefined(i_0, 3170153)), list___len__(inpt_2))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 26
; [eval] _isDefined(id)
(push) ; 27
(pop) ; 27
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(pop) ; 26
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@470@01 3170153))
(push) ; 26
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 27
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)))
(pop) ; 26
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))))
; [eval] list___len__(inpt_2)
(push) ; 26
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@473@01 $Perm)
(assert ($Perm.isReadVar $k@473@01))
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No $k@473@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 26
; Joined path conditions
(assert ($Perm.isReadVar $k@473@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 26
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 26
; Joined path conditions
(assert (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert ($Perm.isReadVar $k@473@01))
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and
    p1_1@203@01
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@470@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@470@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (int___le__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
(push) ; 24
(assert (not (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (int___le__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@470@01 3170153)) (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
; [eval] p2_1 && !bypass2_0 ==> int___le__(int___unbox__(i_0_0), list___len___0(inpt_2_0))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 1249 | !(p2_1@204@01) | live]
; [else-branch: 1249 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 1249 | !(p2_1@204@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1249 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 1250 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1250 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 25
; [else-branch: 1250 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 1251 | !(p1_1@203@01) | live]
; [else-branch: 1251 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 1251 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1251 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1252 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1252 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1252 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] !idle1_0 ==> _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@460@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@460@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1253 | !(idle1_0@460@01) | live]
; [else-branch: 1253 | idle1_0@460@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1253 | !(idle1_0@460@01)]
(assert (not idle1_0@460@01))
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 28
; [then-branch: 1254 | False | dead]
; [else-branch: 1254 | True | live]
(push) ; 29
; [else-branch: 1254 | True]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@460@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (and p1_1@203@01 (not bypass1_0@424@01))
  (and p1_1@203@01 (not bypass1_0@424@01) (not idle1_0@460@01))))
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> _loop_check_before_0_0 ==> _loop_termination_flag_0_0 || (!int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))) || perm(MustTerminate_0(_cthread_157_0)) == none && ((forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 1255 | !(p2_1@204@01) | live]
; [else-branch: 1255 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 1255 | !(p2_1@204@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1255 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 1256 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1256 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 25
; [else-branch: 1256 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] p1_1 && !bypass1_0 ==> !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] p1_1 && !bypass1_0
(push) ; 24
; [then-branch: 1257 | !(p1_1@203@01) | live]
; [else-branch: 1257 | p1_1@203@01 | live]
(push) ; 25
; [then-branch: 1257 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 25
(push) ; 25
; [else-branch: 1257 | p1_1@203@01]
; [eval] !bypass1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 (not bypass1_0@424@01)))))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (and p1_1@203@01 (not bypass1_0@424@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1258 | p1_1@203@01 && !(bypass1_0@424@01) | live]
; [else-branch: 1258 | !(p1_1@203@01 && !(bypass1_0@424@01)) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1258 | p1_1@203@01 && !(bypass1_0@424@01)]
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] !idle1_0 ==> !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !idle1_0
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not idle1_0@460@01))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(set-option :timeout 10)
(assert (not (not idle1_0@460@01)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1259 | !(idle1_0@460@01) | live]
; [else-branch: 1259 | idle1_0@460@01 | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 1259 | !(idle1_0@460@01)]
(assert (not idle1_0@460@01))
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1260 | True | live]
; [else-branch: 1260 | False | dead]
(set-option :timeout 0)
(push) ; 29
; [then-branch: 1260 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 30
; [then-branch: 1261 | False | live]
; [else-branch: 1261 | True | live]
(push) ; 31
; [then-branch: 1261 | False]
(assert false)
(pop) ; 31
(push) ; 31
; [else-branch: 1261 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 32
; [then-branch: 1262 | False | live]
; [else-branch: 1262 | True | live]
(push) ; 33
; [then-branch: 1262 | False]
(assert false)
(pop) ; 33
(push) ; 33
; [else-branch: 1262 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 34
; [then-branch: 1263 | False | live]
; [else-branch: 1263 | True | live]
(push) ; 35
; [then-branch: 1263 | False]
(assert false)
(pop) ; 35
(push) ; 35
; [else-branch: 1263 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 35
(pop) ; 34
; Joined path conditions
; Joined path conditions
(pop) ; 33
(pop) ; 32
; Joined path conditions
; Joined path conditions
(pop) ; 31
(pop) ; 30
; Joined path conditions
; Joined path conditions
(pop) ; 29
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (not idle1_0@460@01))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (and p1_1@203@01 (not bypass1_0@424@01)))
; [eval] p2_1 && !bypass2_0 ==> !idle2_0 ==> !_loop_check_before_0_0 ==> (forperm _r_5: Ref [MustInvokeBounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded_0(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBoundedp] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnboundedp] :: false)))
; [eval] p2_1 && !bypass2_0
(push) ; 24
; [then-branch: 1264 | !(p2_1@204@01) | live]
; [else-branch: 1264 | p2_1@204@01 | live]
(push) ; 25
; [then-branch: 1264 | !(p2_1@204@01)]
(pop) ; 25
(push) ; 25
; [else-branch: 1264 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !bypass2_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(push) ; 24
; [then-branch: 1265 | p2_1@204@01 && !(bypass2_0@425@01) | dead]
; [else-branch: 1265 | !(p2_1@204@01 && !(bypass2_0@425@01)) | live]
(push) ; 25
; [else-branch: 1265 | !(p2_1@204@01 && !(bypass2_0@425@01))]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_3 == _loop_measures_0
(push) ; 24
; [then-branch: 1266 | bypass1_0@424@01 | dead]
; [else-branch: 1266 | !(bypass1_0@424@01) | live]
(push) ; 25
; [else-branch: 1266 | !(bypass1_0@424@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_4 == result_1
(push) ; 24
; [then-branch: 1267 | bypass1_0@424@01 | dead]
; [else-branch: 1267 | !(bypass1_0@424@01) | live]
(push) ; 25
; [else-branch: 1267 | !(bypass1_0@424@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_5 == i_0
(push) ; 24
; [then-branch: 1268 | bypass1_0@424@01 | dead]
; [else-branch: 1268 | !(bypass1_0@424@01) | live]
(push) ; 25
; [else-branch: 1268 | !(bypass1_0@424@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass1_0 ==> tmp1_6 == _loop_check_before_0
(push) ; 24
; [then-branch: 1269 | bypass1_0@424@01 | dead]
; [else-branch: 1269 | !(bypass1_0@424@01) | live]
(push) ; 25
; [else-branch: 1269 | !(bypass1_0@424@01)]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_3 == _loop_measures_0_0
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1270 | bypass2_0@425@01 | live]
; [else-branch: 1270 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1270 | bypass2_0@425@01]
; [eval] tmp2_3 == _loop_measures_0_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_4 == result_1_0
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1271 | bypass2_0@425@01 | live]
; [else-branch: 1271 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1271 | bypass2_0@425@01]
; [eval] tmp2_4 == result_1_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_5 == i_0_0
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1272 | bypass2_0@425@01 | live]
; [else-branch: 1272 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1272 | bypass2_0@425@01]
; [eval] tmp2_5 == i_0_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
; [eval] bypass2_0 ==> tmp2_6 == _loop_check_before_0_0
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not (not bypass2_0@425@01)))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1273 | bypass2_0@425@01 | live]
; [else-branch: 1273 | !(bypass2_0@425@01) | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 1273 | bypass2_0@425@01]
; [eval] tmp2_6 == _loop_check_before_0_0
(pop) ; 25
(pop) ; 24
; Joined path conditions
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_2 && !ret1_0)
; [eval] p1_2 && !ret1_0
(push) ; 18
; [then-branch: 1274 | !(p1_2@456@01) | live]
; [else-branch: 1274 | p1_2@456@01 | live]
(push) ; 19
; [then-branch: 1274 | !(p1_2@456@01)]
(assert (not p1_2@456@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1274 | p1_2@456@01]
(assert p1_2@456@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_2@456@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1275 | !(p1_2@456@01) | dead]
; [else-branch: 1275 | p1_2@456@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 1275 | p1_2@456@01]
(assert p1_2@456@01)
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 1184 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01))]
(assert (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (and p2_1@204@01 (not bypass2_0@425@01)))))
(pop) ; 17
; [eval] !(p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))))) || p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
; [eval] p1_1 && (!ret1_0 && (!bypass1_0 && int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))))
(push) ; 17
; [then-branch: 1276 | !(p1_1@203@01) | live]
; [else-branch: 1276 | p1_1@203@01 | live]
(push) ; 18
; [then-branch: 1276 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 18
(push) ; 18
; [else-branch: 1276 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(push) ; 19
; [then-branch: 1277 | False | live]
; [else-branch: 1277 | True | live]
(push) ; 20
; [then-branch: 1277 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 1277 | True]
; [eval] !bypass1_0
(push) ; 21
; [then-branch: 1278 | bypass1_0@424@01 | live]
; [else-branch: 1278 | !(bypass1_0@424@01) | live]
(push) ; 22
; [then-branch: 1278 | bypass1_0@424@01]
(assert bypass1_0@424@01)
(pop) ; 22
(push) ; 22
; [else-branch: 1278 | !(bypass1_0@424@01)]
(assert (not bypass1_0@424@01))
; [eval] int___lt__(int___unbox__(_checkDefined(i_0, 3170153)), min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2))))
; [eval] int___unbox__(_checkDefined(i_0, 3170153))
; [eval] _checkDefined(i_0, 3170153)
(push) ; 23
; [eval] _isDefined(id)
(push) ; 24
(pop) ; 24
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit i_0@432@01 3170153))
(push) ; 23
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 24
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)))
(pop) ; 23
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))))
; [eval] min(__prim__int___box__(list___len__(password_2)), __prim__int___box__(list___len__(inpt_2)))
; [eval] __prim__int___box__(list___len__(password_2))
; [eval] list___len__(password_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@474@01 $Perm)
(assert ($Perm.isReadVar $k@474@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@474@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@474@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)))
; [eval] __prim__int___box__(list___len__(inpt_2))
; [eval] list___len__(inpt_2)
(push) ; 23
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@475@01 $Perm)
(assert ($Perm.isReadVar $k@475@01))
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No $k@475@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(pop) ; 23
; Joined path conditions
(assert ($Perm.isReadVar $k@475@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
(set-option :timeout 0)
(push) ; 23
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(pop) ; 23
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))
(push) ; 23
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int()) || issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), int()) && issubtype(typeof(b), int())
; [eval] issubtype(typeof(a), int())
; [eval] typeof(a)
; [eval] int()
(push) ; 24
; [then-branch: 1279 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])) | live]
; [else-branch: 1279 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) | live]
(push) ; 25
; [then-branch: 1279 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 1279 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(b), int())
; [eval] typeof(b)
; [eval] int()
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType)))))
(push) ; 24
; [then-branch: 1280 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]) | live]
; [else-branch: 1280 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])) | live]
(push) ; 25
; [then-branch: 1280 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType])]
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
(pop) ; 25
(push) ; 25
; [else-branch: 1280 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), int[PyType]) && issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))), int[PyType]))]
(assert (not
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
; [eval] issubtype(typeof(a), list(int())) && b == null
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 26
; [then-branch: 1281 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
; [else-branch: 1281 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | live]
(push) ; 27
; [then-branch: 1281 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(pop) ; 27
(push) ; 27
; [else-branch: 1281 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
; [eval] b == null
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))))
(assert (or
  (not
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))))
(push) ; 24
(assert (not (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null)))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
  (and
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
    (=
      (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      $Ref.null))))
; [eval] issubtype(typeof(a), list(int()))
; [eval] typeof(a)
; [eval] list(int())
; [eval] int()
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1282 | issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])) | dead]
; [else-branch: 1282 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType]))) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 1282 | !(issubtype[Bool](typeof[PyType](__prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01))), list[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(assert (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (and
  (or
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
  (=>
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
  (or
    (not
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
  (or
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
    (and
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
      (=
        (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
        $Ref.null)))))
(assert (=>
  (not
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
  (and
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
(assert (not
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))
(push) ; 23
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 23
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
  $Snap.unit
  $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@474@01))
(assert ($Perm.isReadVar $k@475@01))
(assert (=>
  (not bypass1_0@424@01)
  (and
    (not bypass1_0@424@01)
    (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
    (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
    (or
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
    (=>
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (or
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
    (or
      (not
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
    (or
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
      (and
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
        (=
          (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
          $Ref.null)))
    (=>
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (and
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
    (not
      (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(assert (or (not bypass1_0@424@01) bypass1_0@424@01))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@474@01))
(assert ($Perm.isReadVar $k@475@01))
(assert (and
  (=>
    (not bypass1_0@424@01)
    (and
      (not bypass1_0@424@01)
      (_checkDefined%precondition $Snap.unit i_0@432@01 3170153)
      (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit i_0@432@01 3170153)) (as int<PyType>  PyType))
      (int___unbox__%precondition $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))
      (list___len__%precondition ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)
      (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
      (or
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))))
      (=>
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (not
            (and
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
          (or
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
            (not
              (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
                $Snap.unit
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))))))
      (or
        (not
          (and
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType))))
      (or
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (as int<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))) (as int<PyType>  PyType)))
        (and
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType)))
          (=
            (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))
            $Ref.null)))
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
        (and
          (not
            (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
              $Snap.unit
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
          (min%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))
      (not
        (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01))) (list<PyType> (as int<PyType>  PyType))))
      (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (or (not bypass1_0@424@01) bypass1_0@424@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@474@01))
(assert ($Perm.isReadVar $k@475@01))
(push) ; 17
; [then-branch: 1283 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) | live]
; [else-branch: 1283 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))) | live]
(push) ; 18
; [then-branch: 1283 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01))))]
(assert (and
  p1_1@203@01
  (and
    (not bypass1_0@424@01)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
      $Snap.unit
      $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
      $Snap.unit
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01)))))))
(pop) ; 18
(push) ; 18
; [else-branch: 1283 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))))]
(assert (not
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))))
; [eval] p2_1 && (!ret2_0 && (!bypass2_0 && int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))))
(push) ; 19
; [then-branch: 1284 | !(p2_1@204@01) | live]
; [else-branch: 1284 | p2_1@204@01 | live]
(push) ; 20
; [then-branch: 1284 | !(p2_1@204@01)]
(pop) ; 20
(push) ; 20
; [else-branch: 1284 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(push) ; 21
; [then-branch: 1285 | False | live]
; [else-branch: 1285 | True | live]
(push) ; 22
; [then-branch: 1285 | False]
(assert false)
(pop) ; 22
(push) ; 22
; [else-branch: 1285 | True]
; [eval] !bypass2_0
(push) ; 23
; [then-branch: 1286 | bypass2_0@425@01 | live]
; [else-branch: 1286 | !(bypass2_0@425@01) | live]
(push) ; 24
; [then-branch: 1286 | bypass2_0@425@01]
(pop) ; 24
(push) ; 24
; [else-branch: 1286 | !(bypass2_0@425@01)]
(assert (not bypass2_0@425@01))
; [eval] int___lt__(int___unbox__(i_0_0), min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0))))
; [eval] int___unbox__(i_0_0)
(push) ; 25
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit i_0_0@436@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> i_0_0@436@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit i_0_0@436@01)))
; [eval] min_0(__prim__int___box__(list___len___0(password_2_0)), __prim__int___box__(list___len___0(inpt_2_0)))
; [eval] __prim__int___box__(list___len___0(password_2_0))
; [eval] list___len___0(password_2_0)
(push) ; 25
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 26
(assert (not (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0)))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> password_2_0@385@01) (list<PyType> (list_arg<PyType> (typeof<PyType> password_2_0@385@01) 0))))
(declare-const $k@476@01 $Perm)
(assert ($Perm.isReadVar $k@476@01))
(check-sat)
; unsat
(pop) ; 25
(pop) ; 24
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
(set-option :timeout 10)
(assert (not (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and p2_1@204@01 (not bypass2_0@425@01)))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (and p2_1@204@01 (not bypass2_0@425@01))))))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1287 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01)) | live]
; [else-branch: 1287 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01) | live]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 1287 | !(p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01))]
(assert (not
  (or
    (and
      p1_1@203@01
      (and
        (not bypass1_0@424@01)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
          $Snap.unit
          $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
    (and p2_1@204@01 (not bypass2_0@425@01)))))
; [eval] p1_1 && !ret1_0
(push) ; 18
; [then-branch: 1288 | !(p1_1@203@01) | live]
; [else-branch: 1288 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1288 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1288 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1289 | p1_1@203@01 | live]
; [else-branch: 1289 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 1289 | p1_1@203@01]
(assert p1_1@203@01)
; [exec]
; exhale perm(MustTerminate(_cthread_157)) > none ==>
;   acc(MustTerminate(_cthread_157), perm(MustTerminate(_cthread_157)) -
;   _loop_original_must_terminate_0)
; [eval] perm(MustTerminate(_cthread_157)) > none
; [eval] perm(MustTerminate(_cthread_157))
; [then-branch: 1290 | False | dead]
; [else-branch: 1290 | True | live]
(push) ; 19
; [else-branch: 1290 | True]
; [exec]
; _res := null
; [eval] p2_1 && !ret2_0
(push) ; 20
; [then-branch: 1291 | !(p2_1@204@01) | live]
; [else-branch: 1291 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1291 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1291 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
; [then-branch: 1292 | p2_1@204@01 | dead]
; [else-branch: 1292 | !(p2_1@204@01) | live]
(push) ; 20
; [else-branch: 1292 | !(p2_1@204@01)]
(pop) ; 20
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 20
; [then-branch: 1293 | !(p2_1@204@01) | live]
; [else-branch: 1293 | p2_1@204@01 | live]
(push) ; 21
; [then-branch: 1293 | !(p2_1@204@01)]
(pop) ; 21
(push) ; 21
; [else-branch: 1293 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(push) ; 20
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1294 | !(p2_1@204@01) | live]
; [else-branch: 1294 | p2_1@204@01 | dead]
(set-option :timeout 0)
(push) ; 20
; [then-branch: 1294 | !(p2_1@204@01)]
; [exec]
; inhale p1_1 && (!ret1_0 && (p2_1 && !ret2_0)) ==>
;   _checkDefined(result_1, 3557690239821768050) == result_1_0
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] p1_1 && (!ret1_0 && (p2_1 && !ret2_0)) ==> _checkDefined(result_1, 3557690239821768050) == result_1_0
; [eval] p1_1 && (!ret1_0 && (p2_1 && !ret2_0))
(push) ; 21
; [then-branch: 1295 | !(p1_1@203@01) | live]
; [else-branch: 1295 | p1_1@203@01 | live]
(push) ; 22
; [then-branch: 1295 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1295 | p1_1@203@01]
; [eval] !ret1_0
(push) ; 23
; [then-branch: 1296 | False | live]
; [else-branch: 1296 | True | live]
(push) ; 24
; [then-branch: 1296 | False]
(assert false)
(pop) ; 24
(push) ; 24
; [else-branch: 1296 | True]
(push) ; 25
; [then-branch: 1297 | !(p2_1@204@01) | live]
; [else-branch: 1297 | p2_1@204@01 | live]
(push) ; 26
; [then-branch: 1297 | !(p2_1@204@01)]
(pop) ; 26
(push) ; 26
; [else-branch: 1297 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
; [then-branch: 1298 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1298 | !(p1_1@203@01 && p2_1@204@01) | live]
(push) ; 22
; [else-branch: 1298 | !(p1_1@203@01 && p2_1@204@01)]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1299 | !(p1_1@203@01) | live]
; [else-branch: 1299 | p1_1@203@01 | live]
(push) ; 22
; [then-branch: 1299 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1299 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
(push) ; 21
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1300 | p1_1@203@01 | live]
; [else-branch: 1300 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 1300 | p1_1@203@01]
; [exec]
; _res := _checkDefined(result_1, 3557690239821768050)
; [eval] _checkDefined(result_1, 3557690239821768050)
(push) ; 22
; [eval] _isDefined(id)
(push) ; 23
(pop) ; 23
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@431@01 3557690239821768050))
(pop) ; 22
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit result_1@431@01 3557690239821768050))
(declare-const _res@478@01 $Ref)
(assert (= _res@478@01 (_checkDefined $Snap.unit result_1@431@01 3557690239821768050)))
; [exec]
; ret1_0 := true
; [eval] p2_1 && !ret2_0
(push) ; 22
; [then-branch: 1301 | !(p2_1@204@01) | live]
; [else-branch: 1301 | p2_1@204@01 | live]
(push) ; 23
; [then-branch: 1301 | !(p2_1@204@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 1301 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
; [then-branch: 1302 | p2_1@204@01 | dead]
; [else-branch: 1302 | !(p2_1@204@01) | live]
(push) ; 22
; [else-branch: 1302 | !(p2_1@204@01)]
(pop) ; 22
; [eval] !(p2_1 && !ret2_0)
; [eval] p2_1 && !ret2_0
(push) ; 22
; [then-branch: 1303 | !(p2_1@204@01) | live]
; [else-branch: 1303 | p2_1@204@01 | live]
(push) ; 23
; [then-branch: 1303 | !(p2_1@204@01)]
(pop) ; 23
(push) ; 23
; [else-branch: 1303 | p2_1@204@01]
(assert p2_1@204@01)
; [eval] !ret2_0
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(push) ; 22
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1304 | !(p2_1@204@01) | live]
; [else-branch: 1304 | p2_1@204@01 | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 1304 | !(p2_1@204@01)]
; [exec]
; assert true
; [eval] p1_1 ==> true
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1305 | p1_1@203@01 | live]
; [else-branch: 1305 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1305 | p1_1@203@01]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; [eval] p2_1 ==> true
(push) ; 23
; [then-branch: 1306 | p2_1@204@01 | dead]
; [else-branch: 1306 | !(p2_1@204@01) | live]
(push) ; 24
; [else-branch: 1306 | !(p2_1@204@01)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1307 | p1_1@203@01 | live]
; [else-branch: 1307 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1307 | p1_1@203@01]
; [eval] issubtype(typeof(_res), bool())
; [eval] typeof(_res)
; [eval] bool()
(pop) ; 24
(pop) ; 23
; Joined path conditions
(push) ; 23
(assert (not (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@478@01) (as bool<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (=>
  p1_1@203@01
  (issubtype<Bool> (typeof<PyType> _res@478@01) (as bool<PyType>  PyType))))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 23
; [then-branch: 1308 | p2_1@204@01 | dead]
; [else-branch: 1308 | !(p2_1@204@01) | live]
(push) ; 24
; [else-branch: 1308 | !(p2_1@204@01)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 23
; [then-branch: 1309 | !(p1_1@203@01) | live]
; [else-branch: 1309 | p1_1@203@01 | live]
(push) ; 24
; [then-branch: 1309 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 24
(push) ; 24
; [else-branch: 1309 | p1_1@203@01]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; Joined path conditions
(push) ; 23
; [then-branch: 1310 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1310 | !(p1_1@203@01 && p2_1@204@01) | live]
(push) ; 24
; [else-branch: 1310 | !(p1_1@203@01 && p2_1@204@01)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
; [eval] p1_1 ==> (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not p1_1@203@01)))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1311 | p1_1@203@01 | live]
; [else-branch: 1311 | !(p1_1@203@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 1311 | p1_1@203@01]
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_7: Ref [MustInvokeBounded(_r_7)] :: false)
(push) ; 25
; [then-branch: 1312 | False | live]
; [else-branch: 1312 | True | live]
(push) ; 26
; [then-branch: 1312 | False]
(assert false)
(pop) ; 26
(push) ; 26
; [else-branch: 1312 | True]
; [eval] (forperm _r_7: Ref [MustInvokeUnbounded(_r_7)] :: false)
(push) ; 27
; [then-branch: 1313 | False | live]
; [else-branch: 1313 | True | live]
(push) ; 28
; [then-branch: 1313 | False]
(assert false)
(pop) ; 28
(push) ; 28
; [else-branch: 1313 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: false)
(push) ; 29
; [then-branch: 1314 | False | live]
; [else-branch: 1314 | True | live]
(push) ; 30
; [then-branch: 1314 | False]
(assert false)
(pop) ; 30
(push) ; 30
; [else-branch: 1314 | True]
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: false)
(pop) ; 30
(pop) ; 29
; Joined path conditions
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
; [eval] p2_1 ==> (forperm _r_7: Ref [MustInvokeBounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [MustInvokeUnbounded_0(_r_7)] :: false) && ((forperm _r_7: Ref [_r_7.MustReleaseBoundedp] :: false) && (forperm _r_7: Ref [_r_7.MustReleaseUnboundedp] :: false)))
(push) ; 23
; [then-branch: 1315 | p2_1@204@01 | dead]
; [else-branch: 1315 | !(p2_1@204@01) | live]
(push) ; 24
; [else-branch: 1315 | !(p2_1@204@01)]
(pop) ; 24
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 21
; [then-branch: 1316 | !(p1_1@203@01) | live]
; [else-branch: 1316 | p1_1@203@01 | live]
(push) ; 22
; [then-branch: 1316 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 22
(push) ; 22
; [else-branch: 1316 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 22
(pop) ; 21
; Joined path conditions
; Joined path conditions
; [then-branch: 1317 | !(p1_1@203@01) | dead]
; [else-branch: 1317 | p1_1@203@01 | live]
(push) ; 21
; [else-branch: 1317 | p1_1@203@01]
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 18
; [then-branch: 1318 | !(p1_1@203@01) | live]
; [else-branch: 1318 | p1_1@203@01 | live]
(push) ; 19
; [then-branch: 1318 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 19
(push) ; 19
; [else-branch: 1318 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1319 | !(p1_1@203@01) | dead]
; [else-branch: 1319 | p1_1@203@01 | live]
(set-option :timeout 0)
(push) ; 18
; [else-branch: 1319 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 18
(pop) ; 17
(push) ; 17
; [else-branch: 1287 | p1_1@203@01 && !(bypass1_0@424@01) && int___lt__(_, int___unbox__(_, _checkDefined(_, i_0@432@01, 3170153)), min((_, _), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))), password_0@211@01)), __prim__int___box__(_, list___len__((_, First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@438@01)))))))))), inpt_0@213@01)))) || p2_1@204@01 && !(bypass2_0@425@01)]
(assert (or
  (and
    p1_1@203@01
    (and
      (not bypass1_0@424@01)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit (_checkDefined $Snap.unit i_0@432@01 3170153)) (min_ ($Snap.combine
        $Snap.unit
        $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))) password_0@211@01)) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
        $Snap.unit
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))))) inpt_0@213@01))))))
  (and p2_1@204@01 (not bypass2_0@425@01))))
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !bypass2_0
(push) ; 10
(set-option :timeout 10)
(assert (not bypass2_0@425@01))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1320 | !(bypass2_0@425@01) | dead]
; [else-branch: 1320 | bypass2_0@425@01 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 1320 | bypass2_0@425@01]
(assert bypass2_0@425@01)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 7
; [then-branch: 1321 | !(p1_1@203@01) | live]
; [else-branch: 1321 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1321 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(pop) ; 8
(push) ; 8
; [else-branch: 1321 | p1_1@203@01]
(assert p1_1@203@01)
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not p1_1@203@01))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1322 | !(p1_1@203@01) | dead]
; [else-branch: 1322 | p1_1@203@01 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1322 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 503 | !(p1_1@203@01)]
(assert (not p1_1@203@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_1@204@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1323 | p2_1@204@01 | live]
; [else-branch: 1323 | !(p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1323 | p2_1@204@01]
(assert p2_1@204@01)
(assert (not (= password_0_0@212@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
; [then-branch: 1324 | p1_1@203@01 | dead]
; [else-branch: 1324 | !(p1_1@203@01) | live]
(push) ; 4
; [else-branch: 1324 | !(p1_1@203@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1325 | p2_1@204@01 | live]
; [else-branch: 1325 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1325 | p2_1@204@01]
(push) ; 6
(set-option :timeout 10)
(assert (not (= password_0_0@212@01 inpt_0_0@214@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= inpt_0_0@214@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> inpt_0 == inpt_0_0
; [eval] p1_1 && p2_1
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1326 | !(p1_1@203@01) | live]
; [else-branch: 1326 | p1_1@203@01 | live]
(push) ; 7
; [then-branch: 1326 | !(p1_1@203@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 1326 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p1_1@203@01 (not p1_1@203@01)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1327 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1327 | !(p1_1@203@01 && p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1327 | !(p1_1@203@01 && p2_1@204@01)]
(assert (not (and p1_1@203@01 p2_1@204@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (and p1_1@203@01 p2_1@204@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 6
; [then-branch: 1328 | p1_1@203@01 | dead]
; [else-branch: 1328 | !(p1_1@203@01) | live]
(push) ; 7
; [else-branch: 1328 | !(p1_1@203@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1329 | p2_1@204@01 | live]
; [else-branch: 1329 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1329 | p2_1@204@01]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 ($Snap.combine ($Snap.first $t@479@01) ($Snap.second $t@479@01))))
(assert (= ($Snap.first $t@479@01) $Snap.unit))
; [eval] p1_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 7
; [then-branch: 1330 | p1_1@203@01 | dead]
; [else-branch: 1330 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1330 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second $t@479@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@479@01))
    ($Snap.second ($Snap.second $t@479@01)))))
(assert (= ($Snap.first ($Snap.second $t@479@01)) $Snap.unit))
; [eval] p2_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1331 | p2_1@204@01 | live]
; [else-branch: 1331 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1331 | p2_1@204@01]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0)
(push) ; 9
; [then-branch: 1332 | False | live]
; [else-branch: 1332 | True | live]
(push) ; 10
; [then-branch: 1332 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1332 | True]
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0)
(push) ; 11
; [then-branch: 1333 | False | live]
; [else-branch: 1333 | True | live]
(push) ; 12
; [then-branch: 1333 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1333 | True]
; [eval] _residue_157_0 <= _current_wait_level_157_0
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=> p2_1@204@01 (<= _residue_157_0@210@01 _current_wait_level_157_0@216@01)))
(assert (=
  ($Snap.second ($Snap.second $t@479@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@479@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@479@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@479@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 7
; [then-branch: 1334 | p1_1@203@01 | dead]
; [else-branch: 1334 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1334 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@479@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@479@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@479@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1335 | p2_1@204@01 | live]
; [else-branch: 1335 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1335 | p2_1@204@01]
; [eval] issubtype(typeof(_res_1), bool())
; [eval] typeof(_res_1)
; [eval] bool()
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  p2_1@204@01
  (issubtype<Bool> (typeof<PyType> _res_1@218@01) (as bool<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01)))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 1336 | !(p1_1@203@01) | live]
; [else-branch: 1336 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1336 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1336 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1337 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1337 | !(p1_1@203@01 && p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1337 | !(p1_1@203@01 && p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
; [then-branch: 1338 | p1_1@203@01 | dead]
; [else-branch: 1338 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1338 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@479@01))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not p2_1@204@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1339 | p2_1@204@01 | live]
; [else-branch: 1339 | !(p2_1@204@01) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1339 | p2_1@204@01]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@480@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@481@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@482@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@483@01 $Ref)
; [exec]
; var result_1: Ref
(declare-const result_1@484@01 $Ref)
; [exec]
; var result_1_0: Ref
(declare-const result_1_0@485@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@486@01 $Ref)
; [exec]
; var i_0_0: Ref
(declare-const i_0_0@487@01 $Ref)
; [exec]
; var password_2: Ref
(declare-const password_2@488@01 $Ref)
; [exec]
; var password_2_0: Ref
(declare-const password_2_0@489@01 $Ref)
; [exec]
; var inpt_2: Ref
(declare-const inpt_2@490@01 $Ref)
; [exec]
; var inpt_2_0: Ref
(declare-const inpt_2_0@491@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@492@01 Seq<Measure$>)
; [exec]
; var _loop_measures_0_0: Seq[Measure$]
(declare-const _loop_measures_0_0@493@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@494@01 Bool)
; [exec]
; var _loop_check_before_0_0: Bool
(declare-const _loop_check_before_0_0@495@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@496@01 Bool)
; [exec]
; var _loop_termination_flag_0_0: Bool
(declare-const _loop_termination_flag_0_0@497@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@498@01 $Perm)
; [exec]
; var _loop_original_must_terminate_0_0: Perm
(declare-const _loop_original_must_terminate_0_0@499@01 $Perm)
; [exec]
; var _residue_159: Perm
(declare-const _residue_159@500@01 $Perm)
; [exec]
; var _residue_159_0: Perm
(declare-const _residue_159_0@501@01 $Perm)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@502@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@503@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@504@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@505@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@506@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@507@01 Bool)
; [exec]
; var tmp1_3: Seq[Measure$]
(declare-const tmp1_3@508@01 Seq<Measure$>)
; [exec]
; var tmp2_3: Seq[Measure$]
(declare-const tmp2_3@509@01 Seq<Measure$>)
; [exec]
; var tmp1_4: Ref
(declare-const tmp1_4@510@01 $Ref)
; [exec]
; var tmp2_4: Ref
(declare-const tmp2_4@511@01 $Ref)
; [exec]
; var tmp1_5: Ref
(declare-const tmp1_5@512@01 $Ref)
; [exec]
; var tmp2_5: Ref
(declare-const tmp2_5@513@01 $Ref)
; [exec]
; var tmp1_6: Bool
(declare-const tmp1_6@514@01 Bool)
; [exec]
; var tmp2_6: Bool
(declare-const tmp2_6@515@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@516@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@517@01 Bool)
; [exec]
; var idle1_0: Bool
(declare-const idle1_0@518@01 Bool)
; [exec]
; var idle2_0: Bool
(declare-const idle2_0@519@01 Bool)
; [exec]
; inhale p1_1
(declare-const $t@520@01 $Snap)
(assert (= $t@520@01 $Snap.unit))
(assert p1_1@203@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1340 | !(p1_1@203@01) | live]
; [else-branch: 1340 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1340 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1340 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1341 | p1_1@203@01 | dead]
; [else-branch: 1341 | !(p1_1@203@01) | live]
(push) ; 7
; [else-branch: 1341 | !(p1_1@203@01)]
(pop) ; 7
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 7
; [then-branch: 1342 | !(p1_1@203@01) | live]
; [else-branch: 1342 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1342 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1342 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1343 | !(p1_1@203@01) | dead]
; [else-branch: 1343 | p1_1@203@01 | live]
(push) ; 7
; [else-branch: 1343 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 1323 | !(p2_1@204@01)]
(assert (not p2_1@204@01))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
; [then-branch: 1344 | p1_1@203@01 | dead]
; [else-branch: 1344 | !(p1_1@203@01) | live]
(push) ; 4
; [else-branch: 1344 | !(p1_1@203@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
; [then-branch: 1345 | p2_1@204@01 | dead]
; [else-branch: 1345 | !(p2_1@204@01) | live]
(push) ; 5
; [else-branch: 1345 | !(p2_1@204@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> inpt_0 == inpt_0_0
; [eval] p1_1 && p2_1
(push) ; 6
; [then-branch: 1346 | !(p1_1@203@01) | live]
; [else-branch: 1346 | p1_1@203@01 | live]
(push) ; 7
; [then-branch: 1346 | !(p1_1@203@01)]
(pop) ; 7
(push) ; 7
; [else-branch: 1346 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or p1_1@203@01 (not p1_1@203@01)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (and p1_1@203@01 p2_1@204@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1347 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1347 | !(p1_1@203@01 && p2_1@204@01) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 1347 | !(p1_1@203@01 && p2_1@204@01)]
(assert (not (and p1_1@203@01 p2_1@204@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (and p1_1@203@01 p2_1@204@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 6
; [then-branch: 1348 | p1_1@203@01 | dead]
; [else-branch: 1348 | !(p1_1@203@01) | live]
(push) ; 7
; [else-branch: 1348 | !(p1_1@203@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 6
; [then-branch: 1349 | p2_1@204@01 | dead]
; [else-branch: 1349 | !(p2_1@204@01) | live]
(push) ; 7
; [else-branch: 1349 | !(p2_1@204@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@521@01 $Snap)
(assert (= $t@521@01 ($Snap.combine ($Snap.first $t@521@01) ($Snap.second $t@521@01))))
(assert (= ($Snap.first $t@521@01) $Snap.unit))
; [eval] p1_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157) && ((forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157) && _residue_157 <= _current_wait_level_157)
(push) ; 7
; [then-branch: 1350 | p1_1@203@01 | dead]
; [else-branch: 1350 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1350 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second $t@521@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@521@01))
    ($Snap.second ($Snap.second $t@521@01)))))
(assert (= ($Snap.first ($Snap.second $t@521@01)) $Snap.unit))
; [eval] p2_1 ==> (forperm _r_6: Ref [_r_6.MustReleaseBoundedp] :: Level(_r_6) <= _current_wait_level_157_0) && ((forperm _r_6: Ref [_r_6.MustReleaseUnboundedp] :: Level(_r_6) <= _current_wait_level_157_0) && _residue_157_0 <= _current_wait_level_157_0)
(push) ; 7
; [then-branch: 1351 | p2_1@204@01 | dead]
; [else-branch: 1351 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1351 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@521@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@521@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@521@01))) $Snap.unit))
; [eval] p1_1 ==> issubtype(typeof(_res), bool())
(push) ; 7
; [then-branch: 1352 | p1_1@203@01 | dead]
; [else-branch: 1352 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1352 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@521@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
  $Snap.unit))
; [eval] p2_1 ==> issubtype(typeof(_res_1), bool())
(push) ; 7
; [then-branch: 1353 | p2_1@204@01 | dead]
; [else-branch: 1353 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1353 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
  $Snap.unit))
; [eval] p1_1 && p2_1 ==> _res == _res_1
; [eval] p1_1 && p2_1
(push) ; 7
; [then-branch: 1354 | !(p1_1@203@01) | live]
; [else-branch: 1354 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1354 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1354 | p1_1@203@01]
(assert p1_1@203@01)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 1355 | p1_1@203@01 && p2_1@204@01 | dead]
; [else-branch: 1355 | !(p1_1@203@01 && p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1355 | !(p1_1@203@01 && p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))
  $Snap.unit))
; [eval] p1_1 ==> true
(push) ; 7
; [then-branch: 1356 | p1_1@203@01 | dead]
; [else-branch: 1356 | !(p1_1@203@01) | live]
(push) ; 8
; [else-branch: 1356 | !(p1_1@203@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@521@01))))))
  $Snap.unit))
; [eval] p2_1 ==> true
(push) ; 7
; [then-branch: 1357 | p2_1@204@01 | dead]
; [else-branch: 1357 | !(p2_1@204@01) | live]
(push) ; 8
; [else-branch: 1357 | !(p2_1@204@01)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [exec]
; var ret1_0: Bool
(declare-const ret1_0@522@01 Bool)
; [exec]
; var ret2_0: Bool
(declare-const ret2_0@523@01 Bool)
; [exec]
; var _err: Ref
(declare-const _err@524@01 $Ref)
; [exec]
; var _err_1: Ref
(declare-const _err_1@525@01 $Ref)
; [exec]
; var result_1: Ref
(declare-const result_1@526@01 $Ref)
; [exec]
; var result_1_0: Ref
(declare-const result_1_0@527@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@528@01 $Ref)
; [exec]
; var i_0_0: Ref
(declare-const i_0_0@529@01 $Ref)
; [exec]
; var password_2: Ref
(declare-const password_2@530@01 $Ref)
; [exec]
; var password_2_0: Ref
(declare-const password_2_0@531@01 $Ref)
; [exec]
; var inpt_2: Ref
(declare-const inpt_2@532@01 $Ref)
; [exec]
; var inpt_2_0: Ref
(declare-const inpt_2_0@533@01 $Ref)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@534@01 Seq<Measure$>)
; [exec]
; var _loop_measures_0_0: Seq[Measure$]
(declare-const _loop_measures_0_0@535@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@536@01 Bool)
; [exec]
; var _loop_check_before_0_0: Bool
(declare-const _loop_check_before_0_0@537@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@538@01 Bool)
; [exec]
; var _loop_termination_flag_0_0: Bool
(declare-const _loop_termination_flag_0_0@539@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@540@01 $Perm)
; [exec]
; var _loop_original_must_terminate_0_0: Perm
(declare-const _loop_original_must_terminate_0_0@541@01 $Perm)
; [exec]
; var _residue_159: Perm
(declare-const _residue_159@542@01 $Perm)
; [exec]
; var _residue_159_0: Perm
(declare-const _residue_159_0@543@01 $Perm)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@544@01 $Perm)
; [exec]
; var _cwl_157_0: Perm
(declare-const _cwl_157_0@545@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@546@01 Seq<Measure$>)
; [exec]
; var _method_measures_157_0: Seq[Measure$]
(declare-const _method_measures_157_0@547@01 Seq<Measure$>)
; [exec]
; var bypass1_0: Bool
(declare-const bypass1_0@548@01 Bool)
; [exec]
; var bypass2_0: Bool
(declare-const bypass2_0@549@01 Bool)
; [exec]
; var tmp1_3: Seq[Measure$]
(declare-const tmp1_3@550@01 Seq<Measure$>)
; [exec]
; var tmp2_3: Seq[Measure$]
(declare-const tmp2_3@551@01 Seq<Measure$>)
; [exec]
; var tmp1_4: Ref
(declare-const tmp1_4@552@01 $Ref)
; [exec]
; var tmp2_4: Ref
(declare-const tmp2_4@553@01 $Ref)
; [exec]
; var tmp1_5: Ref
(declare-const tmp1_5@554@01 $Ref)
; [exec]
; var tmp2_5: Ref
(declare-const tmp2_5@555@01 $Ref)
; [exec]
; var tmp1_6: Bool
(declare-const tmp1_6@556@01 Bool)
; [exec]
; var tmp2_6: Bool
(declare-const tmp2_6@557@01 Bool)
; [exec]
; var p1_2: Bool
(declare-const p1_2@558@01 Bool)
; [exec]
; var p2_2: Bool
(declare-const p2_2@559@01 Bool)
; [exec]
; var idle1_0: Bool
(declare-const idle1_0@560@01 Bool)
; [exec]
; var idle2_0: Bool
(declare-const idle2_0@561@01 Bool)
; [exec]
; inhale p1_1
(declare-const $t@562@01 $Snap)
(assert (= $t@562@01 $Snap.unit))
(assert p1_1@203@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; ret1_0 := false
; [exec]
; ret2_0 := false
; [eval] p1_1 && !ret1_0
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1358 | !(p1_1@203@01) | live]
; [else-branch: 1358 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1358 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1358 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1359 | p1_1@203@01 | dead]
; [else-branch: 1359 | !(p1_1@203@01) | live]
(push) ; 7
; [else-branch: 1359 | !(p1_1@203@01)]
(pop) ; 7
; [eval] !(p1_1 && !ret1_0)
; [eval] p1_1 && !ret1_0
(push) ; 7
; [then-branch: 1360 | !(p1_1@203@01) | live]
; [else-branch: 1360 | p1_1@203@01 | live]
(push) ; 8
; [then-branch: 1360 | !(p1_1@203@01)]
(pop) ; 8
(push) ; 8
; [else-branch: 1360 | p1_1@203@01]
; [eval] !ret1_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 1361 | !(p1_1@203@01) | dead]
; [else-branch: 1361 | p1_1@203@01 | live]
(push) ; 7
; [else-branch: 1361 | p1_1@203@01]
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const p1_3@563@01 Bool)
(declare-const p2_3@564@01 Bool)
(declare-const _cthread_158@565@01 $Ref)
(declare-const _cthread_158_0@566@01 $Ref)
(declare-const _caller_measures_158@567@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@568@01 Seq<Measure$>)
(declare-const _residue_160@569@01 $Perm)
(declare-const _residue_160_0@570@01 $Perm)
(declare-const _current_wait_level_158@571@01 $Perm)
(declare-const _current_wait_level_158_0@572@01 $Perm)
(declare-const p1_3@573@01 Bool)
(declare-const p2_3@574@01 Bool)
(declare-const _cthread_158@575@01 $Ref)
(declare-const _cthread_158_0@576@01 $Ref)
(declare-const _caller_measures_158@577@01 Seq<Measure$>)
(declare-const _caller_measures_158_0@578@01 Seq<Measure$>)
(declare-const _residue_160@579@01 $Perm)
(declare-const _residue_160_0@580@01 $Perm)
(declare-const _current_wait_level_158@581@01 $Perm)
(declare-const _current_wait_level_158_0@582@01 $Perm)
(push) ; 1
(declare-const $t@583@01 $Snap)
(assert (= $t@583@01 ($Snap.combine ($Snap.first $t@583@01) ($Snap.second $t@583@01))))
(assert (= ($Snap.first $t@583@01) $Snap.unit))
; [eval] p1_3 ==> _cthread_158 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@573@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1362 | p1_3@573@01 | live]
; [else-branch: 1362 | !(p1_3@573@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1362 | p1_3@573@01]
(assert p1_3@573@01)
; [eval] _cthread_158 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1362 | !(p1_3@573@01)]
(assert (not p1_3@573@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p1_3@573@01) p1_3@573@01))
(assert (=> p1_3@573@01 (not (= _cthread_158@575@01 $Ref.null))))
(assert (=
  ($Snap.second $t@583@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@583@01))
    ($Snap.second ($Snap.second $t@583@01)))))
(assert (= ($Snap.first ($Snap.second $t@583@01)) $Snap.unit))
; [eval] p2_3 ==> _cthread_158_0 != null
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1363 | p2_3@574@01 | live]
; [else-branch: 1363 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1363 | p2_3@574@01]
(assert p2_3@574@01)
; [eval] _cthread_158_0 != null
(pop) ; 3
(push) ; 3
; [else-branch: 1363 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not p2_3@574@01) p2_3@574@01))
(assert (=> p2_3@574@01 (not (= _cthread_158_0@576@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@583@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@583@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@583@01))) $Snap.unit))
; [eval] p1_3 ==> issubtype(typeof(_cthread_158), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@573@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1364 | p1_3@573@01 | live]
; [else-branch: 1364 | !(p1_3@573@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1364 | p1_3@573@01]
(assert p1_3@573@01)
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1364 | !(p1_3@573@01)]
(assert (not p1_3@573@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p1_3@573@01
  (issubtype<Bool> (typeof<PyType> _cthread_158@575@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@583@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@583@01))))
  $Snap.unit))
; [eval] p2_3 ==> issubtype(typeof(_cthread_158_0), Thread_0())
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1365 | p2_3@574@01 | live]
; [else-branch: 1365 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1365 | p2_3@574@01]
(assert p2_3@574@01)
; [eval] issubtype(typeof(_cthread_158_0), Thread_0())
; [eval] typeof(_cthread_158_0)
; [eval] Thread_0()
(pop) ; 3
(push) ; 3
; [else-branch: 1365 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=>
  p2_3@574@01
  (issubtype<Bool> (typeof<PyType> _cthread_158_0@576@01) (as Thread_0<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
  $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p1_3@573@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1366 | p1_3@573@01 | live]
; [else-branch: 1366 | !(p1_3@573@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1366 | p1_3@573@01]
(assert p1_3@573@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1366 | !(p1_3@573@01)]
(assert (not p1_3@573@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@583@01)))))
  $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1367 | p2_3@574@01 | live]
; [else-branch: 1367 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1367 | p2_3@574@01]
(assert p2_3@574@01)
(pop) ; 3
(push) ; 3
; [else-branch: 1367 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@584@01 $Snap)
(assert (= $t@584@01 ($Snap.combine ($Snap.first $t@584@01) ($Snap.second $t@584@01))))
(assert (= ($Snap.first $t@584@01) $Snap.unit))
; [eval] p1_3 ==> (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_158) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_158) && _residue_160 <= _current_wait_level_158)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@573@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1368 | p1_3@573@01 | live]
; [else-branch: 1368 | !(p1_3@573@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1368 | p1_3@573@01]
(assert p1_3@573@01)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_158) && ((forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_158) && _residue_160 <= _current_wait_level_158)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _current_wait_level_158)
(push) ; 5
; [then-branch: 1369 | False | live]
; [else-branch: 1369 | True | live]
(push) ; 6
; [then-branch: 1369 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1369 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _current_wait_level_158)
(push) ; 7
; [then-branch: 1370 | False | live]
; [else-branch: 1370 | True | live]
(push) ; 8
; [then-branch: 1370 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1370 | True]
; [eval] _residue_160 <= _current_wait_level_158
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1368 | !(p1_3@573@01)]
(assert (not p1_3@573@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p1_3@573@01 (<= _residue_160@579@01 _current_wait_level_158@581@01)))
(assert (=
  ($Snap.second $t@584@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@584@01))
    ($Snap.second ($Snap.second $t@584@01)))))
(assert (= ($Snap.first ($Snap.second $t@584@01)) $Snap.unit))
; [eval] p2_3 ==> (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _current_wait_level_158_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _current_wait_level_158_0) && _residue_160_0 <= _current_wait_level_158_0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1371 | p2_3@574@01 | live]
; [else-branch: 1371 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1371 | p2_3@574@01]
(assert p2_3@574@01)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _current_wait_level_158_0) && ((forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _current_wait_level_158_0) && _residue_160_0 <= _current_wait_level_158_0)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBoundedp] :: Level(_r_9) <= _current_wait_level_158_0)
(push) ; 5
; [then-branch: 1372 | False | live]
; [else-branch: 1372 | True | live]
(push) ; 6
; [then-branch: 1372 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 1372 | True]
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnboundedp] :: Level(_r_9) <= _current_wait_level_158_0)
(push) ; 7
; [then-branch: 1373 | False | live]
; [else-branch: 1373 | True | live]
(push) ; 8
; [then-branch: 1373 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1373 | True]
; [eval] _residue_160_0 <= _current_wait_level_158_0
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1371 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=> p2_3@574@01 (<= _residue_160_0@580@01 _current_wait_level_158_0@582@01)))
(assert (=
  ($Snap.second ($Snap.second $t@584@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@584@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@584@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@584@01))) $Snap.unit))
; [eval] p1_3 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p1_3@573@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1374 | p1_3@573@01 | live]
; [else-branch: 1374 | !(p1_3@573@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1374 | p1_3@573@01]
(assert p1_3@573@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1374 | !(p1_3@573@01)]
(assert (not p1_3@573@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@584@01))) $Snap.unit))
; [eval] p2_3 ==> true
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1375 | p2_3@574@01 | live]
; [else-branch: 1375 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1375 | p2_3@574@01]
(assert p2_3@574@01)
(pop) ; 4
(push) ; 4
; [else-branch: 1375 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@585@01 Bool)
; [exec]
; var module_defined_0_0: Bool
(declare-const module_defined_0_0@586@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@587@01 Set<_Name>)
; [exec]
; var module_names_0_0: Set[_Name]
(declare-const module_names_0_0@588@01 Set<_Name>)
; [exec]
; var _err: Ref
(declare-const _err@589@01 $Ref)
; [exec]
; var _err_2: Ref
(declare-const _err_2@590@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@591@01 $Perm)
; [exec]
; var _cwl_158_0: Perm
(declare-const _cwl_158_0@592@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@593@01 Seq<Measure$>)
; [exec]
; var _method_measures_158_0: Seq[Measure$]
(declare-const _method_measures_158_0@594@01 Seq<Measure$>)
; [exec]
; inhale p1_3
(declare-const $t@595@01 $Snap)
(assert (= $t@595@01 $Snap.unit))
(assert p1_3@573@01)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1376 | p1_3@573@01 | live]
; [else-branch: 1376 | !(p1_3@573@01) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1376 | p1_3@573@01]
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@596@01 Set<_Name>)
(assert (=
  module_names_0@596@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@597@01 $Snap)
(assert (= $t@597@01 ($Snap.combine ($Snap.first $t@597@01) ($Snap.second $t@597@01))))
; [eval] __file__()
(push) ; 4
(assert (__file__%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@597@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@597@01))
    ($Snap.second ($Snap.second $t@597@01)))))
(assert (= ($Snap.first ($Snap.second $t@597@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@597@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@597@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@598@01 Set<_Name>)
(assert (=
  module_names_0@598@01
  (Set_union module_names_0@596@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@599@01 $Snap)
(assert (= $t@599@01 ($Snap.combine ($Snap.first $t@599@01) ($Snap.second $t@599@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 4
(assert (__name__%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 4
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@599@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@599@01))
    ($Snap.second ($Snap.second $t@599@01)))))
(assert (= ($Snap.first ($Snap.second $t@599@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@599@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@599@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@599@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@599@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@599@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@599@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 4
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 4
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@599@01))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@599@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@599@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953720652)))
; [eval] (module_names_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0@600@01 Set<_Name>)
(assert (=
  module_names_0@600@01
  (Set_union module_names_0@598@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(461229090915)))
; [eval] (module_names_0 union Set(_single(461229090915)))
; [eval] Set(_single(461229090915))
; [eval] _single(461229090915)
(declare-const module_names_0@601@01 Set<_Name>)
(assert (=
  module_names_0@601@01
  (Set_union module_names_0@600@01 (Set_singleton (_single<_Name> 461229090915)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(121371762180384333224044643)))
; [eval] (module_names_0 union Set(_single(121371762180384333224044643)))
; [eval] Set(_single(121371762180384333224044643))
; [eval] _single(121371762180384333224044643)
(declare-const module_names_0@602@01 Set<_Name>)
(assert (=
  module_names_0@602@01
  (Set_union module_names_0@601@01 (Set_singleton (_single<_Name> 121371762180384333224044643)))))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1377 | p2_3@574@01 | live]
; [else-branch: 1377 | !(p2_3@574@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1377 | p2_3@574@01]
(assert p2_3@574@01)
; [exec]
; _method_measures_158_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0_0 := true
; [exec]
; module_names_0_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0_0 := (module_names_0_0 union
;   Set(_single(6872323072689856351)))
; [eval] (module_names_0_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0_0@603@01 Set<_Name>)
(assert (=
  module_names_0_0@603@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._valp, 99 / 100) &&
;   (issubtype(typeof(__file__()._valp), str()) &&
;   issubtype(typeof(__file__()._valp), str()))
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 ($Snap.combine ($Snap.first $t@604@01) ($Snap.second $t@604@01))))
; [eval] __file__()
(push) ; 5
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second $t@604@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@604@01))
    ($Snap.second ($Snap.second $t@604@01)))))
(assert (= ($Snap.first ($Snap.second $t@604@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._valp), str())
; [eval] typeof(__file__()._valp)
; [eval] __file__()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@604@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@604@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._valp), str())
; [eval] typeof(__file__()._valp)
; [eval] __file__()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0_0 := (module_names_0_0 union
;   Set(_single(6872323076851130207)))
; [eval] (module_names_0_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0_0@605@01 Set<_Name>)
(assert (=
  module_names_0_0@605@01
  (Set_union module_names_0_0@603@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._valp, 99 / 100) &&
;   (issubtype(typeof(__name__()._valp), str()) &&
;   (issubtype(typeof(__name__()._valp), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._valp)))
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 ($Snap.combine ($Snap.first $t@606@01) ($Snap.second $t@606@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@606@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@606@01))
    ($Snap.second ($Snap.second $t@606@01)))))
(assert (= ($Snap.first ($Snap.second $t@606@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._valp), str())
; [eval] typeof(__name__()._valp)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@606@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@606@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@606@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@606@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@606@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._valp), str())
; [eval] typeof(__name__()._valp)
; [eval] __name__()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@606@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._valp)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] __name__()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@606@01))))
(pop) ; 5
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@606@01))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@606@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err_2 := null
; [exec]
; module_names_0_0 := (module_names_0_0 union Set(_single(1953720652)))
; [eval] (module_names_0_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0_0@607@01 Set<_Name>)
(assert (=
  module_names_0_0@607@01
  (Set_union module_names_0_0@605@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0_0 := (module_names_0_0 union Set(_single(461229090915)))
; [eval] (module_names_0_0 union Set(_single(461229090915)))
; [eval] Set(_single(461229090915))
; [eval] _single(461229090915)
(declare-const module_names_0_0@608@01 Set<_Name>)
(assert (=
  module_names_0_0@608@01
  (Set_union module_names_0_0@607@01 (Set_singleton (_single<_Name> 461229090915)))))
; [exec]
; module_names_0_0 := (module_names_0_0 union
;   Set(_single(121371762180384333224044643)))
; [eval] (module_names_0_0 union Set(_single(121371762180384333224044643)))
; [eval] Set(_single(121371762180384333224044643))
; [eval] _single(121371762180384333224044643)
(declare-const module_names_0_0@609@01 Set<_Name>)
(assert (=
  module_names_0_0@609@01
  (Set_union module_names_0_0@608@01 (Set_singleton (_single<_Name> 121371762180384333224044643)))))
; [exec]
; assert true
; [eval] p1_3 ==> true
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1378 | p1_3@573@01 | live]
; [else-branch: 1378 | !(p1_3@573@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1378 | p1_3@573@01]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p2_3 ==> true
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1379 | p2_3@574@01 | live]
; [else-branch: 1379 | !(p2_3@574@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1379 | p2_3@574@01]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p1_3 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1380 | p1_3@573@01 | live]
; [else-branch: 1380 | !(p1_3@573@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1380 | p1_3@573@01]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 7
; [then-branch: 1381 | False | live]
; [else-branch: 1381 | True | live]
(push) ; 8
; [then-branch: 1381 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1381 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 9
; [then-branch: 1382 | False | live]
; [else-branch: 1382 | True | live]
(push) ; 10
; [then-branch: 1382 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1382 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 1383 | False | live]
; [else-branch: 1383 | True | live]
(push) ; 12
; [then-branch: 1383 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1383 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p2_3 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1384 | p2_3@574@01 | live]
; [else-branch: 1384 | !(p2_3@574@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1384 | p2_3@574@01]
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false)
(push) ; 7
; [then-branch: 1385 | False | live]
; [else-branch: 1385 | True | live]
(push) ; 8
; [then-branch: 1385 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1385 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false)
(push) ; 9
; [then-branch: 1386 | False | live]
; [else-branch: 1386 | True | live]
(push) ; 10
; [then-branch: 1386 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1386 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false)
(push) ; 11
; [then-branch: 1387 | False | live]
; [else-branch: 1387 | True | live]
(push) ; 12
; [then-branch: 1387 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1387 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1377 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
(pop) ; 4
; [eval] !p2_3
(push) ; 4
(set-option :timeout 10)
(assert (not p2_3@574@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not p2_3@574@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1388 | !(p2_3@574@01) | live]
; [else-branch: 1388 | p2_3@574@01 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1388 | !(p2_3@574@01)]
(assert (not p2_3@574@01))
; [exec]
; assert true
; [eval] p1_3 ==> true
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1389 | p1_3@573@01 | live]
; [else-branch: 1389 | !(p1_3@573@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1389 | p1_3@573@01]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p2_3 ==> true
(push) ; 5
; [then-branch: 1390 | p2_3@574@01 | dead]
; [else-branch: 1390 | !(p2_3@574@01) | live]
(push) ; 6
; [else-branch: 1390 | !(p2_3@574@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p1_3 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not p1_3@573@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1391 | p1_3@573@01 | live]
; [else-branch: 1391 | !(p1_3@573@01) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 1391 | p1_3@573@01]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 7
; [then-branch: 1392 | False | live]
; [else-branch: 1392 | True | live]
(push) ; 8
; [then-branch: 1392 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 1392 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 9
; [then-branch: 1393 | False | live]
; [else-branch: 1393 | True | live]
(push) ; 10
; [then-branch: 1393 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 1393 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 11
; [then-branch: 1394 | False | live]
; [else-branch: 1394 | True | live]
(push) ; 12
; [then-branch: 1394 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 1394 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] p2_3 ==> (forperm _r_10: Ref [MustInvokeBounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded_0(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBoundedp] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnboundedp] :: false)))
(push) ; 5
; [then-branch: 1395 | p2_3@574@01 | dead]
; [else-branch: 1395 | !(p2_3@574@01) | live]
(push) ; 6
; [else-branch: 1395 | !(p2_3@574@01)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 1388 | p2_3@574@01]
(assert p2_3@574@01)
(pop) ; 4
(pop) ; 3
; [eval] !p1_3
; [then-branch: 1396 | !(p1_3@573@01) | dead]
; [else-branch: 1396 | p1_3@573@01 | live]
(push) ; 3
; [else-branch: 1396 | p1_3@573@01]
(pop) ; 3
(pop) ; 2
(pop) ; 1
