(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-27 09:58:44
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort PyType 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const MyException<PyType> PyType)
(declare-const VarArgException<PyType> PyType)
(declare-const MySpecialException<PyType> PyType)
(declare-const MyOtherException<PyType> PyType)
(declare-const ParameterizedException<PyType> PyType)
(declare-const Container<PyType> PyType)
(declare-const ExceptionClass<PyType> PyType)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun tuple___val__ ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun tuple___val__%stateless ($Ref) Bool)
(declare-fun tuple___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun tuple___len__ ($Snap $Ref) Int)
(declare-fun tuple___len__%limited ($Snap $Ref) Int)
(declare-fun tuple___len__%stateless ($Ref) Bool)
(declare-fun tuple___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun object___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun object___eq__%stateless ($Ref $Ref) Bool)
(declare-fun object___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun int___mul__ ($Snap Int Int) Int)
(declare-fun int___mul__%limited ($Snap Int Int) Int)
(declare-fun int___mul__%stateless (Int Int) Bool)
(declare-fun int___mul__%precondition ($Snap Int Int) Bool)
(declare-fun int___add__ ($Snap Int Int) Int)
(declare-fun int___add__%limited ($Snap Int Int) Int)
(declare-fun int___add__%stateless (Int Int) Bool)
(declare-fun int___add__%precondition ($Snap Int Int) Bool)
(declare-fun int___sub__ ($Snap Int Int) Int)
(declare-fun int___sub__%limited ($Snap Int Int) Int)
(declare-fun int___sub__%stateless (Int Int) Bool)
(declare-fun int___sub__%precondition ($Snap Int Int) Bool)
(declare-fun tuple___create0__ ($Snap) $Ref)
(declare-fun tuple___create0__%limited ($Snap) $Ref)
(declare-const tuple___create0__%stateless Bool)
(declare-fun tuple___create0__%precondition ($Snap) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> ParameterizedException<PyType> traceback<PyType> dict_basic<PyType> type<PyType> ExceptionClass<PyType> set_basic<PyType> MyOtherException<PyType> MySpecialException<PyType> py_range<PyType> int<PyType> Container<PyType> Exception<PyType> __prim__Seq_type<PyType> VarArgException<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> MyException<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as MyException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as MyException<PyType>  PyType))
    (as MyException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as VarArgException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as VarArgException<PyType>  PyType))
    (as VarArgException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as MySpecialException<PyType>  PyType) (as MyException<PyType>  PyType))
  (=
    (get_basic<PyType> (as MySpecialException<PyType>  PyType))
    (as MySpecialException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as MyOtherException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as MyOtherException<PyType>  PyType))
    (as MyOtherException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ParameterizedException<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ParameterizedException<PyType>  PyType))
    (as ParameterizedException<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Container<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Container<PyType>  PyType))
    (as Container<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ExceptionClass<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as ExceptionClass<PyType>  PyType))
    (as ExceptionClass<PyType>  PyType))))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (tuple___val__%limited s@$ self@0@00) (tuple___val__ s@$ self@0@00))
  :pattern ((tuple___val__ s@$ self@0@00))
  :qid |quant-u-4552|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (tuple___val__%stateless self@0@00)
  :pattern ((tuple___val__%limited s@$ self@0@00))
  :qid |quant-u-4553|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___val__%limited s@$ self@2@00) (str___val__ s@$ self@2@00))
  :pattern ((str___val__ s@$ self@2@00))
  :qid |quant-u-4554|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___val__%stateless self@2@00)
  :pattern ((str___val__%limited s@$ self@2@00))
  :qid |quant-u-4555|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (str___len__%limited s@$ self@4@00) (str___len__ s@$ self@4@00))
  :pattern ((str___len__ s@$ self@4@00))
  :qid |quant-u-4556|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (str___len__%stateless self@4@00)
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4557|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (str___len__%limited s@$ self@4@00))) (=>
    (str___len__%precondition s@$ self@4@00)
    (>= result@5@00 0)))
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4596|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (str___len__%limited s@$ self@4@00))) true)
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4597|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (= (tuple___len__%limited s@$ self@6@00) (tuple___len__ s@$ self@6@00))
  :pattern ((tuple___len__ s@$ self@6@00))
  :qid |quant-u-4558|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (tuple___len__%stateless self@6@00)
  :pattern ((tuple___len__%limited s@$ self@6@00))
  :qid |quant-u-4559|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (tuple___len__%limited s@$ self@6@00))) (=>
    (tuple___len__%precondition s@$ self@6@00)
    (and
      (=
        result@7@00
        (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> self@6@00))))
      (= result@7@00 (Seq_length (tuple___val__ $Snap.unit self@6@00))))))
  :pattern ((tuple___len__%limited s@$ self@6@00))
  :qid |quant-u-4598|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (tuple___len__%limited s@$ self@6@00))) true)
  :pattern ((tuple___len__%limited s@$ self@6@00))
  :qid |quant-u-4599|)))
(assert (forall ((s@$ $Snap) (self@6@00 $Ref)) (!
  (let ((result@7@00 (tuple___len__%limited s@$ self@6@00))) (=>
    (tuple___len__%precondition s@$ self@6@00)
    (tuple___val__%precondition $Snap.unit self@6@00)))
  :pattern ((tuple___len__%limited s@$ self@6@00))
  :qid |quant-u-4600|)))
(assert (forall ((s@$ $Snap) (id@8@00 Int)) (!
  (= (_isDefined%limited s@$ id@8@00) (_isDefined s@$ id@8@00))
  :pattern ((_isDefined s@$ id@8@00))
  :qid |quant-u-4560|)))
(assert (forall ((s@$ $Snap) (id@8@00 Int)) (!
  (_isDefined%stateless id@8@00)
  :pattern ((_isDefined%limited s@$ id@8@00))
  :qid |quant-u-4561|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  :qid |quant-u-4562|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4563|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4601|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (__prim__bool___box__%precondition $Snap.unit result@11@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4602|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@12@00)
    (__prim__bool___box__ s@$ prim@12@00))
  :pattern ((__prim__bool___box__ s@$ prim@12@00))
  :qid |quant-u-4564|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (__prim__bool___box__%stateless prim@12@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@12@00))
  :qid |quant-u-4565|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (let ((result@13@00 (__prim__bool___box__%limited s@$ prim@12@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@12@00)
    (and
      (= (typeof<PyType> result@13@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@13@00) prim@12@00)
      (= (int___unbox__%limited $Snap.unit result@13@00) (ite prim@12@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@12@00))
  :qid |quant-u-4603|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (let ((result@13@00 (__prim__bool___box__%limited s@$ prim@12@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@12@00))
  :qid |quant-u-4604|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (let ((result@13@00 (__prim__bool___box__%limited s@$ prim@12@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@12@00)
    (bool___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@12@00))
  :qid |quant-u-4605|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Bool)) (!
  (let ((result@13@00 (__prim__bool___box__%limited s@$ prim@12@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@12@00)
    (int___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@12@00))
  :qid |quant-u-4606|)))
(assert (forall ((s@$ $Snap) (box@14@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@14@00) (int___unbox__ s@$ box@14@00))
  :pattern ((int___unbox__ s@$ box@14@00))
  :qid |quant-u-4566|)))
(assert (forall ((s@$ $Snap) (box@14@00 $Ref)) (!
  (int___unbox__%stateless box@14@00)
  :pattern ((int___unbox__%limited s@$ box@14@00))
  :qid |quant-u-4567|)))
(assert (forall ((s@$ $Snap) (box@14@00 $Ref)) (!
  (let ((result@15@00 (int___unbox__%limited s@$ box@14@00))) (=>
    (int___unbox__%precondition s@$ box@14@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@14@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@15@00) box@14@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@14@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@15@00 0)))
          box@14@00)))))
  :pattern ((int___unbox__%limited s@$ box@14@00))
  :qid |quant-u-4607|)))
(assert (forall ((s@$ $Snap) (box@14@00 $Ref)) (!
  (let ((result@15@00 (int___unbox__%limited s@$ box@14@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@14@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@14@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@15@00)))
  :pattern ((int___unbox__%limited s@$ box@14@00))
  :qid |quant-u-4608|)))
(assert (forall ((s@$ $Snap) (box@14@00 $Ref)) (!
  (let ((result@15@00 (int___unbox__%limited s@$ box@14@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@14@00)
      (issubtype<Bool> (typeof<PyType> box@14@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@15@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@14@00))
  :qid |quant-u-4609|)))
(assert (forall ((s@$ $Snap) (prim@16@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@16@00)
    (__prim__int___box__ s@$ prim@16@00))
  :pattern ((__prim__int___box__ s@$ prim@16@00))
  :qid |quant-u-4568|)))
(assert (forall ((s@$ $Snap) (prim@16@00 Int)) (!
  (__prim__int___box__%stateless prim@16@00)
  :pattern ((__prim__int___box__%limited s@$ prim@16@00))
  :qid |quant-u-4569|)))
(assert (forall ((s@$ $Snap) (prim@16@00 Int)) (!
  (let ((result@17@00 (__prim__int___box__%limited s@$ prim@16@00))) (=>
    (__prim__int___box__%precondition s@$ prim@16@00)
    (and
      (= (typeof<PyType> result@17@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@17@00) prim@16@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@16@00))
  :qid |quant-u-4610|)))
(assert (forall ((s@$ $Snap) (prim@16@00 Int)) (!
  (let ((result@17@00 (__prim__int___box__%limited s@$ prim@16@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@16@00))
  :qid |quant-u-4611|)))
(assert (forall ((s@$ $Snap) (prim@16@00 Int)) (!
  (let ((result@17@00 (__prim__int___box__%limited s@$ prim@16@00))) (=>
    (__prim__int___box__%precondition s@$ prim@16@00)
    (int___unbox__%precondition $Snap.unit result@17@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@16@00))
  :qid |quant-u-4612|)))
(assert (forall ((s@$ $Snap) (r@18@00 $Ref)) (!
  (= (Level%limited s@$ r@18@00) (Level s@$ r@18@00))
  :pattern ((Level s@$ r@18@00))
  :qid |quant-u-4570|)))
(assert (forall ((s@$ $Snap) (r@18@00 $Ref)) (!
  (Level%stateless r@18@00)
  :pattern ((Level%limited s@$ r@18@00))
  :qid |quant-u-4571|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref) (other@21@00 $Ref)) (!
  (=
    (object___eq__%limited s@$ self@20@00 other@21@00)
    (object___eq__ s@$ self@20@00 other@21@00))
  :pattern ((object___eq__ s@$ self@20@00 other@21@00))
  :qid |quant-u-4572|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref) (other@21@00 $Ref)) (!
  (object___eq__%stateless self@20@00 other@21@00)
  :pattern ((object___eq__%limited s@$ self@20@00 other@21@00))
  :qid |quant-u-4573|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref) (other@21@00 $Ref)) (!
  (let ((result@22@00 (object___eq__%limited s@$ self@20@00 other@21@00))) (=>
    (object___eq__%precondition s@$ self@20@00 other@21@00)
    (and
      (=> (= self@20@00 other@21@00) result@22@00)
      (=>
        (not (= (= self@20@00 $Ref.null) (= other@21@00 $Ref.null)))
        (not result@22@00)))))
  :pattern ((object___eq__%limited s@$ self@20@00 other@21@00))
  :qid |quant-u-4613|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref) (other@21@00 $Ref)) (!
  (let ((result@22@00 (object___eq__%limited s@$ self@20@00 other@21@00))) true)
  :pattern ((object___eq__%limited s@$ self@20@00 other@21@00))
  :qid |quant-u-4614|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref) (other@21@00 $Ref)) (!
  (let ((result@22@00 (object___eq__%limited s@$ self@20@00 other@21@00))) true)
  :pattern ((object___eq__%limited s@$ self@20@00 other@21@00))
  :qid |quant-u-4615|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (=
    (str___create__%limited s@$ len@23@00 value@24@00)
    (str___create__ s@$ len@23@00 value@24@00))
  :pattern ((str___create__ s@$ len@23@00 value@24@00))
  :qid |quant-u-4574|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (str___create__%stateless len@23@00 value@24@00)
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-4575|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (and
      (= (str___len__ $Snap.unit result@25@00) len@23@00)
      (= (str___val__ $Snap.unit result@25@00) value@24@00)
      (= (typeof<PyType> result@25@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-4616|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (str___len__%precondition $Snap.unit result@25@00)))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-4617|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) (=>
    (str___create__%precondition s@$ len@23@00 value@24@00)
    (str___val__%precondition $Snap.unit result@25@00)))
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-4618|)))
(assert (forall ((s@$ $Snap) (len@23@00 Int) (value@24@00 Int)) (!
  (let ((result@25@00 (str___create__%limited s@$ len@23@00 value@24@00))) true)
  :pattern ((str___create__%limited s@$ len@23@00 value@24@00))
  :qid |quant-u-4619|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@26@00 other@27@00)
    (str___eq__ s@$ self@26@00 other@27@00))
  :pattern ((str___eq__ s@$ self@26@00 other@27@00))
  :qid |quant-u-4576|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (str___eq__%stateless self@26@00 other@27@00)
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4577|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (str___eq__%precondition s@$ self@26@00 other@27@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@26@00)
          (str___val__ $Snap.unit other@27@00))
        result@28@00)
      (=>
        result@28@00
        (=
          (str___len__ $Snap.unit self@26@00)
          (str___len__ $Snap.unit other@27@00))))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4620|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (str___eq__%precondition s@$ self@26@00 other@27@00)
    (and
      (str___val__%precondition $Snap.unit self@26@00)
      (str___val__%precondition $Snap.unit other@27@00))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4621|)))
(assert (forall ((s@$ $Snap) (self@26@00 $Ref) (other@27@00 $Ref)) (!
  (let ((result@28@00 (str___eq__%limited s@$ self@26@00 other@27@00))) (=>
    (and (str___eq__%precondition s@$ self@26@00 other@27@00) result@28@00)
    (and
      (str___len__%precondition $Snap.unit self@26@00)
      (str___len__%precondition $Snap.unit other@27@00))))
  :pattern ((str___eq__%limited s@$ self@26@00 other@27@00))
  :qid |quant-u-4622|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@29@00 other@30@00)
    (int___gt__ s@$ self@29@00 other@30@00))
  :pattern ((int___gt__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4578|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (int___gt__%stateless self@29@00 other@30@00)
  :pattern ((int___gt__%limited s@$ self@29@00 other@30@00))
  :qid |quant-u-4579|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@29@00 other@30@00)
    (= (int___gt__ s@$ self@29@00 other@30@00) (> self@29@00 other@30@00)))
  :pattern ((int___gt__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4623|)))
(assert (forall ((s@$ $Snap) (self@29@00 Int) (other@30@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@29@00 other@30@00))
  :qid |quant-u-4624|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (=
    (int___mul__%limited s@$ self@32@00 other@33@00)
    (int___mul__ s@$ self@32@00 other@33@00))
  :pattern ((int___mul__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4580|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (int___mul__%stateless self@32@00 other@33@00)
  :pattern ((int___mul__%limited s@$ self@32@00 other@33@00))
  :qid |quant-u-4581|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  (=>
    (int___mul__%precondition s@$ self@32@00 other@33@00)
    (= (int___mul__ s@$ self@32@00 other@33@00) (* self@32@00 other@33@00)))
  :pattern ((int___mul__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4625|)))
(assert (forall ((s@$ $Snap) (self@32@00 Int) (other@33@00 Int)) (!
  true
  :pattern ((int___mul__ s@$ self@32@00 other@33@00))
  :qid |quant-u-4626|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=
    (int___add__%limited s@$ self@35@00 other@36@00)
    (int___add__ s@$ self@35@00 other@36@00))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4582|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (int___add__%stateless self@35@00 other@36@00)
  :pattern ((int___add__%limited s@$ self@35@00 other@36@00))
  :qid |quant-u-4583|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  (=>
    (int___add__%precondition s@$ self@35@00 other@36@00)
    (= (int___add__ s@$ self@35@00 other@36@00) (+ self@35@00 other@36@00)))
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4627|)))
(assert (forall ((s@$ $Snap) (self@35@00 Int) (other@36@00 Int)) (!
  true
  :pattern ((int___add__ s@$ self@35@00 other@36@00))
  :qid |quant-u-4628|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (=
    (int___sub__%limited s@$ self@38@00 other@39@00)
    (int___sub__ s@$ self@38@00 other@39@00))
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4584|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (int___sub__%stateless self@38@00 other@39@00)
  :pattern ((int___sub__%limited s@$ self@38@00 other@39@00))
  :qid |quant-u-4585|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  (=>
    (int___sub__%precondition s@$ self@38@00 other@39@00)
    (= (int___sub__ s@$ self@38@00 other@39@00) (- self@38@00 other@39@00)))
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4629|)))
(assert (forall ((s@$ $Snap) (self@38@00 Int) (other@39@00 Int)) (!
  true
  :pattern ((int___sub__ s@$ self@38@00 other@39@00))
  :qid |quant-u-4630|)))
(assert (forall ((s@$ $Snap)) (!
  (= (tuple___create0__%limited s@$) (tuple___create0__ s@$))
  :pattern ((tuple___create0__ s@$))
  :qid |quant-u-4586|)))
(assert (forall ((s@$ $Snap)) (!
  (as tuple___create0__%stateless  Bool)
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4587|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) (=>
    (tuple___create0__%precondition s@$)
    (and
      (not (= result@41@00 $Ref.null))
      (=
        (typeof<PyType> result@41@00)
        (tuple<PyType> (as Seq_empty  Seq<PyType>)))
      (= (tuple___len__ $Snap.unit result@41@00) 0)
      (Seq_equal
        (tuple_args<Seq<PyType>> (typeof<PyType> result@41@00))
        (as Seq_empty  Seq<PyType>))
      (Seq_equal
        (tuple___val__ $Snap.unit result@41@00)
        (as Seq_empty  Seq<$Ref>)))))
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4631|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) true)
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4632|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) true)
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4633|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) (=>
    (tuple___create0__%precondition s@$)
    (tuple___len__%precondition $Snap.unit result@41@00)))
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4634|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) true)
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4635|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@41@00 (tuple___create0__%limited s@$))) (=>
    (tuple___create0__%precondition s@$)
    (tuple___val__%precondition $Snap.unit result@41@00)))
  :pattern ((tuple___create0__%limited s@$))
  :qid |quant-u-4636|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-4588|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-4589|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@43@00 id@44@00)
    (_checkDefined s@$ val@43@00 id@44@00))
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4590|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (_checkDefined%stateless val@43@00 id@44@00)
  :pattern ((_checkDefined%limited s@$ val@43@00 id@44@00))
  :qid |quant-u-4591|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@43@00 id@44@00)
    (= (_checkDefined s@$ val@43@00 id@44@00) val@43@00))
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4637|)))
(assert (forall ((s@$ $Snap) (val@43@00 $Ref) (id@44@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@43@00 id@44@00))
  :qid |quant-u-4638|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@46@00 other@47@00)
    (int___eq__ s@$ self@46@00 other@47@00))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4592|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (int___eq__%stateless self@46@00 other@47@00)
  :pattern ((int___eq__%limited s@$ self@46@00 other@47@00))
  :qid |quant-u-4593|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@46@00 other@47@00)
    (=
      (int___eq__ s@$ self@46@00 other@47@00)
      (=
        (int___unbox__ $Snap.unit self@46@00)
        (int___unbox__ $Snap.unit other@47@00))))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4639|)))
(assert (forall ((s@$ $Snap) (self@46@00 $Ref) (other@47@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@46@00 other@47@00)
    (and
      (int___unbox__%precondition $Snap.unit self@46@00)
      (int___unbox__%precondition $Snap.unit other@47@00)))
  :pattern ((int___eq__ s@$ self@46@00 other@47@00))
  :qid |quant-u-4640|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-4594|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-4595|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- special_raise ----------
(declare-const _cthread_160@0@01 $Ref)
(declare-const _caller_measures_160@1@01 Seq<Measure$>)
(declare-const _residue_160@2@01 $Perm)
(declare-const _current_wait_level_160@3@01 $Perm)
(declare-const _err@4@01 $Ref)
(declare-const _cthread_160@5@01 $Ref)
(declare-const _caller_measures_160@6@01 Seq<Measure$>)
(declare-const _residue_160@7@01 $Perm)
(declare-const _current_wait_level_160@8@01 $Perm)
(declare-const _err@9@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
(assert (= ($Snap.first $t@10@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@5@01 $Ref.null)))
(assert (=
  ($Snap.second $t@10@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@01))
    ($Snap.second ($Snap.second $t@10@01)))))
(assert (= ($Snap.first ($Snap.second $t@10@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@5@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@10@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@11@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@01))
    ($Snap.second ($Snap.second $t@11@01)))))
(assert (= ($Snap.first ($Snap.second $t@11@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@11@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@7@01 _current_wait_level_160@8@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@11@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@9@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@9@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | _err@9@01 == Null | live]
; [else-branch: 0 | _err@9@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | _err@9@01 == Null]
(assert (= _err@9@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | _err@9@01 != Null]
(assert (not (= _err@9@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@9@01 $Ref.null)) (= _err@9@01 $Ref.null)))
(assert (=> (= _err@9@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
; [then-branch: 1 | _err@9@01 == Null | live]
; [else-branch: 1 | _err@9@01 != Null | live]
(push) ; 4
; [then-branch: 1 | _err@9@01 == Null]
(assert (= _err@9@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 1 | _err@9@01 != Null]
(assert (not (= _err@9@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@9@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@9@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | _err@9@01 != Null && issubtype[Bool](typeof[PyType](_err@9@01), MyException[PyType]) | live]
; [else-branch: 2 | !(_err@9@01 != Null && issubtype[Bool](typeof[PyType](_err@9@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2 | _err@9@01 != Null && issubtype[Bool](typeof[PyType](_err@9@01), MyException[PyType])]
(assert (and
  (not (= _err@9@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType))))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(_err@9@01 != Null && issubtype[Bool](typeof[PyType](_err@9@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@9@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@9@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType))))
  (and
    (not (= _err@9@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@9@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@9@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | _err@9@01 != Null | live]
; [else-branch: 3 | _err@9@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3 | _err@9@01 != Null]
(assert (not (= _err@9@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not (= _err@9@01 $Ref.null)))
(assert (=>
  (not (= _err@9@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@9@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var MyException_res: Ref
(declare-const MyException_res@12@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@13@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@14@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; MyException_res := new()
(declare-const MyException_res@15@01 $Ref)
(assert (not (= MyException_res@15@01 $Ref.null)))
(assert (not (= MyException_res@15@01 _cthread_160@5@01)))
(assert (not (= MyException_res@15@01 MyException_res@12@01)))
; [exec]
; inhale typeof(MyException_res) == MyException()
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] typeof(MyException_res) == MyException()
; [eval] typeof(MyException_res)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res
; [eval] _err != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res@15@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | MyException_res@15@01 != Null | live]
; [else-branch: 4 | MyException_res@15@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 4 | MyException_res@15@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 4
; [then-branch: 5 | MyException_res@15@01 == Null | dead]
; [else-branch: 5 | MyException_res@15@01 != Null | live]
(push) ; 5
; [else-branch: 5 | MyException_res@15@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 6 | MyException_res@15@01 == Null | live]
; [else-branch: 6 | MyException_res@15@01 != Null | live]
(push) ; 5
; [then-branch: 6 | MyException_res@15@01 == Null]
(assert (= MyException_res@15@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | MyException_res@15@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res@15@01 $Ref.null))
  (= MyException_res@15@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res@15@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | MyException_res@15@01 != Null && issubtype[Bool](typeof[PyType](MyException_res@15@01), MyException[PyType]) | live]
; [else-branch: 7 | !(MyException_res@15@01 != Null && issubtype[Bool](typeof[PyType](MyException_res@15@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 7 | MyException_res@15@01 != Null && issubtype[Bool](typeof[PyType](MyException_res@15@01), MyException[PyType])]
(assert (and
  (not (= MyException_res@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (not (= MyException_res@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res@15@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | MyException_res@15@01 != Null | live]
; [else-branch: 8 | MyException_res@15@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 8 | MyException_res@15@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (=>
  (not (= MyException_res@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res@15@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res@15@01) (as MyException<PyType>  PyType))))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= MyException_res@15@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 9 | MyException_res@15@01 == Null | dead]
; [else-branch: 9 | MyException_res@15@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 9 | MyException_res@15@01 != Null]
(assert (not (= MyException_res@15@01 $Ref.null)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- special_raise_2 ----------
(declare-const _cthread_161@17@01 $Ref)
(declare-const _caller_measures_161@18@01 Seq<Measure$>)
(declare-const _residue_161@19@01 $Perm)
(declare-const _current_wait_level_161@20@01 $Perm)
(declare-const _err@21@01 $Ref)
(declare-const _cthread_161@22@01 $Ref)
(declare-const _caller_measures_161@23@01 Seq<Measure$>)
(declare-const _residue_161@24@01 $Perm)
(declare-const _current_wait_level_161@25@01 $Perm)
(declare-const _err@26@01 $Ref)
(push) ; 1
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 ($Snap.combine ($Snap.first $t@27@01) ($Snap.second $t@27@01))))
(assert (= ($Snap.first $t@27@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@22@01 $Ref.null)))
(assert (=
  ($Snap.second $t@27@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@27@01))
    ($Snap.second ($Snap.second $t@27@01)))))
(assert (= ($Snap.first ($Snap.second $t@27@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@22@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@27@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@28@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@01))
    ($Snap.second ($Snap.second $t@28@01)))))
(assert (= ($Snap.first ($Snap.second $t@28@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@28@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@28@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_161@24@01 _current_wait_level_161@25@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@26@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@26@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | _err@26@01 == Null | live]
; [else-branch: 10 | _err@26@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | _err@26@01 == Null]
(assert (= _err@26@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 10 | _err@26@01 != Null]
(assert (not (= _err@26@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@26@01 $Ref.null)) (= _err@26@01 $Ref.null)))
(assert (=> (= _err@26@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), VarArgException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), VarArgException())
; [eval] _err != null
(push) ; 3
; [then-branch: 11 | _err@26@01 == Null | live]
; [else-branch: 11 | _err@26@01 != Null | live]
(push) ; 4
; [then-branch: 11 | _err@26@01 == Null]
(assert (= _err@26@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | _err@26@01 != Null]
(assert (not (= _err@26@01 $Ref.null)))
; [eval] issubtype(typeof(_err), VarArgException())
; [eval] typeof(_err)
; [eval] VarArgException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@26@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@26@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | _err@26@01 != Null && issubtype[Bool](typeof[PyType](_err@26@01), VarArgException[PyType]) | live]
; [else-branch: 12 | !(_err@26@01 != Null && issubtype[Bool](typeof[PyType](_err@26@01), VarArgException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 12 | _err@26@01 != Null && issubtype[Bool](typeof[PyType](_err@26@01), VarArgException[PyType])]
(assert (and
  (not (= _err@26@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType))))
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(_err@26@01 != Null && issubtype[Bool](typeof[PyType](_err@26@01), VarArgException[PyType]))]
(assert (not
  (and
    (not (= _err@26@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@26@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType))))
  (and
    (not (= _err@26@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), VarArgException())
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@26@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@26@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | _err@26@01 != Null | live]
; [else-branch: 13 | _err@26@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 13 | _err@26@01 != Null]
(assert (not (= _err@26@01 $Ref.null)))
; [eval] issubtype(typeof(_err), VarArgException())
; [eval] typeof(_err)
; [eval] VarArgException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not (= _err@26@01 $Ref.null)))
(assert (=>
  (not (= _err@26@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@26@01) (as VarArgException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var VarArgException_res: Ref
(declare-const VarArgException_res@29@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@30@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@31@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; VarArgException_res := new()
(declare-const VarArgException_res@32@01 $Ref)
(assert (not (= VarArgException_res@32@01 $Ref.null)))
(assert (not (= VarArgException_res@32@01 VarArgException_res@29@01)))
(assert (not (= VarArgException_res@32@01 _cthread_161@22@01)))
; [exec]
; inhale typeof(VarArgException_res) == VarArgException()
(declare-const $t@33@01 $Snap)
(assert (= $t@33@01 $Snap.unit))
; [eval] typeof(VarArgException_res) == VarArgException()
; [eval] typeof(VarArgException_res)
; [eval] VarArgException()
(assert (=
  (typeof<PyType> VarArgException_res@32@01)
  (as VarArgException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_161 := VarArgException___init__(_cthread_161, _method_measures_161, _residue_161,
;   VarArgException_res, tuple___create0__())
; [eval] tuple___create0__()
(set-option :timeout 0)
(push) ; 3
(assert (tuple___create0__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (tuple___create0__%precondition $Snap.unit))
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] self != null
; [eval] issubtype(typeof(self), VarArgException())
; [eval] typeof(self)
; [eval] VarArgException()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType)))
; [eval] (forall i: Int :: { tuple_arg(typeof(args), i) } i >= 0 && i < |tuple_args(typeof(args))| ==> issubtype(tuple_arg(typeof(args), i), object()))
(declare-const i@34@01 Int)
(push) ; 3
; [eval] i >= 0 && i < |tuple_args(typeof(args))| ==> issubtype(tuple_arg(typeof(args), i), object())
; [eval] i >= 0 && i < |tuple_args(typeof(args))|
; [eval] i >= 0
(push) ; 4
; [then-branch: 14 | !(i@34@01 >= 0) | live]
; [else-branch: 14 | i@34@01 >= 0 | live]
(push) ; 5
; [then-branch: 14 | !(i@34@01 >= 0)]
(assert (not (>= i@34@01 0)))
(pop) ; 5
(push) ; 5
; [else-branch: 14 | i@34@01 >= 0]
(assert (>= i@34@01 0))
; [eval] i < |tuple_args(typeof(args))|
; [eval] |tuple_args(typeof(args))|
; [eval] tuple_args(typeof(args))
; [eval] typeof(args)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (>= i@34@01 0) (not (>= i@34@01 0))))
(push) ; 4
; [then-branch: 15 | i@34@01 >= 0 && i@34@01 < |tuple_args[Seq[PyType]](typeof[PyType](tuple___create0__(_)))| | live]
; [else-branch: 15 | !(i@34@01 >= 0 && i@34@01 < |tuple_args[Seq[PyType]](typeof[PyType](tuple___create0__(_)))|) | live]
(push) ; 5
; [then-branch: 15 | i@34@01 >= 0 && i@34@01 < |tuple_args[Seq[PyType]](typeof[PyType](tuple___create0__(_)))|]
(assert (and
  (>= i@34@01 0)
  (<
    i@34@01
    (Seq_length
      (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit)))))))
; [eval] issubtype(tuple_arg(typeof(args), i), object())
; [eval] tuple_arg(typeof(args), i)
; [eval] typeof(args)
; [eval] object()
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(i@34@01 >= 0 && i@34@01 < |tuple_args[Seq[PyType]](typeof[PyType](tuple___create0__(_)))|)]
(assert (not
  (and
    (>= i@34@01 0)
    (<
      i@34@01
      (Seq_length
        (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@34@01 0)
      (<
        i@34@01
        (Seq_length
          (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit)))))))
  (and
    (>= i@34@01 0)
    (<
      i@34@01
      (Seq_length
        (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@34@01 Int)) (!
  (and
    (or (>= i@34@01 0) (not (>= i@34@01 0)))
    (or
      (not
        (and
          (>= i@34@01 0)
          (<
            i@34@01
            (Seq_length
              (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit)))))))
      (and
        (>= i@34@01 0)
        (<
          i@34@01
          (Seq_length
            (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))))
  :pattern ((tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153-aux|)))
(assert (forall ((i@34@01 Int)) (!
  (and
    (=> (>= i@34@01 0) (tuple___create0__%precondition $Snap.unit))
    (=>
      (and
        (>= i@34@01 0)
        (<
          i@34@01
          (Seq_length
            (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))
      (tuple___create0__%precondition $Snap.unit)))
  :pattern ((tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153_precondition|)))
(push) ; 3
(assert (not (forall ((i@34@01 Int)) (!
  (=>
    (and
      (and
        (=> (>= i@34@01 0) (tuple___create0__%precondition $Snap.unit))
        (=>
          (and
            (>= i@34@01 0)
            (<
              i@34@01
              (Seq_length
                (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))
          (tuple___create0__%precondition $Snap.unit)))
      (and
        (>= i@34@01 0)
        (<
          i@34@01
          (Seq_length
            (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit)))))))
    (issubtype<Bool> (tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01) (as object<PyType>  PyType)))
  :pattern ((tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@34@01 Int)) (!
  (=>
    (and
      (>= i@34@01 0)
      (<
        i@34@01
        (Seq_length
          (tuple_args<Seq<PyType>> (typeof<PyType> (tuple___create0__ $Snap.unit))))))
    (issubtype<Bool> (tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01) (as object<PyType>  PyType)))
  :pattern ((tuple_arg<PyType> (typeof<PyType> (tuple___create0__ $Snap.unit)) i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153|)))
; [eval] self != null
; [eval] int___eq__(__prim__int___box__(tuple___len__(args)), __prim__int___box__(0))
; [eval] __prim__int___box__(tuple___len__(args))
; [eval] tuple___len__(args)
(push) ; 3
(assert (tuple___len__%precondition $Snap.unit (tuple___create0__ $Snap.unit)))
(pop) ; 3
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit (tuple___create0__ $Snap.unit)))
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))))
; [eval] __prim__int___box__(0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))) (__prim__int___box__ $Snap.unit 0))))
(push) ; 3
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))) (__prim__int___box__ $Snap.unit 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit (tuple___create0__ $Snap.unit))) (__prim__int___box__ $Snap.unit 0)))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
; [eval] (forperm _r_112: Ref [MustInvokeBounded(_r_112)] :: false)
; [eval] (forperm _r_112: Ref [MustInvokeUnbounded(_r_112)] :: false)
; [eval] (forperm _r_112: Ref [_r_112.MustReleaseBounded] :: false)
; [eval] (forperm _r_112: Ref [_r_112.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_156@35@01 $Perm)
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseBounded] :: Level(_r_110) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@36@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@01))
    ($Snap.second ($Snap.second $t@36@01)))))
(assert (= ($Snap.first ($Snap.second $t@36@01)) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseUnbounded] :: Level(_r_110) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@36@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_161@24@01 _current_wait_level_156@35@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _err := VarArgException_res
; [eval] _err != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= VarArgException_res@32@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | VarArgException_res@32@01 != Null | live]
; [else-branch: 16 | VarArgException_res@32@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 16 | VarArgException_res@32@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 4
; [then-branch: 17 | VarArgException_res@32@01 == Null | dead]
; [else-branch: 17 | VarArgException_res@32@01 != Null | live]
(push) ; 5
; [else-branch: 17 | VarArgException_res@32@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), VarArgException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), VarArgException())
; [eval] _err != null
(push) ; 4
; [then-branch: 18 | VarArgException_res@32@01 == Null | live]
; [else-branch: 18 | VarArgException_res@32@01 != Null | live]
(push) ; 5
; [then-branch: 18 | VarArgException_res@32@01 == Null]
(assert (= VarArgException_res@32@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | VarArgException_res@32@01 != Null]
; [eval] issubtype(typeof(_err), VarArgException())
; [eval] typeof(_err)
; [eval] VarArgException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= VarArgException_res@32@01 $Ref.null))
  (= VarArgException_res@32@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= VarArgException_res@32@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= VarArgException_res@32@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | VarArgException_res@32@01 != Null && issubtype[Bool](typeof[PyType](VarArgException_res@32@01), VarArgException[PyType]) | live]
; [else-branch: 19 | !(VarArgException_res@32@01 != Null && issubtype[Bool](typeof[PyType](VarArgException_res@32@01), VarArgException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 19 | VarArgException_res@32@01 != Null && issubtype[Bool](typeof[PyType](VarArgException_res@32@01), VarArgException[PyType])]
(assert (and
  (not (= VarArgException_res@32@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (not (= VarArgException_res@32@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType))))
; [eval] _err != null ==> issubtype(typeof(_err), VarArgException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= VarArgException_res@32@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | VarArgException_res@32@01 != Null | live]
; [else-branch: 20 | VarArgException_res@32@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 20 | VarArgException_res@32@01 != Null]
; [eval] issubtype(typeof(_err), VarArgException())
; [eval] typeof(_err)
; [eval] VarArgException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (=>
  (not (= VarArgException_res@32@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= VarArgException_res@32@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> VarArgException_res@32@01) (as VarArgException<PyType>  PyType))))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= VarArgException_res@32@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | VarArgException_res@32@01 == Null | dead]
; [else-branch: 21 | VarArgException_res@32@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 21 | VarArgException_res@32@01 != Null]
(assert (not (= VarArgException_res@32@01 $Ref.null)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared ----------
(declare-const _cthread_162@37@01 $Ref)
(declare-const _caller_measures_162@38@01 Seq<Measure$>)
(declare-const _residue_162@39@01 $Perm)
(declare-const input@40@01 $Ref)
(declare-const incon@41@01 $Ref)
(declare-const _current_wait_level_162@42@01 $Perm)
(declare-const _res@43@01 $Ref)
(declare-const _err@44@01 $Ref)
(declare-const _cthread_162@45@01 $Ref)
(declare-const _caller_measures_162@46@01 Seq<Measure$>)
(declare-const _residue_162@47@01 $Perm)
(declare-const input@48@01 $Ref)
(declare-const incon@49@01 $Ref)
(declare-const _current_wait_level_162@50@01 $Perm)
(declare-const _res@51@01 $Ref)
(declare-const _err@52@01 $Ref)
(push) ; 1
(declare-const $t@53@01 $Snap)
(assert (= $t@53@01 ($Snap.combine ($Snap.first $t@53@01) ($Snap.second $t@53@01))))
(assert (= ($Snap.first $t@53@01) $Snap.unit))
; [eval] _cthread_162 != null
(assert (not (= _cthread_162@45@01 $Ref.null)))
(assert (=
  ($Snap.second $t@53@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@01))
    ($Snap.second ($Snap.second $t@53@01)))))
(assert (= ($Snap.first ($Snap.second $t@53@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_162@45@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@53@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@53@01))) $Snap.unit))
; [eval] issubtype(typeof(input), int())
; [eval] typeof(input)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input@48@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon), Container())
; [eval] typeof(incon)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon@49@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon, null)
; [eval] object___eq__(incon, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon@49@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon@49@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon@49@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))))
(assert (not (= incon@49@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon.Container_value), int())
; [eval] typeof(incon.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@54@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@54@01))
    ($Snap.second ($Snap.second $t@54@01)))))
(assert (= ($Snap.first ($Snap.second $t@54@01)) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@54@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@54@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@54@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_162@47@01 _current_wait_level_162@50@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@54@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
  $Snap.unit))
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | _err@52@01 == Null | live]
; [else-branch: 22 | _err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | _err@52@01 == Null]
(assert (= _err@52@01 $Ref.null))
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(pop) ; 4
(push) ; 4
; [else-branch: 22 | _err@52@01 != Null]
(assert (not (= _err@52@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@52@01 $Ref.null)) (= _err@52@01 $Ref.null)))
(assert (=>
  (= _err@52@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@51@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | _err@52@01 == Null | live]
; [else-branch: 23 | _err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 23 | _err@52@01 == Null]
(assert (= _err@52@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon.Container_value), int())
; [eval] typeof(incon.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  $Snap.unit))
; [eval] !object___eq__(_res, null)
; [eval] object___eq__(_res, null)
(push) ; 4
(assert (object___eq__%precondition $Snap.unit _res@51@01 $Ref.null))
(pop) ; 4
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit _res@51@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit _res@51@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= incon@49@01 _res@51@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@51@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res.Container_value), int())
; [eval] typeof(_res.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
  $Snap.unit))
; [eval] int___eq__(_res.Container_value, input)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))) input@48@01))
(pop) ; 4
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))) input@48@01))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))) input@48@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 24 | _err@52@01 == Null | live]
; [else-branch: 24 | _err@52@01 != Null | live]
(push) ; 5
; [then-branch: 24 | _err@52@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 24 | _err@52@01 != Null]
(assert (not (= _err@52@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@52@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | _err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType]) | dead]
; [else-branch: 25 | !(_err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 25 | !(_err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@52@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 26 | _err@52@01 != Null | dead]
; [else-branch: 26 | _err@52@01 == Null | live]
(push) ; 6
; [else-branch: 26 | _err@52@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 23 | _err@52@01 != Null]
(assert (not (= _err@52@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 27 | _err@52@01 == Null | live]
; [else-branch: 27 | _err@52@01 != Null | live]
(push) ; 5
; [then-branch: 27 | _err@52@01 == Null]
(assert (= _err@52@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 27 | _err@52@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@52@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@52@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | _err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType]) | live]
; [else-branch: 28 | !(_err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 28 | _err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType])]
(assert (and
  (not (= _err@52@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon.Container_value), int())
; [eval] typeof(incon.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
  $Snap.unit))
; [eval] int___eq__(incon.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | _err@52@01 != Null | live]
; [else-branch: 29 | _err@52@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 29 | _err@52@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@52@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 28 | !(_err@52@01 != Null && issubtype[Bool](typeof[PyType](_err@52@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@52@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@52@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 30 | _err@52@01 != Null | live]
; [else-branch: 30 | _err@52@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 30 | _err@52@01 != Null]
(assert (not (= _err@52@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@52@01 $Ref.null)))
(assert (=>
  (not (= _err@52@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@52@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var res: Ref
(declare-const res@55@01 $Ref)
; [exec]
; var input_6: Ref
(declare-const input_6@56@01 $Ref)
; [exec]
; var incon_6: Ref
(declare-const incon_6@57@01 $Ref)
; [exec]
; var Container_res: Ref
(declare-const Container_res@58@01 $Ref)
; [exec]
; var MyException_res_0: Ref
(declare-const MyException_res_0@59@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@60@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@61@01 Seq<Measure$>)
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; input_6 := input
; [exec]
; incon_6 := incon
; [exec]
; Container_res := new()
(declare-const Container_res@62@01 $Ref)
(assert (not (= Container_res@62@01 $Ref.null)))
(assert (not (= Container_res@62@01 input@48@01)))
(assert (not
  (=
    Container_res@62@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@01))))))))))
(assert (not (= Container_res@62@01 MyException_res_0@59@01)))
(assert (not (= Container_res@62@01 res@55@01)))
(assert (not (= Container_res@62@01 _cthread_162@45@01)))
(assert (not (= Container_res@62@01 incon@49@01)))
(assert (not (= Container_res@62@01 Container_res@58@01)))
; [exec]
; inhale typeof(Container_res) == Container()
(declare-const $t@63@01 $Snap)
(assert (= $t@63@01 $Snap.unit))
; [eval] typeof(Container_res) == Container()
; [eval] typeof(Container_res)
; [eval] Container()
(assert (= (typeof<PyType> Container_res@62@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res, 526803611440346310908232101056638787), write)
(declare-const $t@64@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_162 := Container___init__(_cthread_162, _method_measures_162, _residue_162,
;   Container_res)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res@62@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res@62@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@65@01 $Perm)
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 ($Snap.combine ($Snap.first $t@66@01) ($Snap.second $t@66@01))))
(assert (= ($Snap.first $t@66@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@66@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@66@01))
    ($Snap.second ($Snap.second $t@66@01)))))
(assert (= ($Snap.first ($Snap.second $t@66@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@66@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@66@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@66@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@66@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_162@47@01 _current_wait_level_158@65@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@66@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@66@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= incon@49@01 Container_res@62@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@66@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@66@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res := Container_res
; [exec]
; inhale _isDefined(7562610)
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 $Snap.unit))
; [eval] _isDefined(7562610)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 7562610))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7562610))
(assert (_isDefined $Snap.unit 7562610))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(incon_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_6, 526803611440346310908232101056638787))
; [then-branch: 31 | False | dead]
; [else-branch: 31 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 31 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_6, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | True | live]
; [else-branch: 32 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 32 | True]
; [exec]
; incon_6.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@68@01 $Ref)
(assert (= Container_value@68@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= Container_res@62@01 incon@49@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(input_6, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 22))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 22))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | int___eq__((_, _), input@48@01, __prim__int___box__(_, 22)) | live]
; [else-branch: 33 | !(int___eq__((_, _), input@48@01, __prim__int___box__(_, 22))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 33 | int___eq__((_, _), input@48@01, __prim__int___box__(_, 22))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22)))
; [exec]
; MyException_res_0 := new()
(declare-const MyException_res_0@69@01 $Ref)
(assert (not (= MyException_res_0@69@01 $Ref.null)))
(assert (not (= MyException_res_0@69@01 input@48@01)))
(assert (not
  (=
    MyException_res_0@69@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@66@01))))))))
(assert (not (= MyException_res_0@69@01 Container_value@68@01)))
(assert (not (= MyException_res_0@69@01 Container_res@62@01)))
(assert (not (= MyException_res_0@69@01 MyException_res_0@59@01)))
(assert (not (= MyException_res_0@69@01 _cthread_162@45@01)))
(assert (not (= MyException_res_0@69@01 incon@49@01)))
; [exec]
; inhale typeof(MyException_res_0) == MyException()
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] typeof(MyException_res_0) == MyException()
; [eval] typeof(MyException_res_0)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_0
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res_0@69@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | MyException_res_0@69@01 != Null | live]
; [else-branch: 34 | MyException_res_0@69@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 34 | MyException_res_0@69@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 6
; [then-branch: 35 | MyException_res_0@69@01 == Null | dead]
; [else-branch: 35 | MyException_res_0@69@01 != Null | live]
(push) ; 7
; [else-branch: 35 | MyException_res_0@69@01 != Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] _err == null
; [then-branch: 36 | MyException_res_0@69@01 == Null | dead]
; [else-branch: 36 | MyException_res_0@69@01 != Null | live]
(push) ; 6
; [else-branch: 36 | MyException_res_0@69@01 != Null]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 7
; [then-branch: 37 | MyException_res_0@69@01 == Null | live]
; [else-branch: 37 | MyException_res_0@69@01 != Null | live]
(push) ; 8
; [then-branch: 37 | MyException_res_0@69@01 == Null]
(assert (= MyException_res_0@69@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 37 | MyException_res_0@69@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_0@69@01 $Ref.null))
  (= MyException_res_0@69@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_0@69@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_0@69@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | MyException_res_0@69@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_0@69@01), MyException[PyType]) | live]
; [else-branch: 38 | !(MyException_res_0@69@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_0@69@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 38 | MyException_res_0@69@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_0@69@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_0@69@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(incon.Container_value), int())
; [eval] typeof(incon.Container_value)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@68@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@68@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@68@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@68@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@68@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@68@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= MyException_res_0@69@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | MyException_res_0@69@01 != Null | live]
; [else-branch: 39 | MyException_res_0@69@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 39 | MyException_res_0@69@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= MyException_res_0@69@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_0@69@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_0@69@01) (as MyException<PyType>  PyType))))
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= MyException_res_0@69@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | MyException_res_0@69@01 == Null | dead]
; [else-branch: 40 | MyException_res_0@69@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 40 | MyException_res_0@69@01 != Null]
(assert (not (= MyException_res_0@69@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 33 | !(int___eq__((_, _), input@48@01, __prim__int___box__(_, 22)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22))))
(pop) ; 4
; [eval] !int___eq__(input_6, __prim__int___box__(22))
; [eval] int___eq__(input_6, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | !(int___eq__((_, _), input@48@01, __prim__int___box__(_, 22))) | live]
; [else-branch: 41 | int___eq__((_, _), input@48@01, __prim__int___box__(_, 22)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 41 | !(int___eq__((_, _), input@48@01, __prim__int___box__(_, 22)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22))))
; [eval] perm(_MaySet(_checkDefined(res, 7562610), 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(_checkDefined(res, 7562610), 526803611440346310908232101056638787))
; [eval] _checkDefined(res, 7562610)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res@62@01 7562610))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res@62@01 7562610))
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 5
; [else-branch: 42 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(_checkDefined(res, 7562610), 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(_checkDefined(res, 7562610), 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(_checkDefined(res, 7562610), 526803611440346310908232101056638787))
; [eval] _checkDefined(res, 7562610)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | True | live]
; [else-branch: 43 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 43 | True]
; [exec]
; _checkDefined(res, 7562610).Container_value := input_6
; [eval] _checkDefined(res, 7562610)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon@49@01 (_checkDefined $Snap.unit Container_res@62@01 7562610))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= Container_res@62@01 (_checkDefined $Snap.unit Container_res@62@01 7562610))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon@49@01 (_checkDefined $Snap.unit Container_res@62@01 7562610))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit Container_res@62@01 7562610) $Ref.null)))
; [exec]
; _res := _checkDefined(res, 7562610)
; [eval] _checkDefined(res, 7562610)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(declare-const _res@71@01 $Ref)
(assert (= _res@71@01 (_checkDefined $Snap.unit Container_res@62@01 7562610)))
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | True | live]
; [else-branch: 44 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 44 | True]
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res@71@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@71@01) (as Container<PyType>  PyType)))
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | True | live]
; [else-branch: 45 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 45 | True]
; [eval] issubtype(typeof(incon.Container_value), int())
; [eval] typeof(incon.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@68@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@68@01) (as int<PyType>  PyType)))
; [eval] !object___eq__(_res, null)
; [eval] object___eq__(_res, null)
(push) ; 7
(assert (object___eq__%precondition $Snap.unit _res@71@01 $Ref.null))
(pop) ; 7
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit _res@71@01 $Ref.null))
(push) ; 7
(assert (not (not (object___eq__ $Snap.unit _res@71@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (object___eq__ $Snap.unit _res@71@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res@62@01 7562610) _res@71@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(_res.Container_value), int())
; [eval] typeof(_res.Container_value)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res@62@01 7562610) _res@71@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int___eq__(_res.Container_value, input)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res@62@01 7562610) _res@71@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input@48@01 input@48@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input@48@01 input@48@01))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 input@48@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 input@48@01))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 46 | False | dead]
; [else-branch: 46 | True | live]
(push) ; 7
; [else-branch: 46 | True]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 8
; [then-branch: 47 | False | dead]
; [else-branch: 47 | True | live]
(push) ; 9
; [else-branch: 47 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 41 | int___eq__((_, _), input@48@01, __prim__int___box__(_, 22))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input@48@01 (__prim__int___box__ $Snap.unit 22)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared_2 ----------
(declare-const _cthread_163@72@01 $Ref)
(declare-const _caller_measures_163@73@01 Seq<Measure$>)
(declare-const _residue_163@74@01 $Perm)
(declare-const input_0@75@01 $Ref)
(declare-const incon_0@76@01 $Ref)
(declare-const _current_wait_level_163@77@01 $Perm)
(declare-const _res@78@01 $Ref)
(declare-const _err@79@01 $Ref)
(declare-const _cthread_163@80@01 $Ref)
(declare-const _caller_measures_163@81@01 Seq<Measure$>)
(declare-const _residue_163@82@01 $Perm)
(declare-const input_0@83@01 $Ref)
(declare-const incon_0@84@01 $Ref)
(declare-const _current_wait_level_163@85@01 $Perm)
(declare-const _res@86@01 $Ref)
(declare-const _err@87@01 $Ref)
(push) ; 1
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 ($Snap.combine ($Snap.first $t@88@01) ($Snap.second $t@88@01))))
(assert (= ($Snap.first $t@88@01) $Snap.unit))
; [eval] _cthread_163 != null
(assert (not (= _cthread_163@80@01 $Ref.null)))
(assert (=
  ($Snap.second $t@88@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@88@01))
    ($Snap.second ($Snap.second $t@88@01)))))
(assert (= ($Snap.first ($Snap.second $t@88@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_163@80@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@88@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@88@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@88@01))) $Snap.unit))
; [eval] issubtype(typeof(input_0), int())
; [eval] typeof(input_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_0@83@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@88@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_0), Container())
; [eval] typeof(incon_0)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_0@84@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_0, null)
; [eval] object___eq__(incon_0, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_0@84@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_0@84@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_0@84@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))))
(assert (not (= incon_0@84@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_0.Container_value), int())
; [eval] typeof(incon_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@89@01 $Snap)
(assert (= $t@89@01 ($Snap.combine ($Snap.first $t@89@01) ($Snap.second $t@89@01))))
(assert (= ($Snap.first $t@89@01) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@89@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@89@01))
    ($Snap.second ($Snap.second $t@89@01)))))
(assert (= ($Snap.first ($Snap.second $t@89@01)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@89@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@89@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@89@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_163@82@01 _current_wait_level_163@85@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@89@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@89@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@89@01))))
  $Snap.unit))
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@87@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@87@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | _err@87@01 == Null | live]
; [else-branch: 48 | _err@87@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 48 | _err@87@01 == Null]
(assert (= _err@87@01 $Ref.null))
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(pop) ; 4
(push) ; 4
; [else-branch: 48 | _err@87@01 != Null]
(assert (not (= _err@87@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@87@01 $Ref.null)) (= _err@87@01 $Ref.null)))
(assert (=>
  (= _err@87@01 $Ref.null)
  (issubtype<Bool> (typeof<PyType> _res@86@01) (as Container<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@87@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@87@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | _err@87@01 == Null | live]
; [else-branch: 49 | _err@87@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 49 | _err@87@01 == Null]
(assert (= _err@87@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_0.Container_value), int())
; [eval] typeof(incon_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
  $Snap.unit))
; [eval] !object___eq__(_res, null)
; [eval] object___eq__(_res, null)
(push) ; 4
(assert (object___eq__%precondition $Snap.unit _res@86@01 $Ref.null))
(pop) ; 4
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit _res@86@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit _res@86@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= incon_0@84@01 _res@86@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@86@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res.Container_value), int())
; [eval] typeof(_res.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
  $Snap.unit))
; [eval] int___eq__(_res.Container_value, input_0)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))) input_0@83@01))
(pop) ; 4
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))) input_0@83@01))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))) input_0@83@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 4
; [then-branch: 50 | _err@87@01 == Null | live]
; [else-branch: 50 | _err@87@01 != Null | live]
(push) ; 5
; [then-branch: 50 | _err@87@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 50 | _err@87@01 != Null]
(assert (not (= _err@87@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@87@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | _err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType]) | dead]
; [else-branch: 51 | !(_err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 51 | !(_err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@87@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 5
; [then-branch: 52 | _err@87@01 != Null | dead]
; [else-branch: 52 | _err@87@01 == Null | live]
(push) ; 6
; [else-branch: 52 | _err@87@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 49 | _err@87@01 != Null]
(assert (not (= _err@87@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 4
; [then-branch: 53 | _err@87@01 == Null | live]
; [else-branch: 53 | _err@87@01 != Null | live]
(push) ; 5
; [then-branch: 53 | _err@87@01 == Null]
(assert (= _err@87@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | _err@87@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@87@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@87@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | _err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType]) | live]
; [else-branch: 54 | !(_err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 54 | _err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType])]
(assert (and
  (not (= _err@87@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_0.Container_value), int())
; [eval] typeof(incon_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))
  $Snap.unit))
; [eval] int___eq__(incon_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))) (__prim__int___box__ $Snap.unit (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@87@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | _err@87@01 != Null | live]
; [else-branch: 55 | _err@87@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 55 | _err@87@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@87@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 54 | !(_err@87@01 != Null && issubtype[Bool](typeof[PyType](_err@87@01), Exception[PyType]))]
(assert (not
  (and
    (not (= _err@87@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@87@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@87@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | _err@87@01 != Null | live]
; [else-branch: 56 | _err@87@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 56 | _err@87@01 != Null]
(assert (not (= _err@87@01 $Ref.null)))
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@87@01 $Ref.null)))
(assert (=>
  (not (= _err@87@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@87@01) (as Exception<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@89@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var res_0: Ref
(declare-const res_0@90@01 $Ref)
; [exec]
; var input_7: Ref
(declare-const input_7@91@01 $Ref)
; [exec]
; var incon_7: Ref
(declare-const incon_7@92@01 $Ref)
; [exec]
; var Container_res_0: Ref
(declare-const Container_res_0@93@01 $Ref)
; [exec]
; var MyException_res_1: Ref
(declare-const MyException_res_1@94@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@95@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@96@01 Seq<Measure$>)
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; input_7 := input_0
; [exec]
; incon_7 := incon_0
; [exec]
; Container_res_0 := new()
(declare-const Container_res_0@97@01 $Ref)
(assert (not (= Container_res_0@97@01 $Ref.null)))
(assert (not
  (=
    Container_res_0@97@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@88@01))))))))))
(assert (not (= Container_res_0@97@01 res_0@90@01)))
(assert (not (= Container_res_0@97@01 MyException_res_1@94@01)))
(assert (not (= Container_res_0@97@01 Container_res_0@93@01)))
(assert (not (= Container_res_0@97@01 incon_0@84@01)))
(assert (not (= Container_res_0@97@01 _cthread_163@80@01)))
(assert (not (= Container_res_0@97@01 input_0@83@01)))
; [exec]
; inhale typeof(Container_res_0) == Container()
(declare-const $t@98@01 $Snap)
(assert (= $t@98@01 $Snap.unit))
; [eval] typeof(Container_res_0) == Container()
; [eval] typeof(Container_res_0)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_0@97@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_0, 526803611440346310908232101056638787), write)
(declare-const $t@99@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_163 := Container___init__(_cthread_163, _method_measures_163, _residue_163,
;   Container_res_0)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_0@97@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_0@97@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@100@01 $Perm)
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@101@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@101@01))
    ($Snap.second ($Snap.second $t@101@01)))))
(assert (= ($Snap.first ($Snap.second $t@101@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@101@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@101@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@101@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_163@82@01 _current_wait_level_158@100@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@101@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= incon_0@84@01 Container_res_0@97@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_0 := Container_res_0
; [exec]
; inhale _isDefined(207759828338)
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] _isDefined(207759828338)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 207759828338))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 207759828338))
(assert (_isDefined $Snap.unit 207759828338))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(incon_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_7, 526803611440346310908232101056638787))
; [then-branch: 57 | False | dead]
; [else-branch: 57 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 57 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_7, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | True | live]
; [else-branch: 58 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 58 | True]
; [exec]
; incon_7.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@103@01 $Ref)
(assert (= Container_value@103@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= Container_res_0@97@01 incon_0@84@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(input_7, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 22))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 22))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22)) | live]
; [else-branch: 59 | !(int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 59 | int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22)))
; [exec]
; MyException_res_1 := new()
(declare-const MyException_res_1@104@01 $Ref)
(assert (not (= MyException_res_1@104@01 $Ref.null)))
(assert (not (= MyException_res_1@104@01 Container_value@103@01)))
(assert (not (= MyException_res_1@104@01 Container_res_0@97@01)))
(assert (not (= MyException_res_1@104@01 MyException_res_1@94@01)))
(assert (not (= MyException_res_1@104@01 incon_0@84@01)))
(assert (not (= MyException_res_1@104@01 _cthread_163@80@01)))
(assert (not (= MyException_res_1@104@01 input_0@83@01)))
(assert (not
  (=
    MyException_res_1@104@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
; [exec]
; inhale typeof(MyException_res_1) == MyException()
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 $Snap.unit))
; [eval] typeof(MyException_res_1) == MyException()
; [eval] typeof(MyException_res_1)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_1@104@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_1
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res_1@104@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | MyException_res_1@104@01 != Null | live]
; [else-branch: 60 | MyException_res_1@104@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 60 | MyException_res_1@104@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 6
; [then-branch: 61 | MyException_res_1@104@01 == Null | dead]
; [else-branch: 61 | MyException_res_1@104@01 != Null | live]
(push) ; 7
; [else-branch: 61 | MyException_res_1@104@01 != Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] _err == null
; [then-branch: 62 | MyException_res_1@104@01 == Null | dead]
; [else-branch: 62 | MyException_res_1@104@01 != Null | live]
(push) ; 6
; [else-branch: 62 | MyException_res_1@104@01 != Null]
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 7
; [then-branch: 63 | MyException_res_1@104@01 == Null | live]
; [else-branch: 63 | MyException_res_1@104@01 != Null | live]
(push) ; 8
; [then-branch: 63 | MyException_res_1@104@01 == Null]
(assert (= MyException_res_1@104@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 63 | MyException_res_1@104@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_1@104@01 $Ref.null))
  (= MyException_res_1@104@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_1@104@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_1@104@01) (as Exception<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_1@104@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_1@104@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | MyException_res_1@104@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_1@104@01), Exception[PyType]) | live]
; [else-branch: 64 | !(MyException_res_1@104@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_1@104@01), Exception[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 64 | MyException_res_1@104@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_1@104@01), Exception[PyType])]
(assert (and
  (not (= MyException_res_1@104@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_1@104@01) (as Exception<PyType>  PyType))))
; [eval] issubtype(typeof(incon_0.Container_value), int())
; [eval] typeof(incon_0.Container_value)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@103@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@103@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_0.Container_value, __prim__int___box__(-1))
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@103@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 1))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@103@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@103@01 (__prim__int___box__ $Snap.unit (- 0 1)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@103@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= MyException_res_1@104@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | MyException_res_1@104@01 != Null | live]
; [else-branch: 65 | MyException_res_1@104@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 65 | MyException_res_1@104@01 != Null]
; [eval] issubtype(typeof(_err), Exception())
; [eval] typeof(_err)
; [eval] Exception()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= MyException_res_1@104@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_1@104@01) (as Exception<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_1@104@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_1@104@01) (as Exception<PyType>  PyType))))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= MyException_res_1@104@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | MyException_res_1@104@01 == Null | dead]
; [else-branch: 66 | MyException_res_1@104@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 66 | MyException_res_1@104@01 != Null]
(assert (not (= MyException_res_1@104@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 59 | !(int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22))))
(pop) ; 4
; [eval] !int___eq__(input_7, __prim__int___box__(22))
; [eval] int___eq__(input_7, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | !(int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22))) | live]
; [else-branch: 67 | int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 67 | !(int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22))))
; [eval] perm(_MaySet(_checkDefined(res_0, 207759828338), 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(_checkDefined(res_0, 207759828338), 526803611440346310908232101056638787))
; [eval] _checkDefined(res_0, 207759828338)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_0@97@01 207759828338))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_0@97@01 207759828338))
; [then-branch: 68 | False | dead]
; [else-branch: 68 | True | live]
(push) ; 5
; [else-branch: 68 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(_checkDefined(res_0, 207759828338), 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(_checkDefined(res_0, 207759828338), 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(_checkDefined(res_0, 207759828338), 526803611440346310908232101056638787))
; [eval] _checkDefined(res_0, 207759828338)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | True | live]
; [else-branch: 69 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 69 | True]
; [exec]
; _checkDefined(res_0, 207759828338).Container_value := input_7
; [eval] _checkDefined(res_0, 207759828338)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon_0@84@01 (_checkDefined $Snap.unit Container_res_0@97@01 207759828338))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  Container_res_0@97@01
  (_checkDefined $Snap.unit Container_res_0@97@01 207759828338))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon_0@84@01 (_checkDefined $Snap.unit Container_res_0@97@01 207759828338))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit Container_res_0@97@01 207759828338) $Ref.null)))
; [exec]
; _res := _checkDefined(res_0, 207759828338)
; [eval] _checkDefined(res_0, 207759828338)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
; Joined path conditions
(declare-const _res@106@01 $Ref)
(assert (= _res@106@01 (_checkDefined $Snap.unit Container_res_0@97@01 207759828338)))
; [exec]
; label __end
; [eval] _err == null ==> issubtype(typeof(_res), Container())
; [eval] _err == null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | True | live]
; [else-branch: 70 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 70 | True]
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res@106@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@106@01) (as Container<PyType>  PyType)))
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | True | live]
; [else-branch: 71 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 71 | True]
; [eval] issubtype(typeof(incon_0.Container_value), int())
; [eval] typeof(incon_0.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@103@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@103@01) (as int<PyType>  PyType)))
; [eval] !object___eq__(_res, null)
; [eval] object___eq__(_res, null)
(push) ; 7
(assert (object___eq__%precondition $Snap.unit _res@106@01 $Ref.null))
(pop) ; 7
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit _res@106@01 $Ref.null))
(push) ; 7
(assert (not (not (object___eq__ $Snap.unit _res@106@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (object___eq__ $Snap.unit _res@106@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_0@97@01 207759828338) _res@106@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(_res.Container_value), int())
; [eval] typeof(_res.Container_value)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_0@97@01 207759828338) _res@106@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int___eq__(_res.Container_value, input_0)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_0@97@01 207759828338) _res@106@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 input_0@83@01))
(pop) ; 7
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 input_0@83@01))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 input_0@83@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 input_0@83@01))
; [eval] _err != null && issubtype(typeof(_err), Exception())
; [eval] _err != null
; [then-branch: 72 | False | dead]
; [else-branch: 72 | True | live]
(push) ; 7
; [else-branch: 72 | True]
; [eval] _err != null ==> issubtype(typeof(_err), Exception())
; [eval] _err != null
(push) ; 8
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 9
; [else-branch: 73 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 67 | int___eq__((_, _), input_0@83@01, __prim__int___box__(_, 22))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_0@83@01 (__prim__int___box__ $Snap.unit 22)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared_3 ----------
(declare-const _cthread_164@107@01 $Ref)
(declare-const _caller_measures_164@108@01 Seq<Measure$>)
(declare-const _residue_164@109@01 $Perm)
(declare-const input_1@110@01 $Ref)
(declare-const incon_1@111@01 $Ref)
(declare-const _current_wait_level_164@112@01 $Perm)
(declare-const _err@113@01 $Ref)
(declare-const _cthread_164@114@01 $Ref)
(declare-const _caller_measures_164@115@01 Seq<Measure$>)
(declare-const _residue_164@116@01 $Perm)
(declare-const input_1@117@01 $Ref)
(declare-const incon_1@118@01 $Ref)
(declare-const _current_wait_level_164@119@01 $Perm)
(declare-const _err@120@01 $Ref)
(push) ; 1
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 ($Snap.combine ($Snap.first $t@121@01) ($Snap.second $t@121@01))))
(assert (= ($Snap.first $t@121@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@114@01 $Ref.null)))
(assert (=
  ($Snap.second $t@121@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@01))
    ($Snap.second ($Snap.second $t@121@01)))))
(assert (= ($Snap.first ($Snap.second $t@121@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@114@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@121@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@121@01))) $Snap.unit))
; [eval] issubtype(typeof(input_1), int())
; [eval] typeof(input_1)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_1@117@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@121@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@121@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_1), Container())
; [eval] typeof(incon_1)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_1@118@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_1, null)
; [eval] object___eq__(incon_1, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_1@118@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_1@118@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_1@118@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))))
(assert (not (= incon_1@118@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_1.Container_value), int())
; [eval] typeof(incon_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@121@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 ($Snap.combine ($Snap.first $t@122@01) ($Snap.second $t@122@01))))
(assert (= ($Snap.first $t@122@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@122@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@122@01))
    ($Snap.second ($Snap.second $t@122@01)))))
(assert (= ($Snap.first ($Snap.second $t@122@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@122@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@122@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@122@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@116@01 _current_wait_level_164@119@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@122@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@122@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@122@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@120@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@120@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | _err@120@01 == Null | live]
; [else-branch: 74 | _err@120@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 74 | _err@120@01 == Null]
(assert (= _err@120@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 74 | _err@120@01 != Null]
(assert (not (= _err@120@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@120@01 $Ref.null)) (= _err@120@01 $Ref.null)))
(assert (=> (= _err@120@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
; [then-branch: 75 | _err@120@01 == Null | live]
; [else-branch: 75 | _err@120@01 != Null | live]
(push) ; 4
; [then-branch: 75 | _err@120@01 == Null]
(assert (= _err@120@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 75 | _err@120@01 != Null]
(assert (not (= _err@120@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@120@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= _err@120@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | _err@120@01 != Null && issubtype[Bool](typeof[PyType](_err@120@01), MyException[PyType]) | live]
; [else-branch: 76 | !(_err@120@01 != Null && issubtype[Bool](typeof[PyType](_err@120@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 76 | _err@120@01 != Null && issubtype[Bool](typeof[PyType](_err@120@01), MyException[PyType])]
(assert (and
  (not (= _err@120@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_1.Container_value), int())
; [eval] typeof(incon_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))
  $Snap.unit))
; [eval] int___eq__(incon_1.Container_value, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))) (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))) (__prim__int___box__ $Snap.unit (- 0 2)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))) (__prim__int___box__ $Snap.unit (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@120@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | _err@120@01 != Null | live]
; [else-branch: 77 | _err@120@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 77 | _err@120@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@120@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 76 | !(_err@120@01 != Null && issubtype[Bool](typeof[PyType](_err@120@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@120@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@120@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@120@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | _err@120@01 != Null | live]
; [else-branch: 78 | _err@120@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 78 | _err@120@01 != Null]
(assert (not (= _err@120@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@120@01 $Ref.null)))
(assert (=>
  (not (= _err@120@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@120@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@122@01))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var input_8: Ref
(declare-const input_8@123@01 $Ref)
; [exec]
; var incon_8: Ref
(declare-const incon_8@124@01 $Ref)
; [exec]
; var MyException_res_2: Ref
(declare-const MyException_res_2@125@01 $Ref)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@126@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@127@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; input_8 := input_1
; [exec]
; incon_8 := incon_1
; [eval] perm(_MaySet(incon_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_8, 526803611440346310908232101056638787))
; [then-branch: 79 | False | dead]
; [else-branch: 79 | True | live]
(push) ; 3
; [else-branch: 79 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_8, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_8, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | True | live]
; [else-branch: 80 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 80 | True]
; [exec]
; incon_8.Container_value := __prim__int___box__(-2)
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(declare-const Container_value@128@01 $Ref)
(assert (= Container_value@128@01 (__prim__int___box__ $Snap.unit (- 0 2))))
; [exec]
; MyException_res_2 := new()
(declare-const MyException_res_2@129@01 $Ref)
(assert (not (= MyException_res_2@129@01 $Ref.null)))
(assert (not (= MyException_res_2@129@01 _cthread_164@114@01)))
(assert (not (= MyException_res_2@129@01 Container_value@128@01)))
(assert (not (= MyException_res_2@129@01 incon_1@118@01)))
(assert (not (= MyException_res_2@129@01 input_1@117@01)))
(assert (not (= MyException_res_2@129@01 MyException_res_2@125@01)))
; [exec]
; inhale typeof(MyException_res_2) == MyException()
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 $Snap.unit))
; [eval] typeof(MyException_res_2) == MyException()
; [eval] typeof(MyException_res_2)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_2
; [eval] _err != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= MyException_res_2@129@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | MyException_res_2@129@01 != Null | live]
; [else-branch: 81 | MyException_res_2@129@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 81 | MyException_res_2@129@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 5
; [then-branch: 82 | MyException_res_2@129@01 == Null | dead]
; [else-branch: 82 | MyException_res_2@129@01 != Null | live]
(push) ; 6
; [else-branch: 82 | MyException_res_2@129@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 83 | MyException_res_2@129@01 == Null | live]
; [else-branch: 83 | MyException_res_2@129@01 != Null | live]
(push) ; 6
; [then-branch: 83 | MyException_res_2@129@01 == Null]
(assert (= MyException_res_2@129@01 $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 83 | MyException_res_2@129@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_2@129@01 $Ref.null))
  (= MyException_res_2@129@01 $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_2@129@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_2@129@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | MyException_res_2@129@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_2@129@01), MyException[PyType]) | live]
; [else-branch: 84 | !(MyException_res_2@129@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_2@129@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 84 | MyException_res_2@129@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_2@129@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_2@129@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(incon_1.Container_value), int())
; [eval] typeof(incon_1.Container_value)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@128@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@128@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_1.Container_value, __prim__int___box__(-2))
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@128@01 (__prim__int___box__ $Snap.unit (- 0 2))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 2))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@128@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@128@01 (__prim__int___box__ $Snap.unit (- 0 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@128@01 (__prim__int___box__ $Snap.unit (- 0 2))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= MyException_res_2@129@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 85 | MyException_res_2@129@01 != Null | live]
; [else-branch: 85 | MyException_res_2@129@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 85 | MyException_res_2@129@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (=>
  (not (= MyException_res_2@129@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_2@129@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_2@129@01) (as MyException<PyType>  PyType))))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= MyException_res_2@129@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | MyException_res_2@129@01 == Null | dead]
; [else-branch: 86 | MyException_res_2@129@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 86 | MyException_res_2@129@01 != Null]
(assert (not (= MyException_res_2@129@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared_4 ----------
(declare-const _cthread_165@131@01 $Ref)
(declare-const _caller_measures_165@132@01 Seq<Measure$>)
(declare-const _residue_165@133@01 $Perm)
(declare-const input_2@134@01 $Ref)
(declare-const incon_2@135@01 $Ref)
(declare-const _current_wait_level_165@136@01 $Perm)
(declare-const _err@137@01 $Ref)
(declare-const _cthread_165@138@01 $Ref)
(declare-const _caller_measures_165@139@01 Seq<Measure$>)
(declare-const _residue_165@140@01 $Perm)
(declare-const input_2@141@01 $Ref)
(declare-const incon_2@142@01 $Ref)
(declare-const _current_wait_level_165@143@01 $Perm)
(declare-const _err@144@01 $Ref)
(push) ; 1
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (= ($Snap.first $t@145@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@138@01 $Ref.null)))
(assert (=
  ($Snap.second $t@145@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@145@01))
    ($Snap.second ($Snap.second $t@145@01)))))
(assert (= ($Snap.first ($Snap.second $t@145@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@138@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@145@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@145@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@145@01))) $Snap.unit))
; [eval] issubtype(typeof(input_2), int())
; [eval] typeof(input_2)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_2@141@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@145@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_2), Container())
; [eval] typeof(incon_2)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_2@142@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_2, null)
; [eval] object___eq__(incon_2, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_2@142@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_2@142@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_2@142@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(assert (not (= incon_2@142@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_2.Container_value), int())
; [eval] typeof(incon_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 ($Snap.combine ($Snap.first $t@146@01) ($Snap.second $t@146@01))))
(assert (= ($Snap.first $t@146@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@146@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@146@01))
    ($Snap.second ($Snap.second $t@146@01)))))
(assert (= ($Snap.first ($Snap.second $t@146@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@146@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@146@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@146@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@140@01 _current_wait_level_165@143@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@146@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@144@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@144@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | _err@144@01 == Null | live]
; [else-branch: 87 | _err@144@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 87 | _err@144@01 == Null]
(assert (= _err@144@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 87 | _err@144@01 != Null]
(assert (not (= _err@144@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@144@01 $Ref.null)) (= _err@144@01 $Ref.null)))
(assert (=> (= _err@144@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
; [then-branch: 88 | _err@144@01 == Null | live]
; [else-branch: 88 | _err@144@01 != Null | live]
(push) ; 4
; [then-branch: 88 | _err@144@01 == Null]
(assert (= _err@144@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 88 | _err@144@01 != Null]
(assert (not (= _err@144@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@144@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= _err@144@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | _err@144@01 != Null && issubtype[Bool](typeof[PyType](_err@144@01), MyException[PyType]) | live]
; [else-branch: 89 | !(_err@144@01 != Null && issubtype[Bool](typeof[PyType](_err@144@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 89 | _err@144@01 != Null && issubtype[Bool](typeof[PyType](_err@144@01), MyException[PyType])]
(assert (and
  (not (= _err@144@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_2.Container_value), int())
; [eval] typeof(incon_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))
  $Snap.unit))
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))) (__prim__int___box__ $Snap.unit (- 0 3)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@144@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | _err@144@01 != Null | live]
; [else-branch: 90 | _err@144@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 90 | _err@144@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@144@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 89 | !(_err@144@01 != Null && issubtype[Bool](typeof[PyType](_err@144@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@144@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@144@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@144@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | _err@144@01 != Null | live]
; [else-branch: 91 | _err@144@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 91 | _err@144@01 != Null]
(assert (not (= _err@144@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@144@01 $Ref.null)))
(assert (=>
  (not (= _err@144@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@144@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@146@01))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var input_9: Ref
(declare-const input_9@147@01 $Ref)
; [exec]
; var incon_9: Ref
(declare-const incon_9@148@01 $Ref)
; [exec]
; var MyException_res_3: Ref
(declare-const MyException_res_3@149@01 $Ref)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@150@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@151@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; input_9 := input_2
; [exec]
; incon_9 := incon_2
; [eval] perm(_MaySet(incon_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_9, 526803611440346310908232101056638787))
; [then-branch: 92 | False | dead]
; [else-branch: 92 | True | live]
(push) ; 3
; [else-branch: 92 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_9, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_9, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | True | live]
; [else-branch: 93 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 93 | True]
; [exec]
; incon_9.Container_value := __prim__int___box__(-2)
; [eval] __prim__int___box__(-2)
; [eval] -2
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 2)))
(declare-const Container_value@152@01 $Ref)
(assert (= Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 2))))
; [exec]
; MyException_res_3 := new()
(declare-const MyException_res_3@153@01 $Ref)
(assert (not (= MyException_res_3@153@01 $Ref.null)))
(assert (not (= MyException_res_3@153@01 input_2@141@01)))
(assert (not (= MyException_res_3@153@01 Container_value@152@01)))
(assert (not (= MyException_res_3@153@01 MyException_res_3@149@01)))
(assert (not (= MyException_res_3@153@01 incon_2@142@01)))
(assert (not (= MyException_res_3@153@01 _cthread_165@138@01)))
; [exec]
; inhale typeof(MyException_res_3) == MyException()
(declare-const $t@154@01 $Snap)
(assert (= $t@154@01 $Snap.unit))
; [eval] typeof(MyException_res_3) == MyException()
; [eval] typeof(MyException_res_3)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_3
; [eval] _err != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= MyException_res_3@153@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | MyException_res_3@153@01 != Null | live]
; [else-branch: 94 | MyException_res_3@153@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 94 | MyException_res_3@153@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 5
; [then-branch: 95 | MyException_res_3@153@01 == Null | dead]
; [else-branch: 95 | MyException_res_3@153@01 != Null | live]
(push) ; 6
; [else-branch: 95 | MyException_res_3@153@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 96 | MyException_res_3@153@01 == Null | live]
; [else-branch: 96 | MyException_res_3@153@01 != Null | live]
(push) ; 6
; [then-branch: 96 | MyException_res_3@153@01 == Null]
(assert (= MyException_res_3@153@01 $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 96 | MyException_res_3@153@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_3@153@01 $Ref.null))
  (= MyException_res_3@153@01 $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_3@153@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_3@153@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType]) | live]
; [else-branch: 97 | !(MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 97 | MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_3@153@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(incon_2.Container_value), int())
; [eval] typeof(incon_2.Container_value)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@152@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@152@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
; [then-branch: 98 | MyException_res_3@153@01 == Null | live]
; [else-branch: 98 | MyException_res_3@153@01 != Null | live]
(push) ; 6
; [then-branch: 98 | MyException_res_3@153@01 == Null]
(assert (= MyException_res_3@153@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 98 | MyException_res_3@153@01 != Null]
(assert (not (= MyException_res_3@153@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_3@153@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_3@153@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType]) | live]
; [else-branch: 99 | !(MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 99 | MyException_res_3@153@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_3@153@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_3@153@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_3@153@01) (as MyException<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(incon_2.Container_value), int())
; [eval] typeof(incon_2.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@152@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@152@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(incon_2.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@152@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared_5 ----------
(declare-const _cthread_166@155@01 $Ref)
(declare-const _caller_measures_166@156@01 Seq<Measure$>)
(declare-const _residue_166@157@01 $Perm)
(declare-const input_3@158@01 $Ref)
(declare-const incon_3@159@01 $Ref)
(declare-const _current_wait_level_166@160@01 $Perm)
(declare-const _err@161@01 $Ref)
(declare-const _cthread_166@162@01 $Ref)
(declare-const _caller_measures_166@163@01 Seq<Measure$>)
(declare-const _residue_166@164@01 $Perm)
(declare-const input_3@165@01 $Ref)
(declare-const incon_3@166@01 $Ref)
(declare-const _current_wait_level_166@167@01 $Perm)
(declare-const _err@168@01 $Ref)
(push) ; 1
(declare-const $t@169@01 $Snap)
(assert (= $t@169@01 ($Snap.combine ($Snap.first $t@169@01) ($Snap.second $t@169@01))))
(assert (= ($Snap.first $t@169@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@162@01 $Ref.null)))
(assert (=
  ($Snap.second $t@169@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@169@01))
    ($Snap.second ($Snap.second $t@169@01)))))
(assert (= ($Snap.first ($Snap.second $t@169@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@162@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@169@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@169@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@169@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@169@01))) $Snap.unit))
; [eval] issubtype(typeof(input_3), int())
; [eval] typeof(input_3)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_3@165@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@169@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@169@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@169@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_3), Container())
; [eval] typeof(incon_3)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_3@166@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_3, null)
; [eval] object___eq__(incon_3, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_3@166@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_3@166@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_3@166@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))))
(assert (not (= incon_3@166@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_3.Container_value), int())
; [eval] typeof(incon_3.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@169@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@170@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@170@01))
    ($Snap.second ($Snap.second $t@170@01)))))
(assert (= ($Snap.first ($Snap.second $t@170@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@170@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@170@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@170@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@164@01 _current_wait_level_166@167@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@170@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@168@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | _err@168@01 == Null | live]
; [else-branch: 100 | _err@168@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 100 | _err@168@01 == Null]
(assert (= _err@168@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 100 | _err@168@01 != Null]
(assert (not (= _err@168@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@168@01 $Ref.null)) (= _err@168@01 $Ref.null)))
(assert (=> (= _err@168@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
; [then-branch: 101 | _err@168@01 == Null | live]
; [else-branch: 101 | _err@168@01 != Null | live]
(push) ; 4
; [then-branch: 101 | _err@168@01 == Null]
(assert (= _err@168@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 101 | _err@168@01 != Null]
(assert (not (= _err@168@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= _err@168@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | _err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]) | live]
; [else-branch: 102 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 102 | _err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])]
(assert (and
  (not (= _err@168@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_3.Container_value), int())
; [eval] typeof(incon_3.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] int___eq__(incon_3.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))) (__prim__int___box__ $Snap.unit (- 0 3)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 103 | _err@168@01 == Null | live]
; [else-branch: 103 | _err@168@01 != Null | live]
(push) ; 5
; [then-branch: 103 | _err@168@01 == Null]
(assert (= _err@168@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 103 | _err@168@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | _err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType]) | dead]
; [else-branch: 104 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 104 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 105 | _err@168@01 != Null | live]
; [else-branch: 105 | _err@168@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 105 | _err@168@01 != Null]
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 6
; [then-branch: 106 | issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]) | live]
; [else-branch: 106 | !(issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])) | live]
(push) ; 7
; [then-branch: 106 | issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])]
(pop) ; 7
(push) ; 7
; [else-branch: 106 | !(issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@168@01 $Ref.null))
  (or
    (not
      (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))))
(assert (=>
  (not (= _err@168@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 102 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 107 | _err@168@01 == Null | live]
; [else-branch: 107 | _err@168@01 != Null | live]
(push) ; 5
; [then-branch: 107 | _err@168@01 == Null]
(assert (= _err@168@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 107 | _err@168@01 != Null]
(assert (not (= _err@168@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@168@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | _err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType]) | live]
; [else-branch: 108 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 108 | _err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType])]
(assert (and
  (not (= _err@168@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 108 | !(_err@168@01 != Null && issubtype[Bool](typeof[PyType](_err@168@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@168@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType))))
  (and
    (not (= _err@168@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@168@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@168@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | _err@168@01 != Null | live]
; [else-branch: 109 | _err@168@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 109 | _err@168@01 != Null]
(assert (not (= _err@168@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 6
; [then-branch: 110 | issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]) | live]
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])) | live]
(push) ; 7
; [then-branch: 110 | issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](_err@168@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@168@01 $Ref.null))
  (and
    (not (= _err@168@01 $Ref.null))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))))))
(assert (not (= _err@168@01 $Ref.null)))
(assert (=>
  (not (= _err@168@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _err@168@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@170@01)))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var input_10: Ref
(declare-const input_10@171@01 $Ref)
; [exec]
; var incon_10: Ref
(declare-const incon_10@172@01 $Ref)
; [exec]
; var MyException_res_4: Ref
(declare-const MyException_res_4@173@01 $Ref)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@174@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@175@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; input_10 := input_3
; [exec]
; incon_10 := incon_3
; [eval] perm(_MaySet(incon_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_10, 526803611440346310908232101056638787))
; [then-branch: 111 | False | dead]
; [else-branch: 111 | True | live]
(push) ; 3
; [else-branch: 111 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_10, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_10, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | True | live]
; [else-branch: 112 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 112 | True]
; [exec]
; incon_10.Container_value := __prim__int___box__(-3)
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(declare-const Container_value@176@01 $Ref)
(assert (= Container_value@176@01 (__prim__int___box__ $Snap.unit (- 0 3))))
; [exec]
; MyException_res_4 := new()
(declare-const MyException_res_4@177@01 $Ref)
(assert (not (= MyException_res_4@177@01 $Ref.null)))
(assert (not (= MyException_res_4@177@01 incon_3@166@01)))
(assert (not (= MyException_res_4@177@01 _cthread_166@162@01)))
(assert (not (= MyException_res_4@177@01 MyException_res_4@173@01)))
(assert (not (= MyException_res_4@177@01 input_3@165@01)))
(assert (not (= MyException_res_4@177@01 Container_value@176@01)))
; [exec]
; inhale typeof(MyException_res_4) == MyException()
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; [eval] typeof(MyException_res_4) == MyException()
; [eval] typeof(MyException_res_4)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_4
; [eval] _err != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= MyException_res_4@177@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | MyException_res_4@177@01 != Null | live]
; [else-branch: 113 | MyException_res_4@177@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 113 | MyException_res_4@177@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 5
; [then-branch: 114 | MyException_res_4@177@01 == Null | dead]
; [else-branch: 114 | MyException_res_4@177@01 != Null | live]
(push) ; 6
; [else-branch: 114 | MyException_res_4@177@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 115 | MyException_res_4@177@01 == Null | live]
; [else-branch: 115 | MyException_res_4@177@01 != Null | live]
(push) ; 6
; [then-branch: 115 | MyException_res_4@177@01 == Null]
(assert (= MyException_res_4@177@01 $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 115 | MyException_res_4@177@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_4@177@01 $Ref.null))
  (= MyException_res_4@177@01 $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_4@177@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_4@177@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType]) | live]
; [else-branch: 116 | !(MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 116 | MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_4@177@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(incon_3.Container_value), int())
; [eval] typeof(incon_3.Container_value)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@176@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@176@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_3.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@176@01 (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@176@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@176@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@176@01 (__prim__int___box__ $Snap.unit (- 0 3))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 6
; [then-branch: 117 | MyException_res_4@177@01 == Null | live]
; [else-branch: 117 | MyException_res_4@177@01 != Null | live]
(push) ; 7
; [then-branch: 117 | MyException_res_4@177@01 == Null]
(assert (= MyException_res_4@177@01 $Ref.null))
(pop) ; 7
(push) ; 7
; [else-branch: 117 | MyException_res_4@177@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_4@177@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyOtherException[PyType]) | dead]
; [else-branch: 118 | !(MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 118 | !(MyException_res_4@177@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= MyException_res_4@177@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    (not (= MyException_res_4@177@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyOtherException<PyType>  PyType)))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= MyException_res_4@177@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | MyException_res_4@177@01 != Null | live]
; [else-branch: 119 | MyException_res_4@177@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 119 | MyException_res_4@177@01 != Null]
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 8
; [then-branch: 120 | issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType]) | live]
; [else-branch: 120 | !(issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType])) | live]
(push) ; 9
; [then-branch: 120 | issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType])]
(pop) ; 9
(push) ; 9
; [else-branch: 120 | !(issubtype[Bool](typeof[PyType](MyException_res_4@177@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not (= MyException_res_4@177@01 $Ref.null))
  (or
    (not
      (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType)))))
(push) ; 6
(assert (not (=>
  (not (= MyException_res_4@177@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_4@177@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyException_res_4@177@01) (as MyOtherException<PyType>  PyType)))))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= MyException_res_4@177@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | MyException_res_4@177@01 == Null | dead]
; [else-branch: 121 | MyException_res_4@177@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 121 | MyException_res_4@177@01 != Null]
(assert (not (= MyException_res_4@177@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_undeclared ----------
(declare-const _cthread_167@179@01 $Ref)
(declare-const _caller_measures_167@180@01 Seq<Measure$>)
(declare-const _residue_167@181@01 $Perm)
(declare-const input_4@182@01 $Ref)
(declare-const incon_4@183@01 $Ref)
(declare-const _current_wait_level_167@184@01 $Perm)
(declare-const _res@185@01 $Ref)
(declare-const _cthread_167@186@01 $Ref)
(declare-const _caller_measures_167@187@01 Seq<Measure$>)
(declare-const _residue_167@188@01 $Perm)
(declare-const input_4@189@01 $Ref)
(declare-const incon_4@190@01 $Ref)
(declare-const _current_wait_level_167@191@01 $Perm)
(declare-const _res@192@01 $Ref)
(push) ; 1
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 ($Snap.combine ($Snap.first $t@193@01) ($Snap.second $t@193@01))))
(assert (= ($Snap.first $t@193@01) $Snap.unit))
; [eval] _cthread_167 != null
(assert (not (= _cthread_167@186@01 $Ref.null)))
(assert (=
  ($Snap.second $t@193@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@193@01))
    ($Snap.second ($Snap.second $t@193@01)))))
(assert (= ($Snap.first ($Snap.second $t@193@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_167), Thread_0())
; [eval] typeof(_cthread_167)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_167@186@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@193@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@193@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@193@01))) $Snap.unit))
; [eval] issubtype(typeof(input_4), int())
; [eval] typeof(input_4)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_4@189@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@193@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@193@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@193@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_4), Container())
; [eval] typeof(incon_4)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_4@190@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_4, null)
; [eval] object___eq__(incon_4, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_4@190@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_4@190@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_4@190@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))))
(assert (not (= incon_4@190@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_4.Container_value), int())
; [eval] typeof(incon_4.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 ($Snap.combine ($Snap.first $t@194@01) ($Snap.second $t@194@01))))
(assert (= ($Snap.first $t@194@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_167)
(assert (=
  ($Snap.second $t@194@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@194@01))
    ($Snap.second ($Snap.second $t@194@01)))))
(assert (= ($Snap.first ($Snap.second $t@194@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_167)
(assert (=
  ($Snap.second ($Snap.second $t@194@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@194@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@194@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_167
(assert (<= _residue_167@188@01 _current_wait_level_167@191@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@194@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> _res@192@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_4.Container_value), int())
; [eval] typeof(incon_4.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  $Snap.unit))
; [eval] !object___eq__(_res, null)
; [eval] object___eq__(_res, null)
(push) ; 3
(assert (object___eq__%precondition $Snap.unit _res@192@01 $Ref.null))
(pop) ; 3
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit _res@192@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit _res@192@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= incon_4@190@01 _res@192@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@192@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res.Container_value), int())
; [eval] typeof(_res.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
  $Snap.unit))
; [eval] int___eq__(_res.Container_value, input_4)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))) input_4@189@01))
(pop) ; 3
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))) input_4@189@01))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))) input_4@189@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@195@01 $Ref)
; [exec]
; var res_1: Ref
(declare-const res_1@196@01 $Ref)
; [exec]
; var input_11: Ref
(declare-const input_11@197@01 $Ref)
; [exec]
; var incon_11: Ref
(declare-const incon_11@198@01 $Ref)
; [exec]
; var Container_res_1: Ref
(declare-const Container_res_1@199@01 $Ref)
; [exec]
; var error_36: Ref
(declare-const error_36@200@01 $Ref)
; [exec]
; var MyException_res_5: Ref
(declare-const MyException_res_5@201@01 $Ref)
; [exec]
; var _cwl_167: Perm
(declare-const _cwl_167@202@01 $Perm)
; [exec]
; var _method_measures_167: Seq[Measure$]
(declare-const _method_measures_167@203@01 Seq<Measure$>)
; [exec]
; _method_measures_167 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; input_11 := input_4
; [exec]
; incon_11 := incon_4
; [exec]
; Container_res_1 := new()
(declare-const Container_res_1@204@01 $Ref)
(assert (not (= Container_res_1@204@01 $Ref.null)))
(assert (not (= Container_res_1@204@01 incon_4@190@01)))
(assert (not (= Container_res_1@204@01 _cthread_167@186@01)))
(assert (not (= Container_res_1@204@01 MyException_res_5@201@01)))
(assert (not
  (=
    Container_res_1@204@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@193@01))))))))))
(assert (not (= Container_res_1@204@01 error_36@200@01)))
(assert (not (= Container_res_1@204@01 res_1@196@01)))
(assert (not (= Container_res_1@204@01 Container_res_1@199@01)))
(assert (not (= Container_res_1@204@01 input_4@189@01)))
; [exec]
; inhale typeof(Container_res_1) == Container()
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] typeof(Container_res_1) == Container()
; [eval] typeof(Container_res_1)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_1@204@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_1, 526803611440346310908232101056638787), write)
(declare-const $t@206@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_167 := Container___init__(_cthread_167, _method_measures_167, _residue_167,
;   Container_res_1)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_1@204@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_1@204@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@207@01 $Perm)
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(assert (= ($Snap.first ($Snap.second $t@208@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_167@188@01 _current_wait_level_158@207@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= incon_4@190@01 Container_res_1@204@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_1 := Container_res_1
; [exec]
; inhale _isDefined(212054795634)
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 $Snap.unit))
; [eval] _isDefined(212054795634)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 212054795634))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 212054795634))
(assert (_isDefined $Snap.unit 212054795634))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(incon_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_11, 526803611440346310908232101056638787))
; [then-branch: 122 | False | dead]
; [else-branch: 122 | True | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 122 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(incon_11, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_11, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | True | live]
; [else-branch: 123 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 123 | True]
; [exec]
; incon_11.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@210@01 $Ref)
(assert (= Container_value@210@01 (__prim__int___box__ $Snap.unit (- 0 1))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= Container_res_1@204@01 incon_4@190@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(input_11, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 22))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 22))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_4@189@01 (__prim__int___box__ $Snap.unit 22)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) input_4@189@01 (__prim__int___box__ $Snap.unit 22))))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_4@189@01 (__prim__int___box__ $Snap.unit 22)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_4@189@01 (__prim__int___box__ $Snap.unit 22))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | int___eq__((_, _), input_4@189@01, __prim__int___box__(_, 22)) | live]
; [else-branch: 124 | !(int___eq__((_, _), input_4@189@01, __prim__int___box__(_, 22))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 124 | int___eq__((_, _), input_4@189@01, __prim__int___box__(_, 22))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) input_4@189@01 (__prim__int___box__ $Snap.unit 22)))
; [exec]
; MyException_res_5 := new()
(declare-const MyException_res_5@211@01 $Ref)
(assert (not (= MyException_res_5@211@01 $Ref.null)))
(assert (not (= MyException_res_5@211@01 incon_4@190@01)))
(assert (not (= MyException_res_5@211@01 Container_res_1@204@01)))
(assert (not
  (=
    MyException_res_5@211@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))))
(assert (not (= MyException_res_5@211@01 _cthread_167@186@01)))
(assert (not (= MyException_res_5@211@01 MyException_res_5@201@01)))
(assert (not (= MyException_res_5@211@01 error_36@200@01)))
(assert (not (= MyException_res_5@211@01 Container_value@210@01)))
(assert (not (= MyException_res_5@211@01 input_4@189@01)))
; [exec]
; inhale typeof(MyException_res_5) == MyException()
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] typeof(MyException_res_5) == MyException()
; [eval] typeof(MyException_res_5)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_5@211@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_36 := MyException_res_5
; [eval] error_36 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res_5@211@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | MyException_res_5@211@01 != Null | live]
; [else-branch: 125 | MyException_res_5@211@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 125 | MyException_res_5@211@01 != Null]
; [exec]
; exhale false
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon_4@190@01 Container_res_1@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    Container_value@210@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    Container_value@210@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not (= Container_res_1@204@01 incon_4@190@01))
  (not (= incon_4@190@01 Container_res_1@204@01))))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon_4@190@01 Container_res_1@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    Container_value@210@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    Container_value@210@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not (= Container_res_1@204@01 incon_4@190@01))
  (not (= incon_4@190@01 Container_res_1@204@01))))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= incon_4@190@01 Container_res_1@204@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))
    Container_value@210@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    Container_value@210@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not (= Container_res_1@204@01 incon_4@190@01))
  (not (= incon_4@190@01 Container_res_1@204@01))))
(set-option :timeout 0)
(push) ; 6
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_declared_6 ----------
(declare-const _cthread_168@213@01 $Ref)
(declare-const _caller_measures_168@214@01 Seq<Measure$>)
(declare-const _residue_168@215@01 $Perm)
(declare-const input_5@216@01 $Ref)
(declare-const incon_5@217@01 $Ref)
(declare-const _current_wait_level_168@218@01 $Perm)
(declare-const _err@219@01 $Ref)
(declare-const _cthread_168@220@01 $Ref)
(declare-const _caller_measures_168@221@01 Seq<Measure$>)
(declare-const _residue_168@222@01 $Perm)
(declare-const input_5@223@01 $Ref)
(declare-const incon_5@224@01 $Ref)
(declare-const _current_wait_level_168@225@01 $Perm)
(declare-const _err@226@01 $Ref)
(push) ; 1
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 ($Snap.combine ($Snap.first $t@227@01) ($Snap.second $t@227@01))))
(assert (= ($Snap.first $t@227@01) $Snap.unit))
; [eval] _cthread_168 != null
(assert (not (= _cthread_168@220@01 $Ref.null)))
(assert (=
  ($Snap.second $t@227@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@227@01))
    ($Snap.second ($Snap.second $t@227@01)))))
(assert (= ($Snap.first ($Snap.second $t@227@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_168), Thread_0())
; [eval] typeof(_cthread_168)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_168@220@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@227@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@227@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@227@01))) $Snap.unit))
; [eval] issubtype(typeof(input_5), int())
; [eval] typeof(input_5)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> input_5@223@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@227@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_5), Container())
; [eval] typeof(incon_5)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> incon_5@224@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
  $Snap.unit))
; [eval] !object___eq__(incon_5, null)
; [eval] object___eq__(incon_5, null)
(push) ; 2
(assert (object___eq__%precondition $Snap.unit incon_5@224@01 $Ref.null))
(pop) ; 2
; Joined path conditions
(assert (object___eq__%precondition $Snap.unit incon_5@224@01 $Ref.null))
(assert (not (object___eq__ $Snap.unit incon_5@224@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))
(assert (not (= incon_5@224@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_5.Container_value), int())
; [eval] typeof(incon_5.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(assert (= ($Snap.first $t@228@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_168)
(assert (=
  ($Snap.second $t@228@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@228@01))
    ($Snap.second ($Snap.second $t@228@01)))))
(assert (= ($Snap.first ($Snap.second $t@228@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_168)
(assert (=
  ($Snap.second ($Snap.second $t@228@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@228@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@228@01))) $Snap.unit))
; [eval] _residue_168 <= _current_wait_level_168
(assert (<= _residue_168@222@01 _current_wait_level_168@225@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@228@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  $Snap.unit))
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@226@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@226@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | _err@226@01 == Null | live]
; [else-branch: 126 | _err@226@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 126 | _err@226@01 == Null]
(assert (= _err@226@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 126 | _err@226@01 != Null]
(assert (not (= _err@226@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@226@01 $Ref.null)) (= _err@226@01 $Ref.null)))
(assert (=> (= _err@226@01 $Ref.null) false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 3
; [then-branch: 127 | _err@226@01 == Null | live]
; [else-branch: 127 | _err@226@01 != Null | live]
(push) ; 4
; [then-branch: 127 | _err@226@01 == Null]
(assert (= _err@226@01 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 127 | _err@226@01 != Null]
(assert (not (= _err@226@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= _err@226@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | _err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]) | live]
; [else-branch: 128 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 128 | _err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])]
(assert (and
  (not (= _err@226@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(incon_5.Container_value), int())
; [eval] typeof(incon_5.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] int___eq__(incon_5.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))) (__prim__int___box__ $Snap.unit (- 0 3)))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))) (__prim__int___box__ $Snap.unit (- 0 3))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 129 | _err@226@01 == Null | live]
; [else-branch: 129 | _err@226@01 != Null | live]
(push) ; 5
; [then-branch: 129 | _err@226@01 == Null]
(assert (= _err@226@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 129 | _err@226@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | _err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType]) | dead]
; [else-branch: 130 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 130 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@226@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | _err@226@01 != Null | live]
; [else-branch: 131 | _err@226@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 131 | _err@226@01 != Null]
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 6
; [then-branch: 132 | issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]) | live]
; [else-branch: 132 | !(issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])) | live]
(push) ; 7
; [then-branch: 132 | issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])]
(pop) ; 7
(push) ; 7
; [else-branch: 132 | !(issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@226@01 $Ref.null))
  (or
    (not
      (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))))
(assert (=>
  (not (= _err@226@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 128 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 133 | _err@226@01 == Null | live]
; [else-branch: 133 | _err@226@01 != Null | live]
(push) ; 5
; [then-branch: 133 | _err@226@01 == Null]
(assert (= _err@226@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 133 | _err@226@01 != Null]
(assert (not (= _err@226@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@226@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | _err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType]) | live]
; [else-branch: 134 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 134 | _err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType])]
(assert (and
  (not (= _err@226@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 134 | !(_err@226@01 != Null && issubtype[Bool](typeof[PyType](_err@226@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@226@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType))))
  (and
    (not (= _err@226@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@226@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@226@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | _err@226@01 != Null | live]
; [else-branch: 135 | _err@226@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 135 | _err@226@01 != Null]
(assert (not (= _err@226@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 6
; [then-branch: 136 | issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]) | live]
; [else-branch: 136 | !(issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])) | live]
(push) ; 7
; [then-branch: 136 | issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))
(pop) ; 7
(push) ; 7
; [else-branch: 136 | !(issubtype[Bool](typeof[PyType](_err@226@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (not (= _err@226@01 $Ref.null))
  (and
    (not (= _err@226@01 $Ref.null))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))))))
(assert (not (= _err@226@01 $Ref.null)))
(assert (=>
  (not (= _err@226@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> _err@226@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var input_12: Ref
(declare-const input_12@229@01 $Ref)
; [exec]
; var incon_12: Ref
(declare-const incon_12@230@01 $Ref)
; [exec]
; var MyException_res_6: Ref
(declare-const MyException_res_6@231@01 $Ref)
; [exec]
; var MyOtherException_res: Ref
(declare-const MyOtherException_res@232@01 $Ref)
; [exec]
; var _cwl_168: Perm
(declare-const _cwl_168@233@01 $Perm)
; [exec]
; var _method_measures_168: Seq[Measure$]
(declare-const _method_measures_168@234@01 Seq<Measure$>)
; [exec]
; _method_measures_168 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; input_12 := input_5
; [exec]
; incon_12 := incon_5
; [eval] int___gt__(int___unbox__(input_12), 2)
; [eval] int___unbox__(input_12)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit input_5@223@01))
(pop) ; 3
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit input_5@223@01))
(push) ; 3
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))
(pop) ; 3
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | int___gt__(_, int___unbox__(_, input_5@223@01), 2) | live]
; [else-branch: 137 | !(int___gt__(_, int___unbox__(_, input_5@223@01), 2)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 137 | int___gt__(_, int___unbox__(_, input_5@223@01), 2)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))
; [eval] perm(_MaySet(incon_12, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_12, 526803611440346310908232101056638787))
; [then-branch: 138 | False | dead]
; [else-branch: 138 | True | live]
(push) ; 4
; [else-branch: 138 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(incon_12, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(incon_12, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(incon_12, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | True | live]
; [else-branch: 139 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | True]
; [exec]
; incon_12.Container_value := __prim__int___box__(-3)
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 3)))
(declare-const Container_value@235@01 $Ref)
(assert (= Container_value@235@01 (__prim__int___box__ $Snap.unit (- 0 3))))
; [exec]
; MyException_res_6 := new()
(declare-const MyException_res_6@236@01 $Ref)
(assert (not (= MyException_res_6@236@01 $Ref.null)))
(assert (not (= MyException_res_6@236@01 MyException_res_6@231@01)))
(assert (not (= MyException_res_6@236@01 Container_value@235@01)))
(assert (not (= MyException_res_6@236@01 input_5@223@01)))
(assert (not (= MyException_res_6@236@01 MyOtherException_res@232@01)))
(assert (not (= MyException_res_6@236@01 _cthread_168@220@01)))
(assert (not (= MyException_res_6@236@01 incon_5@224@01)))
; [exec]
; inhale typeof(MyException_res_6) == MyException()
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] typeof(MyException_res_6) == MyException()
; [eval] typeof(MyException_res_6)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_6
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res_6@236@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | MyException_res_6@236@01 != Null | live]
; [else-branch: 140 | MyException_res_6@236@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 140 | MyException_res_6@236@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 6
; [then-branch: 141 | MyException_res_6@236@01 == Null | dead]
; [else-branch: 141 | MyException_res_6@236@01 != Null | live]
(push) ; 7
; [else-branch: 141 | MyException_res_6@236@01 != Null]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 6
; [then-branch: 142 | MyException_res_6@236@01 == Null | live]
; [else-branch: 142 | MyException_res_6@236@01 != Null | live]
(push) ; 7
; [then-branch: 142 | MyException_res_6@236@01 == Null]
(assert (= MyException_res_6@236@01 $Ref.null))
(pop) ; 7
(push) ; 7
; [else-branch: 142 | MyException_res_6@236@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_6@236@01 $Ref.null))
  (= MyException_res_6@236@01 $Ref.null)))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_6@236@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_6@236@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType]) | live]
; [else-branch: 143 | !(MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 143 | MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_6@236@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(incon_5.Container_value), int())
; [eval] typeof(incon_5.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@235@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@235@01) (as int<PyType>  PyType)))
; [eval] int___eq__(incon_5.Container_value, __prim__int___box__(-3))
; [eval] __prim__int___box__(-3)
; [eval] -3
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@235@01 (__prim__int___box__ $Snap.unit (- 0 3))))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (- 0 3))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@235@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@235@01 (__prim__int___box__ $Snap.unit (- 0 3)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@235@01 (__prim__int___box__ $Snap.unit (- 0 3))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 7
; [then-branch: 144 | MyException_res_6@236@01 == Null | live]
; [else-branch: 144 | MyException_res_6@236@01 != Null | live]
(push) ; 8
; [then-branch: 144 | MyException_res_6@236@01 == Null]
(assert (= MyException_res_6@236@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 144 | MyException_res_6@236@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_6@236@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyOtherException[PyType]) | dead]
; [else-branch: 145 | !(MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 145 | !(MyException_res_6@236@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= MyException_res_6@236@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyOtherException<PyType>  PyType)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (and
    (not (= MyException_res_6@236@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyOtherException<PyType>  PyType)))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= MyException_res_6@236@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | MyException_res_6@236@01 != Null | live]
; [else-branch: 146 | MyException_res_6@236@01 == Null | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 146 | MyException_res_6@236@01 != Null]
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 9
; [then-branch: 147 | issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType]) | live]
; [else-branch: 147 | !(issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType])) | live]
(push) ; 10
; [then-branch: 147 | issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType])]
(pop) ; 10
(push) ; 10
; [else-branch: 147 | !(issubtype[Bool](typeof[PyType](MyException_res_6@236@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not (= MyException_res_6@236@01 $Ref.null))
  (or
    (not
      (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType)))))
(push) ; 7
(assert (not (=>
  (not (= MyException_res_6@236@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_6@236@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyException_res_6@236@01) (as MyOtherException<PyType>  PyType)))))
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= MyException_res_6@236@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | MyException_res_6@236@01 == Null | dead]
; [else-branch: 148 | MyException_res_6@236@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 148 | MyException_res_6@236@01 != Null]
(assert (not (= MyException_res_6@236@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 137 | !(int___gt__(_, int___unbox__(_, input_5@223@01), 2))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2)))
(pop) ; 3
; [eval] !int___gt__(int___unbox__(input_12), 2)
; [eval] int___gt__(int___unbox__(input_12), 2)
; [eval] int___unbox__(input_12)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 149 | !(int___gt__(_, int___unbox__(_, input_5@223@01), 2)) | live]
; [else-branch: 149 | int___gt__(_, int___unbox__(_, input_5@223@01), 2) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 149 | !(int___gt__(_, int___unbox__(_, input_5@223@01), 2))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2)))
; [exec]
; MyOtherException_res := new()
(declare-const MyOtherException_res@238@01 $Ref)
(assert (not (= MyOtherException_res@238@01 $Ref.null)))
(assert (not (= MyOtherException_res@238@01 MyException_res_6@231@01)))
(assert (not (= MyOtherException_res@238@01 input_5@223@01)))
(assert (not (= MyOtherException_res@238@01 MyOtherException_res@232@01)))
(assert (not
  (=
    MyOtherException_res@238@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
(assert (not (= MyOtherException_res@238@01 _cthread_168@220@01)))
(assert (not (= MyOtherException_res@238@01 incon_5@224@01)))
; [exec]
; inhale typeof(MyOtherException_res) == MyOtherException()
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] typeof(MyOtherException_res) == MyOtherException()
; [eval] typeof(MyOtherException_res)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res@238@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyOtherException_res
; [eval] _err != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= MyOtherException_res@238@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | MyOtherException_res@238@01 != Null | live]
; [else-branch: 150 | MyOtherException_res@238@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 150 | MyOtherException_res@238@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null ==> false
; [eval] _err == null
(push) ; 5
; [then-branch: 151 | MyOtherException_res@238@01 == Null | dead]
; [else-branch: 151 | MyOtherException_res@238@01 != Null | live]
(push) ; 6
; [else-branch: 151 | MyOtherException_res@238@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 152 | MyOtherException_res@238@01 == Null | live]
; [else-branch: 152 | MyOtherException_res@238@01 != Null | live]
(push) ; 6
; [then-branch: 152 | MyOtherException_res@238@01 == Null]
(assert (= MyOtherException_res@238@01 $Ref.null))
(pop) ; 6
(push) ; 6
; [else-branch: 152 | MyOtherException_res@238@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyOtherException_res@238@01 $Ref.null))
  (= MyOtherException_res@238@01 $Ref.null)))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyOtherException_res@238@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 153 | MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType]) | dead]
; [else-branch: 153 | !(MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 153 | !(MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType]))]
(assert (not
  (and
    (not (= MyOtherException_res@238@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType)))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException()) ==> true
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 6
; [then-branch: 154 | MyOtherException_res@238@01 == Null | live]
; [else-branch: 154 | MyOtherException_res@238@01 != Null | live]
(push) ; 7
; [then-branch: 154 | MyOtherException_res@238@01 == Null]
(assert (= MyOtherException_res@238@01 $Ref.null))
(pop) ; 7
(push) ; 7
; [else-branch: 154 | MyOtherException_res@238@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyOtherException_res@238@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not (= MyOtherException_res@238@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyOtherException[PyType]) | live]
; [else-branch: 155 | !(MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 155 | MyOtherException_res@238@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyOtherException[PyType])]
(assert (and
  (not (= MyOtherException_res@238@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (and
  (not (= MyOtherException_res@238@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType))))
; [eval] _err != null ==> issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= MyOtherException_res@238@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | MyOtherException_res@238@01 != Null | live]
; [else-branch: 156 | MyOtherException_res@238@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 156 | MyOtherException_res@238@01 != Null]
; [eval] issubtype(typeof(_err), MyException()) || issubtype(typeof(_err), MyOtherException())
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(push) ; 8
; [then-branch: 157 | issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType]) | live]
; [else-branch: 157 | !(issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType])) | live]
(push) ; 9
; [then-branch: 157 | issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType)))
(pop) ; 9
(push) ; 9
; [else-branch: 157 | !(issubtype[Bool](typeof[PyType](MyOtherException_res@238@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not (= MyOtherException_res@238@01 $Ref.null))
  (or
    (not
      (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType)))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType)))))
(push) ; 6
(assert (not (=>
  (not (= MyOtherException_res@238@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyOtherException_res@238@01 $Ref.null))
  (or
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyException<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res@238@01) (as MyOtherException<PyType>  PyType)))))
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= MyOtherException_res@238@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | MyOtherException_res@238@01 == Null | dead]
; [else-branch: 158 | MyOtherException_res@238@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 158 | MyOtherException_res@238@01 != Null]
(assert (not (= MyOtherException_res@238@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 149 | int___gt__(_, int___unbox__(_, input_5@223@01), 2)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit input_5@223@01) 2))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- helper ----------
(declare-const _cthread_169@240@01 $Ref)
(declare-const _caller_measures_169@241@01 Seq<Measure$>)
(declare-const _residue_169@242@01 $Perm)
(declare-const out@243@01 $Ref)
(declare-const i@244@01 $Ref)
(declare-const _current_wait_level_169@245@01 $Perm)
(declare-const _err@246@01 $Ref)
(declare-const _cthread_169@247@01 $Ref)
(declare-const _caller_measures_169@248@01 Seq<Measure$>)
(declare-const _residue_169@249@01 $Perm)
(declare-const out@250@01 $Ref)
(declare-const i@251@01 $Ref)
(declare-const _current_wait_level_169@252@01 $Perm)
(declare-const _err@253@01 $Ref)
(push) ; 1
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
; [eval] _cthread_169 != null
(assert (not (= _cthread_169@247@01 $Ref.null)))
(assert (=
  ($Snap.second $t@254@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@254@01))
    ($Snap.second ($Snap.second $t@254@01)))))
(assert (= ($Snap.first ($Snap.second $t@254@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_169@247@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@254@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@254@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@254@01))) $Snap.unit))
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out@250@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@254@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
  $Snap.unit))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> i@251@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
(assert (not (= out@250@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 ($Snap.combine ($Snap.first $t@255@01) ($Snap.second $t@255@01))))
(assert (= ($Snap.first $t@255@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@255@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@255@01))
    ($Snap.second ($Snap.second $t@255@01)))))
(assert (= ($Snap.first ($Snap.second $t@255@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@255@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@255@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@255@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_169@249@01 _current_wait_level_169@252@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@255@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@253@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@253@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | _err@253@01 == Null | live]
; [else-branch: 159 | _err@253@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 159 | _err@253@01 == Null]
(assert (= _err@253@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 160 | _err@253@01 == Null | live]
; [else-branch: 160 | _err@253@01 != Null | live]
(push) ; 5
; [then-branch: 160 | _err@253@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 160 | _err@253@01 != Null]
(assert (not (= _err@253@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@253@01 $Ref.null)) (= _err@253@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@253@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | _err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType]) | dead]
; [else-branch: 161 | !(_err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 161 | !(_err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@253@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 162 | _err@253@01 != Null | dead]
; [else-branch: 162 | _err@253@01 == Null | live]
(push) ; 6
; [else-branch: 162 | _err@253@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 159 | _err@253@01 != Null]
(assert (not (= _err@253@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@255@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 163 | _err@253@01 == Null | live]
; [else-branch: 163 | _err@253@01 != Null | live]
(push) ; 5
; [then-branch: 163 | _err@253@01 == Null]
(assert (= _err@253@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 163 | _err@253@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@253@01 $Ref.null)) (= _err@253@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@253@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@253@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | _err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType]) | live]
; [else-branch: 164 | !(_err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 164 | _err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType])]
(assert (and
  (not (= _err@253@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@253@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | _err@253@01 != Null | live]
; [else-branch: 165 | _err@253@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 165 | _err@253@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@253@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 164 | !(_err@253@01 != Null && issubtype[Bool](typeof[PyType](_err@253@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@253@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@253@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@253@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | _err@253@01 != Null | live]
; [else-branch: 166 | _err@253@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 166 | _err@253@01 != Null]
(assert (not (= _err@253@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@253@01 $Ref.null)))
(assert (=>
  (not (= _err@253@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@253@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@255@01))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var out_19: Ref
(declare-const out_19@256@01 $Ref)
; [exec]
; var i_0: Ref
(declare-const i_0@257@01 $Ref)
; [exec]
; var MyException_res_7: Ref
(declare-const MyException_res_7@258@01 $Ref)
; [exec]
; var _cwl_169: Perm
(declare-const _cwl_169@259@01 $Perm)
; [exec]
; var _method_measures_169: Seq[Measure$]
(declare-const _method_measures_169@260@01 Seq<Measure$>)
; [exec]
; _method_measures_169 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_19 := out
; [exec]
; i_0 := i
; [eval] int___gt__(int___unbox__(i_0), 34)
; [eval] int___unbox__(i_0)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit i@251@01))
(pop) ; 3
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit i@251@01))
(push) ; 3
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))
(pop) ; 3
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | int___gt__(_, int___unbox__(_, i@251@01), 34) | live]
; [else-branch: 167 | !(int___gt__(_, int___unbox__(_, i@251@01), 34)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 167 | int___gt__(_, int___unbox__(_, i@251@01), 34)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787))
; [then-branch: 168 | False | dead]
; [else-branch: 168 | True | live]
(push) ; 4
; [else-branch: 168 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | True | live]
; [else-branch: 169 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 169 | True]
; [exec]
; out_19.Container_value := __prim__int___box__(13)
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(declare-const Container_value@261@01 $Ref)
(assert (= Container_value@261@01 (__prim__int___box__ $Snap.unit 13)))
; [exec]
; MyException_res_7 := new()
(declare-const MyException_res_7@262@01 $Ref)
(assert (not (= MyException_res_7@262@01 $Ref.null)))
(assert (not (= MyException_res_7@262@01 i@251@01)))
(assert (not (= MyException_res_7@262@01 Container_value@261@01)))
(assert (not (= MyException_res_7@262@01 _cthread_169@247@01)))
(assert (not (= MyException_res_7@262@01 out@250@01)))
(assert (not (= MyException_res_7@262@01 MyException_res_7@258@01)))
; [exec]
; inhale typeof(MyException_res_7) == MyException()
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 $Snap.unit))
; [eval] typeof(MyException_res_7) == MyException()
; [eval] typeof(MyException_res_7)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyException_res_7
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyException_res_7@262@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | MyException_res_7@262@01 != Null | live]
; [else-branch: 170 | MyException_res_7@262@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 170 | MyException_res_7@262@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null
; [then-branch: 171 | MyException_res_7@262@01 == Null | dead]
; [else-branch: 171 | MyException_res_7@262@01 != Null | live]
(push) ; 6
; [else-branch: 171 | MyException_res_7@262@01 != Null]
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 7
; [then-branch: 172 | MyException_res_7@262@01 == Null | live]
; [else-branch: 172 | MyException_res_7@262@01 != Null | live]
(push) ; 8
; [then-branch: 172 | MyException_res_7@262@01 == Null]
(assert (= MyException_res_7@262@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 172 | MyException_res_7@262@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyException_res_7@262@01 $Ref.null))
  (= MyException_res_7@262@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyException_res_7@262@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not (= MyException_res_7@262@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | MyException_res_7@262@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_7@262@01), MyException[PyType]) | live]
; [else-branch: 173 | !(MyException_res_7@262@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_7@262@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 173 | MyException_res_7@262@01 != Null && issubtype[Bool](typeof[PyType](MyException_res_7@262@01), MyException[PyType])]
(assert (and
  (not (= MyException_res_7@262@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@261@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@261@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@261@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@261@01 (__prim__int___box__ $Snap.unit 13))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@261@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@261@01 (__prim__int___box__ $Snap.unit 13)))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= MyException_res_7@262@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | MyException_res_7@262@01 != Null | live]
; [else-branch: 174 | MyException_res_7@262@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 174 | MyException_res_7@262@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= MyException_res_7@262@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyException_res_7@262@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyException_res_7@262@01) (as MyException<PyType>  PyType))))
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= MyException_res_7@262@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | MyException_res_7@262@01 == Null | dead]
; [else-branch: 175 | MyException_res_7@262@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 175 | MyException_res_7@262@01 != Null]
(assert (not (= MyException_res_7@262@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 167 | !(int___gt__(_, int___unbox__(_, i@251@01), 34))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34)))
(pop) ; 3
; [eval] !int___gt__(int___unbox__(i_0), 34)
; [eval] int___gt__(int___unbox__(i_0), 34)
; [eval] int___unbox__(i_0)
(push) ; 3
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | !(int___gt__(_, int___unbox__(_, i@251@01), 34)) | live]
; [else-branch: 176 | int___gt__(_, int___unbox__(_, i@251@01), 34) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 176 | !(int___gt__(_, int___unbox__(_, i@251@01), 34))]
(assert (not (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34)))
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787))
; [then-branch: 177 | False | dead]
; [else-branch: 177 | True | live]
(push) ; 4
; [else-branch: 177 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_19, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | True | live]
; [else-branch: 178 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 178 | True]
; [exec]
; out_19.Container_value := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const Container_value@264@01 $Ref)
(assert (= Container_value@264@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; label __end
; [eval] _err == null
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 179 | True]
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@264@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@264@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@264@01 (__prim__int___box__ $Snap.unit 12)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@264@01 (__prim__int___box__ $Snap.unit 12))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@264@01 (__prim__int___box__ $Snap.unit 12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@264@01 (__prim__int___box__ $Snap.unit 12)))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 180 | False | dead]
; [else-branch: 180 | True | live]
(push) ; 6
; [else-branch: 180 | True]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 7
; [then-branch: 181 | False | dead]
; [else-branch: 181 | True | live]
(push) ; 8
; [else-branch: 181 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] (forperm _r_27: Ref [MustInvokeBounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [MustInvokeUnbounded(_r_27)] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: false)
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 176 | int___gt__(_, int___unbox__(_, i@251@01), 34)]
(assert (int___gt__ $Snap.unit (int___unbox__ $Snap.unit i@251@01) 34))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_caught ----------
(declare-const _cthread_170@265@01 $Ref)
(declare-const _caller_measures_170@266@01 Seq<Measure$>)
(declare-const _residue_170@267@01 $Perm)
(declare-const out_0@268@01 $Ref)
(declare-const _current_wait_level_170@269@01 $Perm)
(declare-const _err@270@01 $Ref)
(declare-const _cthread_170@271@01 $Ref)
(declare-const _caller_measures_170@272@01 Seq<Measure$>)
(declare-const _residue_170@273@01 $Perm)
(declare-const out_0@274@01 $Ref)
(declare-const _current_wait_level_170@275@01 $Perm)
(declare-const _err@276@01 $Ref)
(push) ; 1
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] _cthread_170 != null
(assert (not (= _cthread_170@271@01 $Ref.null)))
(assert (=
  ($Snap.second $t@277@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@277@01))
    ($Snap.second ($Snap.second $t@277@01)))))
(assert (= ($Snap.first ($Snap.second $t@277@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_170), Thread_0())
; [eval] typeof(_cthread_170)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_170@271@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@277@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@277@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@277@01))) $Snap.unit))
; [eval] issubtype(typeof(out_0), Container())
; [eval] typeof(out_0)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_0@274@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@277@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
(assert (not (= out_0@274@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_0.Container_value), int())
; [eval] typeof(out_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 ($Snap.combine ($Snap.first $t@278@01) ($Snap.second $t@278@01))))
(assert (= ($Snap.first $t@278@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_170)
(assert (=
  ($Snap.second $t@278@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@278@01))
    ($Snap.second ($Snap.second $t@278@01)))))
(assert (= ($Snap.first ($Snap.second $t@278@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_170)
(assert (=
  ($Snap.second ($Snap.second $t@278@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@278@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@278@01))) $Snap.unit))
; [eval] _residue_170 <= _current_wait_level_170
(assert (<= _residue_170@273@01 _current_wait_level_170@275@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@278@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@276@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@276@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | _err@276@01 == Null | live]
; [else-branch: 182 | _err@276@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 182 | _err@276@01 == Null]
(assert (= _err@276@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_0.Container_value), int())
; [eval] typeof(out_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
; [eval] int___eq__(out_0.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> false
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 183 | _err@276@01 == Null | live]
; [else-branch: 183 | _err@276@01 != Null | live]
(push) ; 5
; [then-branch: 183 | _err@276@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 183 | _err@276@01 != Null]
(assert (not (= _err@276@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@276@01 $Ref.null)) (= _err@276@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | _err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType]) | dead]
; [else-branch: 184 | !(_err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 184 | !(_err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 185 | _err@276@01 != Null | dead]
; [else-branch: 185 | _err@276@01 == Null | live]
(push) ; 5
; [else-branch: 185 | _err@276@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 182 | _err@276@01 != Null]
(assert (not (= _err@276@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@278@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> false
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 186 | _err@276@01 == Null | live]
; [else-branch: 186 | _err@276@01 != Null | live]
(push) ; 5
; [then-branch: 186 | _err@276@01 == Null]
(assert (= _err@276@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 186 | _err@276@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@276@01 $Ref.null)) (= _err@276@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@276@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | _err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType]) | live]
; [else-branch: 187 | !(_err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 187 | _err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType])]
(assert (and
  (not (= _err@276@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 187 | !(_err@276@01 != Null && issubtype[Bool](typeof[PyType](_err@276@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@276@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType))))
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))))
(assert (=>
  (and
    (not (= _err@276@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType)))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@276@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@276@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | _err@276@01 != Null | live]
; [else-branch: 188 | _err@276@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 188 | _err@276@01 != Null]
(assert (not (= _err@276@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@276@01 $Ref.null)))
(assert (=>
  (not (= _err@276@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@276@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@278@01))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var error: Ref
(declare-const error@279@01 $Ref)
; [exec]
; var try_finally_18: Int
(declare-const try_finally_18@280@01 Int)
; [exec]
; var out_20: Ref
(declare-const out_20@281@01 $Ref)
; [exec]
; var MyException_res_8: Ref
(declare-const MyException_res_8@282@01 $Ref)
; [exec]
; var _cwl_170: Perm
(declare-const _cwl_170@283@01 $Perm)
; [exec]
; var _method_measures_170: Seq[Measure$]
(declare-const _method_measures_170@284@01 Seq<Measure$>)
; [exec]
; _method_measures_170 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_20 := out_0
; [exec]
; try_finally_18 := 0
; [exec]
; MyException_res_8 := new()
(declare-const MyException_res_8@285@01 $Ref)
(assert (not (= MyException_res_8@285@01 $Ref.null)))
(assert (not (= MyException_res_8@285@01 out_0@274@01)))
(assert (not (= MyException_res_8@285@01 _cthread_170@271@01)))
(assert (not (= MyException_res_8@285@01 MyException_res_8@282@01)))
(assert (not
  (=
    MyException_res_8@285@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(assert (not (= MyException_res_8@285@01 error@279@01)))
; [exec]
; inhale typeof(MyException_res_8) == MyException()
(declare-const $t@286@01 $Snap)
(assert (= $t@286@01 $Snap.unit))
; [eval] typeof(MyException_res_8) == MyException()
; [eval] typeof(MyException_res_8)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error := MyException_res_8
; [eval] error != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_8@285@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | MyException_res_8@285@01 != Null | live]
; [else-branch: 189 | MyException_res_8@285@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 189 | MyException_res_8@285@01 != Null]
; [eval] !issubtype(typeof(error), MyException())
; [eval] issubtype(typeof(error), MyException())
; [eval] typeof(error)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | !(issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType])) | dead]
; [else-branch: 190 | issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 190 | issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error), MyException())
; [eval] typeof(error)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType]) | live]
; [else-branch: 191 | !(issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 191 | issubtype[Bool](typeof[PyType](MyException_res_8@285@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_8@285@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException
; [eval] perm(_MaySet(out_20, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_20, 526803611440346310908232101056638787))
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 5
; [else-branch: 192 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_20, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_20, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_20, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 193 | True]
; [exec]
; out_20.Container_value := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const Container_value@287@01 $Ref)
(assert (= Container_value@287@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; label post_try
; [exec]
; label __end
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | True | live]
; [else-branch: 194 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 194 | True]
; [eval] issubtype(typeof(out_0.Container_value), int())
; [eval] typeof(out_0.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@287@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@287@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_0.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@287@01 (__prim__int___box__ $Snap.unit 12)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@287@01 (__prim__int___box__ $Snap.unit 12))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@287@01 (__prim__int___box__ $Snap.unit 12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@287@01 (__prim__int___box__ $Snap.unit 12)))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> false
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 7
; [then-branch: 195 | False | dead]
; [else-branch: 195 | True | live]
(push) ; 8
; [else-branch: 195 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 7
; [then-branch: 196 | False | dead]
; [else-branch: 196 | True | live]
(push) ; 8
; [else-branch: 196 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(error != null)
; [eval] error != null
; [then-branch: 197 | MyException_res_8@285@01 == Null | dead]
; [else-branch: 197 | MyException_res_8@285@01 != Null | live]
(push) ; 3
; [else-branch: 197 | MyException_res_8@285@01 != Null]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_caught_2 ----------
(declare-const _cthread_171@288@01 $Ref)
(declare-const _caller_measures_171@289@01 Seq<Measure$>)
(declare-const _residue_171@290@01 $Perm)
(declare-const out_1@291@01 $Ref)
(declare-const _current_wait_level_171@292@01 $Perm)
(declare-const _cthread_171@293@01 $Ref)
(declare-const _caller_measures_171@294@01 Seq<Measure$>)
(declare-const _residue_171@295@01 $Perm)
(declare-const out_1@296@01 $Ref)
(declare-const _current_wait_level_171@297@01 $Perm)
(push) ; 1
(declare-const $t@298@01 $Snap)
(assert (= $t@298@01 ($Snap.combine ($Snap.first $t@298@01) ($Snap.second $t@298@01))))
(assert (= ($Snap.first $t@298@01) $Snap.unit))
; [eval] _cthread_171 != null
(assert (not (= _cthread_171@293@01 $Ref.null)))
(assert (=
  ($Snap.second $t@298@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@298@01))
    ($Snap.second ($Snap.second $t@298@01)))))
(assert (= ($Snap.first ($Snap.second $t@298@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_171), Thread_0())
; [eval] typeof(_cthread_171)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_171@293@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@298@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@298@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@298@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@298@01))) $Snap.unit))
; [eval] issubtype(typeof(out_1), Container())
; [eval] typeof(out_1)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_1@296@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@298@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@298@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01)))))))
(assert (not (= out_1@296@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_1.Container_value), int())
; [eval] typeof(out_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@298@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@298@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@299@01 $Snap)
(assert (= $t@299@01 ($Snap.combine ($Snap.first $t@299@01) ($Snap.second $t@299@01))))
(assert (= ($Snap.first $t@299@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_171)
(assert (=
  ($Snap.second $t@299@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@299@01))
    ($Snap.second ($Snap.second $t@299@01)))))
(assert (= ($Snap.first ($Snap.second $t@299@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_171)
(assert (=
  ($Snap.second ($Snap.second $t@299@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@299@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@299@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@299@01))) $Snap.unit))
; [eval] _residue_171 <= _current_wait_level_171
(assert (<= _residue_171@295@01 _current_wait_level_171@297@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@299@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_1.Container_value), int())
; [eval] typeof(out_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01))))))
  $Snap.unit))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24)) || int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24))))
(push) ; 3
; [then-branch: 198 | int___eq__((_, _), First:(Second:(Second:(Second:($t@299@01)))), __prim__int___box__(_, 24)) | live]
; [else-branch: 198 | !(int___eq__((_, _), First:(Second:(Second:(Second:($t@299@01)))), __prim__int___box__(_, 24))) | live]
(push) ; 4
; [then-branch: 198 | int___eq__((_, _), First:(Second:(Second:(Second:($t@299@01)))), __prim__int___box__(_, 24))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24)))
(pop) ; 4
(push) ; 4
; [else-branch: 198 | !(int___eq__((_, _), First:(Second:(Second:(Second:($t@299@01)))), __prim__int___box__(_, 24)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24))))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 39))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 39))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 39)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 39))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24)))
    (__prim__int___box__%precondition $Snap.unit 39)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 39)))))
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24))))
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 24))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@299@01))))) (__prim__int___box__ $Snap.unit 39))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@299@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@300@01 $Ref)
; [exec]
; var tmp: Ref
(declare-const tmp@301@01 $Ref)
; [exec]
; var error_0: Ref
(declare-const error_0@302@01 $Ref)
; [exec]
; var try_finally_19: Int
(declare-const try_finally_19@303@01 Int)
; [exec]
; var out_21: Ref
(declare-const out_21@304@01 $Ref)
; [exec]
; var Container_res_2: Ref
(declare-const Container_res_2@305@01 $Ref)
; [exec]
; var _cwl_171: Perm
(declare-const _cwl_171@306@01 $Perm)
; [exec]
; var _method_measures_171: Seq[Measure$]
(declare-const _method_measures_171@307@01 Seq<Measure$>)
; [exec]
; _method_measures_171 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_21 := out_1
; [exec]
; Container_res_2 := new()
(declare-const Container_res_2@308@01 $Ref)
(assert (not (= Container_res_2@308@01 $Ref.null)))
(assert (not
  (=
    Container_res_2@308@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@298@01))))))))
(assert (not (= Container_res_2@308@01 error_0@302@01)))
(assert (not (= Container_res_2@308@01 _cthread_171@293@01)))
(assert (not (= Container_res_2@308@01 out_1@296@01)))
(assert (not (= Container_res_2@308@01 tmp@301@01)))
(assert (not (= Container_res_2@308@01 Container_res_2@305@01)))
; [exec]
; inhale typeof(Container_res_2) == Container()
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 $Snap.unit))
; [eval] typeof(Container_res_2) == Container()
; [eval] typeof(Container_res_2)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_2@308@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_2, 526803611440346310908232101056638787), write)
(declare-const $t@310@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_171 := Container___init__(_cthread_171, _method_measures_171, _residue_171,
;   Container_res_2)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_2@308@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_2@308@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@311@01 $Perm)
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@312@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@312@01))
    ($Snap.second ($Snap.second $t@312@01)))))
(assert (= ($Snap.first ($Snap.second $t@312@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@312@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@312@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@312@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@312@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_171@295@01 _current_wait_level_158@311@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@312@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@312@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= out_1@296@01 Container_res_2@308@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@312@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; tmp := Container_res_2
; [exec]
; inhale _isDefined(7368052)
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 $Snap.unit))
; [eval] _isDefined(7368052)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 7368052))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 7368052))
(assert (_isDefined $Snap.unit 7368052))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; try_finally_19 := 0
; [exec]
; _cwl_171, error_0 := helper(_cthread_171, _method_measures_171, _residue_171,
;   _checkDefined(tmp, 7368052), __prim__int___box__(45))
; [eval] _checkDefined(tmp, 7368052)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_2@308@01 7368052))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_2@308@01 7368052))
; [eval] __prim__int___box__(45)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 45))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 45))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_2@308@01 7368052)) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_2@308@01 7368052)) (as Container<PyType>  PyType)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType)))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_2@308@01
  (_checkDefined $Snap.unit Container_res_2@308@01 7368052))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_2@308@01
  (_checkDefined $Snap.unit Container_res_2@308@01 7368052))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@314@01 $Perm)
(declare-const _err@315@01 $Ref)
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@316@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@316@01))
    ($Snap.second ($Snap.second $t@316@01)))))
(assert (= ($Snap.first ($Snap.second $t@316@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@316@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@316@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@316@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_171@295@01 _current_wait_level_169@314@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@316@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
; [eval] _err == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@315@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@315@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | _err@315@01 == Null | live]
; [else-branch: 199 | _err@315@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 199 | _err@315@01 == Null]
(assert (= _err@315@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= out_1@296@01 (_checkDefined $Snap.unit Container_res_2@308@01 7368052))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit Container_res_2@308@01 7368052) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 200 | _err@315@01 == Null | live]
; [else-branch: 200 | _err@315@01 != Null | live]
(push) ; 5
; [then-branch: 200 | _err@315@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 200 | _err@315@01 != Null]
(assert (not (= _err@315@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@315@01 $Ref.null)) (= _err@315@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@315@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | _err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]) | dead]
; [else-branch: 201 | !(_err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 201 | !(_err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@315@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 202 | _err@315@01 != Null | dead]
; [else-branch: 202 | _err@315@01 == Null | live]
(push) ; 6
; [else-branch: 202 | _err@315@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_0 != null
; [then-branch: 203 | _err@315@01 != Null | dead]
; [else-branch: 203 | _err@315@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 203 | _err@315@01 == Null]
(pop) ; 5
; [eval] !(error_0 != null)
; [eval] error_0 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@315@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | _err@315@01 == Null | live]
; [else-branch: 204 | _err@315@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 204 | _err@315@01 == Null]
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787))
; [then-branch: 205 | False | dead]
; [else-branch: 205 | True | live]
(push) ; 6
; [else-branch: 205 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | True | live]
; [else-branch: 206 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 206 | True]
; [exec]
; out_21.Container_value := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(tmp,
;   7368052).Container_value)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(tmp, 7368052).Container_value)))
; [eval] int___mul__(2, int___unbox__(_checkDefined(tmp, 7368052).Container_value))
; [eval] int___unbox__(_checkDefined(tmp, 7368052).Container_value)
; [eval] _checkDefined(tmp, 7368052)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(declare-const Container_value@317@01 $Ref)
(assert (=
  Container_value@317@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_2@308@01 7368052) out_1@296@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_try_0
; [exec]
; label __end
; [eval] issubtype(typeof(out_1.Container_value), int())
; [eval] typeof(out_1.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@317@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@317@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24)) || int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 7
; [then-branch: 207 | int___eq__((_, _), Container_value@317@01, __prim__int___box__(_, 24)) | live]
; [else-branch: 207 | !(int___eq__((_, _), Container_value@317@01, __prim__int___box__(_, 24))) | live]
(push) ; 8
; [then-branch: 207 | int___eq__((_, _), Container_value@317@01, __prim__int___box__(_, 24))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 8
(push) ; 8
; [else-branch: 207 | !(int___eq__((_, _), Container_value@317@01, __prim__int___box__(_, 24)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24))))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 39))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 39))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 39)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 39))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24)))
    (__prim__int___box__%precondition $Snap.unit 39)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 39)))))
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 7
(assert (not (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 39)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 24))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@317@01 (__prim__int___box__ $Snap.unit 39))))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 199 | _err@315@01 != Null]
(assert (not (= _err@315@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 208 | _err@315@01 == Null | live]
; [else-branch: 208 | _err@315@01 != Null | live]
(push) ; 5
; [then-branch: 208 | _err@315@01 == Null]
(assert (= _err@315@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 208 | _err@315@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@315@01 $Ref.null)) (= _err@315@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@315@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@315@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | _err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]) | live]
; [else-branch: 209 | !(_err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 209 | _err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])]
(assert (and
  (not (= _err@315@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (= out_1@296@01 (_checkDefined $Snap.unit Container_res_2@308@01 7368052))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit Container_res_2@308@01 7368052) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@315@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 210 | _err@315@01 != Null | live]
; [else-branch: 210 | _err@315@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 210 | _err@315@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@315@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_0 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@315@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | _err@315@01 != Null | live]
; [else-branch: 211 | _err@315@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 211 | _err@315@01 != Null]
; [eval] !issubtype(typeof(error_0), MyException())
; [eval] issubtype(typeof(error_0), MyException())
; [eval] typeof(error_0)
; [eval] MyException()
; [then-branch: 212 | !(issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])) | dead]
; [else-branch: 212 | issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]) | live]
(push) ; 6
; [else-branch: 212 | issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])]
(pop) ; 6
; [eval] issubtype(typeof(error_0), MyException())
; [eval] typeof(error_0)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]) | live]
; [else-branch: 213 | !(issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 213 | issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType])]
; [exec]
; label handlerMyException_0
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787))
; [then-branch: 214 | False | dead]
; [else-branch: 214 | True | live]
(push) ; 7
; [else-branch: 214 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_21, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | True | live]
; [else-branch: 215 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 215 | True]
; [exec]
; out_21.Container_value := __prim__int___box__(int___mul__(3, int___unbox__(_checkDefined(tmp,
;   7368052).Container_value)))
; [eval] __prim__int___box__(int___mul__(3, int___unbox__(_checkDefined(tmp, 7368052).Container_value)))
; [eval] int___mul__(3, int___unbox__(_checkDefined(tmp, 7368052).Container_value))
; [eval] int___unbox__(_checkDefined(tmp, 7368052).Container_value)
; [eval] _checkDefined(tmp, 7368052)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(push) ; 8
(assert (int___mul__%precondition $Snap.unit 3 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(pop) ; 8
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 3 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 3 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 3 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(declare-const Container_value@318@01 $Ref)
(assert (=
  Container_value@318@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 3 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))))
(push) ; 8
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_2@308@01 7368052) out_1@296@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_try_0
; [exec]
; label __end
; [eval] issubtype(typeof(out_1.Container_value), int())
; [eval] typeof(out_1.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@318@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@318@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24)) || int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 8
; [then-branch: 216 | int___eq__((_, _), Container_value@318@01, __prim__int___box__(_, 24)) | live]
; [else-branch: 216 | !(int___eq__((_, _), Container_value@318@01, __prim__int___box__(_, 24))) | live]
(push) ; 9
; [then-branch: 216 | int___eq__((_, _), Container_value@318@01, __prim__int___box__(_, 24))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 9
(push) ; 9
; [else-branch: 216 | !(int___eq__((_, _), Container_value@318@01, __prim__int___box__(_, 24)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24))))
; [eval] int___eq__(out_1.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 39))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 39))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 39)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 39))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24)))
  (and
    (not
      (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24)))
    (__prim__int___box__%precondition $Snap.unit 39)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 39)))))
(assert (or
  (not
    (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24)))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 8
(assert (not (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 39)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (or
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 24))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@318@01 (__prim__int___box__ $Snap.unit 39))))
; [eval] (forperm _r_33: Ref [MustInvokeBounded(_r_33)] :: false)
; [eval] (forperm _r_33: Ref [MustInvokeUnbounded(_r_33)] :: false)
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: false)
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(error_0 != null)
; [eval] error_0 != null
; [then-branch: 217 | _err@315@01 == Null | dead]
; [else-branch: 217 | _err@315@01 != Null | live]
(push) ; 5
; [else-branch: 217 | _err@315@01 != Null]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 209 | !(_err@315@01 != Null && issubtype[Bool](typeof[PyType](_err@315@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@315@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@315@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@315@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 218 | _err@315@01 != Null | live]
; [else-branch: 218 | _err@315@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 218 | _err@315@01 != Null]
(assert (not (= _err@315@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@315@01 $Ref.null)))
(assert (=>
  (not (= _err@315@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@315@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [eval] error_0 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@315@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | _err@315@01 != Null | dead]
; [else-branch: 219 | _err@315@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 219 | _err@315@01 == Null]
(assert (= _err@315@01 $Ref.null))
(pop) ; 5
; [eval] !(error_0 != null)
; [eval] error_0 != null
; [then-branch: 220 | _err@315@01 == Null | dead]
; [else-branch: 220 | _err@315@01 != Null | live]
(push) ; 5
; [else-branch: 220 | _err@315@01 != Null]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_caught_3 ----------
(declare-const _cthread_172@319@01 $Ref)
(declare-const _caller_measures_172@320@01 Seq<Measure$>)
(declare-const _residue_172@321@01 $Perm)
(declare-const out_2@322@01 $Ref)
(declare-const _current_wait_level_172@323@01 $Perm)
(declare-const _err@324@01 $Ref)
(declare-const _cthread_172@325@01 $Ref)
(declare-const _caller_measures_172@326@01 Seq<Measure$>)
(declare-const _residue_172@327@01 $Perm)
(declare-const out_2@328@01 $Ref)
(declare-const _current_wait_level_172@329@01 $Perm)
(declare-const _err@330@01 $Ref)
(push) ; 1
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 ($Snap.combine ($Snap.first $t@331@01) ($Snap.second $t@331@01))))
(assert (= ($Snap.first $t@331@01) $Snap.unit))
; [eval] _cthread_172 != null
(assert (not (= _cthread_172@325@01 $Ref.null)))
(assert (=
  ($Snap.second $t@331@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@331@01))
    ($Snap.second ($Snap.second $t@331@01)))))
(assert (= ($Snap.first ($Snap.second $t@331@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_172), Thread_0())
; [eval] typeof(_cthread_172)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_172@325@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@331@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@331@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@331@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@331@01))) $Snap.unit))
; [eval] issubtype(typeof(out_2), Container())
; [eval] typeof(out_2)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_2@328@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@331@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))))
(assert (not (= out_2@328@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_2.Container_value), int())
; [eval] typeof(out_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@331@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.first $t@332@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_172)
(assert (=
  ($Snap.second $t@332@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@332@01))
    ($Snap.second ($Snap.second $t@332@01)))))
(assert (= ($Snap.first ($Snap.second $t@332@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_172)
(assert (=
  ($Snap.second ($Snap.second $t@332@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@332@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@332@01))) $Snap.unit))
; [eval] _residue_172 <= _current_wait_level_172
(assert (<= _residue_172@327@01 _current_wait_level_172@329@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@332@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@330@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@330@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | _err@330@01 == Null | live]
; [else-branch: 221 | _err@330@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 221 | _err@330@01 == Null]
(assert (= _err@330@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_2.Container_value), int())
; [eval] typeof(out_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> false
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 222 | _err@330@01 == Null | live]
; [else-branch: 222 | _err@330@01 != Null | live]
(push) ; 5
; [then-branch: 222 | _err@330@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 222 | _err@330@01 != Null]
(assert (not (= _err@330@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@330@01 $Ref.null)) (= _err@330@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | _err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType]) | dead]
; [else-branch: 223 | !(_err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 223 | !(_err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 224 | _err@330@01 != Null | dead]
; [else-branch: 224 | _err@330@01 == Null | live]
(push) ; 5
; [else-branch: 224 | _err@330@01 == Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
(pop) ; 3
(push) ; 3
; [else-branch: 221 | _err@330@01 != Null]
(assert (not (= _err@330@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  $Snap.unit))
; [eval] _err != null && issubtype(typeof(_err), MyException()) ==> false
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 225 | _err@330@01 == Null | live]
; [else-branch: 225 | _err@330@01 != Null | live]
(push) ; 5
; [then-branch: 225 | _err@330@01 == Null]
(assert (= _err@330@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 225 | _err@330@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@330@01 $Ref.null)) (= _err@330@01 $Ref.null)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not (= _err@330@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | _err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType]) | live]
; [else-branch: 226 | !(_err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 226 | _err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType])]
(assert (and
  (not (= _err@330@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 226 | !(_err@330@01 != Null && issubtype[Bool](typeof[PyType](_err@330@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (not (= _err@330@01 $Ref.null))
      (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType))))
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))))
(assert (=>
  (and
    (not (= _err@330@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType)))
  false))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@330@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@330@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | _err@330@01 != Null | live]
; [else-branch: 227 | _err@330@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 227 | _err@330@01 != Null]
(assert (not (= _err@330@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (= _err@330@01 $Ref.null)))
(assert (=>
  (not (= _err@330@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@330@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  $Snap.unit))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var error_1: Ref
(declare-const error_1@333@01 $Ref)
; [exec]
; var try_finally_20: Int
(declare-const try_finally_20@334@01 Int)
; [exec]
; var out_22: Ref
(declare-const out_22@335@01 $Ref)
; [exec]
; var MyException_res_9: Ref
(declare-const MyException_res_9@336@01 $Ref)
; [exec]
; var _cwl_172: Perm
(declare-const _cwl_172@337@01 $Perm)
; [exec]
; var _method_measures_172: Seq[Measure$]
(declare-const _method_measures_172@338@01 Seq<Measure$>)
; [exec]
; _method_measures_172 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_22 := out_2
; [exec]
; try_finally_20 := 0
; [exec]
; MyException_res_9 := new()
(declare-const MyException_res_9@339@01 $Ref)
(assert (not (= MyException_res_9@339@01 $Ref.null)))
(assert (not (= MyException_res_9@339@01 _cthread_172@325@01)))
(assert (not (= MyException_res_9@339@01 MyException_res_9@336@01)))
(assert (not (= MyException_res_9@339@01 error_1@333@01)))
(assert (not (= MyException_res_9@339@01 out_2@328@01)))
(assert (not
  (=
    MyException_res_9@339@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@331@01))))))))
; [exec]
; inhale typeof(MyException_res_9) == MyException()
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 $Snap.unit))
; [eval] typeof(MyException_res_9) == MyException()
; [eval] typeof(MyException_res_9)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_1 := MyException_res_9
; [eval] error_1 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_9@339@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | MyException_res_9@339@01 != Null | live]
; [else-branch: 228 | MyException_res_9@339@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 228 | MyException_res_9@339@01 != Null]
; [eval] !issubtype(typeof(error_1), MyException())
; [eval] issubtype(typeof(error_1), MyException())
; [eval] typeof(error_1)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | !(issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType])) | dead]
; [else-branch: 229 | issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 229 | issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_1), MyException())
; [eval] typeof(error_1)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType]) | live]
; [else-branch: 230 | !(issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 230 | issubtype[Bool](typeof[PyType](MyException_res_9@339@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_9@339@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_1
; [eval] perm(_MaySet(out_22, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_22, 526803611440346310908232101056638787))
; [then-branch: 231 | False | dead]
; [else-branch: 231 | True | live]
(push) ; 5
; [else-branch: 231 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_22, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_22, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_22, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | True | live]
; [else-branch: 232 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 232 | True]
; [exec]
; out_22.Container_value := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const Container_value@341@01 $Ref)
(assert (= Container_value@341@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; label post_try_1
; [exec]
; label __end
; [eval] _err == null
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | True | live]
; [else-branch: 233 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 233 | True]
; [eval] issubtype(typeof(out_2.Container_value), int())
; [eval] typeof(out_2.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@341@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@341@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err == null
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | True | live]
; [else-branch: 234 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 234 | True]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(out_2.Container_value), int())
; [eval] typeof(out_2.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@341@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@341@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_2.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@341@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- raised_and_caught_4 ----------
(declare-const _cthread_173@342@01 $Ref)
(declare-const _caller_measures_173@343@01 Seq<Measure$>)
(declare-const _residue_173@344@01 $Perm)
(declare-const out_3@345@01 $Ref)
(declare-const _current_wait_level_173@346@01 $Perm)
(declare-const _cthread_173@347@01 $Ref)
(declare-const _caller_measures_173@348@01 Seq<Measure$>)
(declare-const _residue_173@349@01 $Perm)
(declare-const out_3@350@01 $Ref)
(declare-const _current_wait_level_173@351@01 $Perm)
(push) ; 1
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] _cthread_173 != null
(assert (not (= _cthread_173@347@01 $Ref.null)))
(assert (=
  ($Snap.second $t@352@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@352@01))
    ($Snap.second ($Snap.second $t@352@01)))))
(assert (= ($Snap.first ($Snap.second $t@352@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_173), Thread_0())
; [eval] typeof(_cthread_173)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_173@347@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@352@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@352@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@352@01))) $Snap.unit))
; [eval] issubtype(typeof(out_3), Container())
; [eval] typeof(out_3)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_3@350@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@352@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
(assert (not (= out_3@350@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_3.Container_value), int())
; [eval] typeof(out_3.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 ($Snap.combine ($Snap.first $t@353@01) ($Snap.second $t@353@01))))
(assert (= ($Snap.first $t@353@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_173)
(assert (=
  ($Snap.second $t@353@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@353@01))
    ($Snap.second ($Snap.second $t@353@01)))))
(assert (= ($Snap.first ($Snap.second $t@353@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_173)
(assert (=
  ($Snap.second ($Snap.second $t@353@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@353@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@353@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@353@01))) $Snap.unit))
; [eval] _residue_173 <= _current_wait_level_173
(assert (<= _residue_173@349@01 _current_wait_level_173@351@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@353@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@353@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_3.Container_value), int())
; [eval] typeof(out_3.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01))))))
  $Snap.unit))
; [eval] int___eq__(out_3.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 39))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 39))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@353@01))))) (__prim__int___box__ $Snap.unit 39)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@353@01))))) (__prim__int___box__ $Snap.unit 39))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@353@01))))) (__prim__int___box__ $Snap.unit 39)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@353@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@354@01 $Ref)
; [exec]
; var tmp_0: Ref
(declare-const tmp_0@355@01 $Ref)
; [exec]
; var error_2: Ref
(declare-const error_2@356@01 $Ref)
; [exec]
; var try_finally_21: Int
(declare-const try_finally_21@357@01 Int)
; [exec]
; var out_23: Ref
(declare-const out_23@358@01 $Ref)
; [exec]
; var Container_res_3: Ref
(declare-const Container_res_3@359@01 $Ref)
; [exec]
; var _cwl_173: Perm
(declare-const _cwl_173@360@01 $Perm)
; [exec]
; var _method_measures_173: Seq[Measure$]
(declare-const _method_measures_173@361@01 Seq<Measure$>)
; [exec]
; _method_measures_173 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_23 := out_3
; [exec]
; Container_res_3 := new()
(declare-const Container_res_3@362@01 $Ref)
(assert (not (= Container_res_3@362@01 $Ref.null)))
(assert (not
  (=
    Container_res_3@362@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(assert (not (= Container_res_3@362@01 error_2@356@01)))
(assert (not (= Container_res_3@362@01 _cthread_173@347@01)))
(assert (not (= Container_res_3@362@01 Container_res_3@359@01)))
(assert (not (= Container_res_3@362@01 tmp_0@355@01)))
(assert (not (= Container_res_3@362@01 out_3@350@01)))
; [exec]
; inhale typeof(Container_res_3) == Container()
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 $Snap.unit))
; [eval] typeof(Container_res_3) == Container()
; [eval] typeof(Container_res_3)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_3@362@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_3, 526803611440346310908232101056638787), write)
(declare-const $t@364@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_173 := Container___init__(_cthread_173, _method_measures_173, _residue_173,
;   Container_res_3)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_3@362@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_3@362@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@365@01 $Perm)
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 ($Snap.combine ($Snap.first $t@366@01) ($Snap.second $t@366@01))))
(assert (= ($Snap.first $t@366@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@366@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@366@01))
    ($Snap.second ($Snap.second $t@366@01)))))
(assert (= ($Snap.first ($Snap.second $t@366@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@366@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@366@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@366@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_173@349@01 _current_wait_level_158@365@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@366@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= out_3@350@01 Container_res_3@362@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@366@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; tmp_0 := Container_res_3
; [exec]
; inhale _isDefined(207759633780)
(declare-const $t@367@01 $Snap)
(assert (= $t@367@01 $Snap.unit))
; [eval] _isDefined(207759633780)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 207759633780))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 207759633780))
(assert (_isDefined $Snap.unit 207759633780))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; try_finally_21 := 0
; [exec]
; _cwl_173, error_2 := helper(_cthread_173, _method_measures_173, _residue_173,
;   _checkDefined(tmp_0, 207759633780), __prim__int___box__(45))
; [eval] _checkDefined(tmp_0, 207759633780)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_3@362@01 207759633780))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_3@362@01 207759633780))
; [eval] __prim__int___box__(45)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 45))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 45))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)) (as Container<PyType>  PyType)))
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType)))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_3@362@01
  (_checkDefined $Snap.unit Container_res_3@362@01 207759633780))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_3@362@01
  (_checkDefined $Snap.unit Container_res_3@362@01 207759633780))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@368@01 $Perm)
(declare-const _err@369@01 $Ref)
(declare-const $t@370@01 $Snap)
(assert (= $t@370@01 ($Snap.combine ($Snap.first $t@370@01) ($Snap.second $t@370@01))))
(assert (= ($Snap.first $t@370@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@370@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@370@01))
    ($Snap.second ($Snap.second $t@370@01)))))
(assert (= ($Snap.first ($Snap.second $t@370@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@370@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@370@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@370@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_173@349@01 _current_wait_level_169@368@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@370@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))
; [eval] _err == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@369@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@369@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | _err@369@01 == Null | live]
; [else-branch: 235 | _err@369@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 235 | _err@369@01 == Null]
(assert (= _err@369@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (= out_3@350@01 (_checkDefined $Snap.unit Container_res_3@362@01 207759633780))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (= (_checkDefined $Snap.unit Container_res_3@362@01 207759633780) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 236 | _err@369@01 == Null | live]
; [else-branch: 236 | _err@369@01 != Null | live]
(push) ; 5
; [then-branch: 236 | _err@369@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 236 | _err@369@01 != Null]
(assert (not (= _err@369@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@369@01 $Ref.null)) (= _err@369@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@369@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@369@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | _err@369@01 != Null && issubtype[Bool](typeof[PyType](_err@369@01), MyException[PyType]) | dead]
; [else-branch: 237 | !(_err@369@01 != Null && issubtype[Bool](typeof[PyType](_err@369@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 237 | !(_err@369@01 != Null && issubtype[Bool](typeof[PyType](_err@369@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@369@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@369@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 238 | _err@369@01 != Null | dead]
; [else-branch: 238 | _err@369@01 == Null | live]
(push) ; 6
; [else-branch: 238 | _err@369@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_2 != null
; [then-branch: 239 | _err@369@01 != Null | dead]
; [else-branch: 239 | _err@369@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 239 | _err@369@01 == Null]
(pop) ; 5
; [eval] !(error_2 != null)
; [eval] error_2 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@369@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | _err@369@01 == Null | live]
; [else-branch: 240 | _err@369@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 240 | _err@369@01 == Null]
; [eval] perm(_MaySet(out_23, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_23, 526803611440346310908232101056638787))
; [then-branch: 241 | False | dead]
; [else-branch: 241 | True | live]
(push) ; 6
; [else-branch: 241 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_23, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_23, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_23, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | True | live]
; [else-branch: 242 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 242 | True]
; [exec]
; out_23.Container_value := __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(tmp_0,
;   207759633780).Container_value)))
; [eval] __prim__int___box__(int___mul__(2, int___unbox__(_checkDefined(tmp_0, 207759633780).Container_value)))
; [eval] int___mul__(2, int___unbox__(_checkDefined(tmp_0, 207759633780).Container_value))
; [eval] int___unbox__(_checkDefined(tmp_0, 207759633780).Container_value)
; [eval] _checkDefined(tmp_0, 207759633780)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))))
(declare-const Container_value@371@01 $Ref)
(assert (=
  Container_value@371@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit 2 (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01)))))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= (_checkDefined $Snap.unit Container_res_3@362@01 207759633780) out_3@350@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; label post_try_2
; [exec]
; label __end
; [eval] issubtype(typeof(out_3.Container_value), int())
; [eval] typeof(out_3.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@371@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@371@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_3.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 39))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 39))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 39)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= out_3@350@01 (_checkDefined $Snap.unit Container_res_3@362@01 207759633780))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
    Container_value@371@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    Container_value@371@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not
    (=
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)
      out_3@350@01))
  (not
    (=
      out_3@350@01
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)))))
(assert (and
  (not
    (=
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)
      out_3@350@01))
  (not
    (=
      out_3@350@01
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)))))
; [eval] int___eq__(out_3.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_3.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= out_3@350@01 (_checkDefined $Snap.unit Container_res_3@362@01 207759633780))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))
    Container_value@371@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    Container_value@371@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@370@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (and
  (not
    (=
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)
      out_3@350@01))
  (not
    (=
      out_3@350@01
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)))))
(assert (and
  (not
    (=
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)
      out_3@350@01))
  (not
    (=
      out_3@350@01
      (_checkDefined $Snap.unit Container_res_3@362@01 207759633780)))))
; [eval] int___eq__(out_3.Container_value, __prim__int___box__(39))
; [eval] __prim__int___box__(39)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@371@01 (__prim__int___box__ $Snap.unit 39))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested ----------
(declare-const _cthread_174@372@01 $Ref)
(declare-const _caller_measures_174@373@01 Seq<Measure$>)
(declare-const _residue_174@374@01 $Perm)
(declare-const out_4@375@01 $Ref)
(declare-const _current_wait_level_174@376@01 $Perm)
(declare-const _cthread_174@377@01 $Ref)
(declare-const _caller_measures_174@378@01 Seq<Measure$>)
(declare-const _residue_174@379@01 $Perm)
(declare-const out_4@380@01 $Ref)
(declare-const _current_wait_level_174@381@01 $Perm)
(push) ; 1
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] _cthread_174 != null
(assert (not (= _cthread_174@377@01 $Ref.null)))
(assert (=
  ($Snap.second $t@382@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@382@01))
    ($Snap.second ($Snap.second $t@382@01)))))
(assert (= ($Snap.first ($Snap.second $t@382@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_174), Thread_0())
; [eval] typeof(_cthread_174)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_174@377@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@382@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@382@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@382@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@382@01))) $Snap.unit))
; [eval] issubtype(typeof(out_4), Container())
; [eval] typeof(out_4)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_4@380@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@382@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))))
(assert (not (= out_4@380@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_4.Container_value), int())
; [eval] typeof(out_4.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseBounded] :: Level(_r_41) <= _current_wait_level_174)
(assert (=
  ($Snap.second $t@383@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@383@01))
    ($Snap.second ($Snap.second $t@383@01)))))
(assert (= ($Snap.first ($Snap.second $t@383@01)) $Snap.unit))
; [eval] (forperm _r_41: Ref [_r_41.MustReleaseUnbounded] :: Level(_r_41) <= _current_wait_level_174)
(assert (=
  ($Snap.second ($Snap.second $t@383@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@383@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@383@01))) $Snap.unit))
; [eval] _residue_174 <= _current_wait_level_174
(assert (<= _residue_174@379@01 _current_wait_level_174@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@383@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_4.Container_value), int())
; [eval] typeof(out_4.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
; [eval] int___eq__(out_4.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@384@01 $Ref)
; [exec]
; var error_3: Ref
(declare-const error_3@385@01 $Ref)
; [exec]
; var try_finally_22: Int
(declare-const try_finally_22@386@01 Int)
; [exec]
; var error_4: Ref
(declare-const error_4@387@01 $Ref)
; [exec]
; var try_finally_23: Int
(declare-const try_finally_23@388@01 Int)
; [exec]
; var out_24: Ref
(declare-const out_24@389@01 $Ref)
; [exec]
; var MyException_res_10: Ref
(declare-const MyException_res_10@390@01 $Ref)
; [exec]
; var MyOtherException_res_0: Ref
(declare-const MyOtherException_res_0@391@01 $Ref)
; [exec]
; var _cwl_174: Perm
(declare-const _cwl_174@392@01 $Perm)
; [exec]
; var _method_measures_174: Seq[Measure$]
(declare-const _method_measures_174@393@01 Seq<Measure$>)
; [exec]
; _method_measures_174 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_24 := out_4
; [exec]
; try_finally_22 := 0
; [exec]
; try_finally_23 := 0
; [exec]
; MyException_res_10 := new()
(declare-const MyException_res_10@394@01 $Ref)
(assert (not (= MyException_res_10@394@01 $Ref.null)))
(assert (not (= MyException_res_10@394@01 error_4@387@01)))
(assert (not (= MyException_res_10@394@01 MyOtherException_res_0@391@01)))
(assert (not (= MyException_res_10@394@01 error_3@385@01)))
(assert (not
  (=
    MyException_res_10@394@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@01))))))))
(assert (not (= MyException_res_10@394@01 out_4@380@01)))
(assert (not (= MyException_res_10@394@01 _cthread_174@377@01)))
(assert (not (= MyException_res_10@394@01 MyException_res_10@390@01)))
; [exec]
; inhale typeof(MyException_res_10) == MyException()
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 $Snap.unit))
; [eval] typeof(MyException_res_10) == MyException()
; [eval] typeof(MyException_res_10)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_4 := MyException_res_10
; [eval] error_4 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_10@394@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | MyException_res_10@394@01 != Null | live]
; [else-branch: 243 | MyException_res_10@394@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 243 | MyException_res_10@394@01 != Null]
; [eval] !issubtype(typeof(error_4), MyException())
; [eval] issubtype(typeof(error_4), MyException())
; [eval] typeof(error_4)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | !(issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType])) | dead]
; [else-branch: 244 | issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 244 | issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_4), MyException())
; [eval] typeof(error_4)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType]) | live]
; [else-branch: 245 | !(issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 245 | issubtype[Bool](typeof[PyType](MyException_res_10@394@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_10@394@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_3
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
; [then-branch: 246 | False | dead]
; [else-branch: 246 | True | live]
(push) ; 5
; [else-branch: 246 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | True | live]
; [else-branch: 247 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 247 | True]
; [exec]
; out_24.Container_value := __prim__int___box__(33)
; [eval] __prim__int___box__(33)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 33))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 33))
(declare-const Container_value@396@01 $Ref)
(assert (= Container_value@396@01 (__prim__int___box__ $Snap.unit 33)))
; [exec]
; label post_try_4
; [eval] int___eq__(out_24.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@396@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@396@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@396@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33)) | live]
; [else-branch: 248 | !(int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 248 | int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33)))
; [exec]
; MyOtherException_res_0 := new()
(declare-const MyOtherException_res_0@397@01 $Ref)
(assert (not (= MyOtherException_res_0@397@01 $Ref.null)))
(assert (not (= MyOtherException_res_0@397@01 MyException_res_10@394@01)))
(assert (not (= MyOtherException_res_0@397@01 MyOtherException_res_0@391@01)))
(assert (not (= MyOtherException_res_0@397@01 error_3@385@01)))
(assert (not (= MyOtherException_res_0@397@01 out_4@380@01)))
(assert (not (= MyOtherException_res_0@397@01 _cthread_174@377@01)))
(assert (not (= MyOtherException_res_0@397@01 Container_value@396@01)))
; [exec]
; inhale typeof(MyOtherException_res_0) == MyOtherException()
(declare-const $t@398@01 $Snap)
(assert (= $t@398@01 $Snap.unit))
; [eval] typeof(MyOtherException_res_0) == MyOtherException()
; [eval] typeof(MyOtherException_res_0)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res_0@397@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_3 := MyOtherException_res_0
; [eval] error_3 != null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= MyOtherException_res_0@397@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | MyOtherException_res_0@397@01 != Null | live]
; [else-branch: 249 | MyOtherException_res_0@397@01 == Null | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 249 | MyOtherException_res_0@397@01 != Null]
; [eval] issubtype(typeof(error_3), MyOtherException())
; [eval] typeof(error_3)
; [eval] MyOtherException()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_0@397@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_0@397@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType]) | live]
; [else-branch: 250 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 250 | issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_0@397@01) (as MyOtherException<PyType>  PyType)))
; [exec]
; label handlerMyOtherException
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
; [then-branch: 251 | False | dead]
; [else-branch: 251 | True | live]
(push) ; 9
; [else-branch: 251 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | True | live]
; [else-branch: 252 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 252 | True]
; [exec]
; out_24.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@399@01 $Ref)
(assert (= Container_value@399@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; label post_try_3
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
; [then-branch: 253 | False | dead]
; [else-branch: 253 | True | live]
(push) ; 10
; [else-branch: 253 | True]
(pop) ; 10
; [eval] !(perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_24, 526803611440346310908232101056638787))
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | True | live]
; [else-branch: 254 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 254 | True]
; [exec]
; out_24.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_24.Container_value),
;   int___unbox__(out_24.Container_value)))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_24.Container_value), int___unbox__(out_24.Container_value)))
; [eval] int___mul__(int___unbox__(out_24.Container_value), int___unbox__(out_24.Container_value))
; [eval] int___unbox__(out_24.Container_value)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@399@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@399@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@399@01))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@399@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@399@01)))
; [eval] int___unbox__(out_24.Container_value)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@399@01) (int___unbox__ $Snap.unit Container_value@399@01)))
(pop) ; 11
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@399@01) (int___unbox__ $Snap.unit Container_value@399@01)))
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@399@01) (int___unbox__ $Snap.unit Container_value@399@01))))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@399@01) (int___unbox__ $Snap.unit Container_value@399@01))))
(declare-const Container_value@400@01 $Ref)
(assert (=
  Container_value@400@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@399@01) (int___unbox__ $Snap.unit Container_value@399@01)))))
; [exec]
; label __end
; [eval] issubtype(typeof(out_4.Container_value), int())
; [eval] typeof(out_4.Container_value)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@400@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@400@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_4.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@400@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@400@01 (__prim__int___box__ $Snap.unit 1))))
(push) ; 11
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@400@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@400@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] (forperm _r_42: Ref [MustInvokeBounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [MustInvokeUnbounded(_r_42)] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseBounded] :: false)
; [eval] (forperm _r_42: Ref [_r_42.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !issubtype(typeof(error_3), MyOtherException())
; [eval] issubtype(typeof(error_3), MyOtherException())
; [eval] typeof(error_3)
; [eval] MyOtherException()
(push) ; 8
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_0@397@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType])) | dead]
; [else-branch: 255 | issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType]) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 255 | issubtype[Bool](typeof[PyType](MyOtherException_res_0@397@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_0@397@01) (as MyOtherException<PyType>  PyType)))
(pop) ; 8
(pop) ; 7
; [eval] !(error_3 != null)
; [eval] error_3 != null
; [then-branch: 256 | MyOtherException_res_0@397@01 == Null | dead]
; [else-branch: 256 | MyOtherException_res_0@397@01 != Null | live]
(push) ; 7
; [else-branch: 256 | MyOtherException_res_0@397@01 != Null]
(pop) ; 7
(pop) ; 6
; [eval] !int___eq__(out_24.Container_value, __prim__int___box__(33))
; [eval] int___eq__(out_24.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | !(int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33))) | dead]
; [else-branch: 257 | int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33)) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 257 | int___eq__((_, _), Container_value@396@01, __prim__int___box__(_, 33))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@396@01 (__prim__int___box__ $Snap.unit 33)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(error_4 != null)
; [eval] error_4 != null
; [then-branch: 258 | MyException_res_10@394@01 == Null | dead]
; [else-branch: 258 | MyException_res_10@394@01 != Null | live]
(push) ; 3
; [else-branch: 258 | MyException_res_10@394@01 != Null]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested_2 ----------
(declare-const _cthread_175@401@01 $Ref)
(declare-const _caller_measures_175@402@01 Seq<Measure$>)
(declare-const _residue_175@403@01 $Perm)
(declare-const out_5@404@01 $Ref)
(declare-const _current_wait_level_175@405@01 $Perm)
(declare-const _cthread_175@406@01 $Ref)
(declare-const _caller_measures_175@407@01 Seq<Measure$>)
(declare-const _residue_175@408@01 $Perm)
(declare-const out_5@409@01 $Ref)
(declare-const _current_wait_level_175@410@01 $Perm)
(push) ; 1
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 ($Snap.combine ($Snap.first $t@411@01) ($Snap.second $t@411@01))))
(assert (= ($Snap.first $t@411@01) $Snap.unit))
; [eval] _cthread_175 != null
(assert (not (= _cthread_175@406@01 $Ref.null)))
(assert (=
  ($Snap.second $t@411@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@411@01))
    ($Snap.second ($Snap.second $t@411@01)))))
(assert (= ($Snap.first ($Snap.second $t@411@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_175), Thread_0())
; [eval] typeof(_cthread_175)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_175@406@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@411@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@411@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@411@01))) $Snap.unit))
; [eval] issubtype(typeof(out_5), Container())
; [eval] typeof(out_5)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_5@409@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@411@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
(assert (not (= out_5@409@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_5.Container_value), int())
; [eval] typeof(out_5.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 ($Snap.combine ($Snap.first $t@412@01) ($Snap.second $t@412@01))))
(assert (= ($Snap.first $t@412@01) $Snap.unit))
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseBounded] :: Level(_r_44) <= _current_wait_level_175)
(assert (=
  ($Snap.second $t@412@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@412@01))
    ($Snap.second ($Snap.second $t@412@01)))))
(assert (= ($Snap.first ($Snap.second $t@412@01)) $Snap.unit))
; [eval] (forperm _r_44: Ref [_r_44.MustReleaseUnbounded] :: Level(_r_44) <= _current_wait_level_175)
(assert (=
  ($Snap.second ($Snap.second $t@412@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@412@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@412@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@412@01))) $Snap.unit))
; [eval] _residue_175 <= _current_wait_level_175
(assert (<= _residue_175@408@01 _current_wait_level_175@410@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@412@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@412@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_5.Container_value), int())
; [eval] typeof(out_5.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01))))))
  $Snap.unit))
; [eval] int___eq__(out_5.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@412@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@412@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@412@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@412@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@413@01 $Ref)
; [exec]
; var error_5: Ref
(declare-const error_5@414@01 $Ref)
; [exec]
; var try_finally_24: Int
(declare-const try_finally_24@415@01 Int)
; [exec]
; var error_6: Ref
(declare-const error_6@416@01 $Ref)
; [exec]
; var try_finally_25: Int
(declare-const try_finally_25@417@01 Int)
; [exec]
; var out_25: Ref
(declare-const out_25@418@01 $Ref)
; [exec]
; var MyException_res_11: Ref
(declare-const MyException_res_11@419@01 $Ref)
; [exec]
; var MyOtherException_res_1: Ref
(declare-const MyOtherException_res_1@420@01 $Ref)
; [exec]
; var _cwl_175: Perm
(declare-const _cwl_175@421@01 $Perm)
; [exec]
; var _method_measures_175: Seq[Measure$]
(declare-const _method_measures_175@422@01 Seq<Measure$>)
; [exec]
; _method_measures_175 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_25 := out_5
; [exec]
; try_finally_24 := 0
; [exec]
; try_finally_25 := 0
; [exec]
; MyException_res_11 := new()
(declare-const MyException_res_11@423@01 $Ref)
(assert (not (= MyException_res_11@423@01 $Ref.null)))
(assert (not
  (=
    MyException_res_11@423@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))))
(assert (not (= MyException_res_11@423@01 MyException_res_11@419@01)))
(assert (not (= MyException_res_11@423@01 _cthread_175@406@01)))
(assert (not (= MyException_res_11@423@01 out_5@409@01)))
(assert (not (= MyException_res_11@423@01 MyOtherException_res_1@420@01)))
(assert (not (= MyException_res_11@423@01 error_5@414@01)))
(assert (not (= MyException_res_11@423@01 error_6@416@01)))
; [exec]
; inhale typeof(MyException_res_11) == MyException()
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 $Snap.unit))
; [eval] typeof(MyException_res_11) == MyException()
; [eval] typeof(MyException_res_11)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_6 := MyException_res_11
; [eval] error_6 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_11@423@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | MyException_res_11@423@01 != Null | live]
; [else-branch: 259 | MyException_res_11@423@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 259 | MyException_res_11@423@01 != Null]
; [eval] !issubtype(typeof(error_6), MyException())
; [eval] issubtype(typeof(error_6), MyException())
; [eval] typeof(error_6)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 260 | !(issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType])) | dead]
; [else-branch: 260 | issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 260 | issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_6), MyException())
; [eval] typeof(error_6)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType]) | live]
; [else-branch: 261 | !(issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 261 | issubtype[Bool](typeof[PyType](MyException_res_11@423@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_11@423@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_4
; [eval] perm(_MaySet(out_25, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_25, 526803611440346310908232101056638787))
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(push) ; 5
; [else-branch: 262 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_25, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_25, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_25, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | True | live]
; [else-branch: 263 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 263 | True]
; [exec]
; out_25.Container_value := __prim__int___box__(34)
; [eval] __prim__int___box__(34)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 34))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 34))
(declare-const Container_value@425@01 $Ref)
(assert (= Container_value@425@01 (__prim__int___box__ $Snap.unit 34)))
; [exec]
; label post_try_6
; [eval] int___eq__(out_25.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 33))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 33))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@425@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@425@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@425@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33)) | dead]
; [else-branch: 264 | !(int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 264 | !(int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33))))
(pop) ; 6
; [eval] !int___eq__(out_25.Container_value, __prim__int___box__(33))
; [eval] int___eq__(out_25.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !(int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33))) | live]
; [else-branch: 265 | int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33)) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 265 | !(int___eq__((_, _), Container_value@425@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@425@01 (__prim__int___box__ $Snap.unit 33))))
; [exec]
; assert false
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested_else_finally ----------
(declare-const _cthread_176@426@01 $Ref)
(declare-const _caller_measures_176@427@01 Seq<Measure$>)
(declare-const _residue_176@428@01 $Perm)
(declare-const out_6@429@01 $Ref)
(declare-const _current_wait_level_176@430@01 $Perm)
(declare-const _cthread_176@431@01 $Ref)
(declare-const _caller_measures_176@432@01 Seq<Measure$>)
(declare-const _residue_176@433@01 $Perm)
(declare-const out_6@434@01 $Ref)
(declare-const _current_wait_level_176@435@01 $Perm)
(push) ; 1
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 ($Snap.combine ($Snap.first $t@436@01) ($Snap.second $t@436@01))))
(assert (= ($Snap.first $t@436@01) $Snap.unit))
; [eval] _cthread_176 != null
(assert (not (= _cthread_176@431@01 $Ref.null)))
(assert (=
  ($Snap.second $t@436@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@436@01))
    ($Snap.second ($Snap.second $t@436@01)))))
(assert (= ($Snap.first ($Snap.second $t@436@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_176), Thread_0())
; [eval] typeof(_cthread_176)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_176@431@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@436@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@436@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@436@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@436@01))) $Snap.unit))
; [eval] issubtype(typeof(out_6), Container())
; [eval] typeof(out_6)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_6@434@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@436@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@436@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01)))))))
(assert (not (= out_6@434@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_6.Container_value), int())
; [eval] typeof(out_6.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@436@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@436@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 ($Snap.combine ($Snap.first $t@437@01) ($Snap.second $t@437@01))))
(assert (= ($Snap.first $t@437@01) $Snap.unit))
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseBounded] :: Level(_r_47) <= _current_wait_level_176)
(assert (=
  ($Snap.second $t@437@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@437@01))
    ($Snap.second ($Snap.second $t@437@01)))))
(assert (= ($Snap.first ($Snap.second $t@437@01)) $Snap.unit))
; [eval] (forperm _r_47: Ref [_r_47.MustReleaseUnbounded] :: Level(_r_47) <= _current_wait_level_176)
(assert (=
  ($Snap.second ($Snap.second $t@437@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@437@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@437@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@437@01))) $Snap.unit))
; [eval] _residue_176 <= _current_wait_level_176
(assert (<= _residue_176@433@01 _current_wait_level_176@435@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@437@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@437@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_6.Container_value), int())
; [eval] typeof(out_6.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01))))))
  $Snap.unit))
; [eval] int___eq__(out_6.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@437@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@437@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@437@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@437@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@438@01 $Ref)
; [exec]
; var error_7: Ref
(declare-const error_7@439@01 $Ref)
; [exec]
; var try_finally_26: Int
(declare-const try_finally_26@440@01 Int)
; [exec]
; var error_8: Ref
(declare-const error_8@441@01 $Ref)
; [exec]
; var try_finally_27: Int
(declare-const try_finally_27@442@01 Int)
; [exec]
; var out_26: Ref
(declare-const out_26@443@01 $Ref)
; [exec]
; var MyException_res_12: Ref
(declare-const MyException_res_12@444@01 $Ref)
; [exec]
; var MyOtherException_res_2: Ref
(declare-const MyOtherException_res_2@445@01 $Ref)
; [exec]
; var _cwl_176: Perm
(declare-const _cwl_176@446@01 $Perm)
; [exec]
; var _method_measures_176: Seq[Measure$]
(declare-const _method_measures_176@447@01 Seq<Measure$>)
; [exec]
; _method_measures_176 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_26 := out_6
; [exec]
; try_finally_26 := 0
; [exec]
; try_finally_27 := 0
; [exec]
; MyException_res_12 := new()
(declare-const MyException_res_12@448@01 $Ref)
(assert (not (= MyException_res_12@448@01 $Ref.null)))
(assert (not (= MyException_res_12@448@01 MyOtherException_res_2@445@01)))
(assert (not
  (=
    MyException_res_12@448@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@436@01))))))))
(assert (not (= MyException_res_12@448@01 _cthread_176@431@01)))
(assert (not (= MyException_res_12@448@01 error_8@441@01)))
(assert (not (= MyException_res_12@448@01 MyException_res_12@444@01)))
(assert (not (= MyException_res_12@448@01 error_7@439@01)))
(assert (not (= MyException_res_12@448@01 out_6@434@01)))
; [exec]
; inhale typeof(MyException_res_12) == MyException()
(declare-const $t@449@01 $Snap)
(assert (= $t@449@01 $Snap.unit))
; [eval] typeof(MyException_res_12) == MyException()
; [eval] typeof(MyException_res_12)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_8 := MyException_res_12
; [eval] error_8 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_12@448@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | MyException_res_12@448@01 != Null | live]
; [else-branch: 266 | MyException_res_12@448@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 266 | MyException_res_12@448@01 != Null]
; [eval] !issubtype(typeof(error_8), MyException())
; [eval] issubtype(typeof(error_8), MyException())
; [eval] typeof(error_8)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !(issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType])) | dead]
; [else-branch: 267 | issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 267 | issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_8), MyException())
; [eval] typeof(error_8)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType]) | live]
; [else-branch: 268 | !(issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 268 | issubtype[Bool](typeof[PyType](MyException_res_12@448@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_12@448@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_5
; [exec]
; inhale _isDefined(15867543796478565)
(declare-const $t@450@01 $Snap)
(assert (= $t@450@01 $Snap.unit))
; [eval] _isDefined(15867543796478565)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 15867543796478565))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 15867543796478565))
(assert (_isDefined $Snap.unit 15867543796478565))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
; [then-branch: 269 | False | dead]
; [else-branch: 269 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 269 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | True | live]
; [else-branch: 270 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 270 | True]
; [exec]
; out_26.Container_value := __prim__int___box__(33)
; [eval] __prim__int___box__(33)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 33))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 33))
(declare-const Container_value@451@01 $Ref)
(assert (= Container_value@451@01 (__prim__int___box__ $Snap.unit 33)))
; [exec]
; try_finally_27 := 0
; [exec]
; label try_finally
; [eval] perm(_MaySet(out_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_6, 526803611440346310908232101056638787))
; [then-branch: 271 | False | dead]
; [else-branch: 271 | True | live]
(push) ; 6
; [else-branch: 271 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_6, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | True | live]
; [else-branch: 272 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 272 | True]
; [exec]
; out_6.Container_value := __prim__int___box__(int___add__(int___unbox__(out_6.Container_value),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_6.Container_value), 1))
; [eval] int___add__(int___unbox__(out_6.Container_value), 1)
; [eval] int___unbox__(out_6.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@451@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@451@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@451@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@451@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@451@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@451@01) 1))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@451@01) 1))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@451@01) 1)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@451@01) 1)))
(declare-const Container_value@452@01 $Ref)
(assert (=
  Container_value@452@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@451@01) 1))))
; [eval] try_finally_27 == 2
; [then-branch: 273 | False | dead]
; [else-branch: 273 | True | live]
(push) ; 7
; [else-branch: 273 | True]
(pop) ; 7
; [eval] !(try_finally_27 == 2)
; [eval] try_finally_27 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | True | live]
; [else-branch: 274 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 274 | True]
; [eval] try_finally_27 == 1
; [then-branch: 275 | False | dead]
; [else-branch: 275 | True | live]
(push) ; 8
; [else-branch: 275 | True]
(pop) ; 8
; [eval] !(try_finally_27 == 1)
; [eval] try_finally_27 == 1
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 276 | True | live]
; [else-branch: 276 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 276 | True]
; [exec]
; label post_try_8
; [eval] int___eq__(out_26.Container_value, __prim__int___box__(34))
; [eval] __prim__int___box__(34)
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit 34))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 34))
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@452@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@452@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@452@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34)) | live]
; [else-branch: 277 | !(int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34))) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 277 | int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34)))
; [exec]
; MyOtherException_res_2 := new()
(declare-const MyOtherException_res_2@453@01 $Ref)
(assert (not (= MyOtherException_res_2@453@01 $Ref.null)))
(assert (not (= MyOtherException_res_2@453@01 MyException_res_12@448@01)))
(assert (not (= MyOtherException_res_2@453@01 MyOtherException_res_2@445@01)))
(assert (not (= MyOtherException_res_2@453@01 _cthread_176@431@01)))
(assert (not (= MyOtherException_res_2@453@01 Container_value@452@01)))
(assert (not (= MyOtherException_res_2@453@01 error_7@439@01)))
(assert (not (= MyOtherException_res_2@453@01 out_6@434@01)))
; [exec]
; inhale typeof(MyOtherException_res_2) == MyOtherException()
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 $Snap.unit))
; [eval] typeof(MyOtherException_res_2) == MyOtherException()
; [eval] typeof(MyOtherException_res_2)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res_2@453@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_7 := MyOtherException_res_2
; [eval] error_7 != null
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= MyOtherException_res_2@453@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | MyOtherException_res_2@453@01 != Null | live]
; [else-branch: 278 | MyOtherException_res_2@453@01 == Null | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 278 | MyOtherException_res_2@453@01 != Null]
; [eval] issubtype(typeof(error_7), MyOtherException())
; [eval] typeof(error_7)
; [eval] MyOtherException()
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_2@453@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_2@453@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType]) | live]
; [else-branch: 279 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 279 | issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_2@453@01) (as MyOtherException<PyType>  PyType)))
; [exec]
; label handlerMyOtherException_1
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
; [then-branch: 280 | False | dead]
; [else-branch: 280 | True | live]
(push) ; 12
; [else-branch: 280 | True]
(pop) ; 12
; [eval] !(perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | True | live]
; [else-branch: 281 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 281 | True]
; [exec]
; out_26.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 13
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 13
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@455@01 $Ref)
(assert (= Container_value@455@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; label post_try_7
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
; [then-branch: 282 | False | dead]
; [else-branch: 282 | True | live]
(push) ; 13
; [else-branch: 282 | True]
(pop) ; 13
; [eval] !(perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_26, 526803611440346310908232101056638787))
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | True | live]
; [else-branch: 283 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 283 | True]
; [exec]
; out_26.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_26.Container_value),
;   int___unbox__(out_26.Container_value)))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_26.Container_value), int___unbox__(out_26.Container_value)))
; [eval] int___mul__(int___unbox__(out_26.Container_value), int___unbox__(out_26.Container_value))
; [eval] int___unbox__(out_26.Container_value)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@455@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@455@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@455@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@455@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@455@01)))
; [eval] int___unbox__(out_26.Container_value)
(push) ; 14
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 14
; Joined path conditions
(push) ; 14
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@455@01) (int___unbox__ $Snap.unit Container_value@455@01)))
(pop) ; 14
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@455@01) (int___unbox__ $Snap.unit Container_value@455@01)))
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@455@01) (int___unbox__ $Snap.unit Container_value@455@01))))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@455@01) (int___unbox__ $Snap.unit Container_value@455@01))))
(declare-const Container_value@456@01 $Ref)
(assert (=
  Container_value@456@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@455@01) (int___unbox__ $Snap.unit Container_value@455@01)))))
; [exec]
; label __end
; [eval] issubtype(typeof(out_6.Container_value), int())
; [eval] typeof(out_6.Container_value)
; [eval] int()
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@456@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@456@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_6.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@456@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@456@01 (__prim__int___box__ $Snap.unit 1))))
(push) ; 14
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@456@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@456@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] (forperm _r_48: Ref [MustInvokeBounded(_r_48)] :: false)
; [eval] (forperm _r_48: Ref [MustInvokeUnbounded(_r_48)] :: false)
; [eval] (forperm _r_48: Ref [_r_48.MustReleaseBounded] :: false)
; [eval] (forperm _r_48: Ref [_r_48.MustReleaseUnbounded] :: false)
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [eval] !issubtype(typeof(error_7), MyOtherException())
; [eval] issubtype(typeof(error_7), MyOtherException())
; [eval] typeof(error_7)
; [eval] MyOtherException()
(push) ; 11
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_2@453@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType])) | dead]
; [else-branch: 284 | issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType]) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 284 | issubtype[Bool](typeof[PyType](MyOtherException_res_2@453@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_2@453@01) (as MyOtherException<PyType>  PyType)))
(pop) ; 11
(pop) ; 10
; [eval] !(error_7 != null)
; [eval] error_7 != null
; [then-branch: 285 | MyOtherException_res_2@453@01 == Null | dead]
; [else-branch: 285 | MyOtherException_res_2@453@01 != Null | live]
(push) ; 10
; [else-branch: 285 | MyOtherException_res_2@453@01 != Null]
(pop) ; 10
(pop) ; 9
; [eval] !int___eq__(out_26.Container_value, __prim__int___box__(34))
; [eval] int___eq__(out_26.Container_value, __prim__int___box__(34))
; [eval] __prim__int___box__(34)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | !(int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34))) | dead]
; [else-branch: 286 | int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34)) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 286 | int___eq__((_, _), Container_value@452@01, __prim__int___box__(_, 34))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@452@01 (__prim__int___box__ $Snap.unit 34)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(error_8 != null)
; [eval] error_8 != null
; [then-branch: 287 | MyException_res_12@448@01 == Null | dead]
; [else-branch: 287 | MyException_res_12@448@01 != Null | live]
(push) ; 3
; [else-branch: 287 | MyException_res_12@448@01 != Null]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested_else_finally_2 ----------
(declare-const _cthread_177@457@01 $Ref)
(declare-const _caller_measures_177@458@01 Seq<Measure$>)
(declare-const _residue_177@459@01 $Perm)
(declare-const out_7@460@01 $Ref)
(declare-const _current_wait_level_177@461@01 $Perm)
(declare-const _cthread_177@462@01 $Ref)
(declare-const _caller_measures_177@463@01 Seq<Measure$>)
(declare-const _residue_177@464@01 $Perm)
(declare-const out_7@465@01 $Ref)
(declare-const _current_wait_level_177@466@01 $Perm)
(push) ; 1
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] _cthread_177 != null
(assert (not (= _cthread_177@462@01 $Ref.null)))
(assert (=
  ($Snap.second $t@467@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@467@01))
    ($Snap.second ($Snap.second $t@467@01)))))
(assert (= ($Snap.first ($Snap.second $t@467@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_177), Thread_0())
; [eval] typeof(_cthread_177)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_177@462@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@467@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@467@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@467@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@467@01))) $Snap.unit))
; [eval] issubtype(typeof(out_7), Container())
; [eval] typeof(out_7)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_7@465@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@467@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@467@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01)))))))
(assert (not (= out_7@465@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_7.Container_value), int())
; [eval] typeof(out_7.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@467@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@467@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] (forperm _r_50: Ref [_r_50.MustReleaseBounded] :: Level(_r_50) <= _current_wait_level_177)
(assert (=
  ($Snap.second $t@468@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@468@01))
    ($Snap.second ($Snap.second $t@468@01)))))
(assert (= ($Snap.first ($Snap.second $t@468@01)) $Snap.unit))
; [eval] (forperm _r_50: Ref [_r_50.MustReleaseUnbounded] :: Level(_r_50) <= _current_wait_level_177)
(assert (=
  ($Snap.second ($Snap.second $t@468@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@468@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@468@01))) $Snap.unit))
; [eval] _residue_177 <= _current_wait_level_177
(assert (<= _residue_177@464@01 _current_wait_level_177@466@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@468@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@468@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_7.Container_value), int())
; [eval] typeof(out_7.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))
  $Snap.unit))
; [eval] int___eq__(out_7.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@468@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@468@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@468@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@469@01 $Ref)
; [exec]
; var error_9: Ref
(declare-const error_9@470@01 $Ref)
; [exec]
; var try_finally_28: Int
(declare-const try_finally_28@471@01 Int)
; [exec]
; var error_10: Ref
(declare-const error_10@472@01 $Ref)
; [exec]
; var try_finally_29: Int
(declare-const try_finally_29@473@01 Int)
; [exec]
; var out_27: Ref
(declare-const out_27@474@01 $Ref)
; [exec]
; var MyException_res_13: Ref
(declare-const MyException_res_13@475@01 $Ref)
; [exec]
; var MyOtherException_res_3: Ref
(declare-const MyOtherException_res_3@476@01 $Ref)
; [exec]
; var _cwl_177: Perm
(declare-const _cwl_177@477@01 $Perm)
; [exec]
; var _method_measures_177: Seq[Measure$]
(declare-const _method_measures_177@478@01 Seq<Measure$>)
; [exec]
; _method_measures_177 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_27 := out_7
; [exec]
; try_finally_28 := 0
; [exec]
; try_finally_29 := 0
; [exec]
; MyException_res_13 := new()
(declare-const MyException_res_13@479@01 $Ref)
(assert (not (= MyException_res_13@479@01 $Ref.null)))
(assert (not (= MyException_res_13@479@01 error_9@470@01)))
(assert (not
  (=
    MyException_res_13@479@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@467@01))))))))
(assert (not (= MyException_res_13@479@01 error_10@472@01)))
(assert (not (= MyException_res_13@479@01 MyException_res_13@475@01)))
(assert (not (= MyException_res_13@479@01 _cthread_177@462@01)))
(assert (not (= MyException_res_13@479@01 MyOtherException_res_3@476@01)))
(assert (not (= MyException_res_13@479@01 out_7@465@01)))
; [exec]
; inhale typeof(MyException_res_13) == MyException()
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] typeof(MyException_res_13) == MyException()
; [eval] typeof(MyException_res_13)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_10 := MyException_res_13
; [eval] error_10 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_13@479@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | MyException_res_13@479@01 != Null | live]
; [else-branch: 288 | MyException_res_13@479@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 288 | MyException_res_13@479@01 != Null]
; [eval] !issubtype(typeof(error_10), MyException())
; [eval] issubtype(typeof(error_10), MyException())
; [eval] typeof(error_10)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | !(issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType])) | dead]
; [else-branch: 289 | issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 289 | issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_10), MyException())
; [eval] typeof(error_10)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType]) | live]
; [else-branch: 290 | !(issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 290 | issubtype[Bool](typeof[PyType](MyException_res_13@479@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_13@479@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_6
; [exec]
; inhale _isDefined(3472661732780044901)
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] _isDefined(3472661732780044901)
(push) ; 5
(assert (_isDefined%precondition $Snap.unit 3472661732780044901))
(pop) ; 5
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3472661732780044901))
(assert (_isDefined $Snap.unit 3472661732780044901))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_27, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_27, 526803611440346310908232101056638787))
; [then-branch: 291 | False | dead]
; [else-branch: 291 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 291 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(out_27, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_27, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_27, 526803611440346310908232101056638787))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 292 | True | live]
; [else-branch: 292 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 292 | True]
; [exec]
; out_27.Container_value := __prim__int___box__(33)
; [eval] __prim__int___box__(33)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 33))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 33))
(declare-const Container_value@482@01 $Ref)
(assert (= Container_value@482@01 (__prim__int___box__ $Snap.unit 33)))
; [exec]
; try_finally_29 := 0
; [exec]
; label try_finally_0
; [eval] perm(_MaySet(out_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_7, 526803611440346310908232101056638787))
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 6
; [else-branch: 293 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_7, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 294 | True | live]
; [else-branch: 294 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 294 | True]
; [exec]
; out_7.Container_value := __prim__int___box__(int___add__(int___unbox__(out_7.Container_value),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_7.Container_value), 1))
; [eval] int___add__(int___unbox__(out_7.Container_value), 1)
; [eval] int___unbox__(out_7.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@482@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@482@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@482@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@482@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@482@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@482@01) 1))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@482@01) 1))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@482@01) 1)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@482@01) 1)))
(declare-const Container_value@483@01 $Ref)
(assert (=
  Container_value@483@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@482@01) 1))))
; [eval] try_finally_29 == 2
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 7
; [else-branch: 295 | True]
(pop) ; 7
; [eval] !(try_finally_29 == 2)
; [eval] try_finally_29 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | True | live]
; [else-branch: 296 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 296 | True]
; [eval] try_finally_29 == 1
; [then-branch: 297 | False | dead]
; [else-branch: 297 | True | live]
(push) ; 8
; [else-branch: 297 | True]
(pop) ; 8
; [eval] !(try_finally_29 == 1)
; [eval] try_finally_29 == 1
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 298 | True | live]
; [else-branch: 298 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 298 | True]
; [exec]
; label post_try_10
; [eval] int___eq__(out_27.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@483@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@483@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33)))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@483@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33))))
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33)) | dead]
; [else-branch: 299 | !(int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 299 | !(int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33))))
(pop) ; 9
; [eval] !int___eq__(out_27.Container_value, __prim__int___box__(33))
; [eval] int___eq__(out_27.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 300 | !(int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33))) | live]
; [else-branch: 300 | int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33)) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 300 | !(int___eq__((_, _), Container_value@483@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@483@01 (__prim__int___box__ $Snap.unit 33))))
; [exec]
; assert false
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested_try_finally ----------
(declare-const _cthread_178@484@01 $Ref)
(declare-const _caller_measures_178@485@01 Seq<Measure$>)
(declare-const _residue_178@486@01 $Perm)
(declare-const out_8@487@01 $Ref)
(declare-const _current_wait_level_178@488@01 $Perm)
(declare-const _cthread_178@489@01 $Ref)
(declare-const _caller_measures_178@490@01 Seq<Measure$>)
(declare-const _residue_178@491@01 $Perm)
(declare-const out_8@492@01 $Ref)
(declare-const _current_wait_level_178@493@01 $Perm)
(push) ; 1
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] _cthread_178 != null
(assert (not (= _cthread_178@489@01 $Ref.null)))
(assert (=
  ($Snap.second $t@494@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@494@01))
    ($Snap.second ($Snap.second $t@494@01)))))
(assert (= ($Snap.first ($Snap.second $t@494@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_178), Thread_0())
; [eval] typeof(_cthread_178)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_178@489@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@494@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@494@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@494@01))) $Snap.unit))
; [eval] issubtype(typeof(out_8), Container())
; [eval] typeof(out_8)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_8@492@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@494@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
(assert (not (= out_8@492@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_8.Container_value), int())
; [eval] typeof(out_8.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@495@01 $Snap)
(assert (= $t@495@01 ($Snap.combine ($Snap.first $t@495@01) ($Snap.second $t@495@01))))
(assert (= ($Snap.first $t@495@01) $Snap.unit))
; [eval] (forperm _r_53: Ref [_r_53.MustReleaseBounded] :: Level(_r_53) <= _current_wait_level_178)
(assert (=
  ($Snap.second $t@495@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@495@01))
    ($Snap.second ($Snap.second $t@495@01)))))
(assert (= ($Snap.first ($Snap.second $t@495@01)) $Snap.unit))
; [eval] (forperm _r_53: Ref [_r_53.MustReleaseUnbounded] :: Level(_r_53) <= _current_wait_level_178)
(assert (=
  ($Snap.second ($Snap.second $t@495@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@495@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@495@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@495@01))) $Snap.unit))
; [eval] _residue_178 <= _current_wait_level_178
(assert (<= _residue_178@491@01 _current_wait_level_178@493@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@495@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@495@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_8.Container_value), int())
; [eval] typeof(out_8.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01))))))
  $Snap.unit))
; [eval] int___eq__(out_8.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@495@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@495@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@495@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@495@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@496@01 $Ref)
; [exec]
; var error_11: Ref
(declare-const error_11@497@01 $Ref)
; [exec]
; var try_finally_30: Int
(declare-const try_finally_30@498@01 Int)
; [exec]
; var error_12: Ref
(declare-const error_12@499@01 $Ref)
; [exec]
; var try_finally_31: Int
(declare-const try_finally_31@500@01 Int)
; [exec]
; var error_13: Ref
(declare-const error_13@501@01 $Ref)
; [exec]
; var try_finally_32: Int
(declare-const try_finally_32@502@01 Int)
; [exec]
; var out_28: Ref
(declare-const out_28@503@01 $Ref)
; [exec]
; var MyException_res_14: Ref
(declare-const MyException_res_14@504@01 $Ref)
; [exec]
; var MyOtherException_res_4: Ref
(declare-const MyOtherException_res_4@505@01 $Ref)
; [exec]
; var _cwl_178: Perm
(declare-const _cwl_178@506@01 $Perm)
; [exec]
; var _method_measures_178: Seq[Measure$]
(declare-const _method_measures_178@507@01 Seq<Measure$>)
; [exec]
; _method_measures_178 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_28 := out_8
; [exec]
; try_finally_30 := 0
; [exec]
; try_finally_31 := 0
; [exec]
; try_finally_32 := 0
; [exec]
; MyException_res_14 := new()
(declare-const MyException_res_14@508@01 $Ref)
(assert (not (= MyException_res_14@508@01 $Ref.null)))
(assert (not (= MyException_res_14@508@01 MyException_res_14@504@01)))
(assert (not (= MyException_res_14@508@01 error_11@497@01)))
(assert (not (= MyException_res_14@508@01 error_13@501@01)))
(assert (not (= MyException_res_14@508@01 _cthread_178@489@01)))
(assert (not (= MyException_res_14@508@01 error_12@499@01)))
(assert (not (= MyException_res_14@508@01 MyOtherException_res_4@505@01)))
(assert (not
  (=
    MyException_res_14@508@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
(assert (not (= MyException_res_14@508@01 out_8@492@01)))
; [exec]
; inhale typeof(MyException_res_14) == MyException()
(declare-const $t@509@01 $Snap)
(assert (= $t@509@01 $Snap.unit))
; [eval] typeof(MyException_res_14) == MyException()
; [eval] typeof(MyException_res_14)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_13 := MyException_res_14
; [eval] error_13 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_14@508@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 301 | MyException_res_14@508@01 != Null | live]
; [else-branch: 301 | MyException_res_14@508@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 301 | MyException_res_14@508@01 != Null]
; [exec]
; try_finally_32 := 2
; [exec]
; label try_finally_2
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787))
; [then-branch: 302 | False | dead]
; [else-branch: 302 | True | live]
(push) ; 4
; [else-branch: 302 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | True | live]
; [else-branch: 303 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 303 | True]
; [exec]
; out_8.Container_value := __prim__int___box__(30)
; [eval] __prim__int___box__(30)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(declare-const Container_value@510@01 $Ref)
(assert (= Container_value@510@01 (__prim__int___box__ $Snap.unit 30)))
; [eval] try_finally_32 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | True | live]
; [else-branch: 304 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 304 | True]
; [eval] issubtype(typeof(error_13), MyException())
; [eval] typeof(error_13)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType]) | live]
; [else-branch: 305 | !(issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 305 | issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_7
; [exec]
; inhale _isDefined(3616776920855900773)
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 $Snap.unit))
; [eval] _isDefined(3616776920855900773)
(push) ; 7
(assert (_isDefined%precondition $Snap.unit 3616776920855900773))
(pop) ; 7
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3616776920855900773))
(assert (_isDefined $Snap.unit 3616776920855900773))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
; [then-branch: 306 | False | dead]
; [else-branch: 306 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 306 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 307 | True | live]
; [else-branch: 307 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 307 | True]
; [exec]
; out_28.Container_value := __prim__int___box__(int___add__(int___unbox__(out_28.Container_value),
;   3))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_28.Container_value), 3))
; [eval] int___add__(int___unbox__(out_28.Container_value), 3)
; [eval] int___unbox__(out_28.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@510@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@510@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@510@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@510@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@510@01)))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@510@01) 3))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@510@01) 3))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@510@01) 3)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@510@01) 3)))
(declare-const Container_value@512@01 $Ref)
(assert (=
  Container_value@512@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@510@01) 3))))
; [exec]
; try_finally_31 := 0
; [exec]
; label try_finally_1
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787))
; [then-branch: 308 | False | dead]
; [else-branch: 308 | True | live]
(push) ; 8
; [else-branch: 308 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_8, 526803611440346310908232101056638787))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 309 | True | live]
; [else-branch: 309 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 309 | True]
; [exec]
; out_8.Container_value := __prim__int___box__(int___add__(int___unbox__(out_8.Container_value),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_8.Container_value), 1))
; [eval] int___add__(int___unbox__(out_8.Container_value), 1)
; [eval] int___unbox__(out_8.Container_value)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@512@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@512@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@512@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@512@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@512@01)))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@512@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@512@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@512@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@512@01) 1)))
(declare-const Container_value@513@01 $Ref)
(assert (=
  Container_value@513@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@512@01) 1))))
; [eval] try_finally_31 == 2
; [then-branch: 310 | False | dead]
; [else-branch: 310 | True | live]
(push) ; 9
; [else-branch: 310 | True]
(pop) ; 9
; [eval] !(try_finally_31 == 2)
; [eval] try_finally_31 == 2
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 311 | True | live]
; [else-branch: 311 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 311 | True]
; [eval] try_finally_31 == 1
; [then-branch: 312 | False | dead]
; [else-branch: 312 | True | live]
(push) ; 10
; [else-branch: 312 | True]
(pop) ; 10
; [eval] !(try_finally_31 == 1)
; [eval] try_finally_31 == 1
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 313 | True | live]
; [else-branch: 313 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 313 | True]
; [exec]
; label post_try_12
; [eval] int___eq__(out_28.Container_value, __prim__int___box__(34))
; [eval] __prim__int___box__(34)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 34))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 34))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@513@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@513@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@513@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 34)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34)) | live]
; [else-branch: 314 | !(int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34))) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 314 | int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34)))
; [exec]
; MyOtherException_res_4 := new()
(declare-const MyOtherException_res_4@514@01 $Ref)
(assert (not (= MyOtherException_res_4@514@01 $Ref.null)))
(assert (not (= MyOtherException_res_4@514@01 MyException_res_14@508@01)))
(assert (not (= MyOtherException_res_4@514@01 error_11@497@01)))
(assert (not (= MyOtherException_res_4@514@01 _cthread_178@489@01)))
(assert (not (= MyOtherException_res_4@514@01 error_12@499@01)))
(assert (not (= MyOtherException_res_4@514@01 MyOtherException_res_4@505@01)))
(assert (not (= MyOtherException_res_4@514@01 Container_value@513@01)))
(assert (not (= MyOtherException_res_4@514@01 out_8@492@01)))
; [exec]
; inhale typeof(MyOtherException_res_4) == MyOtherException()
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 $Snap.unit))
; [eval] typeof(MyOtherException_res_4) == MyOtherException()
; [eval] typeof(MyOtherException_res_4)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res_4@514@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_11 := MyOtherException_res_4
; [eval] error_11 != null
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= MyOtherException_res_4@514@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 315 | MyOtherException_res_4@514@01 != Null | live]
; [else-branch: 315 | MyOtherException_res_4@514@01 == Null | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 315 | MyOtherException_res_4@514@01 != Null]
; [eval] issubtype(typeof(error_11), MyOtherException())
; [eval] typeof(error_11)
; [eval] MyOtherException()
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_4@514@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_4@514@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 316 | issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType]) | live]
; [else-branch: 316 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 316 | issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_4@514@01) (as MyOtherException<PyType>  PyType)))
; [exec]
; label handlerMyOtherException_3
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
; [then-branch: 317 | False | dead]
; [else-branch: 317 | True | live]
(push) ; 14
; [else-branch: 317 | True]
(pop) ; 14
; [eval] !(perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | True | live]
; [else-branch: 318 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 318 | True]
; [exec]
; out_28.Container_value := __prim__int___box__(-1)
; [eval] __prim__int___box__(-1)
; [eval] -1
(push) ; 15
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(pop) ; 15
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (- 0 1)))
(declare-const Container_value@516@01 $Ref)
(assert (= Container_value@516@01 (__prim__int___box__ $Snap.unit (- 0 1))))
; [exec]
; label post_try_11
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
; [then-branch: 319 | False | dead]
; [else-branch: 319 | True | live]
(push) ; 15
; [else-branch: 319 | True]
(pop) ; 15
; [eval] !(perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_28, 526803611440346310908232101056638787))
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | True | live]
; [else-branch: 320 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 320 | True]
; [exec]
; out_28.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_28.Container_value),
;   int___unbox__(out_28.Container_value)))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_28.Container_value), int___unbox__(out_28.Container_value)))
; [eval] int___mul__(int___unbox__(out_28.Container_value), int___unbox__(out_28.Container_value))
; [eval] int___unbox__(out_28.Container_value)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@516@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@516@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@516@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@516@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@516@01)))
; [eval] int___unbox__(out_28.Container_value)
(push) ; 16
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 16
; Joined path conditions
(push) ; 16
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@516@01) (int___unbox__ $Snap.unit Container_value@516@01)))
(pop) ; 16
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@516@01) (int___unbox__ $Snap.unit Container_value@516@01)))
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@516@01) (int___unbox__ $Snap.unit Container_value@516@01))))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@516@01) (int___unbox__ $Snap.unit Container_value@516@01))))
(declare-const Container_value@517@01 $Ref)
(assert (=
  Container_value@517@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@516@01) (int___unbox__ $Snap.unit Container_value@516@01)))))
; [exec]
; label __end
; [eval] issubtype(typeof(out_8.Container_value), int())
; [eval] typeof(out_8.Container_value)
; [eval] int()
(push) ; 16
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@517@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@517@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_8.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 16
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 16
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 16
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 17
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@517@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 16
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@517@01 (__prim__int___box__ $Snap.unit 1))))
(push) ; 16
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@517@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@517@01 (__prim__int___box__ $Snap.unit 1)))
; [eval] (forperm _r_54: Ref [MustInvokeBounded(_r_54)] :: false)
; [eval] (forperm _r_54: Ref [MustInvokeUnbounded(_r_54)] :: false)
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseBounded] :: false)
; [eval] (forperm _r_54: Ref [_r_54.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [eval] !issubtype(typeof(error_11), MyOtherException())
; [eval] issubtype(typeof(error_11), MyOtherException())
; [eval] typeof(error_11)
; [eval] MyOtherException()
(push) ; 13
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyOtherException_res_4@514@01) (as MyOtherException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | !(issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType])) | dead]
; [else-branch: 321 | issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType]) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 321 | issubtype[Bool](typeof[PyType](MyOtherException_res_4@514@01), MyOtherException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyOtherException_res_4@514@01) (as MyOtherException<PyType>  PyType)))
(pop) ; 13
(pop) ; 12
; [eval] !(error_11 != null)
; [eval] error_11 != null
; [then-branch: 322 | MyOtherException_res_4@514@01 == Null | dead]
; [else-branch: 322 | MyOtherException_res_4@514@01 != Null | live]
(push) ; 12
; [else-branch: 322 | MyOtherException_res_4@514@01 != Null]
(pop) ; 12
(pop) ; 11
; [eval] !int___eq__(out_28.Container_value, __prim__int___box__(34))
; [eval] int___eq__(out_28.Container_value, __prim__int___box__(34))
; [eval] __prim__int___box__(34)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | !(int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34))) | dead]
; [else-branch: 323 | int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34)) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 323 | int___eq__((_, _), Container_value@513@01, __prim__int___box__(_, 34))]
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@513@01 (__prim__int___box__ $Snap.unit 34)))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !issubtype(typeof(error_13), MyException())
; [eval] issubtype(typeof(error_13), MyException())
; [eval] typeof(error_13)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | !(issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType])) | dead]
; [else-branch: 324 | issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 324 | issubtype[Bool](typeof[PyType](MyException_res_14@508@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_14@508@01) (as MyException<PyType>  PyType)))
(pop) ; 6
(pop) ; 5
; [eval] !(try_finally_32 == 2)
; [eval] try_finally_32 == 2
; [then-branch: 325 | False | dead]
; [else-branch: 325 | True | live]
(push) ; 5
; [else-branch: 325 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(error_13 != null)
; [eval] error_13 != null
; [then-branch: 326 | MyException_res_14@508@01 == Null | dead]
; [else-branch: 326 | MyException_res_14@508@01 != Null | live]
(push) ; 3
; [else-branch: 326 | MyException_res_14@508@01 != Null]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- nested_try_finally_2 ----------
(declare-const _cthread_179@518@01 $Ref)
(declare-const _caller_measures_179@519@01 Seq<Measure$>)
(declare-const _residue_179@520@01 $Perm)
(declare-const out_9@521@01 $Ref)
(declare-const _current_wait_level_179@522@01 $Perm)
(declare-const _cthread_179@523@01 $Ref)
(declare-const _caller_measures_179@524@01 Seq<Measure$>)
(declare-const _residue_179@525@01 $Perm)
(declare-const out_9@526@01 $Ref)
(declare-const _current_wait_level_179@527@01 $Perm)
(push) ; 1
(declare-const $t@528@01 $Snap)
(assert (= $t@528@01 ($Snap.combine ($Snap.first $t@528@01) ($Snap.second $t@528@01))))
(assert (= ($Snap.first $t@528@01) $Snap.unit))
; [eval] _cthread_179 != null
(assert (not (= _cthread_179@523@01 $Ref.null)))
(assert (=
  ($Snap.second $t@528@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@528@01))
    ($Snap.second ($Snap.second $t@528@01)))))
(assert (= ($Snap.first ($Snap.second $t@528@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_179), Thread_0())
; [eval] typeof(_cthread_179)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_179@523@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@528@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@528@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@528@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@528@01))) $Snap.unit))
; [eval] issubtype(typeof(out_9), Container())
; [eval] typeof(out_9)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_9@526@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@528@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@528@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01)))))))
(assert (not (= out_9@526@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_9.Container_value), int())
; [eval] typeof(out_9.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@528@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@528@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@529@01 $Snap)
(assert (= $t@529@01 ($Snap.combine ($Snap.first $t@529@01) ($Snap.second $t@529@01))))
(assert (= ($Snap.first $t@529@01) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseBounded] :: Level(_r_56) <= _current_wait_level_179)
(assert (=
  ($Snap.second $t@529@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@529@01))
    ($Snap.second ($Snap.second $t@529@01)))))
(assert (= ($Snap.first ($Snap.second $t@529@01)) $Snap.unit))
; [eval] (forperm _r_56: Ref [_r_56.MustReleaseUnbounded] :: Level(_r_56) <= _current_wait_level_179)
(assert (=
  ($Snap.second ($Snap.second $t@529@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@529@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@529@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@529@01))) $Snap.unit))
; [eval] _residue_179 <= _current_wait_level_179
(assert (<= _residue_179@525@01 _current_wait_level_179@527@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@529@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@529@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_9.Container_value), int())
; [eval] typeof(out_9.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01))))))
  $Snap.unit))
; [eval] int___eq__(out_9.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@529@01))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@529@01))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@529@01))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@529@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@530@01 $Ref)
; [exec]
; var error_14: Ref
(declare-const error_14@531@01 $Ref)
; [exec]
; var try_finally_33: Int
(declare-const try_finally_33@532@01 Int)
; [exec]
; var error_15: Ref
(declare-const error_15@533@01 $Ref)
; [exec]
; var try_finally_34: Int
(declare-const try_finally_34@534@01 Int)
; [exec]
; var error_16: Ref
(declare-const error_16@535@01 $Ref)
; [exec]
; var try_finally_35: Int
(declare-const try_finally_35@536@01 Int)
; [exec]
; var out_29: Ref
(declare-const out_29@537@01 $Ref)
; [exec]
; var MyException_res_15: Ref
(declare-const MyException_res_15@538@01 $Ref)
; [exec]
; var MyOtherException_res_5: Ref
(declare-const MyOtherException_res_5@539@01 $Ref)
; [exec]
; var _cwl_179: Perm
(declare-const _cwl_179@540@01 $Perm)
; [exec]
; var _method_measures_179: Seq[Measure$]
(declare-const _method_measures_179@541@01 Seq<Measure$>)
; [exec]
; _method_measures_179 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_29 := out_9
; [exec]
; try_finally_33 := 0
; [exec]
; try_finally_34 := 0
; [exec]
; try_finally_35 := 0
; [exec]
; MyException_res_15 := new()
(declare-const MyException_res_15@542@01 $Ref)
(assert (not (= MyException_res_15@542@01 $Ref.null)))
(assert (not (= MyException_res_15@542@01 MyException_res_15@538@01)))
(assert (not (= MyException_res_15@542@01 error_15@533@01)))
(assert (not (= MyException_res_15@542@01 out_9@526@01)))
(assert (not (= MyException_res_15@542@01 MyOtherException_res_5@539@01)))
(assert (not (= MyException_res_15@542@01 error_14@531@01)))
(assert (not
  (=
    MyException_res_15@542@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@528@01))))))))
(assert (not (= MyException_res_15@542@01 error_16@535@01)))
(assert (not (= MyException_res_15@542@01 _cthread_179@523@01)))
; [exec]
; inhale typeof(MyException_res_15) == MyException()
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 $Snap.unit))
; [eval] typeof(MyException_res_15) == MyException()
; [eval] typeof(MyException_res_15)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_15@542@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_16 := MyException_res_15
; [eval] error_16 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_15@542@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | MyException_res_15@542@01 != Null | live]
; [else-branch: 327 | MyException_res_15@542@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 327 | MyException_res_15@542@01 != Null]
; [exec]
; try_finally_35 := 2
; [exec]
; label try_finally_4
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787))
; [then-branch: 328 | False | dead]
; [else-branch: 328 | True | live]
(push) ; 4
; [else-branch: 328 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | True | live]
; [else-branch: 329 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 329 | True]
; [exec]
; out_9.Container_value := __prim__int___box__(30)
; [eval] __prim__int___box__(30)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 30))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 30))
(declare-const Container_value@544@01 $Ref)
(assert (= Container_value@544@01 (__prim__int___box__ $Snap.unit 30)))
; [eval] try_finally_35 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | True | live]
; [else-branch: 330 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 330 | True]
; [eval] issubtype(typeof(error_16), MyException())
; [eval] typeof(error_16)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_15@542@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_15@542@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | issubtype[Bool](typeof[PyType](MyException_res_15@542@01), MyException[PyType]) | live]
; [else-branch: 331 | !(issubtype[Bool](typeof[PyType](MyException_res_15@542@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 331 | issubtype[Bool](typeof[PyType](MyException_res_15@542@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_15@542@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_8
; [exec]
; inhale _isDefined(3832949702969684581)
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 $Snap.unit))
; [eval] _isDefined(3832949702969684581)
(push) ; 7
(assert (_isDefined%precondition $Snap.unit 3832949702969684581))
(pop) ; 7
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3832949702969684581))
(assert (_isDefined $Snap.unit 3832949702969684581))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_29, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_29, 526803611440346310908232101056638787))
; [then-branch: 332 | False | dead]
; [else-branch: 332 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 332 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_29, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_29, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_29, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | True | live]
; [else-branch: 333 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 333 | True]
; [exec]
; out_29.Container_value := __prim__int___box__(int___add__(int___unbox__(out_29.Container_value),
;   3))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_29.Container_value), 3))
; [eval] int___add__(int___unbox__(out_29.Container_value), 3)
; [eval] int___unbox__(out_29.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@544@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@544@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@544@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@544@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@544@01)))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@544@01) 3))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@544@01) 3))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@544@01) 3)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@544@01) 3)))
(declare-const Container_value@546@01 $Ref)
(assert (=
  Container_value@546@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@544@01) 3))))
; [exec]
; try_finally_34 := 0
; [exec]
; label try_finally_3
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787))
; [then-branch: 334 | False | dead]
; [else-branch: 334 | True | live]
(push) ; 8
; [else-branch: 334 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_9, 526803611440346310908232101056638787))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 335 | True | live]
; [else-branch: 335 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 335 | True]
; [exec]
; out_9.Container_value := __prim__int___box__(int___add__(int___unbox__(out_9.Container_value),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_9.Container_value), 1))
; [eval] int___add__(int___unbox__(out_9.Container_value), 1)
; [eval] int___unbox__(out_9.Container_value)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@546@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@546@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@546@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@546@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@546@01)))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@546@01) 1))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@546@01) 1))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@546@01) 1)))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@546@01) 1)))
(declare-const Container_value@547@01 $Ref)
(assert (=
  Container_value@547@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@546@01) 1))))
; [eval] try_finally_34 == 2
; [then-branch: 336 | False | dead]
; [else-branch: 336 | True | live]
(push) ; 9
; [else-branch: 336 | True]
(pop) ; 9
; [eval] !(try_finally_34 == 2)
; [eval] try_finally_34 == 2
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | True | live]
; [else-branch: 337 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 337 | True]
; [eval] try_finally_34 == 1
; [then-branch: 338 | False | dead]
; [else-branch: 338 | True | live]
(push) ; 10
; [else-branch: 338 | True]
(pop) ; 10
; [eval] !(try_finally_34 == 1)
; [eval] try_finally_34 == 1
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 339 | True | live]
; [else-branch: 339 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 339 | True]
; [exec]
; label post_try_15
; [eval] int___eq__(out_29.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 11
(assert (__prim__int___box__%precondition $Snap.unit 33))
(pop) ; 11
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 33))
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@547@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@547@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33)))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@547@01) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 33)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33))))
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33)) | dead]
; [else-branch: 340 | !(int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33))) | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 340 | !(int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33))))
(pop) ; 11
; [eval] !int___eq__(out_29.Container_value, __prim__int___box__(33))
; [eval] int___eq__(out_29.Container_value, __prim__int___box__(33))
; [eval] __prim__int___box__(33)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | !(int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33))) | live]
; [else-branch: 341 | int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33)) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 341 | !(int___eq__((_, _), Container_value@547@01, __prim__int___box__(_, 33)))]
(assert (not
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@547@01 (__prim__int___box__ $Snap.unit 33))))
; [exec]
; assert false
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- return_finally ----------
(declare-const _cthread_180@548@01 $Ref)
(declare-const _caller_measures_180@549@01 Seq<Measure$>)
(declare-const _residue_180@550@01 $Perm)
(declare-const out_10@551@01 $Ref)
(declare-const _current_wait_level_180@552@01 $Perm)
(declare-const _res@553@01 $Ref)
(declare-const _cthread_180@554@01 $Ref)
(declare-const _caller_measures_180@555@01 Seq<Measure$>)
(declare-const _residue_180@556@01 $Perm)
(declare-const out_10@557@01 $Ref)
(declare-const _current_wait_level_180@558@01 $Perm)
(declare-const _res@559@01 $Ref)
(push) ; 1
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (= ($Snap.first $t@560@01) $Snap.unit))
; [eval] _cthread_180 != null
(assert (not (= _cthread_180@554@01 $Ref.null)))
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_180), Thread_0())
; [eval] typeof(_cthread_180)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_180@554@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@560@01))) $Snap.unit))
; [eval] issubtype(typeof(out_10), Container())
; [eval] typeof(out_10)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_10@557@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@560@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(assert (not (= out_10@557@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_10.Container_value), int())
; [eval] typeof(out_10.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@561@01 $Snap)
(assert (= $t@561@01 ($Snap.combine ($Snap.first $t@561@01) ($Snap.second $t@561@01))))
(assert (= ($Snap.first $t@561@01) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseBounded] :: Level(_r_59) <= _current_wait_level_180)
(assert (=
  ($Snap.second $t@561@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@561@01))
    ($Snap.second ($Snap.second $t@561@01)))))
(assert (= ($Snap.first ($Snap.second $t@561@01)) $Snap.unit))
; [eval] (forperm _r_59: Ref [_r_59.MustReleaseUnbounded] :: Level(_r_59) <= _current_wait_level_180)
(assert (=
  ($Snap.second ($Snap.second $t@561@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@561@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@561@01))) $Snap.unit))
; [eval] _residue_180 <= _current_wait_level_180
(assert (<= _residue_180@556@01 _current_wait_level_180@558@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@561@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@561@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@561@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@559@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_10.Container_value), int())
; [eval] typeof(out_10.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))
  $Snap.unit))
; [eval] int___eq__(out_10.Container_value, __prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))) (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))) (__prim__int___box__ $Snap.unit 5))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))) (__prim__int___box__ $Snap.unit 5)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))))
  $Snap.unit))
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@559@01 (__prim__int___box__ $Snap.unit 15)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@559@01 (__prim__int___box__ $Snap.unit 15))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@559@01 (__prim__int___box__ $Snap.unit 15)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@561@01))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@562@01 $Ref)
; [exec]
; var error_17: Ref
(declare-const error_17@563@01 $Ref)
; [exec]
; var try_finally_36: Int
(declare-const try_finally_36@564@01 Int)
; [exec]
; var error_18: Ref
(declare-const error_18@565@01 $Ref)
; [exec]
; var try_finally_37: Int
(declare-const try_finally_37@566@01 Int)
; [exec]
; var out_30: Ref
(declare-const out_30@567@01 $Ref)
; [exec]
; var _cwl_180: Perm
(declare-const _cwl_180@568@01 $Perm)
; [exec]
; var _method_measures_180: Seq[Measure$]
(declare-const _method_measures_180@569@01 Seq<Measure$>)
; [exec]
; _method_measures_180 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; out_30 := out_10
; [eval] perm(_MaySet(out_30, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_30, 526803611440346310908232101056638787))
; [then-branch: 342 | False | dead]
; [else-branch: 342 | True | live]
(push) ; 3
; [else-branch: 342 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(out_30, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_30, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_30, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | True | live]
; [else-branch: 343 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 343 | True]
; [exec]
; out_30.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@570@01 $Ref)
(assert (= Container_value@570@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; try_finally_36 := 0
; [exec]
; try_finally_37 := 0
; [exec]
; _res := __prim__int___box__(15)
; [eval] __prim__int___box__(15)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(declare-const _res@571@01 $Ref)
(assert (= _res@571@01 (__prim__int___box__ $Snap.unit 15)))
; [exec]
; try_finally_37 := 1
; [exec]
; label try_finally_6
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787))
; [then-branch: 344 | False | dead]
; [else-branch: 344 | True | live]
(push) ; 4
; [else-branch: 344 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | True | live]
; [else-branch: 345 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 345 | True]
; [exec]
; out_10.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_10.Container_value),
;   3))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_10.Container_value), 3))
; [eval] int___mul__(int___unbox__(out_10.Container_value), 3)
; [eval] int___unbox__(out_10.Container_value)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@570@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@570@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@570@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@570@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@570@01)))
(push) ; 5
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@570@01) 3))
(pop) ; 5
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@570@01) 3))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@570@01) 3)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@570@01) 3)))
(declare-const Container_value@572@01 $Ref)
(assert (=
  Container_value@572@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@570@01) 3))))
; [eval] try_finally_37 == 2
; [then-branch: 346 | False | dead]
; [else-branch: 346 | True | live]
(push) ; 5
; [else-branch: 346 | True]
(pop) ; 5
; [eval] !(try_finally_37 == 2)
; [eval] try_finally_37 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | True | live]
; [else-branch: 347 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 347 | True]
; [eval] try_finally_37 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | True | live]
; [else-branch: 348 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 348 | True]
; [exec]
; try_finally_36 := try_finally_37
; [exec]
; label try_finally_5
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787))
; [then-branch: 349 | False | dead]
; [else-branch: 349 | True | live]
(push) ; 7
; [else-branch: 349 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_10, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | True | live]
; [else-branch: 350 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 350 | True]
; [exec]
; out_10.Container_value := __prim__int___box__(int___add__(int___unbox__(out_10.Container_value),
;   2))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_10.Container_value), 2))
; [eval] int___add__(int___unbox__(out_10.Container_value), 2)
; [eval] int___unbox__(out_10.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@572@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@572@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@572@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@572@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@572@01)))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@572@01) 2))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@572@01) 2))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@572@01) 2)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@572@01) 2)))
(declare-const Container_value@573@01 $Ref)
(assert (=
  Container_value@573@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@572@01) 2))))
; [eval] try_finally_36 == 2
; [then-branch: 351 | False | dead]
; [else-branch: 351 | True | live]
(push) ; 8
; [else-branch: 351 | True]
(pop) ; 8
; [eval] !(try_finally_36 == 2)
; [eval] try_finally_36 == 2
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | True | live]
; [else-branch: 352 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 352 | True]
; [eval] try_finally_36 == 1
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | True | live]
; [else-branch: 353 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 353 | True]
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@571@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@571@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out_10.Container_value), int())
; [eval] typeof(out_10.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@573@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@573@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_10.Container_value, __prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@573@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@573@01 (__prim__int___box__ $Snap.unit 5))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@573@01 (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@573@01 (__prim__int___box__ $Snap.unit 5)))
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@571@01 (__prim__int___box__ $Snap.unit 15)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@571@01 (__prim__int___box__ $Snap.unit 15))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@571@01 (__prim__int___box__ $Snap.unit 15))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@571@01 (__prim__int___box__ $Snap.unit 15)))
; [eval] (forperm _r_60: Ref [MustInvokeBounded(_r_60)] :: false)
; [eval] (forperm _r_60: Ref [MustInvokeUnbounded(_r_60)] :: false)
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseBounded] :: false)
; [eval] (forperm _r_60: Ref [_r_60.MustReleaseUnbounded] :: false)
(pop) ; 9
; [eval] !(try_finally_36 == 1)
; [eval] try_finally_36 == 1
; [then-branch: 354 | False | dead]
; [else-branch: 354 | True | live]
(push) ; 9
; [else-branch: 354 | True]
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !(try_finally_37 == 1)
; [eval] try_finally_37 == 1
; [then-branch: 355 | False | dead]
; [else-branch: 355 | True | live]
(push) ; 6
; [else-branch: 355 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- return_finally_2 ----------
(declare-const _cthread_181@574@01 $Ref)
(declare-const _caller_measures_181@575@01 Seq<Measure$>)
(declare-const _residue_181@576@01 $Perm)
(declare-const out_11@577@01 $Ref)
(declare-const _current_wait_level_181@578@01 $Perm)
(declare-const _res@579@01 $Ref)
(declare-const _cthread_181@580@01 $Ref)
(declare-const _caller_measures_181@581@01 Seq<Measure$>)
(declare-const _residue_181@582@01 $Perm)
(declare-const out_11@583@01 $Ref)
(declare-const _current_wait_level_181@584@01 $Perm)
(declare-const _res@585@01 $Ref)
(push) ; 1
(declare-const $t@586@01 $Snap)
(assert (= $t@586@01 ($Snap.combine ($Snap.first $t@586@01) ($Snap.second $t@586@01))))
(assert (= ($Snap.first $t@586@01) $Snap.unit))
; [eval] _cthread_181 != null
(assert (not (= _cthread_181@580@01 $Ref.null)))
(assert (=
  ($Snap.second $t@586@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@586@01))
    ($Snap.second ($Snap.second $t@586@01)))))
(assert (= ($Snap.first ($Snap.second $t@586@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_181), Thread_0())
; [eval] typeof(_cthread_181)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_181@580@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@586@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@586@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@586@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@586@01))) $Snap.unit))
; [eval] issubtype(typeof(out_11), Container())
; [eval] typeof(out_11)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_11@583@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@586@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@586@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01)))))))
(assert (not (= out_11@583@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_11.Container_value), int())
; [eval] typeof(out_11.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@586@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@586@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@587@01 $Snap)
(assert (= $t@587@01 ($Snap.combine ($Snap.first $t@587@01) ($Snap.second $t@587@01))))
(assert (= ($Snap.first $t@587@01) $Snap.unit))
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseBounded] :: Level(_r_62) <= _current_wait_level_181)
(assert (=
  ($Snap.second $t@587@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@587@01))
    ($Snap.second ($Snap.second $t@587@01)))))
(assert (= ($Snap.first ($Snap.second $t@587@01)) $Snap.unit))
; [eval] (forperm _r_62: Ref [_r_62.MustReleaseUnbounded] :: Level(_r_62) <= _current_wait_level_181)
(assert (=
  ($Snap.second ($Snap.second $t@587@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@587@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@587@01))) $Snap.unit))
; [eval] _residue_181 <= _current_wait_level_181
(assert (<= _residue_181@582@01 _current_wait_level_181@584@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@587@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@587@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@587@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@585@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_11.Container_value), int())
; [eval] typeof(out_11.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))
  $Snap.unit))
; [eval] int___eq__(out_11.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))) (__prim__int___box__ $Snap.unit 1)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))) (__prim__int___box__ $Snap.unit 1))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))) (__prim__int___box__ $Snap.unit 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))))
  $Snap.unit))
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@585@01 (__prim__int___box__ $Snap.unit 15)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@585@01 (__prim__int___box__ $Snap.unit 15))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@585@01 (__prim__int___box__ $Snap.unit 15)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@587@01))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@588@01 $Ref)
; [exec]
; var error_19: Ref
(declare-const error_19@589@01 $Ref)
; [exec]
; var try_finally_38: Int
(declare-const try_finally_38@590@01 Int)
; [exec]
; var error_20: Ref
(declare-const error_20@591@01 $Ref)
; [exec]
; var try_finally_39: Int
(declare-const try_finally_39@592@01 Int)
; [exec]
; var out_31: Ref
(declare-const out_31@593@01 $Ref)
; [exec]
; var _cwl_181: Perm
(declare-const _cwl_181@594@01 $Perm)
; [exec]
; var _method_measures_181: Seq[Measure$]
(declare-const _method_measures_181@595@01 Seq<Measure$>)
; [exec]
; _method_measures_181 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; out_31 := out_11
; [eval] perm(_MaySet(out_31, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_31, 526803611440346310908232101056638787))
; [then-branch: 356 | False | dead]
; [else-branch: 356 | True | live]
(push) ; 3
; [else-branch: 356 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(out_31, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_31, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_31, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | True | live]
; [else-branch: 357 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 357 | True]
; [exec]
; out_31.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@596@01 $Ref)
(assert (= Container_value@596@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; try_finally_38 := 0
; [exec]
; try_finally_39 := 0
; [exec]
; _res := __prim__int___box__(15)
; [eval] __prim__int___box__(15)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(declare-const _res@597@01 $Ref)
(assert (= _res@597@01 (__prim__int___box__ $Snap.unit 15)))
; [exec]
; try_finally_39 := 1
; [exec]
; label try_finally_8
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787))
; [then-branch: 358 | False | dead]
; [else-branch: 358 | True | live]
(push) ; 4
; [else-branch: 358 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | True | live]
; [else-branch: 359 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 359 | True]
; [exec]
; out_11.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_11.Container_value),
;   3))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_11.Container_value), 3))
; [eval] int___mul__(int___unbox__(out_11.Container_value), 3)
; [eval] int___unbox__(out_11.Container_value)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@596@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@596@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@596@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@596@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@596@01)))
(push) ; 5
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@596@01) 3))
(pop) ; 5
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@596@01) 3))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@596@01) 3)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@596@01) 3)))
(declare-const Container_value@598@01 $Ref)
(assert (=
  Container_value@598@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@596@01) 3))))
; [eval] try_finally_39 == 2
; [then-branch: 360 | False | dead]
; [else-branch: 360 | True | live]
(push) ; 5
; [else-branch: 360 | True]
(pop) ; 5
; [eval] !(try_finally_39 == 2)
; [eval] try_finally_39 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | True | live]
; [else-branch: 361 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 361 | True]
; [eval] try_finally_39 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | True | live]
; [else-branch: 362 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 362 | True]
; [exec]
; try_finally_38 := try_finally_39
; [exec]
; label try_finally_7
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787))
; [then-branch: 363 | False | dead]
; [else-branch: 363 | True | live]
(push) ; 7
; [else-branch: 363 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_11, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | True | live]
; [else-branch: 364 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 364 | True]
; [exec]
; out_11.Container_value := __prim__int___box__(int___add__(int___unbox__(out_11.Container_value),
;   2))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_11.Container_value), 2))
; [eval] int___add__(int___unbox__(out_11.Container_value), 2)
; [eval] int___unbox__(out_11.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@598@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@598@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@598@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@598@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@598@01)))
(push) ; 8
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@598@01) 2))
(pop) ; 8
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@598@01) 2))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@598@01) 2)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@598@01) 2)))
(declare-const Container_value@599@01 $Ref)
(assert (=
  Container_value@599@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@598@01) 2))))
; [eval] try_finally_38 == 2
; [then-branch: 365 | False | dead]
; [else-branch: 365 | True | live]
(push) ; 8
; [else-branch: 365 | True]
(pop) ; 8
; [eval] !(try_finally_38 == 2)
; [eval] try_finally_38 == 2
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | True | live]
; [else-branch: 366 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 366 | True]
; [eval] try_finally_38 == 1
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | True | live]
; [else-branch: 367 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 367 | True]
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> _res@597@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@597@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out_11.Container_value), int())
; [eval] typeof(out_11.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@599@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@599@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_11.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_11.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_11.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_11.Container_value, __prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@599@01 (__prim__int___box__ $Snap.unit 1))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- double_return_finally ----------
(declare-const _cthread_182@600@01 $Ref)
(declare-const _caller_measures_182@601@01 Seq<Measure$>)
(declare-const _residue_182@602@01 $Perm)
(declare-const out_12@603@01 $Ref)
(declare-const _current_wait_level_182@604@01 $Perm)
(declare-const _res@605@01 $Ref)
(declare-const _cthread_182@606@01 $Ref)
(declare-const _caller_measures_182@607@01 Seq<Measure$>)
(declare-const _residue_182@608@01 $Perm)
(declare-const out_12@609@01 $Ref)
(declare-const _current_wait_level_182@610@01 $Perm)
(declare-const _res@611@01 $Ref)
(push) ; 1
(declare-const $t@612@01 $Snap)
(assert (= $t@612@01 ($Snap.combine ($Snap.first $t@612@01) ($Snap.second $t@612@01))))
(assert (= ($Snap.first $t@612@01) $Snap.unit))
; [eval] _cthread_182 != null
(assert (not (= _cthread_182@606@01 $Ref.null)))
(assert (=
  ($Snap.second $t@612@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@612@01))
    ($Snap.second ($Snap.second $t@612@01)))))
(assert (= ($Snap.first ($Snap.second $t@612@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_182), Thread_0())
; [eval] typeof(_cthread_182)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_182@606@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@612@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@612@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@612@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@612@01))) $Snap.unit))
; [eval] issubtype(typeof(out_12), Container())
; [eval] typeof(out_12)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_12@609@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@612@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@612@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))))
(assert (not (= out_12@609@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_12.Container_value), int())
; [eval] typeof(out_12.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@613@01 $Snap)
(assert (= $t@613@01 ($Snap.combine ($Snap.first $t@613@01) ($Snap.second $t@613@01))))
(assert (= ($Snap.first $t@613@01) $Snap.unit))
; [eval] (forperm _r_65: Ref [_r_65.MustReleaseBounded] :: Level(_r_65) <= _current_wait_level_182)
(assert (=
  ($Snap.second $t@613@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@613@01))
    ($Snap.second ($Snap.second $t@613@01)))))
(assert (= ($Snap.first ($Snap.second $t@613@01)) $Snap.unit))
; [eval] (forperm _r_65: Ref [_r_65.MustReleaseUnbounded] :: Level(_r_65) <= _current_wait_level_182)
(assert (=
  ($Snap.second ($Snap.second $t@613@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@613@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@613@01))) $Snap.unit))
; [eval] _residue_182 <= _current_wait_level_182
(assert (<= _residue_182@608@01 _current_wait_level_182@610@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@613@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@613@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@613@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@611@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_12.Container_value), int())
; [eval] typeof(out_12.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))
  $Snap.unit))
; [eval] int___eq__(out_12.Container_value, __prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))) (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))) (__prim__int___box__ $Snap.unit 3))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))) (__prim__int___box__ $Snap.unit 3)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))))
  $Snap.unit))
; [eval] int___eq__(_res, __prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@611@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@611@01 (__prim__int___box__ $Snap.unit 5))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@611@01 (__prim__int___box__ $Snap.unit 5)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@613@01))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@614@01 $Ref)
; [exec]
; var error_21: Ref
(declare-const error_21@615@01 $Ref)
; [exec]
; var try_finally_40: Int
(declare-const try_finally_40@616@01 Int)
; [exec]
; var error_22: Ref
(declare-const error_22@617@01 $Ref)
; [exec]
; var try_finally_41: Int
(declare-const try_finally_41@618@01 Int)
; [exec]
; var out_32: Ref
(declare-const out_32@619@01 $Ref)
; [exec]
; var _cwl_182: Perm
(declare-const _cwl_182@620@01 $Perm)
; [exec]
; var _method_measures_182: Seq[Measure$]
(declare-const _method_measures_182@621@01 Seq<Measure$>)
; [exec]
; _method_measures_182 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; out_32 := out_12
; [eval] perm(_MaySet(out_32, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_32, 526803611440346310908232101056638787))
; [then-branch: 368 | False | dead]
; [else-branch: 368 | True | live]
(push) ; 3
; [else-branch: 368 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(out_32, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_32, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_32, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | True | live]
; [else-branch: 369 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 369 | True]
; [exec]
; out_32.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@622@01 $Ref)
(assert (= Container_value@622@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; try_finally_40 := 0
; [exec]
; try_finally_41 := 0
; [exec]
; _res := __prim__int___box__(15)
; [eval] __prim__int___box__(15)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(declare-const _res@623@01 $Ref)
(assert (= _res@623@01 (__prim__int___box__ $Snap.unit 15)))
; [exec]
; try_finally_41 := 1
; [exec]
; label try_finally_10
; [eval] perm(_MaySet(out_12, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_12, 526803611440346310908232101056638787))
; [then-branch: 370 | False | dead]
; [else-branch: 370 | True | live]
(push) ; 4
; [else-branch: 370 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_12, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_12, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_12, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | True | live]
; [else-branch: 371 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 371 | True]
; [exec]
; out_12.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_12.Container_value),
;   3))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_12.Container_value), 3))
; [eval] int___mul__(int___unbox__(out_12.Container_value), 3)
; [eval] int___unbox__(out_12.Container_value)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@622@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@622@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@622@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@622@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@622@01)))
(push) ; 5
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@622@01) 3))
(pop) ; 5
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@622@01) 3))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@622@01) 3)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@622@01) 3)))
(declare-const Container_value@624@01 $Ref)
(assert (=
  Container_value@624@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@622@01) 3))))
; [eval] try_finally_41 == 2
; [then-branch: 372 | False | dead]
; [else-branch: 372 | True | live]
(push) ; 5
; [else-branch: 372 | True]
(pop) ; 5
; [eval] !(try_finally_41 == 2)
; [eval] try_finally_41 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | True | live]
; [else-branch: 373 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 373 | True]
; [eval] try_finally_41 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | True | live]
; [else-branch: 374 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 374 | True]
; [exec]
; try_finally_40 := try_finally_41
; [exec]
; label try_finally_9
; [exec]
; _res := __prim__int___box__(int___add__(int___unbox__(out_12.Container_value),
;   2))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_12.Container_value), 2))
; [eval] int___add__(int___unbox__(out_12.Container_value), 2)
; [eval] int___unbox__(out_12.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@624@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@624@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@624@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@624@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@624@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@624@01) 2))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@624@01) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@624@01) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@624@01) 2)))
(declare-const _res@625@01 $Ref)
(assert (=
  _res@625@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@624@01) 2))))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> _res@625@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@625@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out_12.Container_value), int())
; [eval] typeof(out_12.Container_value)
; [eval] int()
; [eval] int___eq__(out_12.Container_value, __prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@624@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@624@01 (__prim__int___box__ $Snap.unit 3))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@624@01 (__prim__int___box__ $Snap.unit 3))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@624@01 (__prim__int___box__ $Snap.unit 3)))
; [eval] int___eq__(_res, __prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@625@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@625@01 (__prim__int___box__ $Snap.unit 5))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@625@01 (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@625@01 (__prim__int___box__ $Snap.unit 5)))
; [eval] (forperm _r_66: Ref [MustInvokeBounded(_r_66)] :: false)
; [eval] (forperm _r_66: Ref [MustInvokeUnbounded(_r_66)] :: false)
; [eval] (forperm _r_66: Ref [_r_66.MustReleaseBounded] :: false)
; [eval] (forperm _r_66: Ref [_r_66.MustReleaseUnbounded] :: false)
(pop) ; 6
; [eval] !(try_finally_41 == 1)
; [eval] try_finally_41 == 1
; [then-branch: 375 | False | dead]
; [else-branch: 375 | True | live]
(push) ; 6
; [else-branch: 375 | True]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- double_return_finally_2 ----------
(declare-const _cthread_183@626@01 $Ref)
(declare-const _caller_measures_183@627@01 Seq<Measure$>)
(declare-const _residue_183@628@01 $Perm)
(declare-const out_13@629@01 $Ref)
(declare-const _current_wait_level_183@630@01 $Perm)
(declare-const _res@631@01 $Ref)
(declare-const _cthread_183@632@01 $Ref)
(declare-const _caller_measures_183@633@01 Seq<Measure$>)
(declare-const _residue_183@634@01 $Perm)
(declare-const out_13@635@01 $Ref)
(declare-const _current_wait_level_183@636@01 $Perm)
(declare-const _res@637@01 $Ref)
(push) ; 1
(declare-const $t@638@01 $Snap)
(assert (= $t@638@01 ($Snap.combine ($Snap.first $t@638@01) ($Snap.second $t@638@01))))
(assert (= ($Snap.first $t@638@01) $Snap.unit))
; [eval] _cthread_183 != null
(assert (not (= _cthread_183@632@01 $Ref.null)))
(assert (=
  ($Snap.second $t@638@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@638@01))
    ($Snap.second ($Snap.second $t@638@01)))))
(assert (= ($Snap.first ($Snap.second $t@638@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_183), Thread_0())
; [eval] typeof(_cthread_183)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_183@632@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@638@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@638@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@638@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@638@01))) $Snap.unit))
; [eval] issubtype(typeof(out_13), Container())
; [eval] typeof(out_13)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_13@635@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@638@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@638@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01)))))))
(assert (not (= out_13@635@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_13.Container_value), int())
; [eval] typeof(out_13.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@638@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@638@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@639@01 $Snap)
(assert (= $t@639@01 ($Snap.combine ($Snap.first $t@639@01) ($Snap.second $t@639@01))))
(assert (= ($Snap.first $t@639@01) $Snap.unit))
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseBounded] :: Level(_r_68) <= _current_wait_level_183)
(assert (=
  ($Snap.second $t@639@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@639@01))
    ($Snap.second ($Snap.second $t@639@01)))))
(assert (= ($Snap.first ($Snap.second $t@639@01)) $Snap.unit))
; [eval] (forperm _r_68: Ref [_r_68.MustReleaseUnbounded] :: Level(_r_68) <= _current_wait_level_183)
(assert (=
  ($Snap.second ($Snap.second $t@639@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@639@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@639@01))) $Snap.unit))
; [eval] _residue_183 <= _current_wait_level_183
(assert (<= _residue_183@634@01 _current_wait_level_183@636@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@639@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@639@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@639@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> _res@637@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_13.Container_value), int())
; [eval] typeof(out_13.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))
  $Snap.unit))
; [eval] int___eq__(out_13.Container_value, __prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))) (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))) (__prim__int___box__ $Snap.unit 3))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))) (__prim__int___box__ $Snap.unit 3)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))))
  $Snap.unit))
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@637@01 (__prim__int___box__ $Snap.unit 15)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@637@01 (__prim__int___box__ $Snap.unit 15))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@637@01 (__prim__int___box__ $Snap.unit 15)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@639@01))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@640@01 $Ref)
; [exec]
; var error_23: Ref
(declare-const error_23@641@01 $Ref)
; [exec]
; var try_finally_42: Int
(declare-const try_finally_42@642@01 Int)
; [exec]
; var error_24: Ref
(declare-const error_24@643@01 $Ref)
; [exec]
; var try_finally_43: Int
(declare-const try_finally_43@644@01 Int)
; [exec]
; var out_33: Ref
(declare-const out_33@645@01 $Ref)
; [exec]
; var _cwl_183: Perm
(declare-const _cwl_183@646@01 $Perm)
; [exec]
; var _method_measures_183: Seq[Measure$]
(declare-const _method_measures_183@647@01 Seq<Measure$>)
; [exec]
; _method_measures_183 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; out_33 := out_13
; [eval] perm(_MaySet(out_33, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_33, 526803611440346310908232101056638787))
; [then-branch: 376 | False | dead]
; [else-branch: 376 | True | live]
(push) ; 3
; [else-branch: 376 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(out_33, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_33, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_33, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | True | live]
; [else-branch: 377 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 377 | True]
; [exec]
; out_33.Container_value := __prim__int___box__(1)
; [eval] __prim__int___box__(1)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
(declare-const Container_value@648@01 $Ref)
(assert (= Container_value@648@01 (__prim__int___box__ $Snap.unit 1)))
; [exec]
; try_finally_42 := 0
; [exec]
; try_finally_43 := 0
; [exec]
; _res := __prim__int___box__(15)
; [eval] __prim__int___box__(15)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 15))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 15))
(declare-const _res@649@01 $Ref)
(assert (= _res@649@01 (__prim__int___box__ $Snap.unit 15)))
; [exec]
; try_finally_43 := 1
; [exec]
; label try_finally_12
; [eval] perm(_MaySet(out_13, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_13, 526803611440346310908232101056638787))
; [then-branch: 378 | False | dead]
; [else-branch: 378 | True | live]
(push) ; 4
; [else-branch: 378 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_13, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_13, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_13, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | True | live]
; [else-branch: 379 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 379 | True]
; [exec]
; out_13.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_13.Container_value),
;   3))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_13.Container_value), 3))
; [eval] int___mul__(int___unbox__(out_13.Container_value), 3)
; [eval] int___unbox__(out_13.Container_value)
(push) ; 5
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@648@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@648@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@648@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@648@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@648@01)))
(push) ; 5
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@648@01) 3))
(pop) ; 5
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@648@01) 3))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@648@01) 3)))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@648@01) 3)))
(declare-const Container_value@650@01 $Ref)
(assert (=
  Container_value@650@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@648@01) 3))))
; [eval] try_finally_43 == 2
; [then-branch: 380 | False | dead]
; [else-branch: 380 | True | live]
(push) ; 5
; [else-branch: 380 | True]
(pop) ; 5
; [eval] !(try_finally_43 == 2)
; [eval] try_finally_43 == 2
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | True | live]
; [else-branch: 381 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 381 | True]
; [eval] try_finally_43 == 1
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | True | live]
; [else-branch: 382 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 382 | True]
; [exec]
; try_finally_42 := try_finally_43
; [exec]
; label try_finally_11
; [exec]
; _res := __prim__int___box__(int___add__(int___unbox__(out_13.Container_value),
;   2))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_13.Container_value), 2))
; [eval] int___add__(int___unbox__(out_13.Container_value), 2)
; [eval] int___unbox__(out_13.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@650@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@650@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@650@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@650@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@650@01)))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@650@01) 2))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@650@01) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@650@01) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@650@01) 2)))
(declare-const _res@651@01 $Ref)
(assert (=
  _res@651@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@650@01) 2))))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), int())
; [eval] typeof(_res)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> _res@651@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@651@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out_13.Container_value), int())
; [eval] typeof(out_13.Container_value)
; [eval] int()
; [eval] int___eq__(out_13.Container_value, __prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@650@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@650@01 (__prim__int___box__ $Snap.unit 3))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@650@01 (__prim__int___box__ $Snap.unit 3))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@650@01 (__prim__int___box__ $Snap.unit 3)))
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 15)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(_res, __prim__int___box__(15))
; [eval] __prim__int___box__(15)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) _res@651@01 (__prim__int___box__ $Snap.unit 15))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- exception_use ----------
(declare-const _cthread_184@652@01 $Ref)
(declare-const _caller_measures_184@653@01 Seq<Measure$>)
(declare-const _residue_184@654@01 $Perm)
(declare-const out_14@655@01 $Ref)
(declare-const _current_wait_level_184@656@01 $Perm)
(declare-const _cthread_184@657@01 $Ref)
(declare-const _caller_measures_184@658@01 Seq<Measure$>)
(declare-const _residue_184@659@01 $Perm)
(declare-const out_14@660@01 $Ref)
(declare-const _current_wait_level_184@661@01 $Perm)
(push) ; 1
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 ($Snap.combine ($Snap.first $t@662@01) ($Snap.second $t@662@01))))
(assert (= ($Snap.first $t@662@01) $Snap.unit))
; [eval] _cthread_184 != null
(assert (not (= _cthread_184@657@01 $Ref.null)))
(assert (=
  ($Snap.second $t@662@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@662@01))
    ($Snap.second ($Snap.second $t@662@01)))))
(assert (= ($Snap.first ($Snap.second $t@662@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_184), Thread_0())
; [eval] typeof(_cthread_184)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_184@657@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@662@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@662@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@662@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@662@01))) $Snap.unit))
; [eval] issubtype(typeof(out_14), Container())
; [eval] typeof(out_14)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_14@660@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@662@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@662@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01)))))))
(assert (not (= out_14@660@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_14.Container_value), int())
; [eval] typeof(out_14.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@662@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@662@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@663@01 $Snap)
(assert (= $t@663@01 ($Snap.combine ($Snap.first $t@663@01) ($Snap.second $t@663@01))))
(assert (= ($Snap.first $t@663@01) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseBounded] :: Level(_r_71) <= _current_wait_level_184)
(assert (=
  ($Snap.second $t@663@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@663@01))
    ($Snap.second ($Snap.second $t@663@01)))))
(assert (= ($Snap.first ($Snap.second $t@663@01)) $Snap.unit))
; [eval] (forperm _r_71: Ref [_r_71.MustReleaseUnbounded] :: Level(_r_71) <= _current_wait_level_184)
(assert (=
  ($Snap.second ($Snap.second $t@663@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@663@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@663@01))) $Snap.unit))
; [eval] _residue_184 <= _current_wait_level_184
(assert (<= _residue_184@659@01 _current_wait_level_184@661@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@663@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@663@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_14.Container_value), int())
; [eval] typeof(out_14.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))
  $Snap.unit))
; [eval] int___eq__(out_14.Container_value, __prim__int___box__(104))
; [eval] __prim__int___box__(104)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 104))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 104))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@663@01))))) (__prim__int___box__ $Snap.unit 104)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@663@01))))) (__prim__int___box__ $Snap.unit 104))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@663@01))))) (__prim__int___box__ $Snap.unit 104)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@663@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@664@01 $Ref)
; [exec]
; var error_25: Ref
(declare-const error_25@665@01 $Ref)
; [exec]
; var try_finally_44: Int
(declare-const try_finally_44@666@01 Int)
; [exec]
; var out_34: Ref
(declare-const out_34@667@01 $Ref)
; [exec]
; var ParameterizedException_res: Ref
(declare-const ParameterizedException_res@668@01 $Ref)
; [exec]
; var _cwl_184: Perm
(declare-const _cwl_184@669@01 $Perm)
; [exec]
; var _method_measures_184: Seq[Measure$]
(declare-const _method_measures_184@670@01 Seq<Measure$>)
; [exec]
; _method_measures_184 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_34 := out_14
; [exec]
; try_finally_44 := 0
; [exec]
; ParameterizedException_res := new()
(declare-const ParameterizedException_res@671@01 $Ref)
(assert (not (= ParameterizedException_res@671@01 $Ref.null)))
(assert (not (= ParameterizedException_res@671@01 out_14@660@01)))
(assert (not (= ParameterizedException_res@671@01 error_25@665@01)))
(assert (not
  (=
    ParameterizedException_res@671@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@662@01))))))))
(assert (not (= ParameterizedException_res@671@01 _cthread_184@657@01)))
(assert (not (= ParameterizedException_res@671@01 ParameterizedException_res@668@01)))
; [exec]
; inhale typeof(ParameterizedException_res) == ParameterizedException()
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 $Snap.unit))
; [eval] typeof(ParameterizedException_res) == ParameterizedException()
; [eval] typeof(ParameterizedException_res)
; [eval] ParameterizedException()
(assert (=
  (typeof<PyType> ParameterizedException_res@671@01)
  (as ParameterizedException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(ParameterizedException_res, 175893374059933094368738875315864790323659277132451917046374736), write)
(declare-const $t@673@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_184 := ParameterizedException___init__(_cthread_184, _method_measures_184,
;   _residue_184, ParameterizedException_res, __prim__int___box__(52))
; [eval] __prim__int___box__(52)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 52))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 52))
; [eval] _cthread_157 != null
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
; [eval] self_0 != null
; [eval] issubtype(typeof(self_0), ParameterizedException())
; [eval] typeof(self_0)
; [eval] ParameterizedException()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as ParameterizedException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as ParameterizedException<PyType>  PyType)))
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 52)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 52)) (as int<PyType>  PyType)))
; [eval] self_0 != null
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
; [eval] (forperm _r_115: Ref [MustInvokeBounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [MustInvokeUnbounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseBounded] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_157@674@01 $Perm)
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 ($Snap.combine ($Snap.first $t@675@01) ($Snap.second $t@675@01))))
(assert (= ($Snap.first $t@675@01) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseBounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@675@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@675@01))
    ($Snap.second ($Snap.second $t@675@01)))))
(assert (= ($Snap.first ($Snap.second $t@675@01)) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseUnbounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@675@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@675@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@675@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_184@659@01 _current_wait_level_157@674@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@675@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.ParameterizedException_num), int())
; [eval] typeof(self_0.ParameterizedException_num)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; [eval] int___eq__(self_0.ParameterizedException_num, num_0)
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 52)))
(pop) ; 3
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 52)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01))))) (__prim__int___box__ $Snap.unit 52)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@675@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; error_25 := ParameterizedException_res
; [eval] error_25 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= ParameterizedException_res@671@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | ParameterizedException_res@671@01 != Null | live]
; [else-branch: 383 | ParameterizedException_res@671@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 383 | ParameterizedException_res@671@01 != Null]
; [eval] !issubtype(typeof(error_25), MyException())
; [eval] issubtype(typeof(error_25), MyException())
; [eval] typeof(error_25)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as MyException<PyType>  PyType))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType])) | live]
; [else-branch: 384 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType]) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 384 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as MyException<PyType>  PyType))))
; [eval] !issubtype(typeof(error_25), ParameterizedException())
; [eval] issubtype(typeof(error_25), ParameterizedException())
; [eval] typeof(error_25)
; [eval] ParameterizedException()
; [then-branch: 385 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType])) | dead]
; [else-branch: 385 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType]) | live]
(push) ; 5
; [else-branch: 385 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType])]
(pop) ; 5
; [eval] issubtype(typeof(error_25), ParameterizedException())
; [eval] typeof(error_25)
; [eval] ParameterizedException()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as ParameterizedException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 386 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType]) | live]
; [else-branch: 386 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 386 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), ParameterizedException[PyType])]
; [exec]
; label handlerParameterizedException
; [exec]
; inhale _isDefined(3833231177946395237)
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
; [eval] _isDefined(3833231177946395237)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3833231177946395237))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3833231177946395237))
(assert (_isDefined $Snap.unit 3833231177946395237))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_34, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_34, 526803611440346310908232101056638787))
; [then-branch: 387 | False | dead]
; [else-branch: 387 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 387 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_34, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_34, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_34, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | True | live]
; [else-branch: 388 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 388 | True]
; [exec]
; out_34.Container_value := _checkDefined(error_25, 3833231177946395237).ParameterizedException_num
; [eval] _checkDefined(error_25, 3833231177946395237)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res@671@01 3833231177946395237))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res@671@01 3833231177946395237))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ParameterizedException_res@671@01
  (_checkDefined $Snap.unit ParameterizedException_res@671@01 3833231177946395237))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const Container_value@677@01 $Ref)
(assert (=
  Container_value@677@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@675@01)))))))
; [exec]
; try_finally_44 := 0
; [exec]
; label try_finally_13
; [eval] perm(_MaySet(out_14, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_14, 526803611440346310908232101056638787))
; [then-branch: 389 | False | dead]
; [else-branch: 389 | True | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 389 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_14, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_14, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_14, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | True | live]
; [else-branch: 390 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 390 | True]
; [exec]
; out_14.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_14.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_14.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_14.Container_value), 2)
; [eval] int___unbox__(out_14.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@677@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@677@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@677@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@677@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@677@01)))
(push) ; 8
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@677@01) 2))
(pop) ; 8
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@677@01) 2))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@677@01) 2)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@677@01) 2)))
(declare-const Container_value@678@01 $Ref)
(assert (=
  Container_value@678@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@677@01) 2))))
; [eval] try_finally_44 == 2
; [then-branch: 391 | False | dead]
; [else-branch: 391 | True | live]
(push) ; 8
; [else-branch: 391 | True]
(pop) ; 8
; [eval] !(try_finally_44 == 2)
; [eval] try_finally_44 == 2
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 392 | True | live]
; [else-branch: 392 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 392 | True]
; [eval] try_finally_44 == 1
; [then-branch: 393 | False | dead]
; [else-branch: 393 | True | live]
(push) ; 9
; [else-branch: 393 | True]
(pop) ; 9
; [eval] !(try_finally_44 == 1)
; [eval] try_finally_44 == 1
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 394 | True | live]
; [else-branch: 394 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 394 | True]
; [exec]
; label post_try_25
; [exec]
; label __end
; [eval] issubtype(typeof(out_14.Container_value), int())
; [eval] typeof(out_14.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@678@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@678@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_14.Container_value, __prim__int___box__(104))
; [eval] __prim__int___box__(104)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 104))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 104))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@678@01 (__prim__int___box__ $Snap.unit 104)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 104)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@678@01 (__prim__int___box__ $Snap.unit 104))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@678@01 (__prim__int___box__ $Snap.unit 104))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@678@01 (__prim__int___box__ $Snap.unit 104)))
; [eval] (forperm _r_72: Ref [MustInvokeBounded(_r_72)] :: false)
; [eval] (forperm _r_72: Ref [MustInvokeUnbounded(_r_72)] :: false)
; [eval] (forperm _r_72: Ref [_r_72.MustReleaseBounded] :: false)
; [eval] (forperm _r_72: Ref [_r_72.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] issubtype(typeof(error_25), MyException())
; [eval] typeof(error_25)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType]) | dead]
; [else-branch: 395 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 395 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res@671@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res@671@01) (as MyException<PyType>  PyType))))
(pop) ; 4
(pop) ; 3
; [eval] !(error_25 != null)
; [eval] error_25 != null
; [then-branch: 396 | ParameterizedException_res@671@01 == Null | dead]
; [else-branch: 396 | ParameterizedException_res@671@01 != Null | live]
(push) ; 3
; [else-branch: 396 | ParameterizedException_res@671@01 != Null]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- exception_use_2 ----------
(declare-const _cthread_185@679@01 $Ref)
(declare-const _caller_measures_185@680@01 Seq<Measure$>)
(declare-const _residue_185@681@01 $Perm)
(declare-const out_15@682@01 $Ref)
(declare-const inp@683@01 $Ref)
(declare-const _current_wait_level_185@684@01 $Perm)
(declare-const _cthread_185@685@01 $Ref)
(declare-const _caller_measures_185@686@01 Seq<Measure$>)
(declare-const _residue_185@687@01 $Perm)
(declare-const out_15@688@01 $Ref)
(declare-const inp@689@01 $Ref)
(declare-const _current_wait_level_185@690@01 $Perm)
(push) ; 1
(declare-const $t@691@01 $Snap)
(assert (= $t@691@01 ($Snap.combine ($Snap.first $t@691@01) ($Snap.second $t@691@01))))
(assert (= ($Snap.first $t@691@01) $Snap.unit))
; [eval] _cthread_185 != null
(assert (not (= _cthread_185@685@01 $Ref.null)))
(assert (=
  ($Snap.second $t@691@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@691@01))
    ($Snap.second ($Snap.second $t@691@01)))))
(assert (= ($Snap.first ($Snap.second $t@691@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_185), Thread_0())
; [eval] typeof(_cthread_185)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_185@685@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@691@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@691@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@691@01))) $Snap.unit))
; [eval] issubtype(typeof(out_15), Container())
; [eval] typeof(out_15)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_15@688@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@691@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@691@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@691@01))))
  $Snap.unit))
; [eval] issubtype(typeof(inp), bool())
; [eval] typeof(inp)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> inp@689@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))))
(assert (not (= out_15@688@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_15.Container_value), int())
; [eval] typeof(out_15.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@692@01 $Snap)
(assert (= $t@692@01 ($Snap.combine ($Snap.first $t@692@01) ($Snap.second $t@692@01))))
(assert (= ($Snap.first $t@692@01) $Snap.unit))
; [eval] (forperm _r_74: Ref [_r_74.MustReleaseBounded] :: Level(_r_74) <= _current_wait_level_185)
(assert (=
  ($Snap.second $t@692@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@692@01))
    ($Snap.second ($Snap.second $t@692@01)))))
(assert (= ($Snap.first ($Snap.second $t@692@01)) $Snap.unit))
; [eval] (forperm _r_74: Ref [_r_74.MustReleaseUnbounded] :: Level(_r_74) <= _current_wait_level_185)
(assert (=
  ($Snap.second ($Snap.second $t@692@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@692@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@692@01))) $Snap.unit))
; [eval] _residue_185 <= _current_wait_level_185
(assert (<= _residue_185@687@01 _current_wait_level_185@690@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@692@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_15.Container_value), int())
; [eval] typeof(out_15.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))
  $Snap.unit))
; [eval] !bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(72))
; [eval] !bool___unbox__(inp)
; [eval] bool___unbox__(inp)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit inp@689@01))
(pop) ; 3
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit inp@689@01))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp@689@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | !(bool___unbox__(_, inp@689@01)) | live]
; [else-branch: 397 | bool___unbox__(_, inp@689@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 397 | !(bool___unbox__(_, inp@689@01))]
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
; [eval] int___eq__(out_15.Container_value, __prim__int___box__(72))
; [eval] __prim__int___box__(72)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 72))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 72))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 72)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 72))))
(pop) ; 4
(push) ; 4
; [else-branch: 397 | bool___unbox__(_, inp@689@01)]
(assert (bool___unbox__ $Snap.unit inp@689@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (and
    (not (bool___unbox__ $Snap.unit inp@689@01))
    (__prim__int___box__%precondition $Snap.unit 72)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 72)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit inp@689@01)
  (not (bool___unbox__ $Snap.unit inp@689@01))))
(assert (=>
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 72))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))))
  $Snap.unit))
; [eval] bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 3
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp@689@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | bool___unbox__(_, inp@689@01) | live]
; [else-branch: 398 | !(bool___unbox__(_, inp@689@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 398 | bool___unbox__(_, inp@689@01)]
(assert (bool___unbox__ $Snap.unit inp@689@01))
; [eval] int___eq__(out_15.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 74)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 74))))
(pop) ; 4
(push) ; 4
; [else-branch: 398 | !(bool___unbox__(_, inp@689@01))]
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit inp@689@01)
  (and
    (bool___unbox__ $Snap.unit inp@689@01)
    (__prim__int___box__%precondition $Snap.unit 74)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 74)))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (bool___unbox__ $Snap.unit inp@689@01)))
(assert (=>
  (bool___unbox__ $Snap.unit inp@689@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@692@01))))) (__prim__int___box__ $Snap.unit 74))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@692@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@693@01 $Ref)
; [exec]
; var error_26: Ref
(declare-const error_26@694@01 $Ref)
; [exec]
; var try_finally_45: Int
(declare-const try_finally_45@695@01 Int)
; [exec]
; var out_35: Ref
(declare-const out_35@696@01 $Ref)
; [exec]
; var inp_1: Ref
(declare-const inp_1@697@01 $Ref)
; [exec]
; var ParameterizedException_res_0: Ref
(declare-const ParameterizedException_res_0@698@01 $Ref)
; [exec]
; var MyException_res_16: Ref
(declare-const MyException_res_16@699@01 $Ref)
; [exec]
; var _cwl_185: Perm
(declare-const _cwl_185@700@01 $Perm)
; [exec]
; var _method_measures_185: Seq[Measure$]
(declare-const _method_measures_185@701@01 Seq<Measure$>)
; [exec]
; _method_measures_185 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_35 := out_15
; [exec]
; inp_1 := inp
; [exec]
; try_finally_45 := 0
; [eval] bool___unbox__(inp_1)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit inp@689@01))
(pop) ; 3
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit inp@689@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp@689@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | bool___unbox__(_, inp@689@01) | live]
; [else-branch: 399 | !(bool___unbox__(_, inp@689@01)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 399 | bool___unbox__(_, inp@689@01)]
(assert (bool___unbox__ $Snap.unit inp@689@01))
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
; [then-branch: 400 | False | dead]
; [else-branch: 400 | True | live]
(push) ; 4
; [else-branch: 400 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | True | live]
; [else-branch: 401 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 401 | True]
; [exec]
; out_35.Container_value := __prim__int___box__(14)
; [eval] __prim__int___box__(14)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 14))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 14))
(declare-const Container_value@702@01 $Ref)
(assert (= Container_value@702@01 (__prim__int___box__ $Snap.unit 14)))
; [exec]
; ParameterizedException_res_0 := new()
(declare-const ParameterizedException_res_0@703@01 $Ref)
(assert (not (= ParameterizedException_res_0@703@01 $Ref.null)))
(assert (not (= ParameterizedException_res_0@703@01 MyException_res_16@699@01)))
(assert (not (= ParameterizedException_res_0@703@01 ParameterizedException_res_0@698@01)))
(assert (not (= ParameterizedException_res_0@703@01 Container_value@702@01)))
(assert (not (= ParameterizedException_res_0@703@01 error_26@694@01)))
(assert (not (= ParameterizedException_res_0@703@01 _cthread_185@685@01)))
(assert (not (= ParameterizedException_res_0@703@01 inp@689@01)))
(assert (not (= ParameterizedException_res_0@703@01 out_15@688@01)))
; [exec]
; inhale typeof(ParameterizedException_res_0) == ParameterizedException()
(declare-const $t@704@01 $Snap)
(assert (= $t@704@01 $Snap.unit))
; [eval] typeof(ParameterizedException_res_0) == ParameterizedException()
; [eval] typeof(ParameterizedException_res_0)
; [eval] ParameterizedException()
(assert (=
  (typeof<PyType> ParameterizedException_res_0@703@01)
  (as ParameterizedException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(ParameterizedException_res_0, 175893374059933094368738875315864790323659277132451917046374736), write)
(declare-const $t@705@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_185 := ParameterizedException___init__(_cthread_185, _method_measures_185,
;   _residue_185, ParameterizedException_res_0, __prim__int___box__(23))
; [eval] __prim__int___box__(23)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 23))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 23))
; [eval] _cthread_157 != null
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
; [eval] self_0 != null
; [eval] issubtype(typeof(self_0), ParameterizedException())
; [eval] typeof(self_0)
; [eval] ParameterizedException()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as ParameterizedException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as ParameterizedException<PyType>  PyType)))
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 23)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 23)) (as int<PyType>  PyType)))
; [eval] self_0 != null
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
; [eval] (forperm _r_115: Ref [MustInvokeBounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [MustInvokeUnbounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseBounded] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_157@706@01 $Perm)
(declare-const $t@707@01 $Snap)
(assert (= $t@707@01 ($Snap.combine ($Snap.first $t@707@01) ($Snap.second $t@707@01))))
(assert (= ($Snap.first $t@707@01) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseBounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@707@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@707@01))
    ($Snap.second ($Snap.second $t@707@01)))))
(assert (= ($Snap.first ($Snap.second $t@707@01)) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseUnbounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@707@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@707@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@707@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_185@687@01 _current_wait_level_157@706@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@707@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.ParameterizedException_num), int())
; [eval] typeof(self_0.ParameterizedException_num)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))
  $Snap.unit))
; [eval] int___eq__(self_0.ParameterizedException_num, num_0)
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))) (__prim__int___box__ $Snap.unit 23)))
(pop) ; 5
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))) (__prim__int___box__ $Snap.unit 23)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))) (__prim__int___box__ $Snap.unit 23)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; error_26 := ParameterizedException_res_0
; [eval] error_26 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ParameterizedException_res_0@703@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | ParameterizedException_res_0@703@01 != Null | live]
; [else-branch: 402 | ParameterizedException_res_0@703@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 402 | ParameterizedException_res_0@703@01 != Null]
; [eval] issubtype(typeof(error_26), MyException())
; [eval] typeof(error_26)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType]) | dead]
; [else-branch: 403 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 403 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as MyException<PyType>  PyType))))
(pop) ; 6
; [eval] !issubtype(typeof(error_26), MyException())
; [eval] issubtype(typeof(error_26), MyException())
; [eval] typeof(error_26)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as MyException<PyType>  PyType))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType])) | live]
; [else-branch: 404 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType]) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 404 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(error_26), ParameterizedException())
; [eval] typeof(error_26)
; [eval] ParameterizedException()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_0@703@01) (as ParameterizedException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 405 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType]) | live]
; [else-branch: 405 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 405 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType])]
; [exec]
; label handlerParameterizedException_0
; [exec]
; inhale _isDefined(3905288771984323173)
(declare-const $t@708@01 $Snap)
(assert (= $t@708@01 $Snap.unit))
; [eval] _isDefined(3905288771984323173)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3905288771984323173))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3905288771984323173))
(assert (_isDefined $Snap.unit 3905288771984323173))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
; [then-branch: 406 | False | dead]
; [else-branch: 406 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 406 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | True | live]
; [else-branch: 407 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 407 | True]
; [exec]
; out_35.Container_value := __prim__int___box__(int___add__(int___unbox__(out_35.Container_value),
;   int___unbox__(_checkDefined(error_26, 3905288771984323173).ParameterizedException_num)))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_35.Container_value), int___unbox__(_checkDefined(error_26, 3905288771984323173).ParameterizedException_num)))
; [eval] int___add__(int___unbox__(out_35.Container_value), int___unbox__(_checkDefined(error_26, 3905288771984323173).ParameterizedException_num))
; [eval] int___unbox__(out_35.Container_value)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@702@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@702@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@702@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@702@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@702@01)))
; [eval] int___unbox__(_checkDefined(error_26, 3905288771984323173).ParameterizedException_num)
; [eval] _checkDefined(error_26, 3905288771984323173)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res_0@703@01 3905288771984323173))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res_0@703@01 3905288771984323173))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ParameterizedException_res_0@703@01
  (_checkDefined $Snap.unit ParameterizedException_res_0@703@01 3905288771984323173))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@702@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@702@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@702@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@702@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01)))))))))
(declare-const Container_value@709@01 $Ref)
(assert (=
  Container_value@709@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@702@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@707@01))))))))))
; [exec]
; try_finally_45 := 0
; [exec]
; label try_finally_14
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787))
; [then-branch: 408 | False | dead]
; [else-branch: 408 | True | live]
(push) ; 9
; [else-branch: 408 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | True | live]
; [else-branch: 409 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 409 | True]
; [exec]
; out_15.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_15.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_15.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_15.Container_value), 2)
; [eval] int___unbox__(out_15.Container_value)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@709@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@709@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@709@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@709@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@709@01)))
(push) ; 10
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@709@01) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@709@01) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@709@01) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@709@01) 2)))
(declare-const Container_value@710@01 $Ref)
(assert (=
  Container_value@710@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@709@01) 2))))
; [eval] try_finally_45 == 2
; [then-branch: 410 | False | dead]
; [else-branch: 410 | True | live]
(push) ; 10
; [else-branch: 410 | True]
(pop) ; 10
; [eval] !(try_finally_45 == 2)
; [eval] try_finally_45 == 2
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | True | live]
; [else-branch: 411 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 411 | True]
; [eval] try_finally_45 == 1
; [then-branch: 412 | False | dead]
; [else-branch: 412 | True | live]
(push) ; 11
; [else-branch: 412 | True]
(pop) ; 11
; [eval] !(try_finally_45 == 1)
; [eval] try_finally_45 == 1
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | True | live]
; [else-branch: 413 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 413 | True]
; [exec]
; label post_try_26
; [exec]
; label __end
; [eval] issubtype(typeof(out_15.Container_value), int())
; [eval] typeof(out_15.Container_value)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@710@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@710@01) (as int<PyType>  PyType)))
; [eval] !bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(72))
; [eval] !bool___unbox__(inp)
; [eval] bool___unbox__(inp)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 414 | !(bool___unbox__(_, inp@689@01)) | dead]
; [else-branch: 414 | bool___unbox__(_, inp@689@01) | live]
(push) ; 13
; [else-branch: 414 | bool___unbox__(_, inp@689@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp@689@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | bool___unbox__(_, inp@689@01) | live]
; [else-branch: 415 | !(bool___unbox__(_, inp@689@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 415 | bool___unbox__(_, inp@689@01)]
; [eval] int___eq__(out_15.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@710@01 (__prim__int___box__ $Snap.unit 74)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@710@01 (__prim__int___box__ $Snap.unit 74))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit inp@689@01)
  (and
    (__prim__int___box__%precondition $Snap.unit 74)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@710@01 (__prim__int___box__ $Snap.unit 74)))))
(push) ; 12
(assert (not (=>
  (bool___unbox__ $Snap.unit inp@689@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@710@01 (__prim__int___box__ $Snap.unit 74)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (bool___unbox__ $Snap.unit inp@689@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@710@01 (__prim__int___box__ $Snap.unit 74))))
; [eval] (forperm _r_75: Ref [MustInvokeBounded(_r_75)] :: false)
; [eval] (forperm _r_75: Ref [MustInvokeUnbounded(_r_75)] :: false)
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseBounded] :: false)
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: false)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !issubtype(typeof(error_26), ParameterizedException())
; [eval] issubtype(typeof(error_26), ParameterizedException())
; [eval] typeof(error_26)
; [eval] ParameterizedException()
; [then-branch: 416 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType])) | dead]
; [else-branch: 416 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType]) | live]
(push) ; 7
; [else-branch: 416 | issubtype[Bool](typeof[PyType](ParameterizedException_res_0@703@01), ParameterizedException[PyType])]
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(error_26 != null)
; [eval] error_26 != null
; [then-branch: 417 | ParameterizedException_res_0@703@01 == Null | dead]
; [else-branch: 417 | ParameterizedException_res_0@703@01 != Null | live]
(push) ; 5
; [else-branch: 417 | ParameterizedException_res_0@703@01 != Null]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 399 | !(bool___unbox__(_, inp@689@01))]
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(pop) ; 3
; [eval] !bool___unbox__(inp_1)
; [eval] bool___unbox__(inp_1)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp@689@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 418 | !(bool___unbox__(_, inp@689@01)) | live]
; [else-branch: 418 | bool___unbox__(_, inp@689@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 418 | !(bool___unbox__(_, inp@689@01))]
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
; [exec]
; MyException_res_16 := new()
(declare-const MyException_res_16@711@01 $Ref)
(assert (not (= MyException_res_16@711@01 $Ref.null)))
(assert (not (= MyException_res_16@711@01 MyException_res_16@699@01)))
(assert (not (= MyException_res_16@711@01 ParameterizedException_res_0@698@01)))
(assert (not (= MyException_res_16@711@01 error_26@694@01)))
(assert (not (= MyException_res_16@711@01 _cthread_185@685@01)))
(assert (not (= MyException_res_16@711@01 inp@689@01)))
(assert (not (= MyException_res_16@711@01 out_15@688@01)))
(assert (not
  (=
    MyException_res_16@711@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@691@01)))))))))
; [exec]
; inhale typeof(MyException_res_16) == MyException()
(declare-const $t@712@01 $Snap)
(assert (= $t@712@01 $Snap.unit))
; [eval] typeof(MyException_res_16) == MyException()
; [eval] typeof(MyException_res_16)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; error_26 := MyException_res_16
; [eval] error_26 != null
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= MyException_res_16@711@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | MyException_res_16@711@01 != Null | live]
; [else-branch: 419 | MyException_res_16@711@01 == Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 419 | MyException_res_16@711@01 != Null]
; [eval] !issubtype(typeof(error_26), MyException())
; [eval] issubtype(typeof(error_26), MyException())
; [eval] typeof(error_26)
; [eval] MyException()
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | !(issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType])) | dead]
; [else-branch: 420 | issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 420 | issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType)))
(pop) ; 5
; [eval] issubtype(typeof(error_26), MyException())
; [eval] typeof(error_26)
; [eval] MyException()
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 421 | issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType]) | live]
; [else-branch: 421 | !(issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 421 | issubtype[Bool](typeof[PyType](MyException_res_16@711@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_16@711@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_14
; [exec]
; inhale _isDefined(3905288771984323173)
(declare-const $t@713@01 $Snap)
(assert (= $t@713@01 $Snap.unit))
; [eval] _isDefined(3905288771984323173)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 3905288771984323173))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3905288771984323173))
(assert (_isDefined $Snap.unit 3905288771984323173))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
; [then-branch: 422 | False | dead]
; [else-branch: 422 | True | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 422 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_35, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | True | live]
; [else-branch: 423 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 423 | True]
; [exec]
; out_35.Container_value := __prim__int___box__(36)
; [eval] __prim__int___box__(36)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 36))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 36))
(declare-const Container_value@714@01 $Ref)
(assert (= Container_value@714@01 (__prim__int___box__ $Snap.unit 36)))
; [exec]
; try_finally_45 := 0
; [exec]
; label try_finally_14
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787))
; [then-branch: 424 | False | dead]
; [else-branch: 424 | True | live]
(push) ; 7
; [else-branch: 424 | True]
(pop) ; 7
; [eval] !(perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_15, 526803611440346310908232101056638787))
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | True | live]
; [else-branch: 425 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 425 | True]
; [exec]
; out_15.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_15.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_15.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_15.Container_value), 2)
; [eval] int___unbox__(out_15.Container_value)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@714@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@714@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@714@01))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@714@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@714@01)))
(push) ; 8
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@714@01) 2))
(pop) ; 8
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@714@01) 2))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@714@01) 2)))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@714@01) 2)))
(declare-const Container_value@715@01 $Ref)
(assert (=
  Container_value@715@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@714@01) 2))))
; [eval] try_finally_45 == 2
; [then-branch: 426 | False | dead]
; [else-branch: 426 | True | live]
(push) ; 8
; [else-branch: 426 | True]
(pop) ; 8
; [eval] !(try_finally_45 == 2)
; [eval] try_finally_45 == 2
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | True | live]
; [else-branch: 427 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 427 | True]
; [eval] try_finally_45 == 1
; [then-branch: 428 | False | dead]
; [else-branch: 428 | True | live]
(push) ; 9
; [else-branch: 428 | True]
(pop) ; 9
; [eval] !(try_finally_45 == 1)
; [eval] try_finally_45 == 1
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | True | live]
; [else-branch: 429 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 429 | True]
; [exec]
; label post_try_26
; [exec]
; label __end
; [eval] issubtype(typeof(out_15.Container_value), int())
; [eval] typeof(out_15.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@715@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@715@01) (as int<PyType>  PyType)))
; [eval] !bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(72))
; [eval] !bool___unbox__(inp)
; [eval] bool___unbox__(inp)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp@689@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 430 | !(bool___unbox__(_, inp@689@01)) | live]
; [else-branch: 430 | bool___unbox__(_, inp@689@01) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 430 | !(bool___unbox__(_, inp@689@01))]
; [eval] int___eq__(out_15.Container_value, __prim__int___box__(72))
; [eval] __prim__int___box__(72)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit 72))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 72))
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@715@01 (__prim__int___box__ $Snap.unit 72)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@715@01 (__prim__int___box__ $Snap.unit 72))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (and
    (__prim__int___box__%precondition $Snap.unit 72)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@715@01 (__prim__int___box__ $Snap.unit 72)))))
(push) ; 10
(assert (not (=>
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@715@01 (__prim__int___box__ $Snap.unit 72)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (bool___unbox__ $Snap.unit inp@689@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@715@01 (__prim__int___box__ $Snap.unit 72))))
; [eval] bool___unbox__(inp) ==> int___eq__(out_15.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp)
(push) ; 10
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 431 | bool___unbox__(_, inp@689@01) | dead]
; [else-branch: 431 | !(bool___unbox__(_, inp@689@01)) | live]
(push) ; 11
; [else-branch: 431 | !(bool___unbox__(_, inp@689@01))]
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] (forperm _r_75: Ref [MustInvokeBounded(_r_75)] :: false)
; [eval] (forperm _r_75: Ref [MustInvokeUnbounded(_r_75)] :: false)
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseBounded] :: false)
; [eval] (forperm _r_75: Ref [_r_75.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !(error_26 != null)
; [eval] error_26 != null
; [then-branch: 432 | MyException_res_16@711@01 == Null | dead]
; [else-branch: 432 | MyException_res_16@711@01 != Null | live]
(push) ; 4
; [else-branch: 432 | MyException_res_16@711@01 != Null]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 418 | bool___unbox__(_, inp@689@01)]
(assert (bool___unbox__ $Snap.unit inp@689@01))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- exception_use_3 ----------
(declare-const _cthread_186@716@01 $Ref)
(declare-const _caller_measures_186@717@01 Seq<Measure$>)
(declare-const _residue_186@718@01 $Perm)
(declare-const out_16@719@01 $Ref)
(declare-const inp_0@720@01 $Ref)
(declare-const _current_wait_level_186@721@01 $Perm)
(declare-const _cthread_186@722@01 $Ref)
(declare-const _caller_measures_186@723@01 Seq<Measure$>)
(declare-const _residue_186@724@01 $Perm)
(declare-const out_16@725@01 $Ref)
(declare-const inp_0@726@01 $Ref)
(declare-const _current_wait_level_186@727@01 $Perm)
(push) ; 1
(declare-const $t@728@01 $Snap)
(assert (= $t@728@01 ($Snap.combine ($Snap.first $t@728@01) ($Snap.second $t@728@01))))
(assert (= ($Snap.first $t@728@01) $Snap.unit))
; [eval] _cthread_186 != null
(assert (not (= _cthread_186@722@01 $Ref.null)))
(assert (=
  ($Snap.second $t@728@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@728@01))
    ($Snap.second ($Snap.second $t@728@01)))))
(assert (= ($Snap.first ($Snap.second $t@728@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_186), Thread_0())
; [eval] typeof(_cthread_186)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_186@722@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@728@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@728@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@728@01))) $Snap.unit))
; [eval] issubtype(typeof(out_16), Container())
; [eval] typeof(out_16)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_16@725@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@728@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@728@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@728@01))))
  $Snap.unit))
; [eval] issubtype(typeof(inp_0), bool())
; [eval] typeof(inp_0)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> inp_0@726@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))))
(assert (not (= out_16@725@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_16.Container_value), int())
; [eval] typeof(out_16.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@728@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@729@01 $Snap)
(assert (= $t@729@01 ($Snap.combine ($Snap.first $t@729@01) ($Snap.second $t@729@01))))
(assert (= ($Snap.first $t@729@01) $Snap.unit))
; [eval] (forperm _r_77: Ref [_r_77.MustReleaseBounded] :: Level(_r_77) <= _current_wait_level_186)
(assert (=
  ($Snap.second $t@729@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@729@01))
    ($Snap.second ($Snap.second $t@729@01)))))
(assert (= ($Snap.first ($Snap.second $t@729@01)) $Snap.unit))
; [eval] (forperm _r_77: Ref [_r_77.MustReleaseUnbounded] :: Level(_r_77) <= _current_wait_level_186)
(assert (=
  ($Snap.second ($Snap.second $t@729@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@729@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@729@01))) $Snap.unit))
; [eval] _residue_186 <= _current_wait_level_186
(assert (<= _residue_186@724@01 _current_wait_level_186@727@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@729@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_16.Container_value), int())
; [eval] typeof(out_16.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))
  $Snap.unit))
; [eval] !bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(72))
; [eval] !bool___unbox__(inp_0)
; [eval] bool___unbox__(inp_0)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit inp_0@726@01))
(pop) ; 3
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit inp_0@726@01))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp_0@726@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | !(bool___unbox__(_, inp_0@726@01)) | live]
; [else-branch: 433 | bool___unbox__(_, inp_0@726@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 433 | !(bool___unbox__(_, inp_0@726@01))]
(assert (not (bool___unbox__ $Snap.unit inp_0@726@01)))
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(72))
; [eval] __prim__int___box__(72)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 72))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 72))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 72)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 72))))
(pop) ; 4
(push) ; 4
; [else-branch: 433 | bool___unbox__(_, inp_0@726@01)]
(assert (bool___unbox__ $Snap.unit inp_0@726@01))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (not (bool___unbox__ $Snap.unit inp_0@726@01))
  (and
    (not (bool___unbox__ $Snap.unit inp_0@726@01))
    (__prim__int___box__%precondition $Snap.unit 72)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 72)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 72)))))
; Joined path conditions
(assert (or
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(assert (=>
  (not (bool___unbox__ $Snap.unit inp_0@726@01))
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 72))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))
  $Snap.unit))
; [eval] bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp_0)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 3
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp_0@726@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 434 | !(bool___unbox__(_, inp_0@726@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 434 | bool___unbox__(_, inp_0@726@01)]
(assert (bool___unbox__ $Snap.unit inp_0@726@01))
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 74)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 74))))
(pop) ; 4
(push) ; 4
; [else-branch: 434 | !(bool___unbox__(_, inp_0@726@01))]
(assert (not (bool___unbox__ $Snap.unit inp_0@726@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (and
    (bool___unbox__ $Snap.unit inp_0@726@01)
    (__prim__int___box__%precondition $Snap.unit 74)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 74)))))
; Joined path conditions
(assert (or
  (not (bool___unbox__ $Snap.unit inp_0@726@01))
  (bool___unbox__ $Snap.unit inp_0@726@01)))
(assert (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))) (__prim__int___box__ $Snap.unit 74))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@730@01 $Ref)
; [exec]
; var error_27: Ref
(declare-const error_27@731@01 $Ref)
; [exec]
; var try_finally_46: Int
(declare-const try_finally_46@732@01 Int)
; [exec]
; var out_36: Ref
(declare-const out_36@733@01 $Ref)
; [exec]
; var inp_2: Ref
(declare-const inp_2@734@01 $Ref)
; [exec]
; var ParameterizedException_res_1: Ref
(declare-const ParameterizedException_res_1@735@01 $Ref)
; [exec]
; var MyException_res_17: Ref
(declare-const MyException_res_17@736@01 $Ref)
; [exec]
; var _cwl_186: Perm
(declare-const _cwl_186@737@01 $Perm)
; [exec]
; var _method_measures_186: Seq[Measure$]
(declare-const _method_measures_186@738@01 Seq<Measure$>)
; [exec]
; _method_measures_186 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_36 := out_16
; [exec]
; inp_2 := inp_0
; [exec]
; try_finally_46 := 0
; [eval] bool___unbox__(inp_2)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit inp_0@726@01))
(pop) ; 3
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit inp_0@726@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit inp_0@726@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 435 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 435 | !(bool___unbox__(_, inp_0@726@01)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 435 | bool___unbox__(_, inp_0@726@01)]
(assert (bool___unbox__ $Snap.unit inp_0@726@01))
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787))
; [then-branch: 436 | False | dead]
; [else-branch: 436 | True | live]
(push) ; 4
; [else-branch: 436 | True]
(pop) ; 4
; [eval] !(perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 437 | True | live]
; [else-branch: 437 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 437 | True]
; [exec]
; out_36.Container_value := __prim__int___box__(14)
; [eval] __prim__int___box__(14)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 14))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 14))
(declare-const Container_value@739@01 $Ref)
(assert (= Container_value@739@01 (__prim__int___box__ $Snap.unit 14)))
; [exec]
; ParameterizedException_res_1 := new()
(declare-const ParameterizedException_res_1@740@01 $Ref)
(assert (not (= ParameterizedException_res_1@740@01 $Ref.null)))
(assert (not (= ParameterizedException_res_1@740@01 inp_0@726@01)))
(assert (not (= ParameterizedException_res_1@740@01 ParameterizedException_res_1@735@01)))
(assert (not (= ParameterizedException_res_1@740@01 Container_value@739@01)))
(assert (not (= ParameterizedException_res_1@740@01 out_16@725@01)))
(assert (not (= ParameterizedException_res_1@740@01 error_27@731@01)))
(assert (not (= ParameterizedException_res_1@740@01 MyException_res_17@736@01)))
(assert (not (= ParameterizedException_res_1@740@01 _cthread_186@722@01)))
; [exec]
; inhale typeof(ParameterizedException_res_1) == ParameterizedException()
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 $Snap.unit))
; [eval] typeof(ParameterizedException_res_1) == ParameterizedException()
; [eval] typeof(ParameterizedException_res_1)
; [eval] ParameterizedException()
(assert (=
  (typeof<PyType> ParameterizedException_res_1@740@01)
  (as ParameterizedException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(ParameterizedException_res_1, 175893374059933094368738875315864790323659277132451917046374736), write)
(declare-const $t@742@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_186 := ParameterizedException___init__(_cthread_186, _method_measures_186,
;   _residue_186, ParameterizedException_res_1, __prim__int___box__(45))
; [eval] __prim__int___box__(45)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 45))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 45))
; [eval] _cthread_157 != null
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
; [eval] self_0 != null
; [eval] issubtype(typeof(self_0), ParameterizedException())
; [eval] typeof(self_0)
; [eval] ParameterizedException()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as ParameterizedException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as ParameterizedException<PyType>  PyType)))
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType)))
; [eval] self_0 != null
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
; [eval] (forperm _r_115: Ref [MustInvokeBounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [MustInvokeUnbounded(_r_115)] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseBounded] :: false)
; [eval] (forperm _r_115: Ref [_r_115.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_157@743@01 $Perm)
(declare-const $t@744@01 $Snap)
(assert (= $t@744@01 ($Snap.combine ($Snap.first $t@744@01) ($Snap.second $t@744@01))))
(assert (= ($Snap.first $t@744@01) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseBounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@744@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@744@01))
    ($Snap.second ($Snap.second $t@744@01)))))
(assert (= ($Snap.first ($Snap.second $t@744@01)) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseUnbounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@744@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@744@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@744@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_186@724@01 _current_wait_level_157@743@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@744@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.ParameterizedException_num), int())
; [eval] typeof(self_0.ParameterizedException_num)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))
  $Snap.unit))
; [eval] int___eq__(self_0.ParameterizedException_num, num_0)
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))) (__prim__int___box__ $Snap.unit 45)))
(pop) ; 5
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))) (__prim__int___box__ $Snap.unit 45)))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))) (__prim__int___box__ $Snap.unit 45)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; error_27 := ParameterizedException_res_1
; [eval] error_27 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= ParameterizedException_res_1@740@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | ParameterizedException_res_1@740@01 != Null | live]
; [else-branch: 438 | ParameterizedException_res_1@740@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 438 | ParameterizedException_res_1@740@01 != Null]
; [eval] issubtype(typeof(error_27), MyException())
; [eval] typeof(error_27)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType]) | dead]
; [else-branch: 439 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 439 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as MyException<PyType>  PyType))))
(pop) ; 6
; [eval] !issubtype(typeof(error_27), MyException())
; [eval] issubtype(typeof(error_27), MyException())
; [eval] typeof(error_27)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as MyException<PyType>  PyType))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 440 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType])) | live]
; [else-branch: 440 | issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType]) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 440 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), MyException[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(error_27), ParameterizedException())
; [eval] typeof(error_27)
; [eval] ParameterizedException()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ParameterizedException_res_1@740@01) (as ParameterizedException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), ParameterizedException[PyType]) | live]
; [else-branch: 441 | !(issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), ParameterizedException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 441 | issubtype[Bool](typeof[PyType](ParameterizedException_res_1@740@01), ParameterizedException[PyType])]
; [exec]
; label handlerParameterizedException_1
; [exec]
; inhale _isDefined(3977346366022251109)
(declare-const $t@745@01 $Snap)
(assert (= $t@745@01 $Snap.unit))
; [eval] _isDefined(3977346366022251109)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 3977346366022251109))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3977346366022251109))
(assert (_isDefined $Snap.unit 3977346366022251109))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787))
; [then-branch: 442 | False | dead]
; [else-branch: 442 | True | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 442 | True]
(pop) ; 8
; [eval] !(perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_36, 526803611440346310908232101056638787))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | True | live]
; [else-branch: 443 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 443 | True]
; [exec]
; out_36.Container_value := __prim__int___box__(int___add__(int___unbox__(out_36.Container_value),
;   int___unbox__(_checkDefined(error_27, 3977346366022251109).ParameterizedException_num)))
; [eval] __prim__int___box__(int___add__(int___unbox__(out_36.Container_value), int___unbox__(_checkDefined(error_27, 3977346366022251109).ParameterizedException_num)))
; [eval] int___add__(int___unbox__(out_36.Container_value), int___unbox__(_checkDefined(error_27, 3977346366022251109).ParameterizedException_num))
; [eval] int___unbox__(out_36.Container_value)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@739@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@739@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@739@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@739@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@739@01)))
; [eval] int___unbox__(_checkDefined(error_27, 3977346366022251109).ParameterizedException_num)
; [eval] _checkDefined(error_27, 3977346366022251109)
(push) ; 9
; [eval] _isDefined(id)
(push) ; 10
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res_1@740@01 3977346366022251109))
(pop) ; 9
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ParameterizedException_res_1@740@01 3977346366022251109))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ParameterizedException_res_1@740@01
  (_checkDefined $Snap.unit ParameterizedException_res_1@740@01 3977346366022251109))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))
(pop) ; 9
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))
(push) ; 9
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@739@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))))
(pop) ; 9
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@739@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))))
(push) ; 9
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@739@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))))
(pop) ; 9
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@739@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01)))))))))
(declare-const Container_value@746@01 $Ref)
(assert (=
  Container_value@746@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit Container_value@739@01) (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@744@01))))))))))
; [exec]
; try_finally_46 := 0
; [exec]
; label try_finally_15
; [eval] perm(_MaySet(out_16, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_16, 526803611440346310908232101056638787))
; [then-branch: 444 | False | dead]
; [else-branch: 444 | True | live]
(push) ; 9
; [else-branch: 444 | True]
(pop) ; 9
; [eval] !(perm(_MaySet(out_16, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_16, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_16, 526803611440346310908232101056638787))
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 445 | True | live]
; [else-branch: 445 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 445 | True]
; [exec]
; out_16.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_16.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_16.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_16.Container_value), 2)
; [eval] int___unbox__(out_16.Container_value)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@746@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@746@01) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit Container_value@746@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> Container_value@746@01) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit Container_value@746@01)))
(push) ; 10
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@746@01) 2))
(pop) ; 10
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit Container_value@746@01) 2))
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@746@01) 2)))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@746@01) 2)))
(declare-const Container_value@747@01 $Ref)
(assert (=
  Container_value@747@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit Container_value@746@01) 2))))
; [eval] try_finally_46 == 2
; [then-branch: 446 | False | dead]
; [else-branch: 446 | True | live]
(push) ; 10
; [else-branch: 446 | True]
(pop) ; 10
; [eval] !(try_finally_46 == 2)
; [eval] try_finally_46 == 2
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | True | live]
; [else-branch: 447 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 447 | True]
; [eval] try_finally_46 == 1
; [then-branch: 448 | False | dead]
; [else-branch: 448 | True | live]
(push) ; 11
; [else-branch: 448 | True]
(pop) ; 11
; [eval] !(try_finally_46 == 1)
; [eval] try_finally_46 == 1
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 449 | True | live]
; [else-branch: 449 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 449 | True]
; [exec]
; label post_try_27
; [exec]
; label __end
; [eval] issubtype(typeof(out_16.Container_value), int())
; [eval] typeof(out_16.Container_value)
; [eval] int()
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@747@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@747@01) (as int<PyType>  PyType)))
; [eval] !bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(72))
; [eval] !bool___unbox__(inp_0)
; [eval] bool___unbox__(inp_0)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 450 | !(bool___unbox__(_, inp_0@726@01)) | dead]
; [else-branch: 450 | bool___unbox__(_, inp_0@726@01) | live]
(push) ; 13
; [else-branch: 450 | bool___unbox__(_, inp_0@726@01)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp_0)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 451 | !(bool___unbox__(_, inp_0@726@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 451 | bool___unbox__(_, inp_0@726@01)]
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (and
    (__prim__int___box__%precondition $Snap.unit 74)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))))
(push) ; 12
(assert (not (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp_0)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 452 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 452 | !(bool___unbox__(_, inp_0@726@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 452 | bool___unbox__(_, inp_0@726@01)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(set-option :timeout 0)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp_0)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 453 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 453 | !(bool___unbox__(_, inp_0@726@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 453 | bool___unbox__(_, inp_0@726@01)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(set-option :timeout 0)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] bool___unbox__(inp_0) ==> int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] bool___unbox__(inp_0)
(set-option :timeout 0)
(push) ; 12
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit inp_0@726@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | bool___unbox__(_, inp_0@726@01) | live]
; [else-branch: 454 | !(bool___unbox__(_, inp_0@726@01)) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 454 | bool___unbox__(_, inp_0@726@01)]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_16.Container_value, __prim__int___box__(74))
; [eval] __prim__int___box__(74)
(set-option :timeout 0)
(push) ; 14
(assert (__prim__int___box__%precondition $Snap.unit 74))
(pop) ; 14
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 74))
(push) ; 14
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 15
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))
(pop) ; 14
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 74)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(push) ; 12
(assert (not (=>
  (bool___unbox__ $Snap.unit inp_0@726@01)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@747@01 (__prim__int___box__ $Snap.unit 74)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- finally_declared ----------
(declare-const _cthread_187@748@01 $Ref)
(declare-const _caller_measures_187@749@01 Seq<Measure$>)
(declare-const _residue_187@750@01 $Perm)
(declare-const out_17@751@01 $Ref)
(declare-const _current_wait_level_187@752@01 $Perm)
(declare-const _err@753@01 $Ref)
(declare-const _cthread_187@754@01 $Ref)
(declare-const _caller_measures_187@755@01 Seq<Measure$>)
(declare-const _residue_187@756@01 $Perm)
(declare-const out_17@757@01 $Ref)
(declare-const _current_wait_level_187@758@01 $Perm)
(declare-const _err@759@01 $Ref)
(push) ; 1
(declare-const $t@760@01 $Snap)
(assert (= $t@760@01 ($Snap.combine ($Snap.first $t@760@01) ($Snap.second $t@760@01))))
(assert (= ($Snap.first $t@760@01) $Snap.unit))
; [eval] _cthread_187 != null
(assert (not (= _cthread_187@754@01 $Ref.null)))
(assert (=
  ($Snap.second $t@760@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@760@01))
    ($Snap.second ($Snap.second $t@760@01)))))
(assert (= ($Snap.first ($Snap.second $t@760@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_187), Thread_0())
; [eval] typeof(_cthread_187)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_187@754@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@760@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@760@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@760@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@760@01))) $Snap.unit))
; [eval] issubtype(typeof(out_17), Container())
; [eval] typeof(out_17)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_17@757@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@760@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@760@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01)))))))
(assert (not (= out_17@757@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_17.Container_value), int())
; [eval] typeof(out_17.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@760@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@760@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@761@01 $Snap)
(assert (= $t@761@01 ($Snap.combine ($Snap.first $t@761@01) ($Snap.second $t@761@01))))
(assert (= ($Snap.first $t@761@01) $Snap.unit))
; [eval] (forperm _r_80: Ref [_r_80.MustReleaseBounded] :: Level(_r_80) <= _current_wait_level_187)
(assert (=
  ($Snap.second $t@761@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@761@01))
    ($Snap.second ($Snap.second $t@761@01)))))
(assert (= ($Snap.first ($Snap.second $t@761@01)) $Snap.unit))
; [eval] (forperm _r_80: Ref [_r_80.MustReleaseUnbounded] :: Level(_r_80) <= _current_wait_level_187)
(assert (=
  ($Snap.second ($Snap.second $t@761@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@761@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@761@01))) $Snap.unit))
; [eval] _residue_187 <= _current_wait_level_187
(assert (<= _residue_187@756@01 _current_wait_level_187@758@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@761@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@759@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@759@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 455 | _err@759@01 == Null | live]
; [else-branch: 455 | _err@759@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 455 | _err@759@01 == Null]
(assert (= _err@759@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_17.Container_value), int())
; [eval] typeof(out_17.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@759@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | _err@759@01 == Null | live]
; [else-branch: 456 | _err@759@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 456 | _err@759@01 == Null]
; [eval] int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))) (__prim__int___box__ $Snap.unit 24)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))) (__prim__int___box__ $Snap.unit 24))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= _err@759@01 $Ref.null)
  (and
    (__prim__int___box__%precondition $Snap.unit 24)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))) (__prim__int___box__ $Snap.unit 24)))))
(assert (=>
  (= _err@759@01 $Ref.null)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))) (__prim__int___box__ $Snap.unit 24))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 457 | _err@759@01 == Null | live]
; [else-branch: 457 | _err@759@01 != Null | live]
(push) ; 5
; [then-branch: 457 | _err@759@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 457 | _err@759@01 != Null]
(assert (not (= _err@759@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@759@01 $Ref.null)) (= _err@759@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@759@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 458 | _err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType]) | dead]
; [else-branch: 458 | !(_err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 458 | !(_err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@759@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 459 | _err@759@01 != Null | dead]
; [else-branch: 459 | _err@759@01 == Null | live]
(push) ; 6
; [else-branch: 459 | _err@759@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 455 | _err@759@01 != Null]
(assert (not (= _err@759@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@761@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 4
; [then-branch: 460 | _err@759@01 == Null | dead]
; [else-branch: 460 | _err@759@01 != Null | live]
(push) ; 5
; [else-branch: 460 | _err@759@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 461 | _err@759@01 == Null | live]
; [else-branch: 461 | _err@759@01 != Null | live]
(push) ; 5
; [then-branch: 461 | _err@759@01 == Null]
(assert (= _err@759@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 461 | _err@759@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@759@01 $Ref.null)) (= _err@759@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@759@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@759@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | _err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType]) | live]
; [else-branch: 462 | !(_err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 462 | _err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType])]
(assert (and
  (not (= _err@759@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_17.Container_value), int())
; [eval] typeof(out_17.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))
  $Snap.unit))
; [eval] int___eq__(out_17.Container_value, __prim__int___box__(26))
; [eval] __prim__int___box__(26)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 26))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 26))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))) (__prim__int___box__ $Snap.unit 26)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))) (__prim__int___box__ $Snap.unit 26))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))) (__prim__int___box__ $Snap.unit 26)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@759@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 463 | _err@759@01 != Null | live]
; [else-branch: 463 | _err@759@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 463 | _err@759@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@759@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 462 | !(_err@759@01 != Null && issubtype[Bool](typeof[PyType](_err@759@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@759@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@759@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@759@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 464 | _err@759@01 != Null | live]
; [else-branch: 464 | _err@759@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 464 | _err@759@01 != Null]
(assert (not (= _err@759@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@759@01 $Ref.null)))
(assert (=>
  (not (= _err@759@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@759@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@761@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var error_28: Ref
(declare-const error_28@762@01 $Ref)
; [exec]
; var try_finally_47: Int
(declare-const try_finally_47@763@01 Int)
; [exec]
; var out_37: Ref
(declare-const out_37@764@01 $Ref)
; [exec]
; var _cwl_187: Perm
(declare-const _cwl_187@765@01 $Perm)
; [exec]
; var _method_measures_187: Seq[Measure$]
(declare-const _method_measures_187@766@01 Seq<Measure$>)
; [exec]
; _method_measures_187 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_37 := out_17
; [exec]
; try_finally_47 := 0
; [exec]
; _cwl_187, error_28 := helper(_cthread_187, _method_measures_187, _residue_187,
;   out_37, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 22))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 22))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@767@01 $Perm)
(declare-const _err@768@01 $Ref)
(declare-const $t@769@01 $Snap)
(assert (= $t@769@01 ($Snap.combine ($Snap.first $t@769@01) ($Snap.second $t@769@01))))
(assert (= ($Snap.first $t@769@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@769@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@769@01))
    ($Snap.second ($Snap.second $t@769@01)))))
(assert (= ($Snap.first ($Snap.second $t@769@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@769@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@769@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@769@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_187@756@01 _current_wait_level_169@767@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@769@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@768@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 465 | _err@768@01 == Null | live]
; [else-branch: 465 | _err@768@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 465 | _err@768@01 == Null]
(assert (= _err@768@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 466 | _err@768@01 == Null | live]
; [else-branch: 466 | _err@768@01 != Null | live]
(push) ; 5
; [then-branch: 466 | _err@768@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 466 | _err@768@01 != Null]
(assert (not (= _err@768@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@768@01 $Ref.null)) (= _err@768@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@768@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | _err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType]) | dead]
; [else-branch: 467 | !(_err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 467 | !(_err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@768@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 468 | _err@768@01 != Null | dead]
; [else-branch: 468 | _err@768@01 == Null | live]
(push) ; 6
; [else-branch: 468 | _err@768@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_28 != null
; [then-branch: 469 | _err@768@01 != Null | dead]
; [else-branch: 469 | _err@768@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 469 | _err@768@01 == Null]
(pop) ; 5
; [eval] !(error_28 != null)
; [eval] error_28 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@768@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 470 | _err@768@01 == Null | live]
; [else-branch: 470 | _err@768@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 470 | _err@768@01 == Null]
; [exec]
; label try_finally_16
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787))
; [then-branch: 471 | False | dead]
; [else-branch: 471 | True | live]
(push) ; 6
; [else-branch: 471 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 472 | True | live]
; [else-branch: 472 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 472 | True]
; [exec]
; out_17.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_17.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_17.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_17.Container_value), 2)
; [eval] int___unbox__(out_17.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) 2))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) 2)))
(declare-const Container_value@770@01 $Ref)
(assert (=
  Container_value@770@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) 2))))
; [eval] try_finally_47 == 2
; [then-branch: 473 | False | dead]
; [else-branch: 473 | True | live]
(push) ; 7
; [else-branch: 473 | True]
(pop) ; 7
; [eval] !(try_finally_47 == 2)
; [eval] try_finally_47 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 474 | True | live]
; [else-branch: 474 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 474 | True]
; [eval] try_finally_47 == 1
; [then-branch: 475 | False | dead]
; [else-branch: 475 | True | live]
(push) ; 8
; [else-branch: 475 | True]
(pop) ; 8
; [eval] !(try_finally_47 == 1)
; [eval] try_finally_47 == 1
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | True | live]
; [else-branch: 476 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 476 | True]
; [exec]
; label post_try_28
; [exec]
; label __end
; [eval] _err == null
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | True | live]
; [else-branch: 477 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 477 | True]
; [eval] issubtype(typeof(out_17.Container_value), int())
; [eval] typeof(out_17.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@770@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@770@01) (as int<PyType>  PyType)))
; [eval] _err == null ==> int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 478 | True | live]
; [else-branch: 478 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 478 | True]
; [eval] int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@770@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@770@01 (__prim__int___box__ $Snap.unit 24))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 24)
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@770@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@770@01 (__prim__int___box__ $Snap.unit 24))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@770@01 (__prim__int___box__ $Snap.unit 24)))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 479 | False | dead]
; [else-branch: 479 | True | live]
(push) ; 10
; [else-branch: 479 | True]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 11
; [then-branch: 480 | False | dead]
; [else-branch: 480 | True | live]
(push) ; 12
; [else-branch: 480 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] (forperm _r_81: Ref [MustInvokeBounded(_r_81)] :: false)
; [eval] (forperm _r_81: Ref [MustInvokeUnbounded(_r_81)] :: false)
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseBounded] :: false)
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 465 | _err@768@01 != Null]
(assert (not (= _err@768@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@769@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 481 | _err@768@01 == Null | live]
; [else-branch: 481 | _err@768@01 != Null | live]
(push) ; 5
; [then-branch: 481 | _err@768@01 == Null]
(assert (= _err@768@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 481 | _err@768@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@768@01 $Ref.null)) (= _err@768@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@768@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | _err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType]) | live]
; [else-branch: 482 | !(_err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 482 | _err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType])]
(assert (and
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | _err@768@01 != Null | live]
; [else-branch: 483 | _err@768@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 483 | _err@768@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_28 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 484 | _err@768@01 != Null | live]
; [else-branch: 484 | _err@768@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 484 | _err@768@01 != Null]
; [exec]
; try_finally_47 := 2
; [exec]
; label try_finally_16
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787))
; [then-branch: 485 | False | dead]
; [else-branch: 485 | True | live]
(push) ; 6
; [else-branch: 485 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_17, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 486 | True | live]
; [else-branch: 486 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 486 | True]
; [exec]
; out_17.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_17.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_17.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_17.Container_value), 2)
; [eval] int___unbox__(out_17.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) 2))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) 2)))
(declare-const Container_value@771@01 $Ref)
(assert (=
  Container_value@771@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))) 2))))
; [eval] try_finally_47 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 487 | True | live]
; [else-branch: 487 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 487 | True]
; [exec]
; _err := error_28
; [exec]
; label __end
; [eval] _err == null
; [then-branch: 488 | _err@768@01 == Null | dead]
; [else-branch: 488 | _err@768@01 != Null | live]
(push) ; 8
; [else-branch: 488 | _err@768@01 != Null]
; [eval] _err == null ==> int___eq__(out_17.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 9
; [then-branch: 489 | _err@768@01 == Null | dead]
; [else-branch: 489 | _err@768@01 != Null | live]
(push) ; 10
; [else-branch: 489 | _err@768@01 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 490 | _err@768@01 == Null | live]
; [else-branch: 490 | _err@768@01 != Null | live]
(push) ; 10
; [then-branch: 490 | _err@768@01 == Null]
(assert (= _err@768@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 490 | _err@768@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@768@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | _err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType]) | live]
; [else-branch: 491 | !(_err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 491 | _err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType])]
(assert (and
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(out_17.Container_value), int())
; [eval] typeof(out_17.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@771@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@771@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_17.Container_value, __prim__int___box__(26))
; [eval] __prim__int___box__(26)
(push) ; 10
(assert (__prim__int___box__%precondition $Snap.unit 26))
(pop) ; 10
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 26))
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@771@01 (__prim__int___box__ $Snap.unit 26)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 26)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@771@01 (__prim__int___box__ $Snap.unit 26))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@771@01 (__prim__int___box__ $Snap.unit 26))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@771@01 (__prim__int___box__ $Snap.unit 26)))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | _err@768@01 != Null | live]
; [else-branch: 492 | _err@768@01 == Null | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 492 | _err@768@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 11
(pop) ; 10
; Joined path conditions
; [eval] (forperm _r_81: Ref [MustInvokeBounded(_r_81)] :: false)
; [eval] (forperm _r_81: Ref [MustInvokeUnbounded(_r_81)] :: false)
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseBounded] :: false)
; [eval] (forperm _r_81: Ref [_r_81.MustReleaseUnbounded] :: false)
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(try_finally_47 == 2)
; [eval] try_finally_47 == 2
; [then-branch: 493 | False | dead]
; [else-branch: 493 | True | live]
(push) ; 7
; [else-branch: 493 | True]
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(error_28 != null)
; [eval] error_28 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@768@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 494 | _err@768@01 == Null | dead]
; [else-branch: 494 | _err@768@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 494 | _err@768@01 != Null]
(assert (not (= _err@768@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 482 | !(_err@768@01 != Null && issubtype[Bool](typeof[PyType](_err@768@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@768@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@768@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | _err@768@01 != Null | live]
; [else-branch: 495 | _err@768@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 495 | _err@768@01 != Null]
(assert (not (= _err@768@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@768@01 $Ref.null)))
(assert (=>
  (not (= _err@768@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@768@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@769@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [eval] error_28 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@768@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | _err@768@01 != Null | dead]
; [else-branch: 496 | _err@768@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 496 | _err@768@01 == Null]
(assert (= _err@768@01 $Ref.null))
(pop) ; 5
; [eval] !(error_28 != null)
; [eval] error_28 != null
; [then-branch: 497 | _err@768@01 == Null | dead]
; [else-branch: 497 | _err@768@01 != Null | live]
(push) ; 5
; [else-branch: 497 | _err@768@01 != Null]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- finally_declared_2 ----------
(declare-const _cthread_188@772@01 $Ref)
(declare-const _caller_measures_188@773@01 Seq<Measure$>)
(declare-const _residue_188@774@01 $Perm)
(declare-const out_18@775@01 $Ref)
(declare-const _current_wait_level_188@776@01 $Perm)
(declare-const _err@777@01 $Ref)
(declare-const _cthread_188@778@01 $Ref)
(declare-const _caller_measures_188@779@01 Seq<Measure$>)
(declare-const _residue_188@780@01 $Perm)
(declare-const out_18@781@01 $Ref)
(declare-const _current_wait_level_188@782@01 $Perm)
(declare-const _err@783@01 $Ref)
(push) ; 1
(declare-const $t@784@01 $Snap)
(assert (= $t@784@01 ($Snap.combine ($Snap.first $t@784@01) ($Snap.second $t@784@01))))
(assert (= ($Snap.first $t@784@01) $Snap.unit))
; [eval] _cthread_188 != null
(assert (not (= _cthread_188@778@01 $Ref.null)))
(assert (=
  ($Snap.second $t@784@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@784@01))
    ($Snap.second ($Snap.second $t@784@01)))))
(assert (= ($Snap.first ($Snap.second $t@784@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_188), Thread_0())
; [eval] typeof(_cthread_188)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_188@778@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@784@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@784@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@784@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@784@01))) $Snap.unit))
; [eval] issubtype(typeof(out_18), Container())
; [eval] typeof(out_18)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> out_18@781@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@784@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@784@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01)))))))
(assert (not (= out_18@781@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@784@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@784@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@785@01 $Snap)
(assert (= $t@785@01 ($Snap.combine ($Snap.first $t@785@01) ($Snap.second $t@785@01))))
(assert (= ($Snap.first $t@785@01) $Snap.unit))
; [eval] (forperm _r_83: Ref [_r_83.MustReleaseBounded] :: Level(_r_83) <= _current_wait_level_188)
(assert (=
  ($Snap.second $t@785@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@785@01))
    ($Snap.second ($Snap.second $t@785@01)))))
(assert (= ($Snap.first ($Snap.second $t@785@01)) $Snap.unit))
; [eval] (forperm _r_83: Ref [_r_83.MustReleaseUnbounded] :: Level(_r_83) <= _current_wait_level_188)
(assert (=
  ($Snap.second ($Snap.second $t@785@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@785@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@785@01))) $Snap.unit))
; [eval] _residue_188 <= _current_wait_level_188
(assert (<= _residue_188@780@01 _current_wait_level_188@782@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@785@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@783@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@783@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | _err@783@01 == Null | live]
; [else-branch: 498 | _err@783@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 498 | _err@783@01 == Null]
(assert (= _err@783@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@783@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | _err@783@01 == Null | live]
; [else-branch: 499 | _err@783@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 499 | _err@783@01 == Null]
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 6
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 6
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))) (__prim__int___box__ $Snap.unit 24)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))) (__prim__int___box__ $Snap.unit 24))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (= _err@783@01 $Ref.null)
  (and
    (__prim__int___box__%precondition $Snap.unit 24)
    (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
    (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))) (__prim__int___box__ $Snap.unit 24)))))
(assert (=>
  (= _err@783@01 $Ref.null)
  (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))) (__prim__int___box__ $Snap.unit 24))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 500 | _err@783@01 == Null | live]
; [else-branch: 500 | _err@783@01 != Null | live]
(push) ; 5
; [then-branch: 500 | _err@783@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 500 | _err@783@01 != Null]
(assert (not (= _err@783@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@783@01 $Ref.null)) (= _err@783@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@783@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | _err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType]) | dead]
; [else-branch: 501 | !(_err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 501 | !(_err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@783@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 502 | _err@783@01 != Null | dead]
; [else-branch: 502 | _err@783@01 == Null | live]
(push) ; 6
; [else-branch: 502 | _err@783@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 498 | _err@783@01 != Null]
(assert (not (= _err@783@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  $Snap.unit))
; [eval] _err == null ==> int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 4
; [then-branch: 503 | _err@783@01 == Null | dead]
; [else-branch: 503 | _err@783@01 != Null | live]
(push) ; 5
; [else-branch: 503 | _err@783@01 != Null]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 504 | _err@783@01 == Null | live]
; [else-branch: 504 | _err@783@01 != Null | live]
(push) ; 5
; [then-branch: 504 | _err@783@01 == Null]
(assert (= _err@783@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 504 | _err@783@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@783@01 $Ref.null)) (= _err@783@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@783@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@783@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 505 | _err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType]) | live]
; [else-branch: 505 | !(_err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 505 | _err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType])]
(assert (and
  (not (= _err@783@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
  $Snap.unit))
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@783@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | _err@783@01 != Null | live]
; [else-branch: 506 | _err@783@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 506 | _err@783@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@783@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 505 | !(_err@783@01 != Null && issubtype[Bool](typeof[PyType](_err@783@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@783@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@783@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@783@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 507 | _err@783@01 != Null | live]
; [else-branch: 507 | _err@783@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 507 | _err@783@01 != Null]
(assert (not (= _err@783@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@783@01 $Ref.null)))
(assert (=>
  (not (= _err@783@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@783@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var error_29: Ref
(declare-const error_29@786@01 $Ref)
; [exec]
; var try_finally_48: Int
(declare-const try_finally_48@787@01 Int)
; [exec]
; var out_38: Ref
(declare-const out_38@788@01 $Ref)
; [exec]
; var _cwl_188: Perm
(declare-const _cwl_188@789@01 $Perm)
; [exec]
; var _method_measures_188: Seq[Measure$]
(declare-const _method_measures_188@790@01 Seq<Measure$>)
; [exec]
; _method_measures_188 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; out_38 := out_18
; [exec]
; try_finally_48 := 0
; [exec]
; _cwl_188, error_29 := helper(_cthread_188, _method_measures_188, _residue_188,
;   out_38, __prim__int___box__(22))
; [eval] __prim__int___box__(22)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 22))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 22))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 22)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@791@01 $Perm)
(declare-const _err@792@01 $Ref)
(declare-const $t@793@01 $Snap)
(assert (= $t@793@01 ($Snap.combine ($Snap.first $t@793@01) ($Snap.second $t@793@01))))
(assert (= ($Snap.first $t@793@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@793@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@793@01))
    ($Snap.second ($Snap.second $t@793@01)))))
(assert (= ($Snap.first ($Snap.second $t@793@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@793@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@793@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@793@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_188@780@01 _current_wait_level_169@791@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@793@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@792@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@792@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 508 | _err@792@01 == Null | live]
; [else-branch: 508 | _err@792@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 508 | _err@792@01 == Null]
(assert (= _err@792@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 509 | _err@792@01 == Null | live]
; [else-branch: 509 | _err@792@01 != Null | live]
(push) ; 5
; [then-branch: 509 | _err@792@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 509 | _err@792@01 != Null]
(assert (not (= _err@792@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@792@01 $Ref.null)) (= _err@792@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@792@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType]) | dead]
; [else-branch: 510 | !(_err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 510 | !(_err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@792@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 511 | _err@792@01 != Null | dead]
; [else-branch: 511 | _err@792@01 == Null | live]
(push) ; 6
; [else-branch: 511 | _err@792@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_29 != null
; [then-branch: 512 | _err@792@01 != Null | dead]
; [else-branch: 512 | _err@792@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 512 | _err@792@01 == Null]
(pop) ; 5
; [eval] !(error_29 != null)
; [eval] error_29 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@792@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 513 | _err@792@01 == Null | live]
; [else-branch: 513 | _err@792@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 513 | _err@792@01 == Null]
; [exec]
; label try_finally_17
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787))
; [then-branch: 514 | False | dead]
; [else-branch: 514 | True | live]
(push) ; 6
; [else-branch: 514 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | True | live]
; [else-branch: 515 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 515 | True]
; [exec]
; out_18.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_18.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_18.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_18.Container_value), 2)
; [eval] int___unbox__(out_18.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) 2))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) 2)))
(declare-const Container_value@794@01 $Ref)
(assert (=
  Container_value@794@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) 2))))
; [eval] try_finally_48 == 2
; [then-branch: 516 | False | dead]
; [else-branch: 516 | True | live]
(push) ; 7
; [else-branch: 516 | True]
(pop) ; 7
; [eval] !(try_finally_48 == 2)
; [eval] try_finally_48 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | True | live]
; [else-branch: 517 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 517 | True]
; [eval] try_finally_48 == 1
; [then-branch: 518 | False | dead]
; [else-branch: 518 | True | live]
(push) ; 8
; [else-branch: 518 | True]
(pop) ; 8
; [eval] !(try_finally_48 == 1)
; [eval] try_finally_48 == 1
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | True | live]
; [else-branch: 519 | False | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 519 | True]
; [exec]
; label post_try_29
; [exec]
; label __end
; [eval] _err == null
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | True | live]
; [else-branch: 520 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 520 | True]
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@794@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@794@01) (as int<PyType>  PyType)))
; [eval] _err == null ==> int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 521 | True | live]
; [else-branch: 521 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 521 | True]
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] __prim__int___box__(24)
(push) ; 12
(assert (__prim__int___box__%precondition $Snap.unit 24))
(pop) ; 12
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 24))
(push) ; 12
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 13
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@794@01 (__prim__int___box__ $Snap.unit 24)))
(pop) ; 12
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@794@01 (__prim__int___box__ $Snap.unit 24))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (and
  (__prim__int___box__%precondition $Snap.unit 24)
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 24)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@794@01 (__prim__int___box__ $Snap.unit 24))))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@794@01 (__prim__int___box__ $Snap.unit 24))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@794@01 (__prim__int___box__ $Snap.unit 24)))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
; [then-branch: 522 | False | dead]
; [else-branch: 522 | True | live]
(push) ; 10
; [else-branch: 522 | True]
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 11
; [then-branch: 523 | False | dead]
; [else-branch: 523 | True | live]
(push) ; 12
; [else-branch: 523 | True]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] (forperm _r_84: Ref [MustInvokeBounded(_r_84)] :: false)
; [eval] (forperm _r_84: Ref [MustInvokeUnbounded(_r_84)] :: false)
; [eval] (forperm _r_84: Ref [_r_84.MustReleaseBounded] :: false)
; [eval] (forperm _r_84: Ref [_r_84.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 508 | _err@792@01 != Null]
(assert (not (= _err@792@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@793@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 524 | _err@792@01 == Null | live]
; [else-branch: 524 | _err@792@01 != Null | live]
(push) ; 5
; [then-branch: 524 | _err@792@01 == Null]
(assert (= _err@792@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 524 | _err@792@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@792@01 $Ref.null)) (= _err@792@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@792@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType]) | live]
; [else-branch: 525 | !(_err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 525 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])]
(assert (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@792@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | _err@792@01 != Null | live]
; [else-branch: 526 | _err@792@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 526 | _err@792@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_29 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@792@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | _err@792@01 != Null | live]
; [else-branch: 527 | _err@792@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 527 | _err@792@01 != Null]
; [exec]
; try_finally_48 := 2
; [exec]
; label try_finally_17
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787))
; [then-branch: 528 | False | dead]
; [else-branch: 528 | True | live]
(push) ; 6
; [else-branch: 528 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(out_18, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | True | live]
; [else-branch: 529 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 529 | True]
; [exec]
; out_18.Container_value := __prim__int___box__(int___mul__(int___unbox__(out_18.Container_value),
;   2))
; [eval] __prim__int___box__(int___mul__(int___unbox__(out_18.Container_value), 2))
; [eval] int___mul__(int___unbox__(out_18.Container_value), 2)
; [eval] int___unbox__(out_18.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))))
(push) ; 7
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) 2))
(pop) ; 7
; Joined path conditions
(assert (int___mul__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) 2))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) 2)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) 2)))
(declare-const Container_value@795@01 $Ref)
(assert (=
  Container_value@795@01
  (__prim__int___box__ $Snap.unit (int___mul__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@793@01)))))))) 2))))
; [eval] try_finally_48 == 2
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | True | live]
; [else-branch: 530 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 530 | True]
; [exec]
; _err := error_29
; [exec]
; label __end
; [eval] _err == null
; [then-branch: 531 | _err@792@01 == Null | dead]
; [else-branch: 531 | _err@792@01 != Null | live]
(push) ; 8
; [else-branch: 531 | _err@792@01 != Null]
; [eval] _err == null ==> int___eq__(out_18.Container_value, __prim__int___box__(24))
; [eval] _err == null
(push) ; 9
; [then-branch: 532 | _err@792@01 == Null | dead]
; [else-branch: 532 | _err@792@01 != Null | live]
(push) ; 10
; [else-branch: 532 | _err@792@01 != Null]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 9
; [then-branch: 533 | _err@792@01 == Null | live]
; [else-branch: 533 | _err@792@01 != Null | live]
(push) ; 10
; [then-branch: 533 | _err@792@01 == Null]
(assert (= _err@792@01 $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 533 | _err@792@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@792@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType]) | live]
; [else-branch: 534 | !(_err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 534 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])]
(assert (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@795@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@795@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 10
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13)))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(set-option :timeout 0)
(push) ; 9
; [then-branch: 535 | _err@792@01 == Null | live]
; [else-branch: 535 | _err@792@01 != Null | live]
(push) ; 10
; [then-branch: 535 | _err@792@01 == Null]
(assert (= _err@792@01 $Ref.null))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 535 | _err@792@01 != Null]
(assert (not (= _err@792@01 $Ref.null)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@792@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 536 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType]) | live]
; [else-branch: 536 | !(_err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 536 | _err@792@01 != Null && issubtype[Bool](typeof[PyType](_err@792@01), MyException[PyType])]
(assert (and
  (not (= _err@792@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@792@01) (as MyException<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(out_18.Container_value), int())
; [eval] typeof(out_18.Container_value)
; [eval] int()
(set-option :timeout 0)
(push) ; 10
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@795@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@795@01) (as int<PyType>  PyType)))
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 10
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13)))
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(out_18.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 10
; Joined path conditions
(push) ; 10
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@795@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- class_client ----------
(declare-const _cthread_189@796@01 $Ref)
(declare-const _caller_measures_189@797@01 Seq<Measure$>)
(declare-const _residue_189@798@01 $Perm)
(declare-const _current_wait_level_189@799@01 $Perm)
(declare-const _res@800@01 $Ref)
(declare-const _cthread_189@801@01 $Ref)
(declare-const _caller_measures_189@802@01 Seq<Measure$>)
(declare-const _residue_189@803@01 $Perm)
(declare-const _current_wait_level_189@804@01 $Perm)
(declare-const _res@805@01 $Ref)
(push) ; 1
(declare-const $t@806@01 $Snap)
(assert (= $t@806@01 ($Snap.combine ($Snap.first $t@806@01) ($Snap.second $t@806@01))))
(assert (= ($Snap.first $t@806@01) $Snap.unit))
; [eval] _cthread_189 != null
(assert (not (= _cthread_189@801@01 $Ref.null)))
(assert (=
  ($Snap.second $t@806@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@806@01))
    ($Snap.second ($Snap.second $t@806@01)))))
(assert (= ($Snap.first ($Snap.second $t@806@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_189), Thread_0())
; [eval] typeof(_cthread_189)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_189@801@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@806@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 ($Snap.combine ($Snap.first $t@807@01) ($Snap.second $t@807@01))))
(assert (= ($Snap.first $t@807@01) $Snap.unit))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseBounded] :: Level(_r_86) <= _current_wait_level_189)
(assert (=
  ($Snap.second $t@807@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@807@01))
    ($Snap.second ($Snap.second $t@807@01)))))
(assert (= ($Snap.first ($Snap.second $t@807@01)) $Snap.unit))
; [eval] (forperm _r_86: Ref [_r_86.MustReleaseUnbounded] :: Level(_r_86) <= _current_wait_level_189)
(assert (=
  ($Snap.second ($Snap.second $t@807@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@807@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@807@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@807@01))) $Snap.unit))
; [eval] _residue_189 <= _current_wait_level_189
(assert (<= _residue_189@803@01 _current_wait_level_189@804@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@807@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@807@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@807@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), ExceptionClass())
; [eval] typeof(_res)
; [eval] ExceptionClass()
(assert (issubtype<Bool> (typeof<PyType> _res@805@01) (as ExceptionClass<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01)))))
  $Snap.unit))
; [eval] _res != null
(assert (not (= _res@805@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@807@01)))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@808@01 $Ref)
; [exec]
; var res_2: Ref
(declare-const res_2@809@01 $Ref)
; [exec]
; var error_30: Ref
(declare-const error_30@810@01 $Ref)
; [exec]
; var try_finally_49: Int
(declare-const try_finally_49@811@01 Int)
; [exec]
; var ExceptionClass_res: Ref
(declare-const ExceptionClass_res@812@01 $Ref)
; [exec]
; var _cwl_189: Perm
(declare-const _cwl_189@813@01 $Perm)
; [exec]
; var _method_measures_189: Seq[Measure$]
(declare-const _method_measures_189@814@01 Seq<Measure$>)
; [exec]
; _method_measures_189 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; try_finally_49 := 0
; [exec]
; ExceptionClass_res := new()
(declare-const ExceptionClass_res@815@01 $Ref)
(assert (not (= ExceptionClass_res@815@01 $Ref.null)))
(assert (not (= ExceptionClass_res@815@01 res_2@809@01)))
(assert (not (= ExceptionClass_res@815@01 error_30@810@01)))
(assert (not (= ExceptionClass_res@815@01 ExceptionClass_res@812@01)))
(assert (not (= ExceptionClass_res@815@01 _cthread_189@801@01)))
; [exec]
; inhale typeof(ExceptionClass_res) == ExceptionClass()
(declare-const $t@816@01 $Snap)
(assert (= $t@816@01 $Snap.unit))
; [eval] typeof(ExceptionClass_res) == ExceptionClass()
; [eval] typeof(ExceptionClass_res)
; [eval] ExceptionClass()
(assert (=
  (typeof<PyType> ExceptionClass_res@815@01)
  (as ExceptionClass<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(ExceptionClass_res, 37572863051066860695310152591922694220779138314369093), write)
(declare-const $t@817@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_189, error_30 := ExceptionClass___init__(_cthread_189, _method_measures_189,
;   _residue_189, ExceptionClass_res, __prim__bool___box__(false))
; [eval] __prim__bool___box__(false)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 3
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
; [eval] _cthread_159 != null
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
; [eval] self_2 != null
; [eval] issubtype(typeof(self_2), ExceptionClass())
; [eval] typeof(self_2)
; [eval] ExceptionClass()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> ExceptionClass_res@815@01) (as ExceptionClass<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ExceptionClass_res@815@01) (as ExceptionClass<PyType>  PyType)))
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__bool___box__ $Snap.unit false)) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__bool___box__ $Snap.unit false)) (as bool<PyType>  PyType)))
; [eval] self_2 != null
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
; [eval] (forperm _r_121: Ref [MustInvokeBounded(_r_121)] :: false)
; [eval] (forperm _r_121: Ref [MustInvokeUnbounded(_r_121)] :: false)
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseBounded] :: false)
; [eval] (forperm _r_121: Ref [_r_121.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_159@818@01 $Perm)
(declare-const _err@819@01 $Ref)
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 ($Snap.combine ($Snap.first $t@820@01) ($Snap.second $t@820@01))))
(assert (= ($Snap.first $t@820@01) $Snap.unit))
; [eval] (forperm _r_119: Ref [_r_119.MustReleaseBounded] :: Level(_r_119) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@820@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@820@01))
    ($Snap.second ($Snap.second $t@820@01)))))
(assert (= ($Snap.first ($Snap.second $t@820@01)) $Snap.unit))
; [eval] (forperm _r_119: Ref [_r_119.MustReleaseUnbounded] :: Level(_r_119) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@820@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@820@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@820@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_189@803@01 _current_wait_level_159@818@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@820@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@819@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@819@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 537 | _err@819@01 == Null | live]
; [else-branch: 537 | _err@819@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 537 | _err@819@01 == Null]
(assert (= _err@819@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))) (__prim__int___box__ $Snap.unit 4)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))) (__prim__int___box__ $Snap.unit 4))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))) (__prim__int___box__ $Snap.unit 4)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 538 | _err@819@01 == Null | live]
; [else-branch: 538 | _err@819@01 != Null | live]
(push) ; 5
; [then-branch: 538 | _err@819@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 538 | _err@819@01 != Null]
(assert (not (= _err@819@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@819@01 $Ref.null)) (= _err@819@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@819@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 539 | _err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType]) | dead]
; [else-branch: 539 | !(_err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 539 | !(_err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@819@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 5
; [then-branch: 540 | _err@819@01 != Null | dead]
; [else-branch: 540 | _err@819@01 == Null | live]
(push) ; 6
; [else-branch: 540 | _err@819@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_30 != null
; [then-branch: 541 | _err@819@01 != Null | dead]
; [else-branch: 541 | _err@819@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 541 | _err@819@01 == Null]
(pop) ; 5
; [eval] !(error_30 != null)
; [eval] error_30 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@819@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | _err@819@01 == Null | live]
; [else-branch: 542 | _err@819@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 542 | _err@819@01 == Null]
; [exec]
; res_2 := ExceptionClass_res
; [exec]
; inhale _isDefined(216349762930)
(declare-const $t@821@01 $Snap)
(assert (= $t@821@01 $Snap.unit))
; [eval] _isDefined(216349762930)
(push) ; 6
(assert (_isDefined%precondition $Snap.unit 216349762930))
(pop) ; 6
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 216349762930))
(assert (_isDefined $Snap.unit 216349762930))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label post_try_30
; [exec]
; _res := _checkDefined(res_2, 216349762930)
; [eval] _checkDefined(res_2, 216349762930)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ExceptionClass_res@815@01 216349762930))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit ExceptionClass_res@815@01 216349762930))
(declare-const _res@822@01 $Ref)
(assert (= _res@822@01 (_checkDefined $Snap.unit ExceptionClass_res@815@01 216349762930)))
; [exec]
; label __end
; [eval] issubtype(typeof(_res), ExceptionClass())
; [eval] typeof(_res)
; [eval] ExceptionClass()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> _res@822@01) (as ExceptionClass<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> _res@822@01) (as ExceptionClass<PyType>  PyType)))
; [eval] _res != null
(push) ; 6
(assert (not (not (= _res@822@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@822@01 $Ref.null)))
; [eval] (forperm _r_87: Ref [MustInvokeBounded(_r_87)] :: false)
; [eval] (forperm _r_87: Ref [MustInvokeUnbounded(_r_87)] :: false)
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseBounded] :: false)
; [eval] (forperm _r_87: Ref [_r_87.MustReleaseUnbounded] :: false)
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 537 | _err@819@01 != Null]
(assert (not (= _err@819@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@820@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 543 | _err@819@01 == Null | live]
; [else-branch: 543 | _err@819@01 != Null | live]
(push) ; 5
; [then-branch: 543 | _err@819@01 == Null]
(assert (= _err@819@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 543 | _err@819@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@819@01 $Ref.null)) (= _err@819@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@819@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@819@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 544 | _err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType]) | live]
; [else-branch: 544 | !(_err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 544 | _err@819@01 != Null && issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])]
(assert (and
  (not (= _err@819@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))
  $Snap.unit))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@819@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | _err@819@01 != Null | live]
; [else-branch: 545 | _err@819@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 545 | _err@819@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@819@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@820@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_30 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@819@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | _err@819@01 != Null | live]
; [else-branch: 546 | _err@819@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 546 | _err@819@01 != Null]
; [eval] !issubtype(typeof(error_30), MyOtherException())
; [eval] issubtype(typeof(error_30), MyOtherException())
; [eval] typeof(error_30)
; [eval] MyOtherException()
; [then-branch: 547 | !(issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])) | dead]
; [else-branch: 547 | issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType]) | live]
(push) ; 6
; [else-branch: 547 | issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])]
(pop) ; 6
; [eval] issubtype(typeof(error_30), MyOtherException())
; [eval] typeof(error_30)
; [eval] MyOtherException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> _err@819@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 548 | issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType]) | live]
; [else-branch: 548 | !(issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 548 | issubtype[Bool](typeof[PyType](_err@819@01), MyOtherException[PyType])]
; [exec]
; label handlerMyOtherException_5
; [exec]
; label post_try_30
; [exec]
; _res := _checkDefined(res_2, 216349762930)
; [eval] _checkDefined(res_2, 216349762930)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(assert (_isDefined%precondition $Snap.unit 216349762930))
(pop) ; 8
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 216349762930))
(push) ; 8
(assert (not (_isDefined $Snap.unit 216349762930)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _isDefined(id)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (_isDefined $Snap.unit 216349762930)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _isDefined(id)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (_isDefined $Snap.unit 216349762930)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] _isDefined(id)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (_isDefined $Snap.unit 216349762930)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- join_paths ----------
(declare-const _cthread_190@823@01 $Ref)
(declare-const _caller_measures_190@824@01 Seq<Measure$>)
(declare-const _residue_190@825@01 $Perm)
(declare-const c@826@01 $Ref)
(declare-const _current_wait_level_190@827@01 $Perm)
(declare-const _res@828@01 $Ref)
(declare-const _cthread_190@829@01 $Ref)
(declare-const _caller_measures_190@830@01 Seq<Measure$>)
(declare-const _residue_190@831@01 $Perm)
(declare-const c@832@01 $Ref)
(declare-const _current_wait_level_190@833@01 $Perm)
(declare-const _res@834@01 $Ref)
(push) ; 1
(declare-const $t@835@01 $Snap)
(assert (= $t@835@01 ($Snap.combine ($Snap.first $t@835@01) ($Snap.second $t@835@01))))
(assert (= ($Snap.first $t@835@01) $Snap.unit))
; [eval] _cthread_190 != null
(assert (not (= _cthread_190@829@01 $Ref.null)))
(assert (=
  ($Snap.second $t@835@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@835@01))
    ($Snap.second ($Snap.second $t@835@01)))))
(assert (= ($Snap.first ($Snap.second $t@835@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_190), Thread_0())
; [eval] typeof(_cthread_190)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_190@829@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@835@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@835@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@835@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@835@01))) $Snap.unit))
; [eval] issubtype(typeof(c), Container())
; [eval] typeof(c)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> c@832@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@835@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@835@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01)))))))
(assert (not (= c@832@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@835@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@835@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 ($Snap.combine ($Snap.first $t@836@01) ($Snap.second $t@836@01))))
(assert (= ($Snap.first $t@836@01) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseBounded] :: Level(_r_89) <= _current_wait_level_190)
(assert (=
  ($Snap.second $t@836@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@836@01))
    ($Snap.second ($Snap.second $t@836@01)))))
(assert (= ($Snap.first ($Snap.second $t@836@01)) $Snap.unit))
; [eval] (forperm _r_89: Ref [_r_89.MustReleaseUnbounded] :: Level(_r_89) <= _current_wait_level_190)
(assert (=
  ($Snap.second ($Snap.second $t@836@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@836@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@836@01))) $Snap.unit))
; [eval] _residue_190 <= _current_wait_level_190
(assert (<= _residue_190@831@01 _current_wait_level_190@833@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@836@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@836@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@836@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> _res@834@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))))
  $Snap.unit))
; [eval] int___eq__(c.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@836@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@837@01 $Ref)
; [exec]
; var error_31: Ref
(declare-const error_31@838@01 $Ref)
; [exec]
; var try_finally_50: Int
(declare-const try_finally_50@839@01 Int)
; [exec]
; var c_5: Ref
(declare-const c_5@840@01 $Ref)
; [exec]
; var _cwl_190: Perm
(declare-const _cwl_190@841@01 $Perm)
; [exec]
; var _method_measures_190: Seq[Measure$]
(declare-const _method_measures_190@842@01 Seq<Measure$>)
; [exec]
; _method_measures_190 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; c_5 := c
; [exec]
; try_finally_50 := 0
; [exec]
; _cwl_190, error_31 := helper(_cthread_190, _method_measures_190, _residue_190,
;   c_5, __prim__int___box__(45))
; [eval] __prim__int___box__(45)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 45))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 45))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@843@01 $Perm)
(declare-const _err@844@01 $Ref)
(declare-const $t@845@01 $Snap)
(assert (= $t@845@01 ($Snap.combine ($Snap.first $t@845@01) ($Snap.second $t@845@01))))
(assert (= ($Snap.first $t@845@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@845@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@845@01))
    ($Snap.second ($Snap.second $t@845@01)))))
(assert (= ($Snap.first ($Snap.second $t@845@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@845@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@845@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@845@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_190@831@01 _current_wait_level_169@843@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@845@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@844@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@844@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 549 | _err@844@01 == Null | live]
; [else-branch: 549 | _err@844@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 549 | _err@844@01 == Null]
(assert (= _err@844@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 550 | _err@844@01 == Null | live]
; [else-branch: 550 | _err@844@01 != Null | live]
(push) ; 5
; [then-branch: 550 | _err@844@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 550 | _err@844@01 != Null]
(assert (not (= _err@844@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@844@01 $Ref.null)) (= _err@844@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@844@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 551 | _err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]) | dead]
; [else-branch: 551 | !(_err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 551 | !(_err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@844@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 552 | _err@844@01 != Null | dead]
; [else-branch: 552 | _err@844@01 == Null | live]
(push) ; 6
; [else-branch: 552 | _err@844@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_31 != null
; [then-branch: 553 | _err@844@01 != Null | dead]
; [else-branch: 553 | _err@844@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 553 | _err@844@01 == Null]
(pop) ; 5
; [eval] !(error_31 != null)
; [eval] error_31 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@844@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 554 | _err@844@01 == Null | live]
; [else-branch: 554 | _err@844@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 554 | _err@844@01 == Null]
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
; [then-branch: 555 | False | dead]
; [else-branch: 555 | True | live]
(push) ; 6
; [else-branch: 555 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_5, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 556 | True | live]
; [else-branch: 556 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 556 | True]
; [exec]
; c_5.Container_value := __prim__int___box__(int___add__(int___unbox__(c_5.Container_value),
;   1))
; [eval] __prim__int___box__(int___add__(int___unbox__(c_5.Container_value), 1))
; [eval] int___add__(int___unbox__(c_5.Container_value), 1)
; [eval] int___unbox__(c_5.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))
(push) ; 7
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) 1))
(pop) ; 7
; Joined path conditions
(assert (int___add__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) 1))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) 1)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) 1)))
(declare-const Container_value@846@01 $Ref)
(assert (=
  Container_value@846@01
  (__prim__int___box__ $Snap.unit (int___add__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) 1))))
; [exec]
; label post_try_31
; [exec]
; _res := c_5
; [exec]
; label __end
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@846@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@846@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@846@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@846@01 (__prim__int___box__ $Snap.unit 13))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@846@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@846@01 (__prim__int___box__ $Snap.unit 13)))
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 549 | _err@844@01 != Null]
(assert (not (= _err@844@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@845@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 557 | _err@844@01 == Null | live]
; [else-branch: 557 | _err@844@01 != Null | live]
(push) ; 5
; [then-branch: 557 | _err@844@01 == Null]
(assert (= _err@844@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 557 | _err@844@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@844@01 $Ref.null)) (= _err@844@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@844@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@844@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 558 | _err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]) | live]
; [else-branch: 558 | !(_err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 558 | _err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])]
(assert (and
  (not (= _err@844@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@844@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 559 | _err@844@01 != Null | live]
; [else-branch: 559 | _err@844@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 559 | _err@844@01 != Null]
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@844@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_31 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@844@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 560 | _err@844@01 != Null | live]
; [else-branch: 560 | _err@844@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 560 | _err@844@01 != Null]
; [eval] !issubtype(typeof(error_31), MyException())
; [eval] issubtype(typeof(error_31), MyException())
; [eval] typeof(error_31)
; [eval] MyException()
; [then-branch: 561 | !(issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])) | dead]
; [else-branch: 561 | issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]) | live]
(push) ; 6
; [else-branch: 561 | issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])]
(pop) ; 6
; [eval] issubtype(typeof(error_31), MyException())
; [eval] typeof(error_31)
; [eval] MyException()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 562 | issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]) | live]
; [else-branch: 562 | !(issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 562 | issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType])]
; [exec]
; label handlerMyException_16
; [exec]
; label post_try_31
; [exec]
; _res := c_5
; [exec]
; label __end
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
; [eval] issubtype(typeof(c.Container_value), int())
; [eval] typeof(c.Container_value)
; [eval] int()
; [eval] int___eq__(c.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
; [eval] (forperm _r_90: Ref [MustInvokeBounded(_r_90)] :: false)
; [eval] (forperm _r_90: Ref [MustInvokeUnbounded(_r_90)] :: false)
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseBounded] :: false)
; [eval] (forperm _r_90: Ref [_r_90.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
; [eval] !(error_31 != null)
; [eval] error_31 != null
; [then-branch: 563 | _err@844@01 == Null | dead]
; [else-branch: 563 | _err@844@01 != Null | live]
(push) ; 5
; [else-branch: 563 | _err@844@01 != Null]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 558 | !(_err@844@01 != Null && issubtype[Bool](typeof[PyType](_err@844@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@844@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@844@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@844@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 564 | _err@844@01 != Null | live]
; [else-branch: 564 | _err@844@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 564 | _err@844@01 != Null]
(assert (not (= _err@844@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@844@01 $Ref.null)))
(assert (=>
  (not (= _err@844@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@844@01) (as MyException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@845@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [eval] error_31 != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= _err@844@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 565 | _err@844@01 != Null | dead]
; [else-branch: 565 | _err@844@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 565 | _err@844@01 == Null]
(assert (= _err@844@01 $Ref.null))
(pop) ; 5
; [eval] !(error_31 != null)
; [eval] error_31 != null
; [then-branch: 566 | _err@844@01 == Null | dead]
; [else-branch: 566 | _err@844@01 != Null | live]
(push) ; 5
; [else-branch: 566 | _err@844@01 != Null]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- join_paths_2 ----------
(declare-const _cthread_191@847@01 $Ref)
(declare-const _caller_measures_191@848@01 Seq<Measure$>)
(declare-const _residue_191@849@01 $Perm)
(declare-const c_0@850@01 $Ref)
(declare-const _current_wait_level_191@851@01 $Perm)
(declare-const _res@852@01 $Ref)
(declare-const _cthread_191@853@01 $Ref)
(declare-const _caller_measures_191@854@01 Seq<Measure$>)
(declare-const _residue_191@855@01 $Perm)
(declare-const c_0@856@01 $Ref)
(declare-const _current_wait_level_191@857@01 $Perm)
(declare-const _res@858@01 $Ref)
(push) ; 1
(declare-const $t@859@01 $Snap)
(assert (= $t@859@01 ($Snap.combine ($Snap.first $t@859@01) ($Snap.second $t@859@01))))
(assert (= ($Snap.first $t@859@01) $Snap.unit))
; [eval] _cthread_191 != null
(assert (not (= _cthread_191@853@01 $Ref.null)))
(assert (=
  ($Snap.second $t@859@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@859@01))
    ($Snap.second ($Snap.second $t@859@01)))))
(assert (= ($Snap.first ($Snap.second $t@859@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_191), Thread_0())
; [eval] typeof(_cthread_191)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_191@853@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@859@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@859@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@859@01))) $Snap.unit))
; [eval] issubtype(typeof(c_0), Container())
; [eval] typeof(c_0)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> c_0@856@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@859@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))))
(assert (not (= c_0@856@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@859@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@860@01 $Snap)
(assert (= $t@860@01 ($Snap.combine ($Snap.first $t@860@01) ($Snap.second $t@860@01))))
(assert (= ($Snap.first $t@860@01) $Snap.unit))
; [eval] (forperm _r_92: Ref [_r_92.MustReleaseBounded] :: Level(_r_92) <= _current_wait_level_191)
(assert (=
  ($Snap.second $t@860@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@860@01))
    ($Snap.second ($Snap.second $t@860@01)))))
(assert (= ($Snap.first ($Snap.second $t@860@01)) $Snap.unit))
; [eval] (forperm _r_92: Ref [_r_92.MustReleaseUnbounded] :: Level(_r_92) <= _current_wait_level_191)
(assert (=
  ($Snap.second ($Snap.second $t@860@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@860@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@860@01))) $Snap.unit))
; [eval] _residue_191 <= _current_wait_level_191
(assert (<= _residue_191@855@01 _current_wait_level_191@857@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@860@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@860@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@860@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> _res@858@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))) (__prim__int___box__ $Snap.unit 13)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))) (__prim__int___box__ $Snap.unit 13))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))) (__prim__int___box__ $Snap.unit 13)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@860@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@861@01 $Ref)
; [exec]
; var error_32: Ref
(declare-const error_32@862@01 $Ref)
; [exec]
; var try_finally_51: Int
(declare-const try_finally_51@863@01 Int)
; [exec]
; var c_6: Ref
(declare-const c_6@864@01 $Ref)
; [exec]
; var _cwl_191: Perm
(declare-const _cwl_191@865@01 $Perm)
; [exec]
; var _method_measures_191: Seq[Measure$]
(declare-const _method_measures_191@866@01 Seq<Measure$>)
; [exec]
; _method_measures_191 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; c_6 := c_0
; [exec]
; try_finally_51 := 0
; [exec]
; _cwl_191, error_32 := helper(_cthread_191, _method_measures_191, _residue_191,
;   c_6, __prim__int___box__(45))
; [eval] __prim__int___box__(45)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 45))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 45))
; [eval] _cthread_169 != null
; [eval] issubtype(typeof(_cthread_169), Thread_0())
; [eval] typeof(_cthread_169)
; [eval] Thread_0()
; [eval] issubtype(typeof(out), Container())
; [eval] typeof(out)
; [eval] Container()
; [eval] issubtype(typeof(i), int())
; [eval] typeof(i)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 45)) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_169)) == none
; [eval] perm(MustTerminate(_cthread_169))
; [eval] (forperm _r_28: Ref [MustInvokeBounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [MustInvokeUnbounded(_r_28)] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseBounded] :: false)
; [eval] (forperm _r_28: Ref [_r_28.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_169@867@01 $Perm)
(declare-const _err@868@01 $Ref)
(declare-const $t@869@01 $Snap)
(assert (= $t@869@01 ($Snap.combine ($Snap.first $t@869@01) ($Snap.second $t@869@01))))
(assert (= ($Snap.first $t@869@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second $t@869@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@869@01))
    ($Snap.second ($Snap.second $t@869@01)))))
(assert (= ($Snap.first ($Snap.second $t@869@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_169)
(assert (=
  ($Snap.second ($Snap.second $t@869@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@869@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@869@01))) $Snap.unit))
; [eval] _residue_169 <= _current_wait_level_169
(assert (<= _residue_191@855@01 _current_wait_level_169@867@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@869@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@868@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@868@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 567 | _err@868@01 == Null | live]
; [else-branch: 567 | _err@868@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 567 | _err@868@01 == Null]
(assert (= _err@868@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(out.Container_value), int())
; [eval] typeof(out.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
  $Snap.unit))
; [eval] int___eq__(out.Container_value, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 4
; [then-branch: 568 | _err@868@01 == Null | live]
; [else-branch: 568 | _err@868@01 != Null | live]
(push) ; 5
; [then-branch: 568 | _err@868@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 568 | _err@868@01 != Null]
(assert (not (= _err@868@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyException())
; [eval] typeof(_err)
; [eval] MyException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@868@01 $Ref.null)) (= _err@868@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@868@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@868@01) (as MyException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | _err@868@01 != Null && issubtype[Bool](typeof[PyType](_err@868@01), MyException[PyType]) | dead]
; [else-branch: 569 | !(_err@868@01 != Null && issubtype[Bool](typeof[PyType](_err@868@01), MyException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 569 | !(_err@868@01 != Null && issubtype[Bool](typeof[PyType](_err@868@01), MyException[PyType]))]
(assert (not
  (and
    (not (= _err@868@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@868@01) (as MyException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyException())
; [eval] _err != null
(push) ; 5
; [then-branch: 570 | _err@868@01 != Null | dead]
; [else-branch: 570 | _err@868@01 == Null | live]
(push) ; 6
; [else-branch: 570 | _err@868@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] error_32 != null
; [then-branch: 571 | _err@868@01 != Null | dead]
; [else-branch: 571 | _err@868@01 == Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 571 | _err@868@01 == Null]
(pop) ; 5
; [eval] !(error_32 != null)
; [eval] error_32 != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= _err@868@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 572 | _err@868@01 == Null | live]
; [else-branch: 572 | _err@868@01 != Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 572 | _err@868@01 == Null]
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
; [then-branch: 573 | False | dead]
; [else-branch: 573 | True | live]
(push) ; 6
; [else-branch: 573 | True]
(pop) ; 6
; [eval] !(perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_6, 526803611440346310908232101056638787))
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | True | live]
; [else-branch: 574 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 574 | True]
; [exec]
; c_6.Container_value := __prim__int___box__(int___sub__(int___unbox__(c_6.Container_value),
;   1))
; [eval] __prim__int___box__(int___sub__(int___unbox__(c_6.Container_value), 1))
; [eval] int___sub__(int___unbox__(c_6.Container_value), 1)
; [eval] int___unbox__(c_6.Container_value)
(push) ; 7
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))))
(pop) ; 7
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))))
(push) ; 7
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) 1))
(pop) ; 7
; Joined path conditions
(assert (int___sub__%precondition $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) 1))
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) 1)))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) 1)))
(declare-const Container_value@870@01 $Ref)
(assert (=
  Container_value@870@01
  (__prim__int___box__ $Snap.unit (int___sub__ $Snap.unit (int___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@869@01))))))) 1))))
; [exec]
; label post_try_32
; [exec]
; _res := c_6
; [exec]
; label __end
; [eval] issubtype(typeof(_res), Container())
; [eval] typeof(_res)
; [eval] Container()
; [eval] issubtype(typeof(c_0.Container_value), int())
; [eval] typeof(c_0.Container_value)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@870@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@870@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 13))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 13))
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13)))
(pop) ; 7
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 13)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13))))
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_0.Container_value, __prim__int___box__(13))
; [eval] __prim__int___box__(13)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 7
; Joined path conditions
(push) ; 7
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@870@01 (__prim__int___box__ $Snap.unit 13))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- from_catch ----------
(declare-const _cthread_192@871@01 $Ref)
(declare-const _caller_measures_192@872@01 Seq<Measure$>)
(declare-const _residue_192@873@01 $Perm)
(declare-const _current_wait_level_192@874@01 $Perm)
(declare-const _cthread_192@875@01 $Ref)
(declare-const _caller_measures_192@876@01 Seq<Measure$>)
(declare-const _residue_192@877@01 $Perm)
(declare-const _current_wait_level_192@878@01 $Perm)
(push) ; 1
(declare-const $t@879@01 $Snap)
(assert (= $t@879@01 ($Snap.combine ($Snap.first $t@879@01) ($Snap.second $t@879@01))))
(assert (= ($Snap.first $t@879@01) $Snap.unit))
; [eval] _cthread_192 != null
(assert (not (= _cthread_192@875@01 $Ref.null)))
(assert (=
  ($Snap.second $t@879@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@879@01))
    ($Snap.second ($Snap.second $t@879@01)))))
(assert (= ($Snap.first ($Snap.second $t@879@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_192), Thread_0())
; [eval] typeof(_cthread_192)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_192@875@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@879@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@880@01 $Snap)
(assert (= $t@880@01 ($Snap.combine ($Snap.first $t@880@01) ($Snap.second $t@880@01))))
(assert (= ($Snap.first $t@880@01) $Snap.unit))
; [eval] (forperm _r_95: Ref [_r_95.MustReleaseBounded] :: Level(_r_95) <= _current_wait_level_192)
(assert (=
  ($Snap.second $t@880@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@880@01))
    ($Snap.second ($Snap.second $t@880@01)))))
(assert (= ($Snap.first ($Snap.second $t@880@01)) $Snap.unit))
; [eval] (forperm _r_95: Ref [_r_95.MustReleaseUnbounded] :: Level(_r_95) <= _current_wait_level_192)
(assert (=
  ($Snap.second ($Snap.second $t@880@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@880@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@880@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@880@01))) $Snap.unit))
; [eval] _residue_192 <= _current_wait_level_192
(assert (<= _residue_192@877@01 _current_wait_level_192@878@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@880@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@880@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@880@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@880@01))))
  $Snap.unit))
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@880@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@881@01 $Ref)
; [exec]
; var error_33: Ref
(declare-const error_33@882@01 $Ref)
; [exec]
; var try_finally_52: Int
(declare-const try_finally_52@883@01 Int)
; [exec]
; var MyException_res_18: Ref
(declare-const MyException_res_18@884@01 $Ref)
; [exec]
; var MyOtherException_res_6: Ref
(declare-const MyOtherException_res_6@885@01 $Ref)
; [exec]
; var _cwl_192: Perm
(declare-const _cwl_192@886@01 $Perm)
; [exec]
; var _method_measures_192: Seq[Measure$]
(declare-const _method_measures_192@887@01 Seq<Measure$>)
; [exec]
; _method_measures_192 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; try_finally_52 := 0
; [exec]
; MyException_res_18 := new()
(declare-const MyException_res_18@888@01 $Ref)
(assert (not (= MyException_res_18@888@01 $Ref.null)))
(assert (not (= MyException_res_18@888@01 MyOtherException_res_6@885@01)))
(assert (not (= MyException_res_18@888@01 MyException_res_18@884@01)))
(assert (not (= MyException_res_18@888@01 error_33@882@01)))
(assert (not (= MyException_res_18@888@01 _cthread_192@875@01)))
; [exec]
; inhale typeof(MyException_res_18) == MyException()
(declare-const $t@889@01 $Snap)
(assert (= $t@889@01 $Snap.unit))
; [eval] typeof(MyException_res_18) == MyException()
; [eval] typeof(MyException_res_18)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; MyOtherException_res_6 := new()
(declare-const MyOtherException_res_6@890@01 $Ref)
(assert (not (= MyOtherException_res_6@890@01 $Ref.null)))
(assert (not (= MyOtherException_res_6@890@01 MyOtherException_res_6@885@01)))
(assert (not (= MyOtherException_res_6@890@01 error_33@882@01)))
(assert (not (= MyOtherException_res_6@890@01 MyException_res_18@888@01)))
(assert (not (= MyOtherException_res_6@890@01 _cthread_192@875@01)))
; [exec]
; inhale typeof(MyOtherException_res_6) == MyOtherException()
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 $Snap.unit))
; [eval] typeof(MyOtherException_res_6) == MyOtherException()
; [eval] typeof(MyOtherException_res_6)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res_6@890@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; error_33 := MyException_res_18
; [eval] error_33 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= MyException_res_18@888@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 575 | MyException_res_18@888@01 != Null | live]
; [else-branch: 575 | MyException_res_18@888@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 575 | MyException_res_18@888@01 != Null]
; [eval] !issubtype(typeof(error_33), MyException())
; [eval] issubtype(typeof(error_33), MyException())
; [eval] typeof(error_33)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 576 | !(issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType])) | dead]
; [else-branch: 576 | issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType]) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 576 | issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType)))
(pop) ; 4
; [eval] issubtype(typeof(error_33), MyException())
; [eval] typeof(error_33)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType]) | live]
; [else-branch: 577 | !(issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 577 | issubtype[Bool](typeof[PyType](MyException_res_18@888@01), MyException[PyType])]
(assert (issubtype<Bool> (typeof<PyType> MyException_res_18@888@01) (as MyException<PyType>  PyType)))
; [exec]
; label handlerMyException_18
; [exec]
; label post_try_33
; [exec]
; label __end
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- setup ----------
(declare-const _cthread_193@892@01 $Ref)
(declare-const _caller_measures_193@893@01 Seq<Measure$>)
(declare-const _residue_193@894@01 $Perm)
(declare-const c_1@895@01 $Ref)
(declare-const _current_wait_level_193@896@01 $Perm)
(declare-const _res@897@01 $Ref)
(declare-const _cthread_193@898@01 $Ref)
(declare-const _caller_measures_193@899@01 Seq<Measure$>)
(declare-const _residue_193@900@01 $Perm)
(declare-const c_1@901@01 $Ref)
(declare-const _current_wait_level_193@902@01 $Perm)
(declare-const _res@903@01 $Ref)
(push) ; 1
(declare-const $t@904@01 $Snap)
(assert (= $t@904@01 ($Snap.combine ($Snap.first $t@904@01) ($Snap.second $t@904@01))))
(assert (= ($Snap.first $t@904@01) $Snap.unit))
; [eval] _cthread_193 != null
(assert (not (= _cthread_193@898@01 $Ref.null)))
(assert (=
  ($Snap.second $t@904@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@904@01))
    ($Snap.second ($Snap.second $t@904@01)))))
(assert (= ($Snap.first ($Snap.second $t@904@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_193), Thread_0())
; [eval] typeof(_cthread_193)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_193@898@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@904@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@904@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@904@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@904@01))) $Snap.unit))
; [eval] issubtype(typeof(c_1), Container())
; [eval] typeof(c_1)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> c_1@901@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@904@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@904@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01)))))))
(assert (not (= c_1@901@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@904@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@904@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@905@01 $Snap)
(assert (= $t@905@01 ($Snap.combine ($Snap.first $t@905@01) ($Snap.second $t@905@01))))
(assert (= ($Snap.first $t@905@01) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseBounded] :: Level(_r_98) <= _current_wait_level_193)
(assert (=
  ($Snap.second $t@905@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@905@01))
    ($Snap.second ($Snap.second $t@905@01)))))
(assert (= ($Snap.first ($Snap.second $t@905@01)) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseUnbounded] :: Level(_r_98) <= _current_wait_level_193)
(assert (=
  ($Snap.second ($Snap.second $t@905@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@905@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@905@01))) $Snap.unit))
; [eval] _residue_193 <= _current_wait_level_193
(assert (<= _residue_193@900@01 _current_wait_level_193@902@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@905@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@905@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@905@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(assert (issubtype<Bool> (typeof<PyType> _res@903@01) (as MyException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(17))
; [eval] __prim__int___box__(17)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 17))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 17))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))) (__prim__int___box__ $Snap.unit 17)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))) (__prim__int___box__ $Snap.unit 17))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))) (__prim__int___box__ $Snap.unit 17)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@905@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@906@01 $Ref)
; [exec]
; var c_7: Ref
(declare-const c_7@907@01 $Ref)
; [exec]
; var MyException_res_19: Ref
(declare-const MyException_res_19@908@01 $Ref)
; [exec]
; var _cwl_193: Perm
(declare-const _cwl_193@909@01 $Perm)
; [exec]
; var _method_measures_193: Seq[Measure$]
(declare-const _method_measures_193@910@01 Seq<Measure$>)
; [exec]
; _method_measures_193 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; c_7 := c_1
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
; [then-branch: 578 | False | dead]
; [else-branch: 578 | True | live]
(push) ; 3
; [else-branch: 578 | True]
(pop) ; 3
; [eval] !(perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(c_7, 526803611440346310908232101056638787))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | True | live]
; [else-branch: 579 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 579 | True]
; [exec]
; c_7.Container_value := __prim__int___box__(17)
; [eval] __prim__int___box__(17)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 17))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 17))
(declare-const Container_value@911@01 $Ref)
(assert (= Container_value@911@01 (__prim__int___box__ $Snap.unit 17)))
; [exec]
; MyException_res_19 := new()
(declare-const MyException_res_19@912@01 $Ref)
(assert (not (= MyException_res_19@912@01 $Ref.null)))
(assert (not (= MyException_res_19@912@01 MyException_res_19@908@01)))
(assert (not (= MyException_res_19@912@01 c_1@901@01)))
(assert (not (= MyException_res_19@912@01 _cthread_193@898@01)))
(assert (not (= MyException_res_19@912@01 Container_value@911@01)))
; [exec]
; inhale typeof(MyException_res_19) == MyException()
(declare-const $t@913@01 $Snap)
(assert (= $t@913@01 $Snap.unit))
; [eval] typeof(MyException_res_19) == MyException()
; [eval] typeof(MyException_res_19)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_19@912@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := MyException_res_19
; [exec]
; label __end
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(set-option :timeout 0)
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_19@912@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> MyException_res_19@912@01) (as MyException<PyType>  PyType)))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@911@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@911@01) (as int<PyType>  PyType)))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(17))
; [eval] __prim__int___box__(17)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@911@01 (__prim__int___box__ $Snap.unit 17)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) Container_value@911@01 (__prim__int___box__ $Snap.unit 17))))
(push) ; 4
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@911@01 (__prim__int___box__ $Snap.unit 17))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) Container_value@911@01 (__prim__int___box__ $Snap.unit 17)))
; [eval] (forperm _r_99: Ref [MustInvokeBounded(_r_99)] :: false)
; [eval] (forperm _r_99: Ref [MustInvokeUnbounded(_r_99)] :: false)
; [eval] (forperm _r_99: Ref [_r_99.MustReleaseBounded] :: false)
; [eval] (forperm _r_99: Ref [_r_99.MustReleaseUnbounded] :: false)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- require ----------
(declare-const _cthread_194@914@01 $Ref)
(declare-const _caller_measures_194@915@01 Seq<Measure$>)
(declare-const _residue_194@916@01 $Perm)
(declare-const c_2@917@01 $Ref)
(declare-const _current_wait_level_194@918@01 $Perm)
(declare-const _res@919@01 $Ref)
(declare-const _cthread_194@920@01 $Ref)
(declare-const _caller_measures_194@921@01 Seq<Measure$>)
(declare-const _residue_194@922@01 $Perm)
(declare-const c_2@923@01 $Ref)
(declare-const _current_wait_level_194@924@01 $Perm)
(declare-const _res@925@01 $Ref)
(push) ; 1
(declare-const $t@926@01 $Snap)
(assert (= $t@926@01 ($Snap.combine ($Snap.first $t@926@01) ($Snap.second $t@926@01))))
(assert (= ($Snap.first $t@926@01) $Snap.unit))
; [eval] _cthread_194 != null
(assert (not (= _cthread_194@920@01 $Ref.null)))
(assert (=
  ($Snap.second $t@926@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@926@01))
    ($Snap.second ($Snap.second $t@926@01)))))
(assert (= ($Snap.first ($Snap.second $t@926@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_194), Thread_0())
; [eval] typeof(_cthread_194)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_194@920@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@926@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@926@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@926@01))) $Snap.unit))
; [eval] issubtype(typeof(c_2), Container())
; [eval] typeof(c_2)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> c_2@923@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@926@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))
(assert (not (= c_2@923@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
  $Snap.unit))
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
; [eval] __prim__int___box__(17)
(push) ; 2
(assert (__prim__int___box__%precondition $Snap.unit 17))
(pop) ; 2
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 17))
(push) ; 2
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))) (__prim__int___box__ $Snap.unit 17)))
(pop) ; 2
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))) (__prim__int___box__ $Snap.unit 17))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))) (__prim__int___box__ $Snap.unit 17)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@927@01 $Snap)
(assert (= $t@927@01 ($Snap.combine ($Snap.first $t@927@01) ($Snap.second $t@927@01))))
(assert (= ($Snap.first $t@927@01) $Snap.unit))
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseBounded] :: Level(_r_101) <= _current_wait_level_194)
(assert (=
  ($Snap.second $t@927@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@927@01))
    ($Snap.second ($Snap.second $t@927@01)))))
(assert (= ($Snap.first ($Snap.second $t@927@01)) $Snap.unit))
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseUnbounded] :: Level(_r_101) <= _current_wait_level_194)
(assert (=
  ($Snap.second ($Snap.second $t@927@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@927@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@927@01))) $Snap.unit))
; [eval] _residue_194 <= _current_wait_level_194
(assert (<= _residue_194@922@01 _current_wait_level_194@924@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@927@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@927@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(assert (issubtype<Bool> (typeof<PyType> _res@925@01) (as MyException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@927@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@928@01 $Ref)
; [exec]
; var c_8: Ref
(declare-const c_8@929@01 $Ref)
; [exec]
; var MyException_res_20: Ref
(declare-const MyException_res_20@930@01 $Ref)
; [exec]
; var _cwl_194: Perm
(declare-const _cwl_194@931@01 $Perm)
; [exec]
; var _method_measures_194: Seq[Measure$]
(declare-const _method_measures_194@932@01 Seq<Measure$>)
; [exec]
; _method_measures_194 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _res := null
; [exec]
; _err := null
; [exec]
; c_8 := c_2
; [exec]
; MyException_res_20 := new()
(declare-const MyException_res_20@933@01 $Ref)
(assert (not (= MyException_res_20@933@01 $Ref.null)))
(assert (not (= MyException_res_20@933@01 _cthread_194@920@01)))
(assert (not
  (=
    MyException_res_20@933@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@926@01))))))))
(assert (not (= MyException_res_20@933@01 c_2@923@01)))
(assert (not (= MyException_res_20@933@01 MyException_res_20@930@01)))
; [exec]
; inhale typeof(MyException_res_20) == MyException()
(declare-const $t@934@01 $Snap)
(assert (= $t@934@01 $Snap.unit))
; [eval] typeof(MyException_res_20) == MyException()
; [eval] typeof(MyException_res_20)
; [eval] MyException()
(assert (= (typeof<PyType> MyException_res_20@933@01) (as MyException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _res := MyException_res_20
; [exec]
; label __end
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> MyException_res_20@933@01) (as MyException<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> MyException_res_20@933@01) (as MyException<PyType>  PyType)))
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
; [eval] (forperm _r_102: Ref [MustInvokeBounded(_r_102)] :: false)
; [eval] (forperm _r_102: Ref [MustInvokeUnbounded(_r_102)] :: false)
; [eval] (forperm _r_102: Ref [_r_102.MustReleaseBounded] :: false)
; [eval] (forperm _r_102: Ref [_r_102.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- from_order ----------
(declare-const _cthread_195@935@01 $Ref)
(declare-const _caller_measures_195@936@01 Seq<Measure$>)
(declare-const _residue_195@937@01 $Perm)
(declare-const _current_wait_level_195@938@01 $Perm)
(declare-const _cthread_195@939@01 $Ref)
(declare-const _caller_measures_195@940@01 Seq<Measure$>)
(declare-const _residue_195@941@01 $Perm)
(declare-const _current_wait_level_195@942@01 $Perm)
(push) ; 1
(declare-const $t@943@01 $Snap)
(assert (= $t@943@01 ($Snap.combine ($Snap.first $t@943@01) ($Snap.second $t@943@01))))
(assert (= ($Snap.first $t@943@01) $Snap.unit))
; [eval] _cthread_195 != null
(assert (not (= _cthread_195@939@01 $Ref.null)))
(assert (=
  ($Snap.second $t@943@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@943@01))
    ($Snap.second ($Snap.second $t@943@01)))))
(assert (= ($Snap.first ($Snap.second $t@943@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_195), Thread_0())
; [eval] typeof(_cthread_195)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_195@939@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@943@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@944@01 $Snap)
(assert (= $t@944@01 ($Snap.combine ($Snap.first $t@944@01) ($Snap.second $t@944@01))))
(assert (= ($Snap.first $t@944@01) $Snap.unit))
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseBounded] :: Level(_r_104) <= _current_wait_level_195)
(assert (=
  ($Snap.second $t@944@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@944@01))
    ($Snap.second ($Snap.second $t@944@01)))))
(assert (= ($Snap.first ($Snap.second $t@944@01)) $Snap.unit))
; [eval] (forperm _r_104: Ref [_r_104.MustReleaseUnbounded] :: Level(_r_104) <= _current_wait_level_195)
(assert (=
  ($Snap.second ($Snap.second $t@944@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@944@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@944@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@944@01))) $Snap.unit))
; [eval] _residue_195 <= _current_wait_level_195
(assert (<= _residue_195@941@01 _current_wait_level_195@942@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@944@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@945@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@946@01 $Ref)
; [exec]
; var error_34: Ref
(declare-const error_34@947@01 $Ref)
; [exec]
; var try_finally_53: Int
(declare-const try_finally_53@948@01 Int)
; [exec]
; var Container_res_4: Ref
(declare-const Container_res_4@949@01 $Ref)
; [exec]
; var setup_res: Ref
(declare-const setup_res@950@01 $Ref)
; [exec]
; var require_res: Ref
(declare-const require_res@951@01 $Ref)
; [exec]
; var _cwl_195: Perm
(declare-const _cwl_195@952@01 $Perm)
; [exec]
; var _method_measures_195: Seq[Measure$]
(declare-const _method_measures_195@953@01 Seq<Measure$>)
; [exec]
; _method_measures_195 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; Container_res_4 := new()
(declare-const Container_res_4@954@01 $Ref)
(assert (not (= Container_res_4@954@01 $Ref.null)))
(assert (not (= Container_res_4@954@01 error_34@947@01)))
(assert (not (= Container_res_4@954@01 _cthread_195@939@01)))
(assert (not (= Container_res_4@954@01 require_res@951@01)))
(assert (not (= Container_res_4@954@01 Container_res_4@949@01)))
(assert (not (= Container_res_4@954@01 c_3@946@01)))
(assert (not (= Container_res_4@954@01 setup_res@950@01)))
; [exec]
; inhale typeof(Container_res_4) == Container()
(declare-const $t@955@01 $Snap)
(assert (= $t@955@01 $Snap.unit))
; [eval] typeof(Container_res_4) == Container()
; [eval] typeof(Container_res_4)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_4@954@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_4, 526803611440346310908232101056638787), write)
(declare-const $t@956@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_195 := Container___init__(_cthread_195, _method_measures_195, _residue_195,
;   Container_res_4)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_4@954@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_4@954@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@957@01 $Perm)
(declare-const $t@958@01 $Snap)
(assert (= $t@958@01 ($Snap.combine ($Snap.first $t@958@01) ($Snap.second $t@958@01))))
(assert (= ($Snap.first $t@958@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@958@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@958@01))
    ($Snap.second ($Snap.second $t@958@01)))))
(assert (= ($Snap.first ($Snap.second $t@958@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@958@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@958@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@958@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@958@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_195@941@01 _current_wait_level_158@957@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@958@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@958@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@958@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@958@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; c_3 := Container_res_4
; [exec]
; inhale _isDefined(3366755)
(declare-const $t@959@01 $Snap)
(assert (= $t@959@01 $Snap.unit))
; [eval] _isDefined(3366755)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366755))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366755))
(assert (_isDefined $Snap.unit 3366755))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; try_finally_53 := 0
; [exec]
; _cwl_195, setup_res := setup(_cthread_195, _method_measures_195, _residue_195,
;   _checkDefined(c_3, 3366755))
; [eval] _checkDefined(c_3, 3366755)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_4@954@01 3366755))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_4@954@01 3366755))
; [eval] _cthread_193 != null
; [eval] issubtype(typeof(_cthread_193), Thread_0())
; [eval] typeof(_cthread_193)
; [eval] Thread_0()
; [eval] issubtype(typeof(c_1), Container())
; [eval] typeof(c_1)
; [eval] Container()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_4@954@01 3366755)) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_4@954@01 3366755)) (as Container<PyType>  PyType)))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_4@954@01
  (_checkDefined $Snap.unit Container_res_4@954@01 3366755))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_4@954@01
  (_checkDefined $Snap.unit Container_res_4@954@01 3366755))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] perm(MustTerminate(_cthread_193)) == none
; [eval] perm(MustTerminate(_cthread_193))
; [eval] (forperm _r_100: Ref [MustInvokeBounded(_r_100)] :: false)
; [eval] (forperm _r_100: Ref [MustInvokeUnbounded(_r_100)] :: false)
; [eval] (forperm _r_100: Ref [_r_100.MustReleaseBounded] :: false)
; [eval] (forperm _r_100: Ref [_r_100.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_193@960@01 $Perm)
(declare-const _res@961@01 $Ref)
(declare-const $t@962@01 $Snap)
(assert (= $t@962@01 ($Snap.combine ($Snap.first $t@962@01) ($Snap.second $t@962@01))))
(assert (= ($Snap.first $t@962@01) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseBounded] :: Level(_r_98) <= _current_wait_level_193)
(assert (=
  ($Snap.second $t@962@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@962@01))
    ($Snap.second ($Snap.second $t@962@01)))))
(assert (= ($Snap.first ($Snap.second $t@962@01)) $Snap.unit))
; [eval] (forperm _r_98: Ref [_r_98.MustReleaseUnbounded] :: Level(_r_98) <= _current_wait_level_193)
(assert (=
  ($Snap.second ($Snap.second $t@962@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@962@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@962@01))) $Snap.unit))
; [eval] _residue_193 <= _current_wait_level_193
(assert (<= _residue_195@941@01 _current_wait_level_193@960@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@962@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@962@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(assert (issubtype<Bool> (typeof<PyType> _res@961@01) (as MyException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))
(assert (not (= (_checkDefined $Snap.unit Container_res_4@954@01 3366755) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_1.Container_value), int())
; [eval] typeof(c_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
  $Snap.unit))
; [eval] int___eq__(c_1.Container_value, __prim__int___box__(17))
; [eval] __prim__int___box__(17)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 17))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 17))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (__prim__int___box__ $Snap.unit 17)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (__prim__int___box__ $Snap.unit 17))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))) (__prim__int___box__ $Snap.unit 17)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@962@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_195, require_res := require(_cthread_195, _method_measures_195, _residue_195,
;   _checkDefined(c_3, 3366755))
; [eval] _checkDefined(c_3, 3366755)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] _cthread_194 != null
; [eval] issubtype(typeof(_cthread_194), Thread_0())
; [eval] typeof(_cthread_194)
; [eval] Thread_0()
; [eval] issubtype(typeof(c_2), Container())
; [eval] typeof(c_2)
; [eval] Container()
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
; [eval] __prim__int___box__(17)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 3
; Joined path conditions
; [eval] perm(MustTerminate(_cthread_194)) == none
; [eval] perm(MustTerminate(_cthread_194))
; [eval] (forperm _r_103: Ref [MustInvokeBounded(_r_103)] :: false)
; [eval] (forperm _r_103: Ref [MustInvokeUnbounded(_r_103)] :: false)
; [eval] (forperm _r_103: Ref [_r_103.MustReleaseBounded] :: false)
; [eval] (forperm _r_103: Ref [_r_103.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_194@963@01 $Perm)
(declare-const _res@964@01 $Ref)
(declare-const $t@965@01 $Snap)
(assert (= $t@965@01 ($Snap.combine ($Snap.first $t@965@01) ($Snap.second $t@965@01))))
(assert (= ($Snap.first $t@965@01) $Snap.unit))
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseBounded] :: Level(_r_101) <= _current_wait_level_194)
(assert (=
  ($Snap.second $t@965@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@965@01))
    ($Snap.second ($Snap.second $t@965@01)))))
(assert (= ($Snap.first ($Snap.second $t@965@01)) $Snap.unit))
; [eval] (forperm _r_101: Ref [_r_101.MustReleaseUnbounded] :: Level(_r_101) <= _current_wait_level_194)
(assert (=
  ($Snap.second ($Snap.second $t@965@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@965@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@965@01))) $Snap.unit))
; [eval] _residue_194 <= _current_wait_level_194
(assert (<= _residue_195@941@01 _current_wait_level_194@963@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@965@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@965@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@965@01))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), MyException())
; [eval] typeof(_res)
; [eval] MyException()
(assert (issubtype<Bool> (typeof<PyType> _res@964@01) (as MyException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@965@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; error_34 := setup_res
; [eval] error_34 != null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _res@961@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _res@961@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 580 | _res@961@01 != Null | live]
; [else-branch: 580 | _res@961@01 == Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 580 | _res@961@01 != Null]
(assert (not (= _res@961@01 $Ref.null)))
; [eval] !issubtype(typeof(error_34), MyException())
; [eval] issubtype(typeof(error_34), MyException())
; [eval] typeof(error_34)
; [eval] MyException()
; [then-branch: 581 | !(issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType])) | dead]
; [else-branch: 581 | issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType]) | live]
(push) ; 4
; [else-branch: 581 | issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType])]
(pop) ; 4
; [eval] issubtype(typeof(error_34), MyException())
; [eval] typeof(error_34)
; [eval] MyException()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> _res@961@01) (as MyException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 582 | issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType]) | live]
; [else-branch: 582 | !(issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 582 | issubtype[Bool](typeof[PyType](_res@961@01), MyException[PyType])]
; [exec]
; label handlerMyException_19
; [exec]
; label post_try_34
; [exec]
; label __end
; [eval] (forperm _r_105: Ref [MustInvokeBounded(_r_105)] :: false)
; [eval] (forperm _r_105: Ref [MustInvokeUnbounded(_r_105)] :: false)
; [eval] (forperm _r_105: Ref [_r_105.MustReleaseBounded] :: false)
; [eval] (forperm _r_105: Ref [_r_105.MustReleaseUnbounded] :: false)
(pop) ; 4
(pop) ; 3
; [eval] !(error_34 != null)
; [eval] error_34 != null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _res@961@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | _res@961@01 == Null | dead]
; [else-branch: 583 | _res@961@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 583 | _res@961@01 != Null]
(assert (not (= _res@961@01 $Ref.null)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- from_order_2 ----------
(declare-const _cthread_196@966@01 $Ref)
(declare-const _caller_measures_196@967@01 Seq<Measure$>)
(declare-const _residue_196@968@01 $Perm)
(declare-const _current_wait_level_196@969@01 $Perm)
(declare-const _cthread_196@970@01 $Ref)
(declare-const _caller_measures_196@971@01 Seq<Measure$>)
(declare-const _residue_196@972@01 $Perm)
(declare-const _current_wait_level_196@973@01 $Perm)
(push) ; 1
(declare-const $t@974@01 $Snap)
(assert (= $t@974@01 ($Snap.combine ($Snap.first $t@974@01) ($Snap.second $t@974@01))))
(assert (= ($Snap.first $t@974@01) $Snap.unit))
; [eval] _cthread_196 != null
(assert (not (= _cthread_196@970@01 $Ref.null)))
(assert (=
  ($Snap.second $t@974@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@974@01))
    ($Snap.second ($Snap.second $t@974@01)))))
(assert (= ($Snap.first ($Snap.second $t@974@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_196), Thread_0())
; [eval] typeof(_cthread_196)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_196@970@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@974@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@975@01 $Snap)
(assert (= $t@975@01 ($Snap.combine ($Snap.first $t@975@01) ($Snap.second $t@975@01))))
(assert (= ($Snap.first $t@975@01) $Snap.unit))
; [eval] (forperm _r_107: Ref [_r_107.MustReleaseBounded] :: Level(_r_107) <= _current_wait_level_196)
(assert (=
  ($Snap.second $t@975@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@975@01))
    ($Snap.second ($Snap.second $t@975@01)))))
(assert (= ($Snap.first ($Snap.second $t@975@01)) $Snap.unit))
; [eval] (forperm _r_107: Ref [_r_107.MustReleaseUnbounded] :: Level(_r_107) <= _current_wait_level_196)
(assert (=
  ($Snap.second ($Snap.second $t@975@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@975@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@975@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@975@01))) $Snap.unit))
; [eval] _residue_196 <= _current_wait_level_196
(assert (<= _residue_196@972@01 _current_wait_level_196@973@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@975@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@976@01 $Ref)
; [exec]
; var c_4: Ref
(declare-const c_4@977@01 $Ref)
; [exec]
; var error_35: Ref
(declare-const error_35@978@01 $Ref)
; [exec]
; var try_finally_54: Int
(declare-const try_finally_54@979@01 Int)
; [exec]
; var Container_res_5: Ref
(declare-const Container_res_5@980@01 $Ref)
; [exec]
; var require_res_0: Ref
(declare-const require_res_0@981@01 $Ref)
; [exec]
; var setup_res_0: Ref
(declare-const setup_res_0@982@01 $Ref)
; [exec]
; var _cwl_196: Perm
(declare-const _cwl_196@983@01 $Perm)
; [exec]
; var _method_measures_196: Seq[Measure$]
(declare-const _method_measures_196@984@01 Seq<Measure$>)
; [exec]
; _method_measures_196 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; Container_res_5 := new()
(declare-const Container_res_5@985@01 $Ref)
(assert (not (= Container_res_5@985@01 $Ref.null)))
(assert (not (= Container_res_5@985@01 require_res_0@981@01)))
(assert (not (= Container_res_5@985@01 _cthread_196@970@01)))
(assert (not (= Container_res_5@985@01 error_35@978@01)))
(assert (not (= Container_res_5@985@01 Container_res_5@980@01)))
(assert (not (= Container_res_5@985@01 c_4@977@01)))
(assert (not (= Container_res_5@985@01 setup_res_0@982@01)))
; [exec]
; inhale typeof(Container_res_5) == Container()
(declare-const $t@986@01 $Snap)
(assert (= $t@986@01 $Snap.unit))
; [eval] typeof(Container_res_5) == Container()
; [eval] typeof(Container_res_5)
; [eval] Container()
(assert (= (typeof<PyType> Container_res_5@985@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Container_res_5, 526803611440346310908232101056638787), write)
(declare-const $t@987@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; _cwl_196 := Container___init__(_cthread_196, _method_measures_196, _residue_196,
;   Container_res_5)
; [eval] _cthread_158 != null
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
; [eval] self_1 != null
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(set-option :timeout 0)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Container_res_5@985@01) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_res_5@985@01) (as Container<PyType>  PyType)))
; [eval] self_1 != null
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
; [eval] (forperm _r_118: Ref [MustInvokeBounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [MustInvokeUnbounded(_r_118)] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseBounded] :: false)
; [eval] (forperm _r_118: Ref [_r_118.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_158@988@01 $Perm)
(declare-const $t@989@01 $Snap)
(assert (= $t@989@01 ($Snap.combine ($Snap.first $t@989@01) ($Snap.second $t@989@01))))
(assert (= ($Snap.first $t@989@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@989@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@989@01))
    ($Snap.second ($Snap.second $t@989@01)))))
(assert (= ($Snap.first ($Snap.second $t@989@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@989@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@989@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@989@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@989@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_196@972@01 _current_wait_level_158@988@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@989@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@989@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; c_4 := Container_res_5
; [exec]
; inhale _isDefined(3432291)
(declare-const $t@990@01 $Snap)
(assert (= $t@990@01 $Snap.unit))
; [eval] _isDefined(3432291)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3432291))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432291))
(assert (_isDefined $Snap.unit 3432291))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; try_finally_54 := 0
; [exec]
; _cwl_196, require_res_0 := require(_cthread_196, _method_measures_196, _residue_196,
;   _checkDefined(c_4, 3432291))
; [eval] _checkDefined(c_4, 3432291)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_5@985@01 3432291))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Container_res_5@985@01 3432291))
; [eval] _cthread_194 != null
; [eval] issubtype(typeof(_cthread_194), Thread_0())
; [eval] typeof(_cthread_194)
; [eval] Thread_0()
; [eval] issubtype(typeof(c_2), Container())
; [eval] typeof(c_2)
; [eval] Container()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_5@985@01 3432291)) (as Container<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Container_res_5@985@01 3432291)) (as Container<PyType>  PyType)))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(c_2.Container_value), int())
; [eval] typeof(c_2.Container_value)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] int()
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(17)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 17))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 17))
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17)))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 17)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17))))
(push) ; 3
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(17)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(17)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(c_2.Container_value, __prim__int___box__(17))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  Container_res_5@985@01
  (_checkDefined $Snap.unit Container_res_5@985@01 3432291))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] __prim__int___box__(17)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 3
; Joined path conditions
(push) ; 3
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@989@01))))) (__prim__int___box__ $Snap.unit 17))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- VarArgException___init__ ----------
(declare-const _cthread_156@991@01 $Ref)
(declare-const _caller_measures_156@992@01 Seq<Measure$>)
(declare-const _residue_156@993@01 $Perm)
(declare-const self@994@01 $Ref)
(declare-const args@995@01 $Ref)
(declare-const _current_wait_level_156@996@01 $Perm)
(declare-const _cthread_156@997@01 $Ref)
(declare-const _caller_measures_156@998@01 Seq<Measure$>)
(declare-const _residue_156@999@01 $Perm)
(declare-const self@1000@01 $Ref)
(declare-const args@1001@01 $Ref)
(declare-const _current_wait_level_156@1002@01 $Perm)
(push) ; 1
(declare-const $t@1003@01 $Snap)
(assert (= $t@1003@01 ($Snap.combine ($Snap.first $t@1003@01) ($Snap.second $t@1003@01))))
(assert (= ($Snap.first $t@1003@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@997@01 $Ref.null)))
(assert (=
  ($Snap.second $t@1003@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1003@01))
    ($Snap.second ($Snap.second $t@1003@01)))))
(assert (= ($Snap.first ($Snap.second $t@1003@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@997@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@1003@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1003@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1003@01))) $Snap.unit))
; [eval] self != null
(assert (not (= self@1000@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), VarArgException())
; [eval] typeof(self)
; [eval] VarArgException()
(assert (issubtype<Bool> (typeof<PyType> self@1000@01) (as VarArgException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
  $Snap.unit))
; [eval] (forall i: Int :: { tuple_arg(typeof(args), i) } i >= 0 && i < |tuple_args(typeof(args))| ==> issubtype(tuple_arg(typeof(args), i), object()))
(declare-const i@1004@01 Int)
(push) ; 2
; [eval] i >= 0 && i < |tuple_args(typeof(args))| ==> issubtype(tuple_arg(typeof(args), i), object())
; [eval] i >= 0 && i < |tuple_args(typeof(args))|
; [eval] i >= 0
(push) ; 3
; [then-branch: 584 | !(i@1004@01 >= 0) | live]
; [else-branch: 584 | i@1004@01 >= 0 | live]
(push) ; 4
; [then-branch: 584 | !(i@1004@01 >= 0)]
(assert (not (>= i@1004@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 584 | i@1004@01 >= 0]
(assert (>= i@1004@01 0))
; [eval] i < |tuple_args(typeof(args))|
; [eval] |tuple_args(typeof(args))|
; [eval] tuple_args(typeof(args))
; [eval] typeof(args)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (>= i@1004@01 0) (not (>= i@1004@01 0))))
(push) ; 3
; [then-branch: 585 | i@1004@01 >= 0 && i@1004@01 < |tuple_args[Seq[PyType]](typeof[PyType](args@1001@01))| | live]
; [else-branch: 585 | !(i@1004@01 >= 0 && i@1004@01 < |tuple_args[Seq[PyType]](typeof[PyType](args@1001@01))|) | live]
(push) ; 4
; [then-branch: 585 | i@1004@01 >= 0 && i@1004@01 < |tuple_args[Seq[PyType]](typeof[PyType](args@1001@01))|]
(assert (and
  (>= i@1004@01 0)
  (<
    i@1004@01
    (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01))))))
; [eval] issubtype(tuple_arg(typeof(args), i), object())
; [eval] tuple_arg(typeof(args), i)
; [eval] typeof(args)
; [eval] object()
(pop) ; 4
(push) ; 4
; [else-branch: 585 | !(i@1004@01 >= 0 && i@1004@01 < |tuple_args[Seq[PyType]](typeof[PyType](args@1001@01))|)]
(assert (not
  (and
    (>= i@1004@01 0)
    (<
      i@1004@01
      (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01)))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@1004@01 0)
      (<
        i@1004@01
        (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01))))))
  (and
    (>= i@1004@01 0)
    (<
      i@1004@01
      (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01)))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@1004@01 Int)) (!
  (and
    (or (>= i@1004@01 0) (not (>= i@1004@01 0)))
    (or
      (not
        (and
          (>= i@1004@01 0)
          (<
            i@1004@01
            (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01))))))
      (and
        (>= i@1004@01 0)
        (<
          i@1004@01
          (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01)))))))
  :pattern ((tuple_arg<PyType> (typeof<PyType> args@1001@01) i@1004@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153-aux|)))
(assert (forall ((i@1004@01 Int)) (!
  (=>
    (and
      (>= i@1004@01 0)
      (<
        i@1004@01
        (Seq_length (tuple_args<Seq<PyType>> (typeof<PyType> args@1001@01)))))
    (issubtype<Bool> (tuple_arg<PyType> (typeof<PyType> args@1001@01) i@1004@01) (as object<PyType>  PyType)))
  :pattern ((tuple_arg<PyType> (typeof<PyType> args@1001@01) i@1004@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_exception.py.vpr@2879@13@2879@153|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
  $Snap.unit))
; [eval] self != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
  $Snap.unit))
; [eval] int___eq__(__prim__int___box__(tuple___len__(args)), __prim__int___box__(0))
; [eval] __prim__int___box__(tuple___len__(args))
; [eval] tuple___len__(args)
(push) ; 2
(assert (tuple___len__%precondition $Snap.unit args@1001@01))
(pop) ; 2
; Joined path conditions
(assert (tuple___len__%precondition $Snap.unit args@1001@01))
(push) ; 2
(assert (__prim__int___box__%precondition $Snap.unit (tuple___len__ $Snap.unit args@1001@01)))
(pop) ; 2
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (tuple___len__ $Snap.unit args@1001@01)))
; [eval] __prim__int___box__(0)
(push) ; 2
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 2
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(push) ; 2
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01)) (__prim__int___box__ $Snap.unit 0)))
(pop) ; 2
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 0)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01)) (__prim__int___box__ $Snap.unit 0))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (tuple___len__ $Snap.unit args@1001@01)) (__prim__int___box__ $Snap.unit 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1003@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1005@01 $Snap)
(assert (= $t@1005@01 ($Snap.combine ($Snap.first $t@1005@01) ($Snap.second $t@1005@01))))
(assert (= ($Snap.first $t@1005@01) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseBounded] :: Level(_r_110) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@1005@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1005@01))
    ($Snap.second ($Snap.second $t@1005@01)))))
(assert (= ($Snap.first ($Snap.second $t@1005@01)) $Snap.unit))
; [eval] (forperm _r_110: Ref [_r_110.MustReleaseUnbounded] :: Level(_r_110) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@1005@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1005@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1005@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1005@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@999@01 _current_wait_level_156@1002@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@1005@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@1006@01 $Ref)
; [exec]
; var self_3: Ref
(declare-const self_3@1007@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@1008@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@1009@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self) == VarArgException()
(declare-const $t@1010@01 $Snap)
(assert (= $t@1010@01 $Snap.unit))
; [eval] typeof(self) == VarArgException()
; [eval] typeof(self)
; [eval] VarArgException()
(assert (= (typeof<PyType> self@1000@01) (as VarArgException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_3 := self
; [exec]
; label __end
; [eval] (forperm _r_111: Ref [MustInvokeBounded(_r_111)] :: false)
; [eval] (forperm _r_111: Ref [MustInvokeUnbounded(_r_111)] :: false)
; [eval] (forperm _r_111: Ref [_r_111.MustReleaseBounded] :: false)
; [eval] (forperm _r_111: Ref [_r_111.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- ParameterizedException___init__ ----------
(declare-const _cthread_157@1011@01 $Ref)
(declare-const _caller_measures_157@1012@01 Seq<Measure$>)
(declare-const _residue_157@1013@01 $Perm)
(declare-const self_0@1014@01 $Ref)
(declare-const num_0@1015@01 $Ref)
(declare-const _current_wait_level_157@1016@01 $Perm)
(declare-const _cthread_157@1017@01 $Ref)
(declare-const _caller_measures_157@1018@01 Seq<Measure$>)
(declare-const _residue_157@1019@01 $Perm)
(declare-const self_0@1020@01 $Ref)
(declare-const num_0@1021@01 $Ref)
(declare-const _current_wait_level_157@1022@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@1023@01 $Snap)
(assert (= $t@1023@01 ($Snap.combine ($Snap.first $t@1023@01) ($Snap.second $t@1023@01))))
(assert (= ($Snap.first $t@1023@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@1017@01 $Ref.null)))
(assert (=
  ($Snap.second $t@1023@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1023@01))
    ($Snap.second ($Snap.second $t@1023@01)))))
(assert (= ($Snap.first ($Snap.second $t@1023@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@1017@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@1023@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1023@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1023@01))) $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@1020@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0), ParameterizedException())
; [eval] typeof(self_0)
; [eval] ParameterizedException()
(assert (issubtype<Bool> (typeof<PyType> self_0@1020@01) (as ParameterizedException<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(num_0), int())
; [eval] typeof(num_0)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> num_0@1021@01) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))))
  $Snap.unit))
; [eval] self_0 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1023@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1024@01 $Snap)
(assert (= $t@1024@01 ($Snap.combine ($Snap.first $t@1024@01) ($Snap.second $t@1024@01))))
(assert (= ($Snap.first $t@1024@01) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseBounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@1024@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1024@01))
    ($Snap.second ($Snap.second $t@1024@01)))))
(assert (= ($Snap.first ($Snap.second $t@1024@01)) $Snap.unit))
; [eval] (forperm _r_113: Ref [_r_113.MustReleaseUnbounded] :: Level(_r_113) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@1024@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1024@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1024@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@1019@01 _current_wait_level_157@1022@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0.ParameterizedException_num), int())
; [eval] typeof(self_0.ParameterizedException_num)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))))
  $Snap.unit))
; [eval] int___eq__(self_0.ParameterizedException_num, num_0)
(push) ; 3
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))) num_0@1021@01))
(pop) ; 3
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))) num_0@1021@01))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))) num_0@1021@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1024@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@1025@01 $Ref)
; [exec]
; var self_4: Ref
(declare-const self_4@1026@01 $Ref)
; [exec]
; var num_1: Ref
(declare-const num_1@1027@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@1028@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@1029@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == ParameterizedException()
(declare-const $t@1030@01 $Snap)
(assert (= $t@1030@01 $Snap.unit))
; [eval] typeof(self_0) == ParameterizedException()
; [eval] typeof(self_0)
; [eval] ParameterizedException()
(assert (= (typeof<PyType> self_0@1020@01) (as ParameterizedException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_4 := self_0
; [exec]
; num_1 := num_0
; [eval] perm(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736)) > none
; [eval] perm(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | True | live]
; [else-branch: 586 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 586 | True]
; [exec]
; exhale acc(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736), write)
; [exec]
; inhale acc(self_4.ParameterizedException_num, write)
(declare-const $t@1031@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_4.ParameterizedException_num := num_1
; [exec]
; label __end
; [eval] issubtype(typeof(self_0.ParameterizedException_num), int())
; [eval] typeof(self_0.ParameterizedException_num)
; [eval] int()
; [eval] int___eq__(self_0.ParameterizedException_num, num_0)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) num_0@1021@01 num_0@1021@01))
(pop) ; 4
; Joined path conditions
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) num_0@1021@01 num_0@1021@01))
(push) ; 4
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) num_0@1021@01 num_0@1021@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) num_0@1021@01 num_0@1021@01))
; [eval] (forperm _r_114: Ref [MustInvokeBounded(_r_114)] :: false)
; [eval] (forperm _r_114: Ref [MustInvokeUnbounded(_r_114)] :: false)
; [eval] (forperm _r_114: Ref [_r_114.MustReleaseBounded] :: false)
; [eval] (forperm _r_114: Ref [_r_114.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !(perm(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736)) > none)
; [eval] perm(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736)) > none
; [eval] perm(_MaySet(self_4, 175893374059933094368738875315864790323659277132451917046374736))
; [then-branch: 587 | False | dead]
; [else-branch: 587 | True | live]
(push) ; 3
; [else-branch: 587 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Container___init__ ----------
(declare-const _cthread_158@1032@01 $Ref)
(declare-const _caller_measures_158@1033@01 Seq<Measure$>)
(declare-const _residue_158@1034@01 $Perm)
(declare-const self_1@1035@01 $Ref)
(declare-const _current_wait_level_158@1036@01 $Perm)
(declare-const _cthread_158@1037@01 $Ref)
(declare-const _caller_measures_158@1038@01 Seq<Measure$>)
(declare-const _residue_158@1039@01 $Perm)
(declare-const self_1@1040@01 $Ref)
(declare-const _current_wait_level_158@1041@01 $Perm)
(push) ; 1
(declare-const $t@1042@01 $Snap)
(assert (= $t@1042@01 ($Snap.combine ($Snap.first $t@1042@01) ($Snap.second $t@1042@01))))
(assert (= ($Snap.first $t@1042@01) $Snap.unit))
; [eval] _cthread_158 != null
(assert (not (= _cthread_158@1037@01 $Ref.null)))
(assert (=
  ($Snap.second $t@1042@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1042@01))
    ($Snap.second ($Snap.second $t@1042@01)))))
(assert (= ($Snap.first ($Snap.second $t@1042@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_158@1037@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@1042@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1042@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1042@01))) $Snap.unit))
; [eval] self_1 != null
(assert (not (= self_1@1040@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1), Container())
; [eval] typeof(self_1)
; [eval] Container()
(assert (issubtype<Bool> (typeof<PyType> self_1@1040@01) (as Container<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))))
  $Snap.unit))
; [eval] self_1 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1042@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1043@01 $Snap)
(assert (= $t@1043@01 ($Snap.combine ($Snap.first $t@1043@01) ($Snap.second $t@1043@01))))
(assert (= ($Snap.first $t@1043@01) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseBounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@1043@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1043@01))
    ($Snap.second ($Snap.second $t@1043@01)))))
(assert (= ($Snap.first ($Snap.second $t@1043@01)) $Snap.unit))
; [eval] (forperm _r_116: Ref [_r_116.MustReleaseUnbounded] :: Level(_r_116) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@1043@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1043@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1043@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1043@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_158@1039@01 _current_wait_level_158@1041@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1043@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1043@01)))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@1044@01 $Ref)
; [exec]
; var self_5: Ref
(declare-const self_5@1045@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@1046@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@1047@01 Seq<Measure$>)
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_1) == Container()
(declare-const $t@1048@01 $Snap)
(assert (= $t@1048@01 $Snap.unit))
; [eval] typeof(self_1) == Container()
; [eval] typeof(self_1)
; [eval] Container()
(assert (= (typeof<PyType> self_1@1040@01) (as Container<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_5 := self_1
; [eval] perm(_MaySet(self_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(self_5, 526803611440346310908232101056638787))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | True | live]
; [else-branch: 588 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 588 | True]
; [exec]
; exhale acc(_MaySet(self_5, 526803611440346310908232101056638787), write)
; [exec]
; inhale acc(self_5.Container_value, write)
(declare-const $t@1049@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_5.Container_value := __prim__int___box__(0)
; [eval] __prim__int___box__(0)
(set-option :timeout 0)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 0))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 0))
(declare-const Container_value@1050@01 $Ref)
(assert (= Container_value@1050@01 (__prim__int___box__ $Snap.unit 0)))
; [exec]
; label __end
; [eval] issubtype(typeof(self_1.Container_value), int())
; [eval] typeof(self_1.Container_value)
; [eval] int()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> Container_value@1050@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Container_value@1050@01) (as int<PyType>  PyType)))
; [eval] (forperm _r_117: Ref [MustInvokeBounded(_r_117)] :: false)
; [eval] (forperm _r_117: Ref [MustInvokeUnbounded(_r_117)] :: false)
; [eval] (forperm _r_117: Ref [_r_117.MustReleaseBounded] :: false)
; [eval] (forperm _r_117: Ref [_r_117.MustReleaseUnbounded] :: false)
(pop) ; 3
; [eval] !(perm(_MaySet(self_5, 526803611440346310908232101056638787)) > none)
; [eval] perm(_MaySet(self_5, 526803611440346310908232101056638787)) > none
; [eval] perm(_MaySet(self_5, 526803611440346310908232101056638787))
; [then-branch: 589 | False | dead]
; [else-branch: 589 | True | live]
(push) ; 3
; [else-branch: 589 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- ExceptionClass___init__ ----------
(declare-const _cthread_159@1051@01 $Ref)
(declare-const _caller_measures_159@1052@01 Seq<Measure$>)
(declare-const _residue_159@1053@01 $Perm)
(declare-const self_2@1054@01 $Ref)
(declare-const b@1055@01 $Ref)
(declare-const _current_wait_level_159@1056@01 $Perm)
(declare-const _err@1057@01 $Ref)
(declare-const _cthread_159@1058@01 $Ref)
(declare-const _caller_measures_159@1059@01 Seq<Measure$>)
(declare-const _residue_159@1060@01 $Perm)
(declare-const self_2@1061@01 $Ref)
(declare-const b@1062@01 $Ref)
(declare-const _current_wait_level_159@1063@01 $Perm)
(declare-const _err@1064@01 $Ref)
(push) ; 1
(declare-const $t@1065@01 $Snap)
(assert (= $t@1065@01 ($Snap.combine ($Snap.first $t@1065@01) ($Snap.second $t@1065@01))))
(assert (= ($Snap.first $t@1065@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@1058@01 $Ref.null)))
(assert (=
  ($Snap.second $t@1065@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1065@01))
    ($Snap.second ($Snap.second $t@1065@01)))))
(assert (= ($Snap.first ($Snap.second $t@1065@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@1058@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@1065@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1065@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1065@01))) $Snap.unit))
; [eval] self_2 != null
(assert (not (= self_2@1061@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2), ExceptionClass())
; [eval] typeof(self_2)
; [eval] ExceptionClass()
(assert (issubtype<Bool> (typeof<PyType> self_2@1061@01) (as ExceptionClass<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(b), bool())
; [eval] typeof(b)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> b@1062@01) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))))
  $Snap.unit))
; [eval] self_2 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1065@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1066@01 $Snap)
(assert (= $t@1066@01 ($Snap.combine ($Snap.first $t@1066@01) ($Snap.second $t@1066@01))))
(assert (= ($Snap.first $t@1066@01) $Snap.unit))
; [eval] (forperm _r_119: Ref [_r_119.MustReleaseBounded] :: Level(_r_119) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@1066@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1066@01))
    ($Snap.second ($Snap.second $t@1066@01)))))
(assert (= ($Snap.first ($Snap.second $t@1066@01)) $Snap.unit))
; [eval] (forperm _r_119: Ref [_r_119.MustReleaseUnbounded] :: Level(_r_119) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@1066@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1066@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1066@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@1060@01 _current_wait_level_159@1063@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))
; [eval] _err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@1064@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@1064@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 590 | _err@1064@01 == Null | live]
; [else-branch: 590 | _err@1064@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 590 | _err@1064@01 == Null]
(assert (= _err@1064@01 $Ref.null))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 4
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 4
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
(push) ; 4
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))) (__prim__int___box__ $Snap.unit 4)))
(pop) ; 4
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))) (__prim__int___box__ $Snap.unit 4))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))) (__prim__int___box__ $Snap.unit 4)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 591 | _err@1064@01 == Null | live]
; [else-branch: 591 | _err@1064@01 != Null | live]
(push) ; 5
; [then-branch: 591 | _err@1064@01 == Null]
(pop) ; 5
(push) ; 5
; [else-branch: 591 | _err@1064@01 != Null]
(assert (not (= _err@1064@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@1064@01 $Ref.null)) (= _err@1064@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@1064@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | _err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType]) | dead]
; [else-branch: 592 | !(_err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 592 | !(_err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@1064@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 5
; [then-branch: 593 | _err@1064@01 != Null | dead]
; [else-branch: 593 | _err@1064@01 == Null | live]
(push) ; 6
; [else-branch: 593 | _err@1064@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 590 | _err@1064@01 != Null]
(assert (not (= _err@1064@01 $Ref.null)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 4
; [then-branch: 594 | _err@1064@01 == Null | live]
; [else-branch: 594 | _err@1064@01 != Null | live]
(push) ; 5
; [then-branch: 594 | _err@1064@01 == Null]
(assert (= _err@1064@01 $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 594 | _err@1064@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@1064@01 $Ref.null)) (= _err@1064@01 $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= _err@1064@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= _err@1064@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 595 | _err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType]) | live]
; [else-branch: 595 | !(_err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 595 | _err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType])]
(assert (and
  (not (= _err@1064@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))) (as int<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))
  $Snap.unit))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))) (__prim__int___box__ $Snap.unit 12)))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))) (__prim__int___box__ $Snap.unit 12))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))) (__prim__int___box__ $Snap.unit 12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@1064@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 596 | _err@1064@01 != Null | live]
; [else-branch: 596 | _err@1064@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 596 | _err@1064@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= _err@1064@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; [else-branch: 595 | !(_err@1064@01 != Null && issubtype[Bool](typeof[PyType](_err@1064@01), MyOtherException[PyType]))]
(assert (not
  (and
    (not (= _err@1064@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@1064@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@1064@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 597 | _err@1064@01 != Null | live]
; [else-branch: 597 | _err@1064@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 597 | _err@1064@01 != Null]
(assert (not (= _err@1064@01 $Ref.null)))
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= _err@1064@01 $Ref.null)))
(assert (=>
  (not (= _err@1064@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> _err@1064@01) (as MyOtherException<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@1066@01))))))
  $Snap.unit))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var self_6: Ref
(declare-const self_6@1067@01 $Ref)
; [exec]
; var b_0: Ref
(declare-const b_0@1068@01 $Ref)
; [exec]
; var MyOtherException_res_7: Ref
(declare-const MyOtherException_res_7@1069@01 $Ref)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@1070@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@1071@01 Seq<Measure$>)
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_2) == ExceptionClass()
(declare-const $t@1072@01 $Snap)
(assert (= $t@1072@01 $Snap.unit))
; [eval] typeof(self_2) == ExceptionClass()
; [eval] typeof(self_2)
; [eval] ExceptionClass()
(assert (= (typeof<PyType> self_2@1061@01) (as ExceptionClass<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_6 := self_2
; [exec]
; b_0 := b
; [eval] bool___unbox__(b_0)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit b@1062@01))
(pop) ; 3
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit b@1062@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@1062@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@1062@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 598 | bool___unbox__(_, b@1062@01) | live]
; [else-branch: 598 | !(bool___unbox__(_, b@1062@01)) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 598 | bool___unbox__(_, b@1062@01)]
(assert (bool___unbox__ $Snap.unit b@1062@01))
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 599 | True | live]
; [else-branch: 599 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 599 | True]
; [exec]
; exhale acc(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093), write)
; [exec]
; inhale acc(self_6.ExceptionClass_a_field, write)
(declare-const $t@1073@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_6.ExceptionClass_a_field := __prim__int___box__(4)
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
(declare-const ExceptionClass_a_field@1074@01 $Ref)
(assert (= ExceptionClass_a_field@1074@01 (__prim__int___box__ $Snap.unit 4)))
; [exec]
; label __end
; [eval] _err == null
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 600 | True | live]
; [else-branch: 600 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 600 | True]
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> ExceptionClass_a_field@1074@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ExceptionClass_a_field@1074@01) (as int<PyType>  PyType)))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1074@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1074@01 (__prim__int___box__ $Snap.unit 4))))
(push) ; 6
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1074@01 (__prim__int___box__ $Snap.unit 4))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1074@01 (__prim__int___box__ $Snap.unit 4)))
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
; [then-branch: 601 | False | dead]
; [else-branch: 601 | True | live]
(push) ; 6
; [else-branch: 601 | True]
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 7
; [then-branch: 602 | False | dead]
; [else-branch: 602 | True | live]
(push) ; 8
; [else-branch: 602 | True]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] (forperm _r_120: Ref [MustInvokeBounded(_r_120)] :: false)
; [eval] (forperm _r_120: Ref [MustInvokeUnbounded(_r_120)] :: false)
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseBounded] :: false)
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none)
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093))
; [then-branch: 603 | False | dead]
; [else-branch: 603 | True | live]
(push) ; 4
; [else-branch: 603 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 598 | !(bool___unbox__(_, b@1062@01))]
(assert (not (bool___unbox__ $Snap.unit b@1062@01)))
(pop) ; 3
; [eval] !bool___unbox__(b_0)
; [eval] bool___unbox__(b_0)
(push) ; 3
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (bool___unbox__ $Snap.unit b@1062@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (bool___unbox__ $Snap.unit b@1062@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 604 | !(bool___unbox__(_, b@1062@01)) | live]
; [else-branch: 604 | bool___unbox__(_, b@1062@01) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 604 | !(bool___unbox__(_, b@1062@01))]
(assert (not (bool___unbox__ $Snap.unit b@1062@01)))
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093))
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 605 | True | live]
; [else-branch: 605 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 605 | True]
; [exec]
; exhale acc(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093), write)
; [exec]
; inhale acc(self_6.ExceptionClass_a_field, write)
(declare-const $t@1075@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_6.ExceptionClass_a_field := __prim__int___box__(12)
; [eval] __prim__int___box__(12)
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit 12))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 12))
(declare-const ExceptionClass_a_field@1076@01 $Ref)
(assert (= ExceptionClass_a_field@1076@01 (__prim__int___box__ $Snap.unit 12)))
; [exec]
; MyOtherException_res_7 := new()
(declare-const MyOtherException_res_7@1077@01 $Ref)
(assert (not (= MyOtherException_res_7@1077@01 $Ref.null)))
(assert (not (= MyOtherException_res_7@1077@01 ExceptionClass_a_field@1076@01)))
(assert (not (= MyOtherException_res_7@1077@01 MyOtherException_res_7@1069@01)))
(assert (not (= MyOtherException_res_7@1077@01 self_2@1061@01)))
(assert (not (= MyOtherException_res_7@1077@01 b@1062@01)))
(assert (not (= MyOtherException_res_7@1077@01 _cthread_159@1058@01)))
; [exec]
; inhale typeof(MyOtherException_res_7) == MyOtherException()
(declare-const $t@1078@01 $Snap)
(assert (= $t@1078@01 $Snap.unit))
; [eval] typeof(MyOtherException_res_7) == MyOtherException()
; [eval] typeof(MyOtherException_res_7)
; [eval] MyOtherException()
(assert (=
  (typeof<PyType> MyOtherException_res_7@1077@01)
  (as MyOtherException<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := MyOtherException_res_7
; [eval] _err != null
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= MyOtherException_res_7@1077@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | MyOtherException_res_7@1077@01 != Null | live]
; [else-branch: 606 | MyOtherException_res_7@1077@01 == Null | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 606 | MyOtherException_res_7@1077@01 != Null]
; [exec]
; _err := _err
; [exec]
; label __end
; [eval] _err == null
; [then-branch: 607 | MyOtherException_res_7@1077@01 == Null | dead]
; [else-branch: 607 | MyOtherException_res_7@1077@01 != Null | live]
(push) ; 6
; [else-branch: 607 | MyOtherException_res_7@1077@01 != Null]
; [eval] _err != null && issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 7
; [then-branch: 608 | MyOtherException_res_7@1077@01 == Null | live]
; [else-branch: 608 | MyOtherException_res_7@1077@01 != Null | live]
(push) ; 8
; [then-branch: 608 | MyOtherException_res_7@1077@01 == Null]
(assert (= MyOtherException_res_7@1077@01 $Ref.null))
(pop) ; 8
(push) ; 8
; [else-branch: 608 | MyOtherException_res_7@1077@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= MyOtherException_res_7@1077@01 $Ref.null))
  (= MyOtherException_res_7@1077@01 $Ref.null)))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= MyOtherException_res_7@1077@01 $Ref.null))
    (issubtype<Bool> (typeof<PyType> MyOtherException_res_7@1077@01) (as MyOtherException<PyType>  PyType))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not (= MyOtherException_res_7@1077@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_7@1077@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 609 | MyOtherException_res_7@1077@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res_7@1077@01), MyOtherException[PyType]) | live]
; [else-branch: 609 | !(MyOtherException_res_7@1077@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res_7@1077@01), MyOtherException[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 609 | MyOtherException_res_7@1077@01 != Null && issubtype[Bool](typeof[PyType](MyOtherException_res_7@1077@01), MyOtherException[PyType])]
(assert (and
  (not (= MyOtherException_res_7@1077@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_7@1077@01) (as MyOtherException<PyType>  PyType))))
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] issubtype(typeof(self_2.ExceptionClass_a_field), int())
; [eval] typeof(self_2.ExceptionClass_a_field)
; [eval] int()
(set-option :timeout 0)
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> ExceptionClass_a_field@1076@01) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ExceptionClass_a_field@1076@01) (as int<PyType>  PyType)))
; [eval] int___eq__(self_2.ExceptionClass_a_field, __prim__int___box__(12))
; [eval] __prim__int___box__(12)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1076@01 (__prim__int___box__ $Snap.unit 12)))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 12)) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1076@01 (__prim__int___box__ $Snap.unit 12))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1076@01 (__prim__int___box__ $Snap.unit 12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) ExceptionClass_a_field@1076@01 (__prim__int___box__ $Snap.unit 12)))
; [eval] _err != null ==> issubtype(typeof(_err), MyOtherException())
; [eval] _err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= MyOtherException_res_7@1077@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 610 | MyOtherException_res_7@1077@01 != Null | live]
; [else-branch: 610 | MyOtherException_res_7@1077@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 610 | MyOtherException_res_7@1077@01 != Null]
; [eval] issubtype(typeof(_err), MyOtherException())
; [eval] typeof(_err)
; [eval] MyOtherException()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= MyOtherException_res_7@1077@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_7@1077@01) (as MyOtherException<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= MyOtherException_res_7@1077@01 $Ref.null))
  (issubtype<Bool> (typeof<PyType> MyOtherException_res_7@1077@01) (as MyOtherException<PyType>  PyType))))
; [eval] (forperm _r_120: Ref [MustInvokeBounded(_r_120)] :: false)
; [eval] (forperm _r_120: Ref [MustInvokeUnbounded(_r_120)] :: false)
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseBounded] :: false)
; [eval] (forperm _r_120: Ref [_r_120.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !(_err != null)
; [eval] _err != null
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= MyOtherException_res_7@1077@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 611 | MyOtherException_res_7@1077@01 == Null | dead]
; [else-branch: 611 | MyOtherException_res_7@1077@01 != Null | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 611 | MyOtherException_res_7@1077@01 != Null]
(assert (not (= MyOtherException_res_7@1077@01 $Ref.null)))
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none)
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093)) > none
; [eval] perm(_MaySet(self_6, 37572863051066860695310152591922694220779138314369093))
; [then-branch: 612 | False | dead]
; [else-branch: 612 | True | live]
(push) ; 4
; [else-branch: 612 | True]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 604 | bool___unbox__(_, b@1062@01)]
(assert (bool___unbox__ $Snap.unit b@1062@01))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_197@1079@01 $Ref)
(declare-const _caller_measures_197@1080@01 Seq<Measure$>)
(declare-const _residue_197@1081@01 $Perm)
(declare-const _current_wait_level_197@1082@01 $Perm)
(declare-const _cthread_197@1083@01 $Ref)
(declare-const _caller_measures_197@1084@01 Seq<Measure$>)
(declare-const _residue_197@1085@01 $Perm)
(declare-const _current_wait_level_197@1086@01 $Perm)
(push) ; 1
(declare-const $t@1087@01 $Snap)
(assert (= $t@1087@01 ($Snap.combine ($Snap.first $t@1087@01) ($Snap.second $t@1087@01))))
(assert (= ($Snap.first $t@1087@01) $Snap.unit))
; [eval] _cthread_197 != null
(assert (not (= _cthread_197@1083@01 $Ref.null)))
(assert (=
  ($Snap.second $t@1087@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1087@01))
    ($Snap.second ($Snap.second $t@1087@01)))))
(assert (= ($Snap.first ($Snap.second $t@1087@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_197), Thread_0())
; [eval] typeof(_cthread_197)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_197@1083@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@1087@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@1088@01 $Snap)
(assert (= $t@1088@01 ($Snap.combine ($Snap.first $t@1088@01) ($Snap.second $t@1088@01))))
(assert (= ($Snap.first $t@1088@01) $Snap.unit))
; [eval] (forperm _r_122: Ref [_r_122.MustReleaseBounded] :: Level(_r_122) <= _current_wait_level_197)
(assert (=
  ($Snap.second $t@1088@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1088@01))
    ($Snap.second ($Snap.second $t@1088@01)))))
(assert (= ($Snap.first ($Snap.second $t@1088@01)) $Snap.unit))
; [eval] (forperm _r_122: Ref [_r_122.MustReleaseUnbounded] :: Level(_r_122) <= _current_wait_level_197)
(assert (=
  ($Snap.second ($Snap.second $t@1088@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1088@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1088@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1088@01))) $Snap.unit))
; [eval] _residue_197 <= _current_wait_level_197
(assert (<= _residue_197@1085@01 _current_wait_level_197@1086@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@1088@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@1089@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@1090@01 Set<_Name>)
; [exec]
; var _cwl_197: Perm
(declare-const _cwl_197@1091@01 $Perm)
; [exec]
; var _method_measures_197: Seq[Measure$]
(declare-const _method_measures_197@1092@01 Seq<Measure$>)
; [exec]
; _method_measures_197 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@1093@01 Set<_Name>)
(assert (=
  module_names_0@1093@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@1094@01 $Snap)
(assert (= $t@1094@01 ($Snap.combine ($Snap.first $t@1094@01) ($Snap.second $t@1094@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@1094@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1094@01))
    ($Snap.second ($Snap.second $t@1094@01)))))
(assert (= ($Snap.first ($Snap.second $t@1094@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@1094@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@1094@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@1095@01 Set<_Name>)
(assert (=
  module_names_0@1095@01
  (Set_union module_names_0@1093@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@1096@01 $Snap)
(assert (= $t@1096@01 ($Snap.combine ($Snap.first $t@1096@01) ($Snap.second $t@1096@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@1096@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@1096@01))
    ($Snap.second ($Snap.second $t@1096@01)))))
(assert (= ($Snap.first ($Snap.second $t@1096@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@1096@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@1096@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@1096@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@1096@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@1096@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@1096@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@1096@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@1096@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@1096@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(133507968135653063024539981)))
; [eval] (module_names_0 union Set(_single(133507968135653063024539981)))
; [eval] Set(_single(133507968135653063024539981))
; [eval] _single(133507968135653063024539981)
(declare-const module_names_0@1097@01 Set<_Name>)
(assert (=
  module_names_0@1097@01
  (Set_union module_names_0@1095@01 (Set_singleton (_single<_Name> 133507968135653063024539981)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@1098@01 Set<_Name>)
(assert (=
  module_names_0@1098@01
  (Set_union module_names_0@1097@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(573412356898039997292606432641966422)))
; [eval] (module_names_0 union Set(_single(573412356898039997292606432641966422)))
; [eval] Set(_single(573412356898039997292606432641966422))
; [eval] _single(573412356898039997292606432641966422)
(declare-const module_names_0@1099@01 Set<_Name>)
(assert (=
  module_names_0@1099@01
  (Set_union module_names_0@1098@01 (Set_singleton (_single<_Name> 573412356898039997292606432641966422)))))
; [exec]
; assert true && (_single(133507968135653063024539981) in module_names_0)
; [eval] (_single(133507968135653063024539981) in module_names_0)
; [eval] _single(133507968135653063024539981)
(set-option :timeout 0)
(push) ; 3
(assert (not (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1099@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1099@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(9620262968747507011217564343407515245181261)))
; [eval] (module_names_0 union Set(_single(9620262968747507011217564343407515245181261)))
; [eval] Set(_single(9620262968747507011217564343407515245181261))
; [eval] _single(9620262968747507011217564343407515245181261)
(declare-const module_names_0@1100@01 Set<_Name>)
(assert (=
  module_names_0@1100@01
  (Set_union module_names_0@1099@01 (Set_singleton (_single<_Name> 9620262968747507011217564343407515245181261)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(146793563365898239306910328854972168525)))
; [eval] (module_names_0 union Set(_single(146793563365898239306910328854972168525)))
; [eval] Set(_single(146793563365898239306910328854972168525))
; [eval] _single(146793563365898239306910328854972168525)
(declare-const module_names_0@1101@01 Set<_Name>)
(assert (=
  module_names_0@1101@01
  (Set_union module_names_0@1100@01 (Set_singleton (_single<_Name> 146793563365898239306910328854972168525)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@1102@01 Set<_Name>)
(assert (=
  module_names_0@1102@01
  (Set_union module_names_0@1101@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(41318714829690412694709511428931228506006624855548240)))
; [eval] (module_names_0 union Set(_single(41318714829690412694709511428931228506006624855548240)))
; [eval] Set(_single(41318714829690412694709511428931228506006624855548240))
; [eval] _single(41318714829690412694709511428931228506006624855548240)
(declare-const module_names_0@1103@01 Set<_Name>)
(assert (=
  module_names_0@1103@01
  (Set_union module_names_0@1102@01 (Set_singleton (_single<_Name> 41318714829690412694709511428931228506006624855548240)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@1104@01 Set<_Name>)
(assert (=
  module_names_0@1104@01
  (Set_union module_names_0@1103@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2110237719515443916611)))
; [eval] (module_names_0 union Set(_single(2110237719515443916611)))
; [eval] Set(_single(2110237719515443916611))
; [eval] _single(2110237719515443916611)
(declare-const module_names_0@1105@01 Set<_Name>)
(assert (=
  module_names_0@1105@01
  (Set_union module_names_0@1104@01 (Set_singleton (_single<_Name> 2110237719515443916611)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(8037762587460565956509462524019)))
; [eval] (module_names_0 union Set(_single(8037762587460565956509462524019)))
; [eval] Set(_single(8037762587460565956509462524019))
; [eval] _single(8037762587460565956509462524019)
(declare-const module_names_0@1106@01 Set<_Name>)
(assert (=
  module_names_0@1106@01
  (Set_union module_names_0@1105@01 (Set_singleton (_single<_Name> 8037762587460565956509462524019)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(261549709601675750682756314795700339)))
; [eval] (module_names_0 union Set(_single(261549709601675750682756314795700339)))
; [eval] Set(_single(261549709601675750682756314795700339))
; [eval] _single(261549709601675750682756314795700339)
(declare-const module_names_0@1107@01 Set<_Name>)
(assert (=
  module_names_0@1107@01
  (Set_union module_names_0@1106@01 (Set_singleton (_single<_Name> 261549709601675750682756314795700339)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1107@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1107@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2238911782419898729567315385244954195619570034)))
; [eval] (module_names_0 union Set(_single(2238911782419898729567315385244954195619570034)))
; [eval] Set(_single(2238911782419898729567315385244954195619570034))
; [eval] _single(2238911782419898729567315385244954195619570034)
(declare-const module_names_0@1108@01 Set<_Name>)
(assert (=
  module_names_0@1108@01
  (Set_union module_names_0@1107@01 (Set_singleton (_single<_Name> 2238911782419898729567315385244954195619570034)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1108@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1108@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(73619674901555830563715957619590204088817690435954)))
; [eval] (module_names_0 union Set(_single(73619674901555830563715957619590204088817690435954)))
; [eval] Set(_single(73619674901555830563715957619590204088817690435954))
; [eval] _single(73619674901555830563715957619590204088817690435954)
(declare-const module_names_0@1109@01 Set<_Name>)
(assert (=
  module_names_0@1109@01
  (Set_union module_names_0@1108@01 (Set_singleton (_single<_Name> 73619674901555830563715957619590204088817690435954)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1109@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1109@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(75081176538886733481919642452306487108473622978930)))
; [eval] (module_names_0 union Set(_single(75081176538886733481919642452306487108473622978930)))
; [eval] Set(_single(75081176538886733481919642452306487108473622978930))
; [eval] _single(75081176538886733481919642452306487108473622978930)
(declare-const module_names_0@1110@01 Set<_Name>)
(assert (=
  module_names_0@1110@01
  (Set_union module_names_0@1109@01 (Set_singleton (_single<_Name> 75081176538886733481919642452306487108473622978930)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1110@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1110@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(76542678176217636400123327285022770128129555521906)))
; [eval] (module_names_0 union Set(_single(76542678176217636400123327285022770128129555521906)))
; [eval] Set(_single(76542678176217636400123327285022770128129555521906))
; [eval] _single(76542678176217636400123327285022770128129555521906)
(declare-const module_names_0@1111@01 Set<_Name>)
(assert (=
  module_names_0@1111@01
  (Set_union module_names_0@1110@01 (Set_singleton (_single<_Name> 76542678176217636400123327285022770128129555521906)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1111@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1111@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(78004179813548539318327012117739053147785488064882)))
; [eval] (module_names_0 union Set(_single(78004179813548539318327012117739053147785488064882)))
; [eval] Set(_single(78004179813548539318327012117739053147785488064882))
; [eval] _single(78004179813548539318327012117739053147785488064882)
(declare-const module_names_0@1112@01 Set<_Name>)
(assert (=
  module_names_0@1112@01
  (Set_union module_names_0@1111@01 (Set_singleton (_single<_Name> 78004179813548539318327012117739053147785488064882)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1112@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1112@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(146729322572670483142117246650850534606331053695346)))
; [eval] (module_names_0 union Set(_single(146729322572670483142117246650850534606331053695346)))
; [eval] Set(_single(146729322572670483142117246650850534606331053695346))
; [eval] _single(146729322572670483142117246650850534606331053695346)
(declare-const module_names_0@1113@01 Set<_Name>)
(assert (=
  module_names_0@1113@01
  (Set_union module_names_0@1112@01 (Set_singleton (_single<_Name> 146729322572670483142117246650850534606331053695346)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1113@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1113@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(79465681450879442236530696950455336167441420607858)))
; [eval] (module_names_0 union Set(_single(79465681450879442236530696950455336167441420607858)))
; [eval] Set(_single(79465681450879442236530696950455336167441420607858))
; [eval] _single(79465681450879442236530696950455336167441420607858)
(declare-const module_names_0@1114@01 Set<_Name>)
(assert (=
  module_names_0@1114@01
  (Set_union module_names_0@1113@01 (Set_singleton (_single<_Name> 79465681450879442236530696950455336167441420607858)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1114@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1114@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(125780003415400)))
; [eval] (module_names_0 union Set(_single(125780003415400)))
; [eval] Set(_single(125780003415400))
; [eval] _single(125780003415400)
(declare-const module_names_0@1115@01 Set<_Name>)
(assert (=
  module_names_0@1115@01
  (Set_union module_names_0@1114@01 (Set_singleton (_single<_Name> 125780003415400)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1115@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1115@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(39611531461724731829106252509657621422450)))
; [eval] (module_names_0 union Set(_single(39611531461724731829106252509657621422450)))
; [eval] Set(_single(39611531461724731829106252509657621422450))
; [eval] _single(39611531461724731829106252509657621422450)
(declare-const module_names_0@1116@01 Set<_Name>)
(assert (=
  module_names_0@1116@01
  (Set_union module_names_0@1115@01 (Set_singleton (_single<_Name> 39611531461724731829106252509657621422450)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1116@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1116@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1123352538621510105240044290337668335823053170)))
; [eval] (module_names_0 union Set(_single(1123352538621510105240044290337668335823053170)))
; [eval] Set(_single(1123352538621510105240044290337668335823053170))
; [eval] _single(1123352538621510105240044290337668335823053170)
(declare-const module_names_0@1117@01 Set<_Name>)
(assert (=
  module_names_0@1117@01
  (Set_union module_names_0@1116@01 (Set_singleton (_single<_Name> 1123352538621510105240044290337668335823053170)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1117@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1117@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1145653283820040728381580008610316697329033586)))
; [eval] (module_names_0 union Set(_single(1145653283820040728381580008610316697329033586)))
; [eval] Set(_single(1145653283820040728381580008610316697329033586))
; [eval] _single(1145653283820040728381580008610316697329033586)
(declare-const module_names_0@1118@01 Set<_Name>)
(assert (=
  module_names_0@1118@01
  (Set_union module_names_0@1117@01 (Set_singleton (_single<_Name> 1145653283820040728381580008610316697329033586)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1118@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1118@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1167954029018571351523115726882965058835014002)))
; [eval] (module_names_0 union Set(_single(1167954029018571351523115726882965058835014002)))
; [eval] Set(_single(1167954029018571351523115726882965058835014002))
; [eval] _single(1167954029018571351523115726882965058835014002)
(declare-const module_names_0@1119@01 Set<_Name>)
(assert (=
  module_names_0@1119@01
  (Set_union module_names_0@1118@01 (Set_singleton (_single<_Name> 1167954029018571351523115726882965058835014002)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1119@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1119@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(110386908194158)))
; [eval] (module_names_0 union Set(_single(110386908194158)))
; [eval] Set(_single(110386908194158))
; [eval] _single(110386908194158)
(declare-const module_names_0@1120@01 Set<_Name>)
(assert (=
  module_names_0@1120@01
  (Set_union module_names_0@1119@01 (Set_singleton (_single<_Name> 110386908194158)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1120@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1120@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(3629730211592103278)))
; [eval] (module_names_0 union Set(_single(3629730211592103278)))
; [eval] Set(_single(3629730211592103278))
; [eval] _single(3629730211592103278)
(declare-const module_names_0@1121@01 Set<_Name>)
(assert (=
  module_names_0@1121@01
  (Set_union module_names_0@1120@01 (Set_singleton (_single<_Name> 3629730211592103278)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1121@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1121@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2707835175906868977498064440266332899833505134)))
; [eval] (module_names_0 union Set(_single(2707835175906868977498064440266332899833505134)))
; [eval] Set(_single(2707835175906868977498064440266332899833505134))
; [eval] _single(2707835175906868977498064440266332899833505134)
(declare-const module_names_0@1122@01 Set<_Name>)
(assert (=
  module_names_0@1122@01
  (Set_union module_names_0@1121@01 (Set_singleton (_single<_Name> 2707835175906868977498064440266332899833505134)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1122@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1122@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(73620143824949317533963888368645225467521904371054)))
; [eval] (module_names_0 union Set(_single(73620143824949317533963888368645225467521904371054)))
; [eval] Set(_single(73620143824949317533963888368645225467521904371054))
; [eval] _single(73620143824949317533963888368645225467521904371054)
(declare-const module_names_0@1123@01 Set<_Name>)
(assert (=
  module_names_0@1123@01
  (Set_union module_names_0@1122@01 (Set_singleton (_single<_Name> 73620143824949317533963888368645225467521904371054)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1123@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1123@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(10577481155886206943446243677481086632551790)))
; [eval] (module_names_0 union Set(_single(10577481155886206943446243677481086632551790)))
; [eval] Set(_single(10577481155886206943446243677481086632551790))
; [eval] _single(10577481155886206943446243677481086632551790)
(declare-const module_names_0@1124@01 Set<_Name>)
(assert (=
  module_names_0@1124@01
  (Set_union module_names_0@1123@01 (Set_singleton (_single<_Name> 10577481155886206943446243677481086632551790)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1124@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1124@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(287578686816208271617046533369478102706250016110)))
; [eval] (module_names_0 union Set(_single(287578686816208271617046533369478102706250016110)))
; [eval] Set(_single(287578686816208271617046533369478102706250016110))
; [eval] _single(287578686816208271617046533369478102706250016110)
(declare-const module_names_0@1125@01 Set<_Name>)
(assert (=
  module_names_0@1125@01
  (Set_union module_names_0@1124@01 (Set_singleton (_single<_Name> 287578686816208271617046533369478102706250016110)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1125@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1125@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2462761745761662475623725383574898)))
; [eval] (module_names_0 union Set(_single(2462761745761662475623725383574898)))
; [eval] Set(_single(2462761745761662475623725383574898))
; [eval] _single(2462761745761662475623725383574898)
(declare-const module_names_0@1126@01 Set<_Name>)
(assert (=
  module_names_0@1126@01
  (Set_union module_names_0@1125@01 (Set_singleton (_single<_Name> 2462761745761662475623725383574898)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1126@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1126@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(66957130752552363932376373890676712818)))
; [eval] (module_names_0 union Set(_single(66957130752552363932376373890676712818)))
; [eval] Set(_single(66957130752552363932376373890676712818))
; [eval] _single(66957130752552363932376373890676712818)
(declare-const module_names_0@1127@01 Set<_Name>)
(assert (=
  module_names_0@1127@01
  (Set_union module_names_0@1126@01 (Set_singleton (_single<_Name> 66957130752552363932376373890676712818)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1127@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1127@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(177460686088232565310025906086192511956855152799588)))
; [eval] (module_names_0 union Set(_single(177460686088232565310025906086192511956855152799588)))
; [eval] Set(_single(177460686088232565310025906086192511956855152799588))
; [eval] _single(177460686088232565310025906086192511956855152799588)
(declare-const module_names_0@1128@01 Set<_Name>)
(assert (=
  module_names_0@1128@01
  (Set_union module_names_0@1127@01 (Set_singleton (_single<_Name> 177460686088232565310025906086192511956855152799588)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1128@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1128@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(4824769745711878473905858100882462394358548891421732708)))
; [eval] (module_names_0 union Set(_single(4824769745711878473905858100882462394358548891421732708)))
; [eval] Set(_single(4824769745711878473905858100882462394358548891421732708))
; [eval] _single(4824769745711878473905858100882462394358548891421732708)
(declare-const module_names_0@1129@01 Set<_Name>)
(assert (=
  module_names_0@1129@01
  (Set_union module_names_0@1128@01 (Set_singleton (_single<_Name> 4824769745711878473905858100882462394358548891421732708)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1129@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1129@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(8037777085053033488025926203493)))
; [eval] (module_names_0 union Set(_single(8037777085053033488025926203493)))
; [eval] Set(_single(8037777085053033488025926203493))
; [eval] _single(8037777085053033488025926203493)
(declare-const module_names_0@1130@01 Set<_Name>)
(assert (=
  module_names_0@1130@01
  (Set_union module_names_0@1129@01 (Set_singleton (_single<_Name> 8037777085053033488025926203493)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1130@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1130@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(261549709616173343150287831259379813)))
; [eval] (module_names_0 union Set(_single(261549709616173343150287831259379813)))
; [eval] Set(_single(261549709616173343150287831259379813))
; [eval] _single(261549709616173343150287831259379813)
(declare-const module_names_0@1131@01 Set<_Name>)
(assert (=
  module_names_0@1131@01
  (Set_union module_names_0@1130@01 (Set_singleton (_single<_Name> 261549709616173343150287831259379813)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1131@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1131@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(266742006474708170778818327588599909)))
; [eval] (module_names_0 union Set(_single(266742006474708170778818327588599909)))
; [eval] Set(_single(266742006474708170778818327588599909))
; [eval] _single(266742006474708170778818327588599909)
(declare-const module_names_0@1132@01 Set<_Name>)
(assert (=
  module_names_0@1132@01
  (Set_union module_names_0@1131@01 (Set_singleton (_single<_Name> 266742006474708170778818327588599909)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1132@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1132@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(133449541474574728582347304751921523046)))
; [eval] (module_names_0 union Set(_single(133449541474574728582347304751921523046)))
; [eval] Set(_single(133449541474574728582347304751921523046))
; [eval] _single(133449541474574728582347304751921523046)
(declare-const module_names_0@1133@01 Set<_Name>)
(assert (=
  module_names_0@1133@01
  (Set_union module_names_0@1132@01 (Set_singleton (_single<_Name> 133449541474574728582347304751921523046)))))
; [exec]
; assert true && (_single(2110237719515443916611) in module_names_0)
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1133@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1133@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(4388074570986976061088797910137403008248166)))
; [eval] (module_names_0 union Set(_single(4388074570986976061088797910137403008248166)))
; [eval] Set(_single(4388074570986976061088797910137403008248166))
; [eval] _single(4388074570986976061088797910137403008248166)
(declare-const module_names_0@1134@01 Set<_Name>)
(assert (=
  module_names_0@1134@01
  (Set_union module_names_0@1133@01 (Set_singleton (_single<_Name> 4388074570986976061088797910137403008248166)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@1135@01 Set<_Name>)
(assert (=
  module_names_0@1135@01
  (Set_union module_names_0@1134@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2341618494037459410705019755001925)))
; [eval] (module_names_0 union Set(_single(2341618494037459410705019755001925)))
; [eval] Set(_single(2341618494037459410705019755001925))
; [eval] _single(2341618494037459410705019755001925)
(declare-const module_names_0@1136@01 Set<_Name>)
(assert (=
  module_names_0@1136@01
  (Set_union module_names_0@1135@01 (Set_singleton (_single<_Name> 2341618494037459410705019755001925)))))
; [exec]
; assert true &&
;   (_single(2341618494037459410705019755001925) in module_names_0)
; [eval] (_single(2341618494037459410705019755001925) in module_names_0)
; [eval] _single(2341618494037459410705019755001925)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2341618494037459410705019755001925) module_names_0@1136@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2341618494037459410705019755001925) module_names_0@1136@01))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(36033721883166725883213999203)))
; [eval] (module_names_0 union Set(_single(36033721883166725883213999203)))
; [eval] Set(_single(36033721883166725883213999203))
; [eval] _single(36033721883166725883213999203)
(declare-const module_names_0@1137@01 Set<_Name>)
(assert (=
  module_names_0@1137@01
  (Set_union module_names_0@1136@01 (Set_singleton (_single<_Name> 36033721883166725883213999203)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1137@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1137@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(544998993021211310124906)))
; [eval] (module_names_0 union Set(_single(544998993021211310124906)))
; [eval] Set(_single(544998993021211310124906))
; [eval] _single(544998993021211310124906)
(declare-const module_names_0@1138@01 Set<_Name>)
(assert (=
  module_names_0@1138@01
  (Set_union module_names_0@1137@01 (Set_singleton (_single<_Name> 544998993021211310124906)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1138@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1138@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(15589643442923664419146264426)))
; [eval] (module_names_0 union Set(_single(15589643442923664419146264426)))
; [eval] Set(_single(15589643442923664419146264426))
; [eval] _single(15589643442923664419146264426)
(declare-const module_names_0@1139@01 Set<_Name>)
(assert (=
  module_names_0@1139@01
  (Set_union module_names_0@1138@01 (Set_singleton (_single<_Name> 15589643442923664419146264426)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(492960727974982997471846)))
; [eval] (module_names_0 union Set(_single(492960727974982997471846)))
; [eval] Set(_single(492960727974982997471846))
; [eval] _single(492960727974982997471846)
(declare-const module_names_0@1140@01 Set<_Name>)
(assert (=
  module_names_0@1140@01
  (Set_union module_names_0@1139@01 (Set_singleton (_single<_Name> 492960727974982997471846)))))
; [exec]
; assert true &&
;   ((_single(2110237719515443916611) in module_names_0) &&
;   (_single(133507968135653063024539981) in module_names_0))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1140@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1140@01))
; [eval] (_single(133507968135653063024539981) in module_names_0)
; [eval] _single(133507968135653063024539981)
(push) ; 3
(assert (not (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1140@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1140@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(483006899571)))
; [eval] (module_names_0 union Set(_single(483006899571)))
; [eval] Set(_single(483006899571))
; [eval] _single(483006899571)
(declare-const module_names_0@1141@01 Set<_Name>)
(assert (=
  module_names_0@1141@01
  (Set_union module_names_0@1140@01 (Set_singleton (_single<_Name> 483006899571)))))
; [exec]
; assert true &&
;   ((_single(133507968135653063024539981) in module_names_0) &&
;   (_single(2110237719515443916611) in module_names_0))
; [eval] (_single(133507968135653063024539981) in module_names_0)
; [eval] _single(133507968135653063024539981)
(push) ; 3
(assert (not (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1141@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 133507968135653063024539981) module_names_0@1141@01))
; [eval] (_single(2110237719515443916611) in module_names_0)
; [eval] _single(2110237719515443916611)
(push) ; 3
(assert (not (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1141@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 2110237719515443916611) module_names_0@1141@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(28554769915274610)))
; [eval] (module_names_0 union Set(_single(28554769915274610)))
; [eval] Set(_single(28554769915274610))
; [eval] _single(28554769915274610)
(declare-const module_names_0@1142@01 Set<_Name>)
(assert (=
  module_names_0@1142@01
  (Set_union module_names_0@1141@01 (Set_singleton (_single<_Name> 28554769915274610)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(540220138168591005479526)))
; [eval] (module_names_0 union Set(_single(540220138168591005479526)))
; [eval] Set(_single(540220138168591005479526))
; [eval] _single(540220138168591005479526)
(declare-const module_names_0@1143@01 Set<_Name>)
(assert (=
  module_names_0@1143@01
  (Set_union module_names_0@1142@01 (Set_singleton (_single<_Name> 540220138168591005479526)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(15589638664068811798841619046)))
; [eval] (module_names_0 union Set(_single(15589638664068811798841619046)))
; [eval] Set(_single(15589638664068811798841619046))
; [eval] _single(15589638664068811798841619046)
(declare-const module_names_0@1144@01 Set<_Name>)
(assert (=
  module_names_0@1144@01
  (Set_union module_names_0@1143@01 (Set_singleton (_single<_Name> 15589638664068811798841619046)))))
; [exec]
; label __end
; [eval] (forperm _r_123: Ref [MustInvokeBounded(_r_123)] :: false)
; [eval] (forperm _r_123: Ref [MustInvokeUnbounded(_r_123)] :: false)
; [eval] (forperm _r_123: Ref [_r_123.MustReleaseBounded] :: false)
; [eval] (forperm _r_123: Ref [_r_123.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
