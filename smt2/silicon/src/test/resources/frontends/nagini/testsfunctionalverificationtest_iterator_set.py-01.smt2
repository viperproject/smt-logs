(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 17:34:00
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Set<$Ref>> 0)
(declare-sort Set<$Snap> 0)
(declare-sort PyType 0)
(declare-sort SIFDomain<Ref> 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
(declare-sort $FVF<set_acc> 0)
(declare-sort $FVF<__previous> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<set_acc>To$Snap ($FVF<set_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<set_acc> ($Snap) $FVF<set_acc>)
(assert (forall ((x $FVF<set_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<set_acc>($SortWrappers.$FVF<set_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<set_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<set_acc>To$Snap($SortWrappers.$SnapTo$FVF<set_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<set_acc> x))
    :qid |$Snap.$FVF<set_acc>To$SnapTo$FVF<set_acc>|
    )))
(declare-fun $SortWrappers.$FVF<__previous>To$Snap ($FVF<__previous>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<__previous> ($Snap) $FVF<__previous>)
(assert (forall ((x $FVF<__previous>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<__previous>($SortWrappers.$FVF<__previous>To$Snap x)))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<__previous>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<__previous>To$Snap($SortWrappers.$SnapTo$FVF<__previous> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<__previous> x))
    :qid |$Snap.$FVF<__previous>To$SnapTo$FVF<__previous>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Set<$Ref>> Set<Set<$Ref>>) Set<$Ref>)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [set_acc: Set[Ref]]
(declare-fun $FVF.domain_set_acc ($FVF<set_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_set_acc ($FVF<set_acc> $Ref) Set<$Ref>)
(declare-fun $FVF.after_set_acc ($FVF<set_acc> $FVF<set_acc>) Bool)
(declare-fun $FVF.loc_set_acc (Set<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_set_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_set_acc $FVF<set_acc>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<__previous>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<__previous> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<__previous> $FVF<__previous>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<__previous>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%stateless ($Ref) Bool)
(declare-fun PSeq___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun list___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun PSeq___create__ ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%limited ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%stateless (Seq<$Ref> PyType) Bool)
(declare-fun PSeq___create__%precondition ($Snap Seq<$Ref> PyType) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun set___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun set___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun set___sil_seq__%stateless ($Ref) Bool)
(declare-fun set___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun list___len__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___len__ ($Snap $Ref) Int)
(declare-fun PSeq___len__%limited ($Snap $Ref) Int)
(declare-fun PSeq___len__%stateless ($Ref) Bool)
(declare-fun PSeq___len__%precondition ($Snap $Ref) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun int___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun int___eq__%stateless ($Ref $Ref) Bool)
(declare-fun int___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Set<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Set<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Set<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  :qid |prog.low_true|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; /field_value_functions_axioms.smt2 [set_acc: Set[Ref]]
(assert (forall ((vs $FVF<set_acc>) (ws $FVF<set_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_set_acc vs) ($FVF.domain_set_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_set_acc vs))
            (= ($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x)))
          :pattern (($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x))
          :qid |qp.$FVF<set_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap vs)
              ($SortWrappers.$FVF<set_acc>To$Snap ws)
              )
    :qid |qp.$FVF<set_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_set_acc pm r))
    :pattern (($FVF.perm_set_acc pm r)))))
(assert (forall ((r $Ref) (f Set<$Ref>)) (!
    (= ($FVF.loc_set_acc f r) true)
    :pattern (($FVF.loc_set_acc f r)))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<__previous>) (ws $FVF<__previous>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<__previous>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap vs)
              ($SortWrappers.$FVF<__previous>To$Snap ws)
              )
    :qid |qp.$FVF<__previous>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern (($FVF.perm___previous pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern (($FVF.loc___previous f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@52@00 () $Perm)
(declare-fun $k@57@00 () $Perm)
(declare-fun $k@62@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-3185|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-3186|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-3187|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3188|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3227|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-3228|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (= (PSeq___sil_seq__%limited s@$ box@4@00) (PSeq___sil_seq__ s@$ box@4@00))
  :pattern ((PSeq___sil_seq__ s@$ box@4@00))
  :qid |quant-u-3189|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (PSeq___sil_seq__%stateless box@4@00)
  :pattern ((PSeq___sil_seq__%limited s@$ box@4@00))
  :qid |quant-u-3190|)))
(assert (forall ((s@$ $Snap) (id@6@00 Int)) (!
  (= (_isDefined%limited s@$ id@6@00) (_isDefined s@$ id@6@00))
  :pattern ((_isDefined s@$ id@6@00))
  :qid |quant-u-3191|)))
(assert (forall ((s@$ $Snap) (id@6@00 Int)) (!
  (_isDefined%stateless id@6@00)
  :pattern ((_isDefined%limited s@$ id@6@00))
  :qid |quant-u-3192|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@8@00) (bool___unbox__ s@$ box@8@00))
  :pattern ((bool___unbox__ s@$ box@8@00))
  :qid |quant-u-3193|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (bool___unbox__%stateless box@8@00)
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3194|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (bool___unbox__%limited s@$ box@8@00))) (=>
    (bool___unbox__%precondition s@$ box@8@00)
    (= (__prim__bool___box__%limited $Snap.unit result@9@00) box@8@00)))
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3229|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (bool___unbox__%limited s@$ box@8@00))) (=>
    (bool___unbox__%precondition s@$ box@8@00)
    (__prim__bool___box__%precondition $Snap.unit result@9@00)))
  :pattern ((bool___unbox__%limited s@$ box@8@00))
  :qid |quant-u-3230|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@10@00)
    (__prim__bool___box__ s@$ prim@10@00))
  :pattern ((__prim__bool___box__ s@$ prim@10@00))
  :qid |quant-u-3195|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (__prim__bool___box__%stateless prim@10@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@10@00))
  :qid |quant-u-3196|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (let ((result@11@00 (__prim__bool___box__%limited s@$ prim@10@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@10@00)
    (and
      (= (typeof<PyType> result@11@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@11@00) prim@10@00)
      (= (int___unbox__%limited $Snap.unit result@11@00) (ite prim@10@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@10@00))
  :qid |quant-u-3231|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (let ((result@11@00 (__prim__bool___box__%limited s@$ prim@10@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@10@00))
  :qid |quant-u-3232|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (let ((result@11@00 (__prim__bool___box__%limited s@$ prim@10@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@10@00)
    (bool___unbox__%precondition $Snap.unit result@11@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@10@00))
  :qid |quant-u-3233|)))
(assert (forall ((s@$ $Snap) (prim@10@00 Bool)) (!
  (let ((result@11@00 (__prim__bool___box__%limited s@$ prim@10@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@10@00)
    (int___unbox__%precondition $Snap.unit result@11@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@10@00))
  :qid |quant-u-3234|)))
(assert (forall ((s@$ $Snap) (box@12@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@12@00) (int___unbox__ s@$ box@12@00))
  :pattern ((int___unbox__ s@$ box@12@00))
  :qid |quant-u-3197|)))
(assert (forall ((s@$ $Snap) (box@12@00 $Ref)) (!
  (int___unbox__%stateless box@12@00)
  :pattern ((int___unbox__%limited s@$ box@12@00))
  :qid |quant-u-3198|)))
(assert (forall ((s@$ $Snap) (box@12@00 $Ref)) (!
  (let ((result@13@00 (int___unbox__%limited s@$ box@12@00))) (=>
    (int___unbox__%precondition s@$ box@12@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@12@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@13@00) box@12@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@12@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@13@00 0)))
          box@12@00)))))
  :pattern ((int___unbox__%limited s@$ box@12@00))
  :qid |quant-u-3235|)))
(assert (forall ((s@$ $Snap) (box@12@00 $Ref)) (!
  (let ((result@13@00 (int___unbox__%limited s@$ box@12@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@12@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@12@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@13@00)))
  :pattern ((int___unbox__%limited s@$ box@12@00))
  :qid |quant-u-3236|)))
(assert (forall ((s@$ $Snap) (box@12@00 $Ref)) (!
  (let ((result@13@00 (int___unbox__%limited s@$ box@12@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@12@00)
      (issubtype<Bool> (typeof<PyType> box@12@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@13@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@12@00))
  :qid |quant-u-3237|)))
(assert (forall ((s@$ $Snap) (prim@14@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@14@00)
    (__prim__int___box__ s@$ prim@14@00))
  :pattern ((__prim__int___box__ s@$ prim@14@00))
  :qid |quant-u-3199|)))
(assert (forall ((s@$ $Snap) (prim@14@00 Int)) (!
  (__prim__int___box__%stateless prim@14@00)
  :pattern ((__prim__int___box__%limited s@$ prim@14@00))
  :qid |quant-u-3200|)))
(assert (forall ((s@$ $Snap) (prim@14@00 Int)) (!
  (let ((result@15@00 (__prim__int___box__%limited s@$ prim@14@00))) (=>
    (__prim__int___box__%precondition s@$ prim@14@00)
    (and
      (= (typeof<PyType> result@15@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@15@00) prim@14@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@14@00))
  :qid |quant-u-3238|)))
(assert (forall ((s@$ $Snap) (prim@14@00 Int)) (!
  (let ((result@15@00 (__prim__int___box__%limited s@$ prim@14@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@14@00))
  :qid |quant-u-3239|)))
(assert (forall ((s@$ $Snap) (prim@14@00 Int)) (!
  (let ((result@15@00 (__prim__int___box__%limited s@$ prim@14@00))) (=>
    (__prim__int___box__%precondition s@$ prim@14@00)
    (int___unbox__%precondition $Snap.unit result@15@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@14@00))
  :qid |quant-u-3240|)))
(assert (forall ((s@$ $Snap) (r@16@00 $Ref)) (!
  (= (Level%limited s@$ r@16@00) (Level s@$ r@16@00))
  :pattern ((Level s@$ r@16@00))
  :qid |quant-u-3201|)))
(assert (forall ((s@$ $Snap) (r@16@00 $Ref)) (!
  (Level%stateless r@16@00)
  :pattern ((Level%limited s@$ r@16@00))
  :qid |quant-u-3202|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (= (list___sil_seq__%limited s@$ self@18@00) (list___sil_seq__ s@$ self@18@00))
  :pattern ((list___sil_seq__ s@$ self@18@00))
  :qid |quant-u-3203|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (list___sil_seq__%stateless self@18@00)
  :pattern ((list___sil_seq__%limited s@$ self@18@00))
  :qid |quant-u-3204|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@52@00)
    (=>
      (list___sil_seq__%precondition s@$ self@18@00)
      (= (list___sil_seq__ s@$ self@18@00) ($SortWrappers.$SnapToSeq<$Ref> s@$))))
  :pattern ((list___sil_seq__ s@$ self@18@00))
  :qid |quant-u-3241|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  true
  :pattern ((list___sil_seq__ s@$ self@18@00))
  :qid |quant-u-3242|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (=
    (str___create__%limited s@$ len@20@00 value@21@00)
    (str___create__ s@$ len@20@00 value@21@00))
  :pattern ((str___create__ s@$ len@20@00 value@21@00))
  :qid |quant-u-3205|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (str___create__%stateless len@20@00 value@21@00)
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-3206|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (and
      (= (str___len__ $Snap.unit result@22@00) len@20@00)
      (= (str___val__ $Snap.unit result@22@00) value@21@00)
      (= (typeof<PyType> result@22@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-3243|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (str___len__%precondition $Snap.unit result@22@00)))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-3244|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) (=>
    (str___create__%precondition s@$ len@20@00 value@21@00)
    (str___val__%precondition $Snap.unit result@22@00)))
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-3245|)))
(assert (forall ((s@$ $Snap) (len@20@00 Int) (value@21@00 Int)) (!
  (let ((result@22@00 (str___create__%limited s@$ len@20@00 value@21@00))) true)
  :pattern ((str___create__%limited s@$ len@20@00 value@21@00))
  :qid |quant-u-3246|)))
(assert (forall ((s@$ $Snap) (prim@23@00 Seq<$Ref>) (cont_type@24@00 PyType)) (!
  (=
    (PSeq___create__%limited s@$ prim@23@00 cont_type@24@00)
    (PSeq___create__ s@$ prim@23@00 cont_type@24@00))
  :pattern ((PSeq___create__ s@$ prim@23@00 cont_type@24@00))
  :qid |quant-u-3207|)))
(assert (forall ((s@$ $Snap) (prim@23@00 Seq<$Ref>) (cont_type@24@00 PyType)) (!
  (PSeq___create__%stateless prim@23@00 cont_type@24@00)
  :pattern ((PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))
  :qid |quant-u-3208|)))
(assert (forall ((s@$ $Snap) (prim@23@00 Seq<$Ref>) (cont_type@24@00 PyType)) (!
  (let ((result@25@00 (PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))) (=>
    (PSeq___create__%precondition s@$ prim@23@00 cont_type@24@00)
    (and
      (= (typeof<PyType> result@25@00) (PSeq<PyType> cont_type@24@00))
      (Seq_equal (PSeq___sil_seq__ $Snap.unit result@25@00) prim@23@00))))
  :pattern ((PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))
  :qid |quant-u-3247|)))
(assert (forall ((s@$ $Snap) (prim@23@00 Seq<$Ref>) (cont_type@24@00 PyType)) (!
  (let ((result@25@00 (PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))) true)
  :pattern ((PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))
  :qid |quant-u-3248|)))
(assert (forall ((s@$ $Snap) (prim@23@00 Seq<$Ref>) (cont_type@24@00 PyType)) (!
  (let ((result@25@00 (PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))) (=>
    (PSeq___create__%precondition s@$ prim@23@00 cont_type@24@00)
    (PSeq___sil_seq__%precondition $Snap.unit result@25@00)))
  :pattern ((PSeq___create__%limited s@$ prim@23@00 cont_type@24@00))
  :qid |quant-u-3249|)))
(assert (forall ((s@$ $Snap) (map@26@00 Seq<Measure$>) (key@27@00 $Ref) (value@28@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@26@00 key@27@00 value@28@00)
    (Measure$check s@$ map@26@00 key@27@00 value@28@00))
  :pattern ((Measure$check s@$ map@26@00 key@27@00 value@28@00))
  :qid |quant-u-3209|)))
(assert (forall ((s@$ $Snap) (map@26@00 Seq<Measure$>) (key@27@00 $Ref) (value@28@00 Int)) (!
  (Measure$check%stateless map@26@00 key@27@00 value@28@00)
  :pattern ((Measure$check%limited s@$ map@26@00 key@27@00 value@28@00))
  :qid |quant-u-3210|)))
(assert (forall ((s@$ $Snap) (map@26@00 Seq<Measure$>) (key@27@00 $Ref) (value@28@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@26@00 key@27@00 value@28@00)
    (=
      (Measure$check s@$ map@26@00 key@27@00 value@28@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@26@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@27@00)))
          (> (Measure$value<Int> m) value@28@00))
        :pattern ((Seq_contains map@26@00 m))
        :pattern ((Seq_contains_trigger map@26@00 m))
        :pattern ((Seq_contains_trigger map@26@00 m))
        ))))
  :pattern ((Measure$check s@$ map@26@00 key@27@00 value@28@00))
  :qid |quant-u-3250|)))
(assert (forall ((s@$ $Snap) (map@26@00 Seq<Measure$>) (key@27@00 $Ref) (value@28@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@26@00 key@27@00 value@28@00))
  :qid |quant-u-3251|)))
(assert (forall ((s@$ $Snap) (self@30@00 $Ref) (other@31@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@30@00 other@31@00)
    (str___eq__ s@$ self@30@00 other@31@00))
  :pattern ((str___eq__ s@$ self@30@00 other@31@00))
  :qid |quant-u-3211|)))
(assert (forall ((s@$ $Snap) (self@30@00 $Ref) (other@31@00 $Ref)) (!
  (str___eq__%stateless self@30@00 other@31@00)
  :pattern ((str___eq__%limited s@$ self@30@00 other@31@00))
  :qid |quant-u-3212|)))
(assert (forall ((s@$ $Snap) (self@30@00 $Ref) (other@31@00 $Ref)) (!
  (let ((result@32@00 (str___eq__%limited s@$ self@30@00 other@31@00))) (=>
    (str___eq__%precondition s@$ self@30@00 other@31@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@30@00)
          (str___val__ $Snap.unit other@31@00))
        result@32@00)
      (=>
        result@32@00
        (=
          (str___len__ $Snap.unit self@30@00)
          (str___len__ $Snap.unit other@31@00))))))
  :pattern ((str___eq__%limited s@$ self@30@00 other@31@00))
  :qid |quant-u-3252|)))
(assert (forall ((s@$ $Snap) (self@30@00 $Ref) (other@31@00 $Ref)) (!
  (let ((result@32@00 (str___eq__%limited s@$ self@30@00 other@31@00))) (=>
    (str___eq__%precondition s@$ self@30@00 other@31@00)
    (and
      (str___val__%precondition $Snap.unit self@30@00)
      (str___val__%precondition $Snap.unit other@31@00))))
  :pattern ((str___eq__%limited s@$ self@30@00 other@31@00))
  :qid |quant-u-3253|)))
(assert (forall ((s@$ $Snap) (self@30@00 $Ref) (other@31@00 $Ref)) (!
  (let ((result@32@00 (str___eq__%limited s@$ self@30@00 other@31@00))) (=>
    (and (str___eq__%precondition s@$ self@30@00 other@31@00) result@32@00)
    (and
      (str___len__%precondition $Snap.unit self@30@00)
      (str___len__%precondition $Snap.unit other@31@00))))
  :pattern ((str___eq__%limited s@$ self@30@00 other@31@00))
  :qid |quant-u-3254|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (= (set___sil_seq__%limited s@$ self@33@00) (set___sil_seq__ s@$ self@33@00))
  :pattern ((set___sil_seq__ s@$ self@33@00))
  :qid |quant-u-3213|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (set___sil_seq__%stateless self@33@00)
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3214|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (let ((result@34@00 (set___sil_seq__%limited s@$ self@33@00))) (and
    ($Perm.isReadVar $k@57@00)
    (=>
      (set___sil_seq__%precondition s@$ self@33@00)
      (and
        (=
          (Seq_length result@34@00)
          (Set_card ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$))))
        (forall ((c $Ref)) (!
          (=
            (Set_in c ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$)))
            (Seq_contains result@34@00 c))
          :pattern ((Seq_contains result@34@00 c))
          :pattern ((Seq_contains_trigger result@34@00 c))
          :pattern ((Seq_contains_trigger result@34@00 c))
          ))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length result@34@00)))
            (not
              (Seq_contains (Seq_take result@34@00 i) (Seq_index result@34@00 i))))
          :pattern ((Seq_index result@34@00 i))
          ))
        (forall ((r $Ref)) (!
          (=>
            (Seq_contains result@34@00 r)
            (issubtype<Bool> (typeof<PyType> r) (set_arg<PyType> (typeof<PyType> self@33@00) 0)))
          :pattern ((Seq_contains result@34@00 r))
          :pattern ((Seq_contains_trigger result@34@00 r))
          :pattern ((Seq_contains_trigger result@34@00 r))
          ))))))
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3255|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (let ((result@34@00 (set___sil_seq__%limited s@$ self@33@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3256|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (let ((result@34@00 (set___sil_seq__%limited s@$ self@33@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3257|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (let ((result@34@00 (set___sil_seq__%limited s@$ self@33@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3258|)))
(assert (forall ((s@$ $Snap) (self@33@00 $Ref)) (!
  (let ((result@34@00 (set___sil_seq__%limited s@$ self@33@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@33@00))
  :qid |quant-u-3259|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-3215|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-3216|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (= (list___len__%limited s@$ self@36@00) (list___len__ s@$ self@36@00))
  :pattern ((list___len__ s@$ self@36@00))
  :qid |quant-u-3217|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (list___len__%stateless self@36@00)
  :pattern ((list___len__%limited s@$ self@36@00))
  :qid |quant-u-3218|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@62@00)
    (=>
      (list___len__%precondition s@$ self@36@00)
      (=
        (list___len__ s@$ self@36@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len__ s@$ self@36@00))
  :qid |quant-u-3260|)))
(assert (forall ((s@$ $Snap) (self@36@00 $Ref)) (!
  true
  :pattern ((list___len__ s@$ self@36@00))
  :qid |quant-u-3261|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref)) (!
  (= (PSeq___len__%limited s@$ self@38@00) (PSeq___len__ s@$ self@38@00))
  :pattern ((PSeq___len__ s@$ self@38@00))
  :qid |quant-u-3219|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref)) (!
  (PSeq___len__%stateless self@38@00)
  :pattern ((PSeq___len__%limited s@$ self@38@00))
  :qid |quant-u-3220|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref)) (!
  (let ((result@39@00 (PSeq___len__%limited s@$ self@38@00))) (=>
    (PSeq___len__%precondition s@$ self@38@00)
    (= result@39@00 (Seq_length (PSeq___sil_seq__ $Snap.unit self@38@00)))))
  :pattern ((PSeq___len__%limited s@$ self@38@00))
  :qid |quant-u-3262|)))
(assert (forall ((s@$ $Snap) (self@38@00 $Ref)) (!
  (let ((result@39@00 (PSeq___len__%limited s@$ self@38@00))) (=>
    (PSeq___len__%precondition s@$ self@38@00)
    (PSeq___sil_seq__%precondition $Snap.unit self@38@00)))
  :pattern ((PSeq___len__%limited s@$ self@38@00))
  :qid |quant-u-3263|)))
(assert (forall ((s@$ $Snap) (val@40@00 $Ref) (id@41@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@40@00 id@41@00)
    (_checkDefined s@$ val@40@00 id@41@00))
  :pattern ((_checkDefined s@$ val@40@00 id@41@00))
  :qid |quant-u-3221|)))
(assert (forall ((s@$ $Snap) (val@40@00 $Ref) (id@41@00 Int)) (!
  (_checkDefined%stateless val@40@00 id@41@00)
  :pattern ((_checkDefined%limited s@$ val@40@00 id@41@00))
  :qid |quant-u-3222|)))
(assert (forall ((s@$ $Snap) (val@40@00 $Ref) (id@41@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@40@00 id@41@00)
    (= (_checkDefined s@$ val@40@00 id@41@00) val@40@00))
  :pattern ((_checkDefined s@$ val@40@00 id@41@00))
  :qid |quant-u-3264|)))
(assert (forall ((s@$ $Snap) (val@40@00 $Ref) (id@41@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@40@00 id@41@00))
  :qid |quant-u-3265|)))
(assert (forall ((s@$ $Snap) (self@43@00 $Ref) (other@44@00 $Ref)) (!
  (=
    (int___eq__%limited s@$ self@43@00 other@44@00)
    (int___eq__ s@$ self@43@00 other@44@00))
  :pattern ((int___eq__ s@$ self@43@00 other@44@00))
  :qid |quant-u-3223|)))
(assert (forall ((s@$ $Snap) (self@43@00 $Ref) (other@44@00 $Ref)) (!
  (int___eq__%stateless self@43@00 other@44@00)
  :pattern ((int___eq__%limited s@$ self@43@00 other@44@00))
  :qid |quant-u-3224|)))
(assert (forall ((s@$ $Snap) (self@43@00 $Ref) (other@44@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@43@00 other@44@00)
    (=
      (int___eq__ s@$ self@43@00 other@44@00)
      (=
        (int___unbox__ $Snap.unit self@43@00)
        (int___unbox__ $Snap.unit other@44@00))))
  :pattern ((int___eq__ s@$ self@43@00 other@44@00))
  :qid |quant-u-3266|)))
(assert (forall ((s@$ $Snap) (self@43@00 $Ref) (other@44@00 $Ref)) (!
  (=>
    (int___eq__%precondition s@$ self@43@00 other@44@00)
    (and
      (int___unbox__%precondition $Snap.unit self@43@00)
      (int___unbox__%precondition $Snap.unit other@44@00)))
  :pattern ((int___eq__ s@$ self@43@00 other@44@00))
  :qid |quant-u-3267|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-3225|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-3226|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- set_loop ----------
(declare-const _cthread_156@0@01 $Ref)
(declare-const _caller_measures_156@1@01 Seq<Measure$>)
(declare-const _residue_156@2@01 $Perm)
(declare-const _current_wait_level_156@3@01 $Perm)
(declare-const _cthread_156@4@01 $Ref)
(declare-const _caller_measures_156@5@01 Seq<Measure$>)
(declare-const _residue_156@6@01 $Perm)
(declare-const _current_wait_level_156@7@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@4@01 $Ref.null)))
(assert (=
  ($Snap.second $t@8@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.second ($Snap.second $t@8@01)))))
(assert (= ($Snap.first ($Snap.second $t@8@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@4@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@8@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@9@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@9@01))
    ($Snap.second ($Snap.second $t@9@01)))))
(assert (= ($Snap.first ($Snap.second $t@9@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@9@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@9@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@9@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@6@01 _current_wait_level_156@7@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@10@01 $Ref)
; [exec]
; var b: Ref
(declare-const b@11@01 $Ref)
; [exec]
; var a: Ref
(declare-const a@12@01 $Ref)
; [exec]
; var c: Ref
(declare-const c@13@01 $Ref)
; [exec]
; var set_0: Ref
(declare-const set_0@14@01 $Ref)
; [exec]
; var set_1: Ref
(declare-const set_1@15@01 $Ref)
; [exec]
; var set_2: Ref
(declare-const set_2@16@01 $Ref)
; [exec]
; var iterable: Ref
(declare-const iterable@17@01 $Ref)
; [exec]
; var iter: Ref
(declare-const iter@18@01 $Ref)
; [exec]
; var loop_target: Ref
(declare-const loop_target@19@01 $Ref)
; [exec]
; var iter_err: Ref
(declare-const iter_err@20@01 $Ref)
; [exec]
; var seqtmp: Seq[Ref]
(declare-const seqtmp@21@01 Seq<$Ref>)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@22@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@23@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@24@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@25@01 $Perm)
; [exec]
; var _residue_161: Perm
(declare-const _residue_161@26@01 $Perm)
; [exec]
; var set_3: Ref
(declare-const set_3@27@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@28@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@29@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_156, set_0 := set___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@4@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@4@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@4@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@4@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@30@01 $Perm)
(declare-const res@31@01 $Ref)
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 ($Snap.combine ($Snap.first $t@32@01) ($Snap.second $t@32@01))))
(assert (= ($Snap.first $t@32@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@32@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@01))
    ($Snap.second ($Snap.second $t@32@01)))))
(assert (= ($Snap.first ($Snap.second $t@32@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@32@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@32@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@32@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_156@6@01 _current_wait_level_21@30@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@32@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
(declare-const sm@33@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@33@01  $FVF<set_acc>) res@31@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))))
(assert (not (= res@31@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@33@01  $FVF<set_acc>) res@31@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@31@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@31@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_0), set(int()))
(declare-const $t@34@01 $Snap)
(assert (= $t@34@01 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(int()))
; [eval] typeof(set_0)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@31@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(1)), int())
; [eval] issubtype(typeof(__prim__int___box__(1)), int())
; [eval] typeof(__prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(2)), int())
; [eval] issubtype(typeof(__prim__int___box__(2)), int())
; [eval] typeof(__prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; set_0.set_acc := Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] __prim__int___box__(1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@35@01 ((r $Ref)) $Perm
  (ite
    (= r res@31@01)
    ($Perm.min (ite (= r res@31@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@35@01 res@31@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@31@01) (= (- $Perm.Write (pTaken@35@01 r)) $Perm.No))
  
  :qid |quant-u-3270|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@36@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) res@31@01)
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 1)) (__prim__int___box__ $Snap.unit 2)) (__prim__int___box__ $Snap.unit 3))))
; [exec]
; b := set_0
; [exec]
; inhale _isDefined(98)
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] _isDefined(98)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 98))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 98))
(assert (_isDefined $Snap.unit 98))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_156, set_1 := set___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@38@01 $Perm)
(declare-const res@39@01 $Ref)
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 ($Snap.combine ($Snap.first $t@40@01) ($Snap.second $t@40@01))))
(assert (= ($Snap.first $t@40@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@40@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@40@01))
    ($Snap.second ($Snap.second $t@40@01)))))
(assert (= ($Snap.first ($Snap.second $t@40@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@40@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@40@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@40@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@40@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_156@6@01 _current_wait_level_21@38@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@40@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@40@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01)))))))
(declare-const sm@41@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@41@01  $FVF<set_acc>) res@39@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@40@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@39@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@39@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@42@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@31@01)
    (=
      ($FVF.lookup_set_acc (as sm@42@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@42@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@39@01)
    (=
      ($FVF.lookup_set_acc (as sm@42@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@41@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@42@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@41@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef1|)))
(declare-const pm@43@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@43@01  $FPM) r)
    (+
      (ite (= r res@31@01) $Perm.Write $Perm.No)
      (ite (= r res@39@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@43@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@43@01  $FPM) res@39@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@42@01  $FVF<set_acc>) res@39@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@40@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@39@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@39@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_1), set(set(int())))
(declare-const $t@44@01 $Snap)
(assert (= $t@44@01 $Snap.unit))
; [eval] issubtype(typeof(set_1), set(set(int())))
; [eval] typeof(set_1)
; [eval] set(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@39@01) (set<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(b, 98)), set(int()))
; [eval] issubtype(typeof(_checkDefined(b, 98)), set(int()))
; [eval] typeof(_checkDefined(b, 98))
; [eval] _checkDefined(b, 98)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@31@01 98))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@31@01 98))
; [eval] set(int())
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@31@01 98)) (set<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@31@01 98)) (set<PyType> (as int<PyType>  PyType))))
; [exec]
; _cwl_156, set_2 := set___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@45@01 $Perm)
(declare-const res@46@01 $Ref)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 ($Snap.combine ($Snap.first $t@47@01) ($Snap.second $t@47@01))))
(assert (= ($Snap.first $t@47@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@47@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@47@01))
    ($Snap.second ($Snap.second $t@47@01)))))
(assert (= ($Snap.first ($Snap.second $t@47@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@47@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@47@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@47@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_156@6@01 _current_wait_level_21@45@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@47@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
(declare-const sm@48@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@48@01  $FVF<set_acc>) res@46@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@46@01 res@39@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@46@01 res@31@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@46@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@49@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@31@01)
    (=
      ($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@39@01)
    (=
      ($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@41@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@41@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@46@01)
    (=
      ($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@48@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@48@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef5|)))
(declare-const pm@50@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@50@01  $FPM) r)
    (+
      (+
        (ite (= r res@31@01) $Perm.Write $Perm.No)
        (ite (= r res@39@01) $Perm.Write $Perm.No))
      (ite (= r res@46@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@50@01  $FPM) r))
  :qid |qp.resPrmSumDef6|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@50@01  $FPM) res@46@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@49@01  $FVF<set_acc>) res@46@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@47@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@46@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@46@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_2), set(int()))
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; [eval] issubtype(typeof(set_2), set(int()))
; [eval] typeof(set_2)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@46@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_2.set_acc := Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@52@01 ((r $Ref)) $Perm
  (ite
    (= r res@46@01)
    ($Perm.min (ite (= r res@46@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@53@01 ((r $Ref)) $Perm
  (ite
    (= r res@46@01)
    ($Perm.min
      (ite (= r res@31@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@52@01 r)))
    $Perm.No))
(define-fun pTaken@54@01 ((r $Ref)) $Perm
  (ite
    (= r res@46@01)
    ($Perm.min
      (ite (= r res@39@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@52@01 r)) (pTaken@53@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@52@01 res@46@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@46@01) (= (- $Perm.Write (pTaken@52@01 r)) $Perm.No))
  
  :qid |quant-u-3273|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@55@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) res@46@01)
  (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; assert issubtype(typeof(set_2), set(int()))
; [eval] issubtype(typeof(set_2), set(int()))
; [eval] typeof(set_2)
; [eval] set(int())
; [eval] int()
; [exec]
; set_1.set_acc := Set(_checkDefined(b, 98), set_2)
; [eval] Set(_checkDefined(b, 98), set_2)
; [eval] _checkDefined(b, 98)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@56@01 ((r $Ref)) $Perm
  (ite
    (= r res@39@01)
    ($Perm.min (ite (= r res@39@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@57@01 ((r $Ref)) $Perm
  (ite
    (= r res@39@01)
    ($Perm.min
      (ite (= r res@46@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@56@01 r)))
    $Perm.No))
(define-fun pTaken@58@01 ((r $Ref)) $Perm
  (ite
    (= r res@39@01)
    ($Perm.min
      (ite (= r res@31@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@56@01 r)) (pTaken@57@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@56@01 res@39@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@39@01) (= (- $Perm.Write (pTaken@56@01 r)) $Perm.No))
  
  :qid |quant-u-3276|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@59@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@59@01  $FVF<set_acc>) res@39@01)
  (Set_unionone (Set_singleton (_checkDefined $Snap.unit res@31@01 98)) res@46@01)))
; [exec]
; a := set_1
; [exec]
; inhale _isDefined(97)
(declare-const $t@60@01 $Snap)
(assert (= $t@60@01 $Snap.unit))
; [eval] _isDefined(97)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 97))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 97))
(assert (_isDefined $Snap.unit 97))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable := _checkDefined(a, 97)
; [eval] _checkDefined(a, 97)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@39@01 97))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@39@01 97))
(declare-const iterable@61@01 $Ref)
(assert (= iterable@61@01 (_checkDefined $Snap.unit res@39@01 97)))
; [exec]
; _cwl_156, iter := set___iter__(_cthread_156, _method_measures_156, _residue_156,
;   iterable)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> iterable@61@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable@61@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable@61@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable@61@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@62@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r res@39@01) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 10)))
    $Perm.No))
(define-fun pTaken@63@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r res@31@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 10)) (pTaken@62@01 r)))
    $Perm.No))
(define-fun pTaken@64@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r res@46@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 10)) (pTaken@62@01 r)) (pTaken@63@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@62@01 res@39@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@62@01 r) $Perm.No)
  
  :qid |quant-u-3279|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (= (- (/ (to_real 1) (to_real 10)) (pTaken@62@01 r)) $Perm.No))
  
  :qid |quant-u-3280|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@65@01 $Perm)
(declare-const _res@66@01 $Ref)
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 ($Snap.combine ($Snap.first $t@67@01) ($Snap.second $t@67@01))))
(assert (= ($Snap.first $t@67@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@67@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@67@01))
    ($Snap.second ($Snap.second $t@67@01)))))
(assert (= ($Snap.first ($Snap.second $t@67@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@67@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@67@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@67@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_156@6@01 _current_wait_level_25@65@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@67@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@66@01 iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
(assert (not (= _res@66@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
(declare-const sm@68@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@68@01  $FVF<set_acc>) iterable@61@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= iterable@61@01 res@39@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= iterable@61@01 res@39@01))
(declare-const $t@69@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite (= r res@39@01) (< $Perm.No (- $Perm.Write (pTaken@62@01 r))) false)
      (Set_equal ($FVF.lookup_set_acc $t@69@01 r) ($FVF.lookup_set_acc (as sm@59@01  $FVF<set_acc>) r)))
    (=>
      (= r iterable@61@01)
      (Set_equal ($FVF.lookup_set_acc $t@69@01 r) ($FVF.lookup_set_acc (as sm@68@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc (as sm@59@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@68@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@69@01 r))
  :qid |quant-u-3281|)))
(assert (not (= iterable@61@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@70@01 $Perm)
(assert ($Perm.isReadVar $k@70@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@46@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@31@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@70@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@39@01)
            (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@46@01) $Perm.Write $Perm.No))
        (ite (= r res@31@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3282|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@71@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= iterable@61@01 res@46@01)
  (=
    ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) iterable@61@01))))
(assert (=>
  (= iterable@61@01 res@31@01)
  (=
    ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) iterable@61@01))))
(assert (=>
  (ite
    (= iterable@61@01 res@39@01)
    (<
      $Perm.No
      (+
        (- $Perm.Write (pTaken@62@01 iterable@61@01))
        (/ (to_real 1) (to_real 20))))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc $t@69@01 iterable@61@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@70@01))
(assert (and
  (=>
    (= iterable@61@01 res@46@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) iterable@61@01)))
  (=>
    (= iterable@61@01 res@31@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) iterable@61@01)))
  (=>
    (ite
      (= iterable@61@01 res@39@01)
      (<
        $Perm.No
        (+
          (- $Perm.Write (pTaken@62@01 iterable@61@01))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc $t@69@01 iterable@61@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
  iterable@61@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@66@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> iterable@61@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@72@01 $Perm)
(declare-const _res@73@01 $Ref)
(declare-const _err@74@01 $Ref)
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 ($Snap.combine ($Snap.first $t@75@01) ($Snap.second $t@75@01))))
(assert (= ($Snap.first $t@75@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@75@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@75@01))
    ($Snap.second ($Snap.second $t@75@01)))))
(assert (= ($Snap.first ($Snap.second $t@75@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@75@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@75@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@75@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@6@01 _current_wait_level_149@72@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@75@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))
  (not (= _err@74@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@74@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | _err@74@01 == Null | live]
; [else-branch: 0 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | _err@74@01 == Null]
(assert (= _err@74@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (= _err@74@01 $Ref.null))
(assert (=>
  (= _err@74@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | _err@74@01 == Null | live]
; [else-branch: 1 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1 | _err@74@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@74@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | _err@74@01 == Null | live]
; [else-branch: 2 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2 | _err@74@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@74@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 3 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
; [then-branch: 4 | _err@74@01 != Null | dead]
; [else-branch: 4 | _err@74@01 == Null | live]
(push) ; 4
; [else-branch: 4 | _err@74@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
; [then-branch: 5 | _err@74@01 != Null | dead]
; [else-branch: 5 | _err@74@01 == Null | live]
(push) ; 4
; [else-branch: 5 | _err@74@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 6 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 7 | _res@73@01 != First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 1] | live]
; [else-branch: 7 | _res@73@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 7 | _res@73@01 != First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 1]]
(assert (not
  (=
    _res@73@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 7 | _res@73@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 1]]
(assert (=
  _res@73@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@73@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)))
  (not
    (=
      _res@73@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (or
    (=
      _res@73@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)))
    (not
      (=
        _res@73@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (and
    (=
      _res@73@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      _res@73@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 8 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@73@01) (Iterator_arg<PyType> (typeof<PyType> _res@66@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@76@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 9 | r@76@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01)))))))))))) | live]
; [else-branch: 9 | !(r@76@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))))))) | live]
(push) ; 5
; [then-branch: 9 | r@76@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
  r@76@01))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(r@76@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
    r@76@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1) | live]
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 10 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 11 | r@76@01 != First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] | live]
; [else-branch: 11 | r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 11 | r@76@01 != First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2]]
(assert (not
  (=
    r@76@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 11 | r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2]]
(assert (=
  r@76@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@76@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        2)))
  (not
    (=
      r@76@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (or
      (=
        r@76@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            2)))
      (not
        (=
          r@76@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1))))
(push) ; 6
; [then-branch: 12 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1 && r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] && _err@74@01 == Null | live]
; [else-branch: 12 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1 && r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] && _err@74@01 == Null) | live]
(push) ; 7
; [then-branch: 12 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1 && r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] && _err@74@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (and
    (=
      r@76@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          2)))
    (= _err@74@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 12 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 1 && r@76@01 == First:(Second:(Second:(Second:(Second:($t@67@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) - 2] && _err@74@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (and
      (=
        r@76@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            2)))
      (= _err@74@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 13 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 0) | live]
; [else-branch: 13 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 13 | !(First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 13 | First:(Second:(Second:(Second:(Second:(Second:($t@75@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 14 | _err@74@01 == Null | live]
; [else-branch: 14 | _err@74@01 != Null | live]
(push) ; 11
; [then-branch: 14 | _err@74@01 == Null]
(assert (= _err@74@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 14 | _err@74@01 != Null]
(assert (not (= _err@74@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      0)
    (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (and
      (=
        r@76@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            2)))
      (= _err@74@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (=
      r@76@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          2)))
    (= _err@74@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)
      (and
        (=
          r@76@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              2)))
        (= _err@74@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)
        (and
          (=
            r@76@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                2)))
          (= _err@74@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          0)
        (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)
      (and
        (=
          r@76@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              2)))
        (= _err@74@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (and
      (=
        r@76@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            2)))
      (= _err@74@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
      r@76@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
        r@76@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)
        (or
          (=
            r@76@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                2)))
          (not
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)
        (and
          (=
            r@76@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                2)))
          (= _err@74@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)
        (=
          r@76@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              2)))
        (= _err@74@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (and
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))
            (= _err@74@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (and
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (= _err@74@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              0)
            (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (and
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))
            (= _err@74@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
          1)
        (and
          (=
            r@76@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                2)))
          (= _err@74@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
      r@76@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
    r@76@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@76@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
          r@76@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
            r@76@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (or
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (not
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (and
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (= _err@74@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))
            (= _err@74@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                1)
              (and
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))
                (= _err@74@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  1)
                (and
                  (=
                    r@76@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                        2)))
                  (= _err@74@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  0)
                (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                1)
              (and
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))
                (= _err@74@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (and
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (= _err@74@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
          r@76@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
        r@76@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    r@76@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    r@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@76@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
          r@76@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
            r@76@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (or
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (not
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (and
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (= _err@74@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))
            (= _err@74@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                1)
              (and
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))
                (= _err@74@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  1)
                (and
                  (=
                    r@76@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                        2)))
                  (= _err@74@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  0)
                (or (not (= _err@74@01 $Ref.null)) (= _err@74@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                1)
              (and
                (=
                  r@76@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                      2)))
                (= _err@74@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
              1)
            (and
              (=
                r@76@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                    2)))
              (= _err@74@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
          r@76@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
        r@76@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    r@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@76@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
      r@76@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))))))
        r@76@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            1)
          (and
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  2)))
            (= _err@74@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
            0)
          (and
            (not (= _err@74@01 $Ref.null))
            (=
              r@76@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    r@76@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))
    r@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@74@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | _err@74@01 == Null | live]
; [else-branch: 15 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 15 | _err@74@01 == Null]
(assert (= _err@74@01 $Ref.null))
; [exec]
; c := loop_target
; [exec]
; inhale _isDefined(99)
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] _isDefined(99)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 99))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 99))
(assert (_isDefined $Snap.unit 99))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp := set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@78@01 $Perm)
(assert ($Perm.isReadVar $k@78@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@46@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@31@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@78@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@39@01)
            (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@46@01) $Perm.Write $Perm.No))
        (ite (= r res@31@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3283|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(declare-const seqtmp@79@01 Seq<$Ref>)
(assert (=
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_156))
; [eval] perm(MustTerminate(_cthread_156))
(declare-const _loop_original_must_terminate@80@01 $Perm)
(assert (= _loop_original_must_terminate@80@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@81@01 Seq<Measure$>)
(declare-const _cwl_156@82@01 $Perm)
(declare-const loop_target@83@01 $Ref)
(declare-const iter_err@84@01 $Ref)
(declare-const c@85@01 $Ref)
(declare-const _loop_check_before@86@01 Bool)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_161)
(assert (=
  ($Snap.second $t@87@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@01))
    ($Snap.second ($Snap.second $t@87@01)))))
(assert (= ($Snap.first ($Snap.second $t@87@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_161)
(assert (=
  ($Snap.second ($Snap.second $t@87@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@01))) $Snap.unit))
; [eval] _residue_156 <= _residue_161
(assert (<= _residue_156@6@01 _residue_161@26@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(declare-const sm@88@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  $Snap.unit))
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@89@01 $Perm)
(assert ($Perm.isReadVar $k@89@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@89@01 $Perm.No))
    (> (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No) $Perm.No))
  
  :qid |quant-u-3284|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@90@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01)
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@89@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  $Snap.unit))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@91@01 $Perm.No))
    (> (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No) $Perm.No))
  
  :qid |quant-u-3285|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | iter_err@84@01 == Null | live]
; [else-branch: 16 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 16 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 16 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err@84@01 $Ref.null)) (= iter_err@84@01 $Ref.null)))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 17 | iter_err@84@01 != Null | live]
; [else-branch: 17 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 17 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 17 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err@84@01 $Ref.null) (not (= iter_err@84@01 $Ref.null))))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | iter_err@84@01 == Null | live]
; [else-branch: 18 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 18 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 18 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 19 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 20 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 20 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    loop_target@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 21 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    loop_target@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | iter_err@84@01 == Null | live]
; [else-branch: 22 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 22 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 22 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), set(int()))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 23 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), set(int()))
; [eval] typeof(loop_target)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@83@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> c == loop_target && _isDefined(99)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 24 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 24 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] c == loop_target && _isDefined(99)
; [eval] c == loop_target
(push) ; 7
; [then-branch: 25 | c@85@01 != loop_target@83@01 | live]
; [else-branch: 25 | c@85@01 == loop_target@83@01 | live]
(push) ; 8
; [then-branch: 25 | c@85@01 != loop_target@83@01]
(assert (not (= c@85@01 loop_target@83@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 25 | c@85@01 == loop_target@83@01]
(assert (= c@85@01 loop_target@83@01))
; [eval] _isDefined(99)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= c@85@01 loop_target@83@01) (not (= c@85@01 loop_target@83@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= c@85@01 loop_target@83@01) (not (= c@85@01 loop_target@83@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= c@85@01 loop_target@83@01) (_isDefined $Snap.unit 99))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | iter_err@84@01 != Null | live]
; [else-branch: 26 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 26 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 26 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 27 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 27 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
(declare-const lambda12_28$l@92@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda12_28$l), set(int())) && (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] issubtype(typeof(lambda12_28$l), set(int()))
; [eval] typeof(lambda12_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@92@01), set[PyType](int[PyType]))) | live]
; [else-branch: 28 | issubtype[Bool](typeof[PyType](lambda12_28$l@92@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@92@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 28 | issubtype[Bool](typeof[PyType](lambda12_28$l@92@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] _checkDefined(a, 97)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef10|)))
(push) ; 8
(assert (not (= (_checkDefined $Snap.unit res@39@01 97) iterable@61@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef10|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
(pop) ; 5
(declare-fun inv@93@01 ($Ref) $Ref)
(declare-fun img@94@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef10|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda12_28$l1@92@01 $Ref) (lambda12_28$l2@92@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda12_28$l1@92@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@39@01 97))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda12_28$l1@92@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda12_28$l1@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@92@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@39@01 97)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda12_28$l1@92@01 $Ref) (lambda12_28$l2@92@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l1@92@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l1@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@92@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l2@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (= lambda12_28$l1@92@01 lambda12_28$l2@92@01))
    (= lambda12_28$l1@92@01 lambda12_28$l2@92@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |quant-u-3287|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((inv@93@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (and
      (= (inv@93@01 lambda12_28$l@92@01) lambda12_28$l@92@01)
      (img@94@01 lambda12_28$l@92@01)))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |quant-u-3287|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |set_acc-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (not (= lambda12_28$l@92@01 $Ref.null)))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@46@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@31@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@95@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite
        (= r res@39@01)
        (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@96@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r res@46@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@95@01 r)))
    $Perm.No))
(define-fun pTaken@97@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r res@31@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@95@01 r)) (pTaken@96@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (=
  (-
    (+ (- $Perm.Write (pTaken@62@01 res@39@01)) (/ (to_real 1) (to_real 20)))
    (pTaken@95@01 res@39@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@95@01 r) $Perm.No)
  
  :qid |quant-u-3290|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@95@01 r)) $Perm.No))
  
  :qid |quant-u-3291|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@98@01 $Perm)
(assert ($Perm.isReadVar $k@98@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@46@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@31@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@98@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@39@01)
            (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@46@01) $Perm.Write $Perm.No))
        (ite (= r res@31@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3292|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@98@01))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@46@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@31@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@99@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@39@01)
            (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@46@01) $Perm.Write $Perm.No))
        (ite (= r res@31@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3293|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@99@01))
(push) ; 5
(assert (not (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | _err@74@01 == Null | live]
; [else-branch: 29 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 29 | _err@74@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@74@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@74@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
; [then-branch: 30 | _err@74@01 != Null | dead]
; [else-branch: 30 | _err@74@01 == Null | live]
(push) ; 6
; [else-branch: 30 | _err@74@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 31 | _err@74@01 == Null | live]
; [else-branch: 31 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 31 | _err@74@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@74@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@74@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 32 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 32 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 33 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 33 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (=
    _res@73@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (=
    _res@73@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 34 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 34 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    _res@73@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
    _res@73@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@74@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | _err@74@01 == Null | live]
; [else-branch: 35 | _err@74@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 35 | _err@74@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), set(int()))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 36 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), set(int()))
; [eval] typeof(loop_target)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@73@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@73@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter.list_acc| > 0 ==> c == loop_target && _isDefined(99)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0 | live]
; [else-branch: 37 | !(|First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| > 0]
; [eval] c == loop_target && _isDefined(99)
; [eval] c == loop_target
(push) ; 7
; [then-branch: 38 | False | live]
; [else-branch: 38 | True | live]
(push) ; 8
; [then-branch: 38 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 38 | True]
; [eval] _isDefined(99)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (_isDefined $Snap.unit 99))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)
  (_isDefined $Snap.unit 99)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
; [then-branch: 39 | _err@74@01 != Null | dead]
; [else-branch: 39 | _err@74@01 == Null | live]
(push) ; 6
; [else-branch: 39 | _err@74@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| == 0 | dead]
; [else-branch: 40 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 40 | |First:(Second:(Second:(Second:(Second:($t@67@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))
    0)))
(declare-const lambda12_28$l@100@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda12_28$l), set(int())) && (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] issubtype(typeof(lambda12_28$l), set(int()))
; [eval] typeof(lambda12_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@100@01), set[PyType](int[PyType]))) | live]
; [else-branch: 41 | issubtype[Bool](typeof[PyType](lambda12_28$l@100@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 41 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@100@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 41 | issubtype[Bool](typeof[PyType](lambda12_28$l@100@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] _checkDefined(a, 97)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r res@46@01)
      (=
        ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef7|))
  (forall ((r $Ref)) (!
    (=>
      (= r res@31@01)
      (=
        ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (= r res@39@01)
        (<
          $Perm.No
          (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20))))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc $t@69@01 r)))
    :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc $t@69@01 r))
    :qid |qp.fvfValDef9|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@39@01 97) res@46@01)
        $Perm.Write
        $Perm.No)
      (ite
        (= (_checkDefined $Snap.unit res@39@01 97) res@31@01)
        $Perm.Write
        $Perm.No))
    (ite
      (= (_checkDefined $Snap.unit res@39@01 97) res@39@01)
      (+
        (- $Perm.Write (pTaken@62@01 (_checkDefined $Snap.unit res@39@01 97)))
        (/ (to_real 1) (to_real 20)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@46@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@31@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@39@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@69@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@69@01 r))
  :qid |qp.fvfValDef9|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
(pop) ; 5
(declare-fun inv@101@01 ($Ref) $Ref)
(declare-fun img@102@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@46@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@55@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@31@01)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@36@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@39@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@69@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@69@01 r))
  :qid |qp.fvfValDef9|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda12_28$l@100@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda12_28$l1@100@01 $Ref) (lambda12_28$l2@100@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda12_28$l1@100@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@39@01 97))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda12_28$l1@100@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda12_28$l1@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@100@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@39@01 97)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda12_28$l1@100@01 $Ref) (lambda12_28$l2@100@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l1@100@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l1@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@100@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l2@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (= lambda12_28$l1@100@01 lambda12_28$l2@100@01))
    (= lambda12_28$l1@100@01 lambda12_28$l2@100@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda12_28$l@100@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@102@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((inv@101@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda12_28$l@100@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@100@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (and
      (= (inv@101@01 lambda12_28$l@100@01) lambda12_28$l@100@01)
      (img@102@01 lambda12_28$l@100@01)))
  :pattern ((Set_in lambda12_28$l@100@01 ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@102@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (= (inv@101@01 r) r))
  :pattern ((inv@101@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@103@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@102@01 r)
      (= r (inv@101@01 r)))
    ($Perm.min (ite (= r res@31@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@104@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@102@01 r)
      (= r (inv@101@01 r)))
    ($Perm.min
      (ite (= r res@46@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@103@01 r)))
    $Perm.No))
(define-fun pTaken@105@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@102@01 r)
      (= r (inv@101@01 r)))
    ($Perm.min
      (ite
        (= r res@39@01)
        (-
          (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
          (pTaken@95@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@103@01 r)) (pTaken@104@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@103@01 res@31@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@102@01 r)
      (= r (inv@101@01 r)))
    (= (- $Perm.Write (pTaken@103@01 r)) $Perm.No))
  
  :qid |quant-u-3297|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@104@01 res@46@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@101@01 r) ($FVF.lookup_set_acc (as sm@71@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@102@01 r)
      (= r (inv@101@01 r)))
    (= (- (- $Perm.Write (pTaken@103@01 r)) (pTaken@104@01 r)) $Perm.No))
  
  :qid |quant-u-3299|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 42 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 43 | False | live]
; [else-branch: 43 | True | live]
(push) ; 8
; [then-branch: 43 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 43 | True]
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
; [then-branch: 44 | _err@74@01 != Null | live]
; [else-branch: 44 | _err@74@01 == Null | live]
(push) ; 10
; [then-branch: 44 | _err@74@01 != Null]
(assert (not (= _err@74@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 44 | _err@74@01 == Null]
; [eval] perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
(push) ; 11
; [then-branch: 45 | False | live]
; [else-branch: 45 | True | live]
(push) ; 12
; [then-branch: 45 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 45 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 46 | False | live]
; [else-branch: 46 | True | live]
(push) ; 14
; [then-branch: 46 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 46 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 47 | False | live]
; [else-branch: 47 | True | live]
(push) ; 16
; [then-branch: 47 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 47 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 48 | False | live]
; [else-branch: 48 | True | live]
(push) ; 18
; [then-branch: 48 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 48 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@74@01 $Ref.null) (not (= _err@74@01 $Ref.null))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@74@01 $Ref.null) (not (= _err@74@01 $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or (= _err@74@01 $Ref.null) (not (= _err@74@01 $Ref.null))))
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 5
; [then-branch: 49 | False | dead]
; [else-branch: 49 | True | live]
(push) ; 6
; [else-branch: 49 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((inv@93@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (= (inv@93@01 r) r))
  :pattern ((inv@93@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |quant-u-3287|)))
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (and
      (= (inv@93@01 lambda12_28$l@92@01) lambda12_28$l@92@01)
      (img@94@01 lambda12_28$l@92@01)))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |quant-u-3287|)))
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (not (= lambda12_28$l@92@01 $Ref.null)))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
  $Snap.unit))
(assert ($Perm.isReadVar $k@89@01))
(assert ($Perm.isReadVar $k@91@01))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef10|)))
(assert (=
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  $Snap.unit))
(assert (=
  ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01)
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err@84@01 $Ref.null)) (= iter_err@84@01 $Ref.null)))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err@84@01 $Ref.null) (not (= iter_err@84@01 $Ref.null))))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    loop_target@83@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    loop_target@83@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@84@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@83@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= c@85@01 loop_target@83@01) (not (= c@85@01 loop_target@83@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= c@85@01 loop_target@83@01) (_isDefined $Snap.unit 99))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err@84@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))))))))))))))))))))
(assert (forall ((lambda12_28$l@92@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda12_28$l@92@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda12_28$l@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-aux|)))
(assert (forall ((lambda12_28$l1@92@01 $Ref) (lambda12_28$l2@92@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda12_28$l1@92@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@39@01 97))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda12_28$l1@92@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda12_28$l1@92@01 ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@92@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@39@01 97)))
  
  :qid |set_acc-rcvrInj|)))
(assert (= $t@87@01 ($Snap.combine ($Snap.first $t@87@01) ($Snap.second $t@87@01))))
(assert (= ($Snap.first $t@87@01) $Snap.unit))
(assert (=
  ($Snap.second $t@87@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@87@01))
    ($Snap.second ($Snap.second $t@87@01)))))
(assert (= ($Snap.first ($Snap.second $t@87@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@87@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@87@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@87@01))) $Snap.unit))
(assert (<= _residue_156@6@01 _residue_161@26@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@87@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@87@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | iter_err@84@01 == Null | live]
; [else-branch: 50 | iter_err@84@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 50 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _cwl_156 := set_add(_cthread_156, _method_measures_156, _residue_161, _checkDefined(c,
;   99), __prim__int___box__(7))
; [eval] _checkDefined(c, 99)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c@85@01 99))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c@85@01 99))
; [eval] __prim__int___box__(7)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) 0))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable@61@01 (_checkDefined $Snap.unit c@85@01 99))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@106@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c@85@01 99))
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@107@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c@85@01 99))
    ($Perm.min
      (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (- $Perm.Write (pTaken@106@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)
      (pTaken@106@01 r))
    $Perm.No)
  
  :qid |quant-u-3301|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@106@01 r) $Perm.No)
  
  :qid |quant-u-3302|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (= (- $Perm.Write (pTaken@106@01 r)) $Perm.No))
  
  :qid |quant-u-3303|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c@85@01 99)) 0)))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_22@108@01 $Perm)
(declare-const $t@109@01 $Snap)
(assert (= $t@109@01 ($Snap.combine ($Snap.first $t@109@01) ($Snap.second $t@109@01))))
(assert (= ($Snap.first $t@109@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@109@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@109@01))
    ($Snap.second ($Snap.second $t@109@01)))))
(assert (= ($Snap.first ($Snap.second $t@109@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@109@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@109@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@109@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@109@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_161@26@01 _current_wait_level_22@108@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@109@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@109@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@109@01)))))))
(declare-const sm@110@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) (_checkDefined $Snap.unit c@85@01 99))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@109@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (= (_checkDefined $Snap.unit c@85@01 99) (_checkDefined $Snap.unit c@85@01 99))
  (= (_checkDefined $Snap.unit c@85@01 99) iterable@61@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit c@85@01 99)
      (_checkDefined $Snap.unit c@85@01 99))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit c@85@01 99)
      (_checkDefined $Snap.unit c@85@01 99))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (_checkDefined $Snap.unit c@85@01 99) (_checkDefined $Snap.unit c@85@01 99))
  (not (= (_checkDefined $Snap.unit c@85@01 99) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@109@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
(declare-const sm@111@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@94@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef13|)))
(declare-const pm@112@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@112@01  $FPM) r)
    (+
      (+
        (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
        (ite
          (and
            (img@94@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
          (- $Perm.Write (pTaken@106@01 r))
          $Perm.No))
      (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@112@01  $FPM) r))
  :qid |qp.resPrmSumDef14|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@112@01  $FPM) (_checkDefined $Snap.unit c@85@01 99)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
(declare-const sm@113@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@113@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@113@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (=
      ($FVF.lookup_set_acc (as sm@113@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@113@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef16|)))
(declare-const pm@114@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@114@01  $FPM) r)
    (+
      (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@114@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@114@01  $FPM) (_checkDefined $Snap.unit c@85@01 99)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Set(item)
(assert (Set_equal ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit c@85@01 99)) (Set_union ($FVF.lookup_set_acc (as sm@113@01  $FVF<set_acc>) (_checkDefined $Snap.unit c@85@01 99)) (Set_singleton (__prim__int___box__ $Snap.unit 7)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_156, loop_target, iter_err := Iterator___next__(_cthread_156, _method_measures_156,
;   _residue_156, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_149@115@01 $Perm)
(declare-const _res@116@01 $Ref)
(declare-const _err@117@01 $Ref)
(declare-const $t@118@01 $Snap)
(assert (= $t@118@01 ($Snap.combine ($Snap.first $t@118@01) ($Snap.second $t@118@01))))
(assert (= ($Snap.first $t@118@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@118@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@118@01))
    ($Snap.second ($Snap.second $t@118@01)))))
(assert (= ($Snap.first ($Snap.second $t@118@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@118@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@118@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@118@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_156@6@01 _current_wait_level_149@115@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@118@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))
  (not (= _err@117@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | _err@117@01 == Null | live]
; [else-branch: 51 | _err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 51 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 8
(push) ; 8
; [else-branch: 51 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@117@01 $Ref.null)) (= _err@117@01 $Ref.null)))
(assert (=>
  (= _err@117@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | _err@117@01 == Null | live]
; [else-branch: 52 | _err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 52 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 8
(push) ; 8
; [else-branch: 52 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@117@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | _err@117@01 == Null | live]
; [else-branch: 53 | _err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 53 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 8
(push) ; 8
; [else-branch: 53 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@117@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 54 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 54 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 55 | _err@117@01 != Null | live]
; [else-branch: 55 | _err@117@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 55 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 8
(push) ; 8
; [else-branch: 55 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@117@01 $Ref.null) (not (= _err@117@01 $Ref.null))))
(assert (=>
  (not (= _err@117@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | _err@117@01 != Null | live]
; [else-branch: 56 | _err@117@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 56 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 8
(push) ; 8
; [else-branch: 56 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@117@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 57 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 57 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 58 | _res@116@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 1] | live]
; [else-branch: 58 | _res@116@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 1] | live]
(push) ; 10
; [then-branch: 58 | _res@116@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 1]]
(assert (not
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 58 | _res@116@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 1]]
(assert (=
  _res@116@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)))
  (not
    (=
      _res@116@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or
    (=
      _res@116@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)))
    (not
      (=
        _res@116@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and
    (=
      _res@116@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      _res@116@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 59 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 59 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@116@01) (Iterator_arg<PyType> (typeof<PyType> _res@66@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@119@01 $Ref)
(push) ; 7
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 8
; [then-branch: 60 | r@119@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))) | live]
; [else-branch: 60 | !(r@119@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))) | live]
(push) ; 9
; [then-branch: 60 | r@119@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
  r@119@01))
(pop) ; 9
(push) ; 9
; [else-branch: 60 | !(r@119@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@87@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@119@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 10
; [then-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1) | live]
; [else-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1 | live]
(push) ; 11
; [then-branch: 61 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)))
(pop) ; 11
(push) ; 11
; [else-branch: 61 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 62 | r@119@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] | live]
; [else-branch: 62 | r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] | live]
(push) ; 13
; [then-branch: 62 | r@119@01 != First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2]]
(assert (not
  (=
    r@119@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        2)))))
(pop) ; 13
(push) ; 13
; [else-branch: 62 | r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2]]
(assert (=
  r@119@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      2))))
; [eval] _err == null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@119@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        2)))
  (not
    (=
      r@119@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          2))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (or
      (=
        r@119@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            2)))
      (not
        (=
          r@119@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1))))
(push) ; 10
; [then-branch: 63 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1 && r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] && _err@117@01 == Null | live]
; [else-branch: 63 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1 && r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] && _err@117@01 == Null) | live]
(push) ; 11
; [then-branch: 63 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1 && r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] && _err@117@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (and
    (=
      r@119@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          2)))
    (= _err@117@01 $Ref.null))))
(pop) ; 11
(push) ; 11
; [else-branch: 63 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 1 && r@119@01 == First:(Second:(Second:(Second:(Second:($t@87@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) - 2] && _err@117@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (and
      (=
        r@119@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            2)))
      (= _err@117@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 12
; [then-branch: 64 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 0) | live]
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 0 | live]
(push) ; 13
; [then-branch: 64 | !(First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    0)))
(pop) ; 13
(push) ; 13
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:($t@118@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  0))
; [eval] _err != null
(push) ; 14
; [then-branch: 65 | _err@117@01 == Null | live]
; [else-branch: 65 | _err@117@01 != Null | live]
(push) ; 15
; [then-branch: 65 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 65 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (and
      (=
        r@119@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            2)))
      (= _err@117@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (=
      r@119@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          2)))
    (= _err@117@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)
      (and
        (=
          r@119@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              2)))
        (= _err@117@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)
        (and
          (=
            r@119@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                2)))
          (= _err@117@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)
      (and
        (=
          r@119@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              2)))
        (= _err@117@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (and
      (=
        r@119@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            2)))
      (= _err@117@01 $Ref.null)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@119@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@119@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)
        (or
          (=
            r@119@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                2)))
          (not
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)
        (and
          (=
            r@119@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                2)))
          (= _err@117@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)
        (=
          r@119@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              2)))
        (= _err@117@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (and
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))
            (= _err@117@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (and
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (= _err@117@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (and
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))
            (= _err@117@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
          1)
        (and
          (=
            r@119@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                2)))
          (= _err@117@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
      r@119@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
    r@119@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@119@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@119@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@119@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (or
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (not
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (and
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (= _err@117@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))
            (= _err@117@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                1)
              (and
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))
                (= _err@117@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  1)
                (and
                  (=
                    r@119@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                        2)))
                  (= _err@117@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                1)
              (and
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))
                (= _err@117@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (and
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (= _err@117@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@119@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@119@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    r@119@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    r@119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@119@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@119@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
            r@119@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (or
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (not
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (and
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (= _err@117@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))
            (= _err@117@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                1)
              (and
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))
                (= _err@117@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  1)
                (and
                  (=
                    r@119@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                        2)))
                  (= _err@117@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                1)
              (and
                (=
                  r@119@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                      2)))
                (= _err@117@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
              1)
            (and
              (=
                r@119@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                    2)))
              (= _err@117@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
          r@119@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@119@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    r@119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@119@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
      r@119@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
        r@119@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            1)
          (and
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  2)))
            (= _err@117@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
            0)
          (and
            (not (= _err@117@01 $Ref.null))
            (=
              r@119@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    r@119@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))
    r@119@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 66 | _err@117@01 == Null | live]
; [else-branch: 66 | _err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 66 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
; [exec]
; c := loop_target
; [exec]
; inhale _isDefined(99)
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 $Snap.unit))
; [eval] _isDefined(99)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 67 | False | dead]
; [else-branch: 67 | True | live]
(push) ; 9
; [else-branch: 67 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; Precomputing data for removing quantified permissions
(define-fun pTaken@121@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@122@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@121@01 r)))
    $Perm.No))
(define-fun pTaken@123@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@121@01 r)) (pTaken@122@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@121@01 iterable@61@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@121@01 r)) $Perm.No))
  
  :qid |quant-u-3306|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@124@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@94@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
            (- $Perm.Write (pTaken@106@01 r))
            $Perm.No))
        (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3307|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)))
(assert (=>
  (ite
    (and
      (img@94@01 iterable@61@01)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 iterable@61@01)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 iterable@61@01) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (< $Perm.No (- $Perm.Write (pTaken@106@01 iterable@61@01)))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) iterable@61@01))))
(assert (=>
  (= iterable@61@01 (_checkDefined $Snap.unit c@85@01 99))
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) iterable@61@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@124@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01))
  (=>
    (ite
      (and
        (img@94@01 iterable@61@01)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 iterable@61@01)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 iterable@61@01) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 iterable@61@01)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) iterable@61@01)))
  (=>
    (= iterable@61@01 (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) iterable@61@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(push) ; 8
(assert (not (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@125@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@94@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
            (- $Perm.Write (pTaken@106@01 r))
            $Perm.No))
        (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3308|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@125@01))
(push) ; 8
(assert (not (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 68 | _err@117@01 == Null | live]
; [else-branch: 68 | _err@117@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 68 | _err@117@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@117@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@117@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 8
; [then-branch: 69 | _err@117@01 != Null | dead]
; [else-branch: 69 | _err@117@01 == Null | live]
(push) ; 9
; [else-branch: 69 | _err@117@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | _err@117@01 == Null | live]
; [else-branch: 70 | _err@117@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 70 | _err@117@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@117@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@117@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 71 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 71 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 72 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 72 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 73 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 73 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@116@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@116@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 74 | _err@117@01 == Null | live]
; [else-branch: 74 | _err@117@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 74 | _err@117@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), set(int()))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 75 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 75 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), set(int()))
; [eval] typeof(loop_target)
; [eval] set(int())
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@116@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@116@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter.list_acc| > 0 ==> c == loop_target && _isDefined(99)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 76 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 76 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] c == loop_target && _isDefined(99)
; [eval] c == loop_target
(push) ; 10
; [then-branch: 77 | False | live]
; [else-branch: 77 | True | live]
(push) ; 11
; [then-branch: 77 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 77 | True]
; [eval] _isDefined(99)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 99))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (_isDefined $Snap.unit 99)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 8
; [then-branch: 78 | _err@117@01 != Null | dead]
; [else-branch: 78 | _err@117@01 == Null | live]
(push) ; 9
; [else-branch: 78 | _err@117@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 8
; [then-branch: 79 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 79 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 79 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda12_28$l@126@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda12_28$l), set(int())) && (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] issubtype(typeof(lambda12_28$l), set(int()))
; [eval] typeof(lambda12_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 9
; [then-branch: 80 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@126@01), set[PyType](int[PyType]))) | live]
; [else-branch: 80 | issubtype[Bool](typeof[PyType](lambda12_28$l@126@01), set[PyType](int[PyType])) | live]
(push) ; 10
; [then-branch: 80 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@126@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 10
(push) ; 10
; [else-branch: 80 | issubtype[Bool](typeof[PyType](lambda12_28$l@126@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] _checkDefined(a, 97)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r iterable@61@01)
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef11|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (= r (_checkDefined $Snap.unit c@85@01 99))
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef13|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@39@01 97) iterable@61@01)
        (/ (to_real 1) (to_real 20))
        $Perm.No)
      (ite
        (and
          (img@94@01 (_checkDefined $Snap.unit res@39@01 97))
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 (_checkDefined $Snap.unit res@39@01 97))) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 (_checkDefined $Snap.unit res@39@01 97)) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 (_checkDefined $Snap.unit res@39@01 97)))
        $Perm.No))
    (ite
      (=
        (_checkDefined $Snap.unit res@39@01 97)
        (_checkDefined $Snap.unit c@85@01 99))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@94@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef13|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
(pop) ; 8
(declare-fun inv@127@01 ($Ref) $Ref)
(declare-fun img@128@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@94@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef13|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda12_28$l@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda12_28$l1@126@01 $Ref) (lambda12_28$l2@126@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda12_28$l1@126@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@39@01 97))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda12_28$l1@126@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda12_28$l1@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@126@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@39@01 97)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda12_28$l1@126@01 $Ref) (lambda12_28$l2@126@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l1@126@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l1@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@126@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l2@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (= lambda12_28$l1@126@01 lambda12_28$l2@126@01))
    (= lambda12_28$l1@126@01 lambda12_28$l2@126@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda12_28$l@126@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@128@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((inv@127@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda12_28$l@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@126@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (and
      (= (inv@127@01 lambda12_28$l@126@01) lambda12_28$l@126@01)
      (img@128@01 lambda12_28$l@126@01)))
  :pattern ((Set_in lambda12_28$l@126@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@128@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@127@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (= (inv@127@01 r) r))
  :pattern ((inv@127@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@129@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@127@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@128@01 r)
      (= r (inv@127@01 r)))
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@130@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@127@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@128@01 r)
      (= r (inv@127@01 r)))
    ($Perm.min
      (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@129@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      (pTaken@129@01 r))
    $Perm.No)
  
  :qid |quant-u-3311|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@127@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@128@01 r)
      (= r (inv@127@01 r)))
    (= (- $Perm.Write (pTaken@129@01 r)) $Perm.No))
  
  :qid |quant-u-3312|))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c@85@01 99)
        (_checkDefined $Snap.unit c@85@01 99))
      $Perm.Write
      $Perm.No)
    (pTaken@130@01 (_checkDefined $Snap.unit c@85@01 99)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@127@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@128@01 r)
      (= r (inv@127@01 r)))
    (= (- (- $Perm.Write (pTaken@129@01 r)) (pTaken@130@01 r)) $Perm.No))
  
  :qid |quant-u-3314|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 81 | False | dead]
; [else-branch: 81 | True | live]
(push) ; 9
; [else-branch: 81 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | True | live]
; [else-branch: 82 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 82 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 10
; [then-branch: 83 | False | live]
; [else-branch: 83 | True | live]
(push) ; 11
; [then-branch: 83 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 83 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 84 | False | live]
; [else-branch: 84 | True | live]
(push) ; 13
; [then-branch: 84 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 84 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 85 | False | live]
; [else-branch: 85 | True | live]
(push) ; 15
; [then-branch: 85 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 85 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 66 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
(pop) ; 7
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 86 | _err@117@01 != Null | live]
; [else-branch: 86 | _err@117@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 86 | _err@117@01 != Null]
(assert (not (= _err@117@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 8
; [then-branch: 87 | False | dead]
; [else-branch: 87 | True | live]
(push) ; 9
; [else-branch: 87 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; Precomputing data for removing quantified permissions
(define-fun pTaken@131@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@132@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@131@01 r)))
    $Perm.No))
(define-fun pTaken@133@01 ((r $Ref)) $Perm
  (ite
    (= r iterable@61@01)
    ($Perm.min
      (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@131@01 r)) (pTaken@132@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@131@01 iterable@61@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@131@01 r)) $Perm.No))
  
  :qid |quant-u-3317|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@134@01 $Perm)
(assert ($Perm.isReadVar $k@134@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@134@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@94@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
            (- $Perm.Write (pTaken@106@01 r))
            $Perm.No))
        (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3318|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
  ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01)))
(assert (=>
  (ite
    (and
      (img@94@01 iterable@61@01)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 iterable@61@01)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 iterable@61@01) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (< $Perm.No (- $Perm.Write (pTaken@106@01 iterable@61@01)))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) iterable@61@01))))
(assert (=>
  (= iterable@61@01 (_checkDefined $Snap.unit c@85@01 99))
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) iterable@61@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@134@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
    ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) iterable@61@01))
  (=>
    (ite
      (and
        (img@94@01 iterable@61@01)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 iterable@61@01)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 iterable@61@01) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 iterable@61@01)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) iterable@61@01)))
  (=>
    (= iterable@61@01 (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) iterable@61@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
(push) ; 8
(assert (not (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@135@01 $Perm)
(assert ($Perm.isReadVar $k@135@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable@61@01) (> $k@135@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable@61@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@94@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
            (- $Perm.Write (pTaken@106@01 r))
            $Perm.No))
        (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3319|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@135@01))
(push) ; 8
(assert (not (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@79@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) iterable@61@01))) iterable@61@01)))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 8
; [then-branch: 88 | _err@117@01 == Null | dead]
; [else-branch: 88 | _err@117@01 != Null | live]
(push) ; 9
; [else-branch: 88 | _err@117@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 89 | _err@117@01 != Null | live]
; [else-branch: 89 | _err@117@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 89 | _err@117@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= _err@117@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@117@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 8
; [then-branch: 90 | _err@117@01 == Null | dead]
; [else-branch: 90 | _err@117@01 != Null | live]
(push) ; 9
; [else-branch: 90 | _err@117@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 91 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 91 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 92 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 92 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (=
    _res@116@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@118@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 93 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 93 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@116@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01))))))
    _res@116@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 8
; [then-branch: 94 | _err@117@01 == Null | dead]
; [else-branch: 94 | _err@117@01 != Null | live]
(push) ; 9
; [else-branch: 94 | _err@117@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), set(int()))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 95 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 95 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), set(int()))
; [eval] typeof(loop_target)
; [eval] set(int())
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@116@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@116@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter.list_acc| > 0 ==> c == loop_target && _isDefined(99)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0 | live]
; [else-branch: 96 | !(|First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 96 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| > 0]
; [eval] c == loop_target && _isDefined(99)
; [eval] c == loop_target
(push) ; 10
; [then-branch: 97 | c@85@01 != _res@116@01 | live]
; [else-branch: 97 | c@85@01 == _res@116@01 | live]
(push) ; 11
; [then-branch: 97 | c@85@01 != _res@116@01]
(assert (not (= c@85@01 _res@116@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | c@85@01 == _res@116@01]
(assert (= c@85@01 _res@116@01))
; [eval] _isDefined(99)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= c@85@01 _res@116@01) (not (= c@85@01 _res@116@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (or (= c@85@01 _res@116@01) (not (= c@85@01 _res@116@01)))))
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= c@85@01 _res@116@01) (_isDefined $Snap.unit 99)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))
    0)
  (and (= c@85@01 _res@116@01) (_isDefined $Snap.unit 99))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | _err@117@01 != Null | live]
; [else-branch: 98 | _err@117@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 98 | _err@117@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 8
; [then-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| == 0 | dead]
; [else-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@87@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda12_28$l@136@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda12_28$l), set(int())) && (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] issubtype(typeof(lambda12_28$l), set(int()))
; [eval] typeof(lambda12_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 9
; [then-branch: 100 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@136@01), set[PyType](int[PyType]))) | live]
; [else-branch: 100 | issubtype[Bool](typeof[PyType](lambda12_28$l@136@01), set[PyType](int[PyType])) | live]
(push) ; 10
; [then-branch: 100 | !(issubtype[Bool](typeof[PyType](lambda12_28$l@136@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 10
(push) ; 10
; [else-branch: 100 | issubtype[Bool](typeof[PyType](lambda12_28$l@136@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda12_28$l in _checkDefined(a, 97).set_acc)
; [eval] _checkDefined(a, 97)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r iterable@61@01)
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef11|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (= r (_checkDefined $Snap.unit c@85@01 99))
      (=
        ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef13|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@39@01 97) iterable@61@01)
        (/ (to_real 1) (to_real 20))
        $Perm.No)
      (ite
        (and
          (img@94@01 (_checkDefined $Snap.unit res@39@01 97))
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 (_checkDefined $Snap.unit res@39@01 97))) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 (_checkDefined $Snap.unit res@39@01 97)) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 (_checkDefined $Snap.unit res@39@01 97)))
        $Perm.No))
    (ite
      (=
        (_checkDefined $Snap.unit res@39@01 97)
        (_checkDefined $Snap.unit c@85@01 99))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@94@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef13|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
(pop) ; 8
(declare-fun inv@137@01 ($Ref) $Ref)
(declare-fun img@138@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable@61@01)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@94@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
      (< $Perm.No (- $Perm.Write (pTaken@106@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c@85@01 99))
    (=
      ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@110@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef13|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda12_28$l@136@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda12_28$l1@136@01 $Ref) (lambda12_28$l2@136@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda12_28$l1@136@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@39@01 97))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda12_28$l1@136@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda12_28$l1@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@136@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@39@01 97)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda12_28$l1@136@01 $Ref) (lambda12_28$l2@136@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l1@136@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l1@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda12_28$l2@136@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda12_28$l2@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (= lambda12_28$l1@136@01 lambda12_28$l2@136@01))
    (= lambda12_28$l1@136@01 lambda12_28$l2@136@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda12_28$l@136@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@138@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@39@01 97))
  :pattern ((inv@137@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda12_28$l@136@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda12_28$l@136@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
    (and
      (= (inv@137@01 lambda12_28$l@136@01) lambda12_28$l@136@01)
      (img@138@01 lambda12_28$l@136@01)))
  :pattern ((Set_in lambda12_28$l@136@01 ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@138@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@137@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (= (inv@137@01 r) r))
  :pattern ((inv@137@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@137@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@137@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite (= r (_checkDefined $Snap.unit c@85@01 99)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        (- $Perm.Write (pTaken@106@01 r))
        $Perm.No)
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-3322|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@137@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-3323|))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c@85@01 99)
        (_checkDefined $Snap.unit c@85@01 99))
      $Perm.Write
      $Perm.No)
    (pTaken@140@01 (_checkDefined $Snap.unit c@85@01 99)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@137@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@137@01 r) ($FVF.lookup_set_acc (as sm@111@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)) $Perm.No))
  
  :qid |quant-u-3325|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_156)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 101 | False | dead]
; [else-branch: 101 | True | live]
(push) ; 9
; [else-branch: 101 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | True | live]
; [else-branch: 102 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 102 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 10
; [then-branch: 103 | False | live]
; [else-branch: 103 | True | live]
(push) ; 11
; [then-branch: 103 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 103 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 104 | False | live]
; [else-branch: 104 | True | live]
(push) ; 13
; [then-branch: 104 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 104 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 105 | False | live]
; [else-branch: 105 | True | live]
(push) ; 15
; [then-branch: 105 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 105 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 86 | _err@117@01 == Null]
(assert (= _err@117@01 $Ref.null))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 50 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
(pop) ; 6
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@39@01 iterable@61@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= res@39@01 iterable@61@01))
(declare-const $t@141@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (= r iterable@61@01)
      (Set_equal ($FVF.lookup_set_acc $t@141@01 r) ($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r)))
    (=>
      (ite
        (= r res@39@01)
        (<
          $Perm.No
          (-
            (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
            (pTaken@95@01 r)))
        false)
      (Set_equal ($FVF.lookup_set_acc $t@141@01 r) ($FVF.lookup_set_acc $t@69@01 r))))
  :pattern (($FVF.lookup_set_acc (as sm@88@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@69@01 r))
  :pattern (($FVF.lookup_set_acc $t@141@01 r))
  :qid |quant-u-3326|)))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@84@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@84@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | iter_err@84@01 != Null | live]
; [else-branch: 106 | iter_err@84@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 106 | iter_err@84@01 != Null]
(assert (not (= iter_err@84@01 $Ref.null)))
; [exec]
; exhale perm(MustTerminate(_cthread_156)) > none ==>
;   acc(MustTerminate(_cthread_156), perm(MustTerminate(_cthread_156)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_156)) > none
; [eval] perm(MustTerminate(_cthread_156))
; [then-branch: 107 | False | dead]
; [else-branch: 107 | True | live]
(push) ; 7
; [else-branch: 107 | True]
; [exec]
; _cwl_156 := Iterator___del__(_cthread_156, _method_measures_156, _residue_161,
;   iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@142@01 $Perm)
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 ($Snap.combine ($Snap.first $t@143@01) ($Snap.second $t@143@01))))
(assert (= ($Snap.first $t@143@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@143@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@143@01))
    ($Snap.second ($Snap.second $t@143@01)))))
(assert (= ($Snap.first ($Snap.second $t@143@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@143@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@143@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@143@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_161@26@01 _current_wait_level_150@142@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@143@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@143@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0))) | dead]
; [else-branch: 108 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 108 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 1))) | dead]
; [else-branch: 109 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 109 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0))) | live]
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 110 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@67@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))) 0))))
(declare-const sm@144@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@144@01  $FVF<set_acc>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
    iterable@61@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@145@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite
        (= r iterable@61@01)
        (<
          $Perm.No
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@95@01 r))))
        false)
      (Set_equal ($FVF.lookup_set_acc $t@145@01 r) ($FVF.lookup_set_acc $t@141@01 r)))
    (=>
      (=
        r
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
      (Set_equal ($FVF.lookup_set_acc $t@145@01 r) ($FVF.lookup_set_acc (as sm@144@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc $t@141@01 r))
  :pattern (($FVF.lookup_set_acc (as sm@144@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@145@01 r))
  :qid |quant-u-3327|)))
(assert (<=
  $Perm.No
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
    (/ (to_real 1) (to_real 20))
    $Perm.No)))
(assert (<=
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
    (/ (to_real 1) (to_real 20))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@01)))))))))
      $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label post_loop
; [exec]
; _cwl_156, set_3 := set___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _current_wait_level_21@146@01 $Perm)
(declare-const res@147@01 $Ref)
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@148@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@148@01))
    ($Snap.second ($Snap.second $t@148@01)))))
(assert (= ($Snap.first ($Snap.second $t@148@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@148@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@148@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@148@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_156@6@01 _current_wait_level_21@146@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@148@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
(declare-const sm@149@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@149@01  $FVF<set_acc>) res@147@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@147@01 iterable@61@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@147@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@150@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (=
      ($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r iterable@61@01)
      (<
        $Perm.No
        (+
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@95@01 r)))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@145@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@145@01 r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@147@01)
    (=
      ($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@149@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@149@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef20|)))
(declare-const pm@151@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@151@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@94@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
          $Perm.Write
          $Perm.No)
        (ite
          (= r iterable@61@01)
          (+
            (+
              (/ (to_real 1) (to_real 20))
              (-
                (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
                (pTaken@95@01 r)))
            (/ (to_real 1) (to_real 20)))
          $Perm.No))
      (ite (= r res@147@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef21|)))
(set-option :timeout 0)
(push) ; 11
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@151@01  $FPM) res@147@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@150@01  $FVF<set_acc>) res@147@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@147@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@147@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_3), set(int()))
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] issubtype(typeof(set_3), set(int()))
; [eval] typeof(set_3)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@147@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] int()
; [exec]
; set_3.set_acc := Set(__prim__int___box__(4))
; [eval] Set(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 11
(pop) ; 11
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@153@01 ((r $Ref)) $Perm
  (ite
    (= r res@147@01)
    ($Perm.min (ite (= r res@147@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@154@01 ((r $Ref)) $Perm
  (ite
    (= r res@147@01)
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@153@01 r)))
    $Perm.No))
(define-fun pTaken@155@01 ((r $Ref)) $Perm
  (ite
    (= r res@147@01)
    ($Perm.min
      (ite
        (= r iterable@61@01)
        (+
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@95@01 r)))
          (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (- (- $Perm.Write (pTaken@153@01 r)) (pTaken@154@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@153@01 res@147@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@147@01) (= (- $Perm.Write (pTaken@153@01 r)) $Perm.No))
  
  :qid |quant-u-3330|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@156@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@156@01  $FVF<set_acc>) res@147@01)
  (Set_singleton (__prim__int___box__ $Snap.unit 4))))
; [exec]
; _cwl_156 := set_add(_cthread_156, _method_measures_156, _residue_156, _checkDefined(a,
;   97), set_3)
; [eval] _checkDefined(a, 97)
(set-option :timeout 0)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 11
(pop) ; 11
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) 0))))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@147@01 (_checkDefined $Snap.unit res@39@01 97))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@157@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@39@01 97))
    ($Perm.min
      (ite
        (= r iterable@61@01)
        (+
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@95@01 r)))
          (/ (to_real 1) (to_real 20)))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@158@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@39@01 97))
    ($Perm.min
      (ite (= r res@147@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@157@01 r)))
    $Perm.No))
(define-fun pTaken@159@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@39@01 97))
    ($Perm.min
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@157@01 r)) (pTaken@158@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (=
  (-
    (+
      (+
        (/ (to_real 1) (to_real 20))
        (-
          (+
            (- $Perm.Write (pTaken@62@01 iterable@61@01))
            (/ (to_real 1) (to_real 20)))
          (pTaken@95@01 iterable@61@01)))
      (/ (to_real 1) (to_real 20)))
    (pTaken@157@01 iterable@61@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@39@01 97))
    (= (- $Perm.Write (pTaken@157@01 r)) $Perm.No))
  
  :qid |quant-u-3333|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> res@147@01) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@147@01) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@39@01 97)) 0)))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const _current_wait_level_22@160@01 $Perm)
(declare-const $t@161@01 $Snap)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (= ($Snap.first $t@161@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@161@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@161@01))
    ($Snap.second ($Snap.second $t@161@01)))))
(assert (= ($Snap.first ($Snap.second $t@161@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@161@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@161@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@161@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_156@6@01 _current_wait_level_22@160@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@161@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
(declare-const sm@162@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@162@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit res@39@01 97)
    (_checkDefined $Snap.unit res@39@01 97))
  (= (_checkDefined $Snap.unit res@39@01 97) res@147@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit res@39@01 97)
      (_checkDefined $Snap.unit res@39@01 97))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit res@39@01 97)
      (_checkDefined $Snap.unit res@39@01 97))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (_checkDefined $Snap.unit res@39@01 97)
    (_checkDefined $Snap.unit res@39@01 97))
  (not (= (_checkDefined $Snap.unit res@39@01 97) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
(declare-const sm@163@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (=
      ($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@147@01)
    (=
      ($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@156@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@156@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@39@01 97))
    (=
      ($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@162@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@162@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef24|)))
(declare-const pm@164@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@164@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@94@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
          $Perm.Write
          $Perm.No)
        (ite (= r res@147@01) $Perm.Write $Perm.No))
      (ite (= r (_checkDefined $Snap.unit res@39@01 97)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@164@01  $FPM) r))
  :qid |qp.resPrmSumDef25|)))
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@164@01  $FPM) (_checkDefined $Snap.unit res@39@01 97)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
(declare-const sm@165@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@147@01)
    (=
      ($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@156@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@156@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r iterable@61@01)
      (<
        $Perm.No
        (+
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@95@01 r)))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@145@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@145@01 r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@94@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
    (=
      ($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@87@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef28|)))
(declare-const pm@166@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@166@01  $FPM) r)
    (+
      (+
        (ite (= r res@147@01) $Perm.Write $Perm.No)
        (ite
          (= r iterable@61@01)
          (+
            (+
              (/ (to_real 1) (to_real 20))
              (-
                (+ (- $Perm.Write (pTaken@62@01 r)) (/ (to_real 1) (to_real 20)))
                (pTaken@95@01 r)))
            (/ (to_real 1) (to_real 20)))
          $Perm.No))
      (ite
        (and
          (img@94@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@93@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@93@01 r) ($FVF.lookup_set_acc (as sm@90@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@166@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(push) ; 11
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@166@01  $FPM) (_checkDefined $Snap.unit res@39@01 97)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] Set(item)
(assert (Set_equal ($FVF.lookup_set_acc (as sm@163@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)) (Set_union ($FVF.lookup_set_acc (as sm@165@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@39@01 97)) (Set_singleton res@147@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label __end
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 106 | iter_err@84@01 == Null]
(assert (= iter_err@84@01 $Ref.null))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@74@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | _err@74@01 != Null | dead]
; [else-branch: 111 | _err@74@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 111 | _err@74@01 == Null]
(assert (= _err@74@01 $Ref.null))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- set_no_false ----------
(declare-const _cthread_157@167@01 $Ref)
(declare-const _caller_measures_157@168@01 Seq<Measure$>)
(declare-const _residue_157@169@01 $Perm)
(declare-const _current_wait_level_157@170@01 $Perm)
(declare-const _cthread_157@171@01 $Ref)
(declare-const _caller_measures_157@172@01 Seq<Measure$>)
(declare-const _residue_157@173@01 $Perm)
(declare-const _current_wait_level_157@174@01 $Perm)
(push) ; 1
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 ($Snap.combine ($Snap.first $t@175@01) ($Snap.second $t@175@01))))
(assert (= ($Snap.first $t@175@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@171@01 $Ref.null)))
(assert (=
  ($Snap.second $t@175@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@175@01))
    ($Snap.second ($Snap.second $t@175@01)))))
(assert (= ($Snap.first ($Snap.second $t@175@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@171@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@175@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 ($Snap.combine ($Snap.first $t@176@01) ($Snap.second $t@176@01))))
(assert (= ($Snap.first $t@176@01) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: Level(_r_6) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@176@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@176@01))
    ($Snap.second ($Snap.second $t@176@01)))))
(assert (= ($Snap.first ($Snap.second $t@176@01)) $Snap.unit))
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: Level(_r_6) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@176@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@176@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@176@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@176@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@173@01 _current_wait_level_157@174@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@176@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@177@01 $Ref)
; [exec]
; var b_0: Ref
(declare-const b_0@178@01 $Ref)
; [exec]
; var a_0: Ref
(declare-const a_0@179@01 $Ref)
; [exec]
; var c_0: Ref
(declare-const c_0@180@01 $Ref)
; [exec]
; var set_4: Ref
(declare-const set_4@181@01 $Ref)
; [exec]
; var set_5: Ref
(declare-const set_5@182@01 $Ref)
; [exec]
; var set_6: Ref
(declare-const set_6@183@01 $Ref)
; [exec]
; var iterable_0: Ref
(declare-const iterable_0@184@01 $Ref)
; [exec]
; var iter_0: Ref
(declare-const iter_0@185@01 $Ref)
; [exec]
; var loop_target_0: Ref
(declare-const loop_target_0@186@01 $Ref)
; [exec]
; var iter_err_0: Ref
(declare-const iter_err_0@187@01 $Ref)
; [exec]
; var seqtmp_0: Seq[Ref]
(declare-const seqtmp_0@188@01 Seq<$Ref>)
; [exec]
; var _loop_measures_0: Seq[Measure$]
(declare-const _loop_measures_0@189@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_0: Bool
(declare-const _loop_check_before_0@190@01 Bool)
; [exec]
; var _loop_termination_flag_0: Bool
(declare-const _loop_termination_flag_0@191@01 Bool)
; [exec]
; var _loop_original_must_terminate_0: Perm
(declare-const _loop_original_must_terminate_0@192@01 $Perm)
; [exec]
; var _residue_162: Perm
(declare-const _residue_162@193@01 $Perm)
; [exec]
; var set_7: Ref
(declare-const set_7@194@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@195@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@196@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_157, set_4 := set___init__(_cthread_157, _method_measures_157, _residue_157)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@171@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@171@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@171@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@171@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@197@01 $Perm)
(declare-const res@198@01 $Ref)
(declare-const $t@199@01 $Snap)
(assert (= $t@199@01 ($Snap.combine ($Snap.first $t@199@01) ($Snap.second $t@199@01))))
(assert (= ($Snap.first $t@199@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@199@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@199@01))
    ($Snap.second ($Snap.second $t@199@01)))))
(assert (= ($Snap.first ($Snap.second $t@199@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@199@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@199@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@199@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_157@173@01 _current_wait_level_21@197@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@199@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
(declare-const sm@200@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@200@01  $FVF<set_acc>) res@198@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))))
(assert (not (= res@198@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@200@01  $FVF<set_acc>) res@198@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@199@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@198@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@198@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_4), set(int()))
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 $Snap.unit))
; [eval] issubtype(typeof(set_4), set(int()))
; [eval] typeof(set_4)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@198@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(1)), int())
; [eval] issubtype(typeof(__prim__int___box__(1)), int())
; [eval] typeof(__prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(2)), int())
; [eval] issubtype(typeof(__prim__int___box__(2)), int())
; [eval] typeof(__prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; set_4.set_acc := Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] __prim__int___box__(1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@202@01 ((r $Ref)) $Perm
  (ite
    (= r res@198@01)
    ($Perm.min (ite (= r res@198@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@202@01 res@198@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@198@01) (= (- $Perm.Write (pTaken@202@01 r)) $Perm.No))
  
  :qid |quant-u-3336|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@203@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) res@198@01)
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 1)) (__prim__int___box__ $Snap.unit 2)) (__prim__int___box__ $Snap.unit 3))))
; [exec]
; b_0 := set_4
; [exec]
; inhale _isDefined(3170146)
(declare-const $t@204@01 $Snap)
(assert (= $t@204@01 $Snap.unit))
; [eval] _isDefined(3170146)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170146))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170146))
(assert (_isDefined $Snap.unit 3170146))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_157, set_5 := set___init__(_cthread_157, _method_measures_157, _residue_157)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@205@01 $Perm)
(declare-const res@206@01 $Ref)
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 ($Snap.combine ($Snap.first $t@207@01) ($Snap.second $t@207@01))))
(assert (= ($Snap.first $t@207@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@207@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@207@01))
    ($Snap.second ($Snap.second $t@207@01)))))
(assert (= ($Snap.first ($Snap.second $t@207@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@207@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@207@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@207@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_157@173@01 _current_wait_level_21@205@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@207@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
(declare-const sm@208@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@208@01  $FVF<set_acc>) res@206@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@206@01 res@198@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@206@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@209@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@198@01)
    (=
      ($FVF.lookup_set_acc (as sm@209@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@209@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@206@01)
    (=
      ($FVF.lookup_set_acc (as sm@209@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@208@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@209@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@208@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef31|)))
(declare-const pm@210@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@210@01  $FPM) r)
    (+
      (ite (= r res@198@01) $Perm.Write $Perm.No)
      (ite (= r res@206@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@210@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@210@01  $FPM) res@206@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@209@01  $FVF<set_acc>) res@206@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@206@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@206@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_5), set(set(int())))
(declare-const $t@211@01 $Snap)
(assert (= $t@211@01 $Snap.unit))
; [eval] issubtype(typeof(set_5), set(set(int())))
; [eval] typeof(set_5)
; [eval] set(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@206@01) (set<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(b_0, 3170146)), set(int()))
; [eval] issubtype(typeof(_checkDefined(b_0, 3170146)), set(int()))
; [eval] typeof(_checkDefined(b_0, 3170146))
; [eval] _checkDefined(b_0, 3170146)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@198@01 3170146))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@198@01 3170146))
; [eval] set(int())
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@198@01 3170146)) (set<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@198@01 3170146)) (set<PyType> (as int<PyType>  PyType))))
; [exec]
; _cwl_157, set_6 := set___init__(_cthread_157, _method_measures_157, _residue_157)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@212@01 $Perm)
(declare-const res@213@01 $Ref)
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 ($Snap.combine ($Snap.first $t@214@01) ($Snap.second $t@214@01))))
(assert (= ($Snap.first $t@214@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@214@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@214@01))
    ($Snap.second ($Snap.second $t@214@01)))))
(assert (= ($Snap.first ($Snap.second $t@214@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@214@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@214@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@214@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_157@173@01 _current_wait_level_21@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@214@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
(declare-const sm@215@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@215@01  $FVF<set_acc>) res@213@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@213@01 res@206@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@213@01 res@198@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@213@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@216@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@198@01)
    (=
      ($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@206@01)
    (=
      ($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@208@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@208@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@213@01)
    (=
      ($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@215@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@215@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef35|)))
(declare-const pm@217@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@217@01  $FPM) r)
    (+
      (+
        (ite (= r res@198@01) $Perm.Write $Perm.No)
        (ite (= r res@206@01) $Perm.Write $Perm.No))
      (ite (= r res@213@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@217@01  $FPM) r))
  :qid |qp.resPrmSumDef36|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@217@01  $FPM) res@213@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@216@01  $FVF<set_acc>) res@213@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@214@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@213@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@213@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_6), set(int()))
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] issubtype(typeof(set_6), set(int()))
; [eval] typeof(set_6)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@213@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_6.set_acc := Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@219@01 ((r $Ref)) $Perm
  (ite
    (= r res@213@01)
    ($Perm.min (ite (= r res@213@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@220@01 ((r $Ref)) $Perm
  (ite
    (= r res@213@01)
    ($Perm.min
      (ite (= r res@198@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@219@01 r)))
    $Perm.No))
(define-fun pTaken@221@01 ((r $Ref)) $Perm
  (ite
    (= r res@213@01)
    ($Perm.min
      (ite (= r res@206@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@219@01 r)) (pTaken@220@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@219@01 res@213@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@213@01) (= (- $Perm.Write (pTaken@219@01 r)) $Perm.No))
  
  :qid |quant-u-3339|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@222@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) res@213@01)
  (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; assert issubtype(typeof(set_6), set(int()))
; [eval] issubtype(typeof(set_6), set(int()))
; [eval] typeof(set_6)
; [eval] set(int())
; [eval] int()
; [exec]
; set_5.set_acc := Set(_checkDefined(b_0, 3170146), set_6)
; [eval] Set(_checkDefined(b_0, 3170146), set_6)
; [eval] _checkDefined(b_0, 3170146)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@223@01 ((r $Ref)) $Perm
  (ite
    (= r res@206@01)
    ($Perm.min (ite (= r res@206@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@224@01 ((r $Ref)) $Perm
  (ite
    (= r res@206@01)
    ($Perm.min
      (ite (= r res@213@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@223@01 r)))
    $Perm.No))
(define-fun pTaken@225@01 ((r $Ref)) $Perm
  (ite
    (= r res@206@01)
    ($Perm.min
      (ite (= r res@198@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@223@01 r)) (pTaken@224@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@223@01 res@206@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@206@01) (= (- $Perm.Write (pTaken@223@01 r)) $Perm.No))
  
  :qid |quant-u-3342|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@226@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@226@01  $FVF<set_acc>) res@206@01)
  (Set_unionone (Set_singleton (_checkDefined $Snap.unit res@198@01 3170146)) res@213@01)))
; [exec]
; a_0 := set_5
; [exec]
; inhale _isDefined(3170145)
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] _isDefined(3170145)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170145))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170145))
(assert (_isDefined $Snap.unit 3170145))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable_0 := _checkDefined(a_0, 3170145)
; [eval] _checkDefined(a_0, 3170145)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@206@01 3170145))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@206@01 3170145))
(declare-const iterable_0@228@01 $Ref)
(assert (= iterable_0@228@01 (_checkDefined $Snap.unit res@206@01 3170145)))
; [exec]
; _cwl_157, iter_0 := set___iter__(_cthread_157, _method_measures_157, _residue_157,
;   iterable_0)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> iterable_0@228@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_0@228@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable_0@228@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_0@228@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@229@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite (= r res@206@01) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 10)))
    $Perm.No))
(define-fun pTaken@230@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite (= r res@198@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 10)) (pTaken@229@01 r)))
    $Perm.No))
(define-fun pTaken@231@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite (= r res@213@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 10)) (pTaken@229@01 r)) (pTaken@230@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@229@01 res@206@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@229@01 r) $Perm.No)
  
  :qid |quant-u-3345|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (= (- (/ (to_real 1) (to_real 10)) (pTaken@229@01 r)) $Perm.No))
  
  :qid |quant-u-3346|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@232@01 $Perm)
(declare-const _res@233@01 $Ref)
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@234@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@234@01))
    ($Snap.second ($Snap.second $t@234@01)))))
(assert (= ($Snap.first ($Snap.second $t@234@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@234@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@234@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@234@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_157@173@01 _current_wait_level_25@232@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@234@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@233@01 iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
(assert (not (= _res@233@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
(declare-const sm@235@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@235@01  $FVF<set_acc>) iterable_0@228@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= iterable_0@228@01 res@206@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= iterable_0@228@01 res@206@01))
(declare-const $t@236@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite (= r res@206@01) (< $Perm.No (- $Perm.Write (pTaken@229@01 r))) false)
      (Set_equal ($FVF.lookup_set_acc $t@236@01 r) ($FVF.lookup_set_acc (as sm@226@01  $FVF<set_acc>) r)))
    (=>
      (= r iterable_0@228@01)
      (Set_equal ($FVF.lookup_set_acc $t@236@01 r) ($FVF.lookup_set_acc (as sm@235@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc (as sm@226@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@235@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@236@01 r))
  :qid |quant-u-3347|)))
(assert (not (= iterable_0@228@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@237@01 $Perm)
(assert ($Perm.isReadVar $k@237@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@213@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@198@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@237@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@206@01)
            (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@213@01) $Perm.Write $Perm.No))
        (ite (= r res@198@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3348|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@238@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= iterable_0@228@01 res@213@01)
  (=
    ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
    ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) iterable_0@228@01))))
(assert (=>
  (= iterable_0@228@01 res@198@01)
  (=
    ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
    ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) iterable_0@228@01))))
(assert (=>
  (ite
    (= iterable_0@228@01 res@206@01)
    (<
      $Perm.No
      (+
        (- $Perm.Write (pTaken@229@01 iterable_0@228@01))
        (/ (to_real 1) (to_real 20))))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
    ($FVF.lookup_set_acc $t@236@01 iterable_0@228@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@237@01))
(assert (and
  (=>
    (= iterable_0@228@01 res@213@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
      ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) iterable_0@228@01)))
  (=>
    (= iterable_0@228@01 res@198@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
      ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) iterable_0@228@01)))
  (=>
    (ite
      (= iterable_0@228@01 res@206@01)
      (<
        $Perm.No
        (+
          (- $Perm.Write (pTaken@229@01 iterable_0@228@01))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01)
      ($FVF.lookup_set_acc $t@236@01 iterable_0@228@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
  iterable_0@228@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@233@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> iterable_0@228@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_157, loop_target_0, iter_err_0 := Iterator___next__(_cthread_157, _method_measures_157,
;   _residue_157, iter_0)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@239@01 $Perm)
(declare-const _res@240@01 $Ref)
(declare-const _err@241@01 $Ref)
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 ($Snap.combine ($Snap.first $t@242@01) ($Snap.second $t@242@01))))
(assert (= ($Snap.first $t@242@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@242@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@242@01))
    ($Snap.second ($Snap.second $t@242@01)))))
(assert (= ($Snap.first ($Snap.second $t@242@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@242@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@242@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@242@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_157@173@01 _current_wait_level_149@239@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@242@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))
  (not (= _err@241@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@241@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | _err@241@01 == Null | live]
; [else-branch: 112 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 112 | _err@241@01 == Null]
(assert (= _err@241@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (= _err@241@01 $Ref.null))
(assert (=>
  (= _err@241@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 113 | _err@241@01 == Null | live]
; [else-branch: 113 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 113 | _err@241@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@241@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | _err@241@01 == Null | live]
; [else-branch: 114 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 114 | _err@241@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@241@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 115 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 115 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 115 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
; [then-branch: 116 | _err@241@01 != Null | dead]
; [else-branch: 116 | _err@241@01 == Null | live]
(push) ; 4
; [else-branch: 116 | _err@241@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
; [then-branch: 117 | _err@241@01 != Null | dead]
; [else-branch: 117 | _err@241@01 == Null | live]
(push) ; 4
; [else-branch: 117 | _err@241@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 118 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 118 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 119 | _res@240@01 != First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 1] | live]
; [else-branch: 119 | _res@240@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 119 | _res@240@01 != First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 1]]
(assert (not
  (=
    _res@240@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 119 | _res@240@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 1]]
(assert (=
  _res@240@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@240@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)))
  (not
    (=
      _res@240@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (or
    (=
      _res@240@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)))
    (not
      (=
        _res@240@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (and
    (=
      _res@240@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      _res@240@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 120 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 120 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@240@01) (Iterator_arg<PyType> (typeof<PyType> _res@233@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@243@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 121 | r@243@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))) | live]
; [else-branch: 121 | !(r@243@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))) | live]
(push) ; 5
; [then-branch: 121 | r@243@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
  r@243@01))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | !(r@243@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@234@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
    r@243@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 122 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1) | live]
; [else-branch: 122 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 122 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 122 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 123 | r@243@01 != First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] | live]
; [else-branch: 123 | r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 123 | r@243@01 != First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2]]
(assert (not
  (=
    r@243@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 123 | r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2]]
(assert (=
  r@243@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@243@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        2)))
  (not
    (=
      r@243@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (or
      (=
        r@243@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            2)))
      (not
        (=
          r@243@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1))))
(push) ; 6
; [then-branch: 124 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1 && r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] && _err@241@01 == Null | live]
; [else-branch: 124 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1 && r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] && _err@241@01 == Null) | live]
(push) ; 7
; [then-branch: 124 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1 && r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] && _err@241@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (and
    (=
      r@243@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          2)))
    (= _err@241@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 124 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 1 && r@243@01 == First:(Second:(Second:(Second:(Second:($t@234@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) - 2] && _err@241@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (and
      (=
        r@243@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            2)))
      (= _err@241@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 125 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 0) | live]
; [else-branch: 125 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 125 | !(First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 125 | First:(Second:(Second:(Second:(Second:(Second:($t@242@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 126 | _err@241@01 == Null | live]
; [else-branch: 126 | _err@241@01 != Null | live]
(push) ; 11
; [then-branch: 126 | _err@241@01 == Null]
(assert (= _err@241@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 126 | _err@241@01 != Null]
(assert (not (= _err@241@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      0)
    (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (and
      (=
        r@243@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            2)))
      (= _err@241@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (=
      r@243@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          2)))
    (= _err@241@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)
      (and
        (=
          r@243@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              2)))
        (= _err@241@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)
        (and
          (=
            r@243@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                2)))
          (= _err@241@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          0)
        (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)
      (and
        (=
          r@243@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              2)))
        (= _err@241@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (and
      (=
        r@243@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            2)))
      (= _err@241@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
      r@243@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
        r@243@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)
        (or
          (=
            r@243@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                2)))
          (not
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)
        (and
          (=
            r@243@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                2)))
          (= _err@241@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)
        (=
          r@243@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              2)))
        (= _err@241@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (and
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))
            (= _err@241@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (and
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (= _err@241@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              0)
            (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (and
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))
            (= _err@241@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
          1)
        (and
          (=
            r@243@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                2)))
          (= _err@241@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
      r@243@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
    r@243@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@243@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
          r@243@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
            r@243@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (or
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (not
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (and
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (= _err@241@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))
            (= _err@241@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                1)
              (and
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))
                (= _err@241@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  1)
                (and
                  (=
                    r@243@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                        2)))
                  (= _err@241@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  0)
                (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                1)
              (and
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))
                (= _err@241@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (and
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (= _err@241@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
          r@243@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
        r@243@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    r@243@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    r@243@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@243@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
          r@243@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
            r@243@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (or
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (not
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (and
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (= _err@241@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))
            (= _err@241@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                1)
              (and
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))
                (= _err@241@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  1)
                (and
                  (=
                    r@243@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                        2)))
                  (= _err@241@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  0)
                (or (not (= _err@241@01 $Ref.null)) (= _err@241@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                1)
              (and
                (=
                  r@243@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                      2)))
                (= _err@241@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
              1)
            (and
              (=
                r@243@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                    2)))
              (= _err@241@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
          r@243@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
        r@243@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    r@243@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@243@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
      r@243@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))))))
        r@243@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            1)
          (and
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  2)))
            (= _err@241@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
            0)
          (and
            (not (= _err@241@01 $Ref.null))
            (=
              r@243@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    r@243@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))
    r@243@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_0 == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@241@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | _err@241@01 == Null | live]
; [else-branch: 127 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 127 | _err@241@01 == Null]
(assert (= _err@241@01 $Ref.null))
; [exec]
; c_0 := loop_target_0
; [exec]
; inhale _isDefined(3170147)
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 $Snap.unit))
; [eval] _isDefined(3170147)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3170147))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170147))
(assert (_isDefined $Snap.unit 3170147))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_0 := set___sil_seq__(iterable_0)
; [eval] set___sil_seq__(iterable_0)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@245@01 $Perm)
(assert ($Perm.isReadVar $k@245@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@213@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@198@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@245@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@206@01)
            (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@213@01) $Perm.Write $Perm.No))
        (ite (= r res@198@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3349|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@245@01))
(declare-const seqtmp_0@246@01 Seq<$Ref>)
(assert (=
  seqtmp_0@246@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
; [exec]
; _loop_original_must_terminate_0 := perm(MustTerminate(_cthread_157))
; [eval] perm(MustTerminate(_cthread_157))
(declare-const _loop_original_must_terminate_0@247@01 $Perm)
(assert (= _loop_original_must_terminate_0@247@01 $Perm.No))
; [exec]
; _loop_termination_flag_0 := false
; [exec]
; _loop_check_before_0 := true
(declare-const _loop_measures_0@248@01 Seq<Measure$>)
(declare-const _cwl_157@249@01 $Perm)
(declare-const loop_target_0@250@01 $Ref)
(declare-const iter_err_0@251@01 $Ref)
(declare-const c_0@252@01 $Ref)
(declare-const _loop_check_before_0@253@01 Bool)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _residue_162)
(assert (=
  ($Snap.second $t@254@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@254@01))
    ($Snap.second ($Snap.second $t@254@01)))))
(assert (= ($Snap.first ($Snap.second $t@254@01)) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _residue_162)
(assert (=
  ($Snap.second ($Snap.second $t@254@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@254@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@254@01))) $Snap.unit))
; [eval] _residue_157 <= _residue_162
(assert (<= _residue_157@173@01 _residue_162@193@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@254@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
(declare-const sm@255@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) iterable_0@228@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  $Snap.unit))
; [eval] iter_0.list_acc == set___sil_seq__(iterable_0)
; [eval] set___sil_seq__(iterable_0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@256@01 $Perm)
(assert ($Perm.isReadVar $k@256@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@256@01 $Perm.No))
    (>
      (ite (= r iterable_0@228@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3350|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@257@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01)
  ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) iterable_0@228@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@256@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01)
    ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) iterable_0@228@01))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  $Snap.unit))
; [eval] seqtmp_0 == set___sil_seq__(iterable_0)
; [eval] set___sil_seq__(iterable_0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@258@01 $Perm)
(assert ($Perm.isReadVar $k@258@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@258@01 $Perm.No))
    (>
      (ite (= r iterable_0@228@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3351|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@258@01))
(assert (Seq_equal
  seqtmp_0@246@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | iter_err_0@251@01 == Null | live]
; [else-branch: 128 | iter_err_0@251@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 128 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 128 | iter_err_0@251@01 != Null]
(assert (not (= iter_err_0@251@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err_0@251@01 $Ref.null)) (= iter_err_0@251@01 $Ref.null)))
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | iter_err_0@251@01 != Null | live]
; [else-branch: 129 | iter_err_0@251@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 129 | iter_err_0@251@01 != Null]
(assert (not (= iter_err_0@251@01 $Ref.null)))
; [eval] iter_0.__iter_index == |iter_0.__previous|
; [eval] |iter_0.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 129 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err_0@251@01 $Ref.null) (not (= iter_err_0@251@01 $Ref.null))))
(assert (=>
  (not (= iter_err_0@251@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | iter_err_0@251@01 == Null | live]
; [else-branch: 130 | iter_err_0@251@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 130 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 130 | iter_err_0@251@01 != Null]
(assert (not (= iter_err_0@251@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
  $Snap.unit))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0 | live]
; [else-branch: 131 | !(|First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 131 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  0))
; [eval] iter_0.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0 | live]
; [else-branch: 132 | !(|First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 132 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0]
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (=
    loop_target_0@250@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0 | live]
; [else-branch: 133 | !(|First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0]
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
    loop_target_0@250@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | iter_err_0@251@01 == Null | live]
; [else-branch: 134 | iter_err_0@251@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 134 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 134 | iter_err_0@251@01 != Null]
(assert (not (= iter_err_0@251@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), set(int()))
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 135 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0 | live]
; [else-branch: 135 | !(|First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 135 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_0), set(int()))
; [eval] typeof(loop_target_0)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_0@250@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| > 0 ==> c_0 == loop_target_0 && _isDefined(3170147)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 136 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0 | live]
; [else-branch: 136 | !(|First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 136 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| > 0]
; [eval] c_0 == loop_target_0 && _isDefined(3170147)
; [eval] c_0 == loop_target_0
(push) ; 7
; [then-branch: 137 | c_0@252@01 != loop_target_0@250@01 | live]
; [else-branch: 137 | c_0@252@01 == loop_target_0@250@01 | live]
(push) ; 8
; [then-branch: 137 | c_0@252@01 != loop_target_0@250@01]
(assert (not (= c_0@252@01 loop_target_0@250@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 137 | c_0@252@01 == loop_target_0@250@01]
(assert (= c_0@252@01 loop_target_0@250@01))
; [eval] _isDefined(3170147)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= c_0@252@01 loop_target_0@250@01)
  (not (= c_0@252@01 loop_target_0@250@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (or
    (= c_0@252@01 loop_target_0@250@01)
    (not (= c_0@252@01 loop_target_0@250@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (and (= c_0@252@01 loop_target_0@250@01) (_isDefined $Snap.unit 3170147))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | iter_err_0@251@01 != Null | live]
; [else-branch: 138 | iter_err_0@251@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 138 | iter_err_0@251@01 != Null]
(assert (not (= iter_err_0@251@01 $Ref.null)))
; [eval] iter_0.__previous == iter_0.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 138 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err_0@251@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| == 0 | dead]
; [else-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 139 | |First:(Second:(Second:(Second:(Second:($t@254@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))))
(declare-const lambda21_28$l@259@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda21_28$l), set(int())) && (lambda21_28$l in _checkDefined(a_0, 3170145).set_acc)
; [eval] issubtype(typeof(lambda21_28$l), set(int()))
; [eval] typeof(lambda21_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 140 | !(issubtype[Bool](typeof[PyType](lambda21_28$l@259@01), set[PyType](int[PyType]))) | live]
; [else-branch: 140 | issubtype[Bool](typeof[PyType](lambda21_28$l@259@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 140 | !(issubtype[Bool](typeof[PyType](lambda21_28$l@259@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 140 | issubtype[Bool](typeof[PyType](lambda21_28$l@259@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda21_28$l in _checkDefined(a_0, 3170145).set_acc)
; [eval] _checkDefined(a_0, 3170145)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (=
      ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef40|)))
(push) ; 8
(assert (not (= (_checkDefined $Snap.unit res@206@01 3170145) iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (=
      ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef40|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
(pop) ; 5
(declare-fun inv@260@01 ($Ref) $Ref)
(declare-fun img@261@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (=
      ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef40|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda21_28$l1@259@01 $Ref) (lambda21_28$l2@259@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda21_28$l1@259@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda21_28$l1@259@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda21_28$l1@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
        (issubtype<Bool> (typeof<PyType> lambda21_28$l2@259@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda21_28$l1@259@01 $Ref) (lambda21_28$l2@259@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda21_28$l1@259@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda21_28$l1@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda21_28$l2@259@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda21_28$l2@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (= lambda21_28$l1@259@01 lambda21_28$l2@259@01))
    (= lambda21_28$l1@259@01 lambda21_28$l2@259@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |quant-u-3353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@261@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((inv@260@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (and
      (= (inv@260@01 lambda21_28$l@259@01) lambda21_28$l@259@01)
      (img@261@01 lambda21_28$l@259@01)))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |quant-u-3353|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@261@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@260@01 r) ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
    (= (inv@260@01 r) r))
  :pattern ((inv@260@01 r))
  :qid |set_acc-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (not (= lambda21_28$l@259@01 $Ref.null)))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@213@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@198@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@262@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite
        (= r res@206@01)
        (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite (= r res@213@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@262@01 r)))
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_0@228@01)
    ($Perm.min
      (ite (= r res@198@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@262@01 r)) (pTaken@263@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (=
  (-
    (+ (- $Perm.Write (pTaken@229@01 res@206@01)) (/ (to_real 1) (to_real 20)))
    (pTaken@262@01 res@206@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@262@01 r) $Perm.No)
  
  :qid |quant-u-3356|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@262@01 r)) $Perm.No))
  
  :qid |quant-u-3357|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_0.list_acc == set___sil_seq__(iterable_0)
; [eval] set___sil_seq__(iterable_0)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@265@01 $Perm)
(assert ($Perm.isReadVar $k@265@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@213@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@198@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@265@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@206@01)
            (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@213@01) $Perm.Write $Perm.No))
        (ite (= r res@198@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3358|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@265@01))
; [eval] seqtmp_0 == set___sil_seq__(iterable_0)
; [eval] set___sil_seq__(iterable_0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@266@01 $Perm)
(assert ($Perm.isReadVar $k@266@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@213@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@198@01 iterable_0@228@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@206@01 iterable_0@228@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_0@228@01) (> $k@266@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@206@01)
            (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@213@01) $Perm.Write $Perm.No))
        (ite (= r res@198@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3359|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@266@01))
(push) ; 5
(assert (not (Seq_equal
  seqtmp_0@246@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_0@246@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
; [eval] iter_err_0 == null ==> iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 141 | _err@241@01 == Null | live]
; [else-branch: 141 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 141 | _err@241@01 == Null]
; [eval] iter_0.__iter_index - 1 == |iter_0.__previous|
; [eval] iter_0.__iter_index - 1
; [eval] |iter_0.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@241@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@241@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))))))))))
; [eval] iter_err_0 != null ==> iter_0.__iter_index == |iter_0.__previous|
; [eval] iter_err_0 != null
(push) ; 5
; [then-branch: 142 | _err@241@01 != Null | dead]
; [else-branch: 142 | _err@241@01 == Null | live]
(push) ; 6
; [else-branch: 142 | _err@241@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_0 == null ==> |iter_0.list_acc| > 0
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | _err@241@01 == Null | live]
; [else-branch: 143 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 143 | _err@241@01 == Null]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@241@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@241@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)))
; [eval] iter_0.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  0))
; [eval] iter_0.__iter_index <= |iter_0.list_acc|
; [eval] |iter_0.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))))
; [eval] |iter_0.list_acc| > 0 ==> iter_0.__iter_index > 0
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 144 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 144 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] iter_0.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 145 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] loop_target_0 == iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (=
    _res@240@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (=
    _res@240@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
        1)))))
; [eval] |iter_0.list_acc| > 0 ==> (loop_target_0 in iter_0.list_acc)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 146 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 146 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] (loop_target_0 in iter_0.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    _res@240@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
    _res@240@01)))
; [eval] iter_err_0 == null ==> iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_err_0 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@241@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | _err@241@01 == Null | live]
; [else-branch: 147 | _err@241@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 147 | _err@241@01 == Null]
; [eval] iter_0.__previous == iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.list_acc[..iter_0.__iter_index - 1]
; [eval] iter_0.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| > 0 ==> issubtype(typeof(loop_target_0), set(int()))
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 148 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 148 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_0), set(int()))
; [eval] typeof(loop_target_0)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@240@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@240@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_0.list_acc| > 0 ==> c_0 == loop_target_0 && _isDefined(3170147)
; [eval] |iter_0.list_acc| > 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 149 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0 | live]
; [else-branch: 149 | !(|First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 149 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| > 0]
; [eval] c_0 == loop_target_0 && _isDefined(3170147)
; [eval] c_0 == loop_target_0
(push) ; 7
; [then-branch: 150 | False | live]
; [else-branch: 150 | True | live]
(push) ; 8
; [then-branch: 150 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 150 | True]
; [eval] _isDefined(3170147)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (_isDefined $Snap.unit 3170147))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)
  (_isDefined $Snap.unit 3170147)))
; [eval] iter_err_0 != null ==> iter_0.__previous == iter_0.list_acc
; [eval] iter_err_0 != null
(push) ; 5
; [then-branch: 151 | _err@241@01 != Null | dead]
; [else-branch: 151 | _err@241@01 == Null | live]
(push) ; 6
; [else-branch: 151 | _err@241@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_0.list_acc| == 0 ==> iter_err_0 != null
; [eval] |iter_0.list_acc| == 0
; [eval] |iter_0.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| == 0 | dead]
; [else-branch: 152 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 152 | |First:(Second:(Second:(Second:(Second:($t@234@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
    0)))
(declare-const lambda21_28$l@267@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda21_28$l), set(int())) && (lambda21_28$l in _checkDefined(a_0, 3170145).set_acc)
; [eval] issubtype(typeof(lambda21_28$l), set(int()))
; [eval] typeof(lambda21_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda21_28$l@267@01), set[PyType](int[PyType]))) | live]
; [else-branch: 153 | issubtype[Bool](typeof[PyType](lambda21_28$l@267@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 153 | !(issubtype[Bool](typeof[PyType](lambda21_28$l@267@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 153 | issubtype[Bool](typeof[PyType](lambda21_28$l@267@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda21_28$l in _checkDefined(a_0, 3170145).set_acc)
; [eval] _checkDefined(a_0, 3170145)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r res@213@01)
      (=
        ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef37|))
  (forall ((r $Ref)) (!
    (=>
      (= r res@198@01)
      (=
        ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (= r res@206@01)
        (<
          $Perm.No
          (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20))))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc $t@236@01 r)))
    :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc $t@236@01 r))
    :qid |qp.fvfValDef39|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@206@01 3170145) res@213@01)
        $Perm.Write
        $Perm.No)
      (ite
        (= (_checkDefined $Snap.unit res@206@01 3170145) res@198@01)
        $Perm.Write
        $Perm.No))
    (ite
      (= (_checkDefined $Snap.unit res@206@01 3170145) res@206@01)
      (+
        (-
          $Perm.Write
          (pTaken@229@01 (_checkDefined $Snap.unit res@206@01 3170145)))
        (/ (to_real 1) (to_real 20)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@213@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@198@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@206@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@236@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@236@01 r))
  :qid |qp.fvfValDef39|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
(pop) ; 5
(declare-fun inv@268@01 ($Ref) $Ref)
(declare-fun img@269@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@213@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@222@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@198@01)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@203@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@206@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@236@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@236@01 r))
  :qid |qp.fvfValDef39|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda21_28$l@267@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda21_28$l1@267@01 $Ref) (lambda21_28$l2@267@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda21_28$l1@267@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda21_28$l1@267@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda21_28$l1@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
        (issubtype<Bool> (typeof<PyType> lambda21_28$l2@267@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda21_28$l1@267@01 $Ref) (lambda21_28$l2@267@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda21_28$l1@267@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda21_28$l1@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda21_28$l2@267@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda21_28$l2@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (= lambda21_28$l1@267@01 lambda21_28$l2@267@01))
    (= lambda21_28$l1@267@01 lambda21_28$l2@267@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda21_28$l@267@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@269@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((inv@268@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda21_28$l@267@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@267@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (and
      (= (inv@268@01 lambda21_28$l@267@01) lambda21_28$l@267@01)
      (img@269@01 lambda21_28$l@267@01)))
  :pattern ((Set_in lambda21_28$l@267@01 ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@269@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
    (= (inv@268@01 r) r))
  :pattern ((inv@268@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@270@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (img@269@01 r)
      (= r (inv@268@01 r)))
    ($Perm.min (ite (= r res@198@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@271@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (img@269@01 r)
      (= r (inv@268@01 r)))
    ($Perm.min
      (ite (= r res@213@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@270@01 r)))
    $Perm.No))
(define-fun pTaken@272@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (img@269@01 r)
      (= r (inv@268@01 r)))
    ($Perm.min
      (ite
        (= r res@206@01)
        (-
          (+ (- $Perm.Write (pTaken@229@01 r)) (/ (to_real 1) (to_real 20)))
          (pTaken@262@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@270@01 r)) (pTaken@271@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@270@01 res@198@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (img@269@01 r)
      (= r (inv@268@01 r)))
    (= (- $Perm.Write (pTaken@270@01 r)) $Perm.No))
  
  :qid |quant-u-3363|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@271@01 res@213@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@268@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@268@01 r) ($FVF.lookup_set_acc (as sm@238@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
      (img@269@01 r)
      (= r (inv@268@01 r)))
    (= (- (- $Perm.Write (pTaken@270@01 r)) (pTaken@271@01 r)) $Perm.No))
  
  :qid |quant-u-3365|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before_0 ==> _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 154 | True | live]
; [else-branch: 154 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 154 | True]
; [eval] _loop_termination_flag_0 || (!(iter_err_0 == null) || perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 155 | False | live]
; [else-branch: 155 | True | live]
(push) ; 8
; [then-branch: 155 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 155 | True]
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(push) ; 9
; [then-branch: 156 | _err@241@01 != Null | live]
; [else-branch: 156 | _err@241@01 == Null | live]
(push) ; 10
; [then-branch: 156 | _err@241@01 != Null]
(assert (not (= _err@241@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 156 | _err@241@01 == Null]
; [eval] perm(MustTerminate(_cthread_157)) == none && ((forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
(push) ; 11
; [then-branch: 157 | False | live]
; [else-branch: 157 | True | live]
(push) ; 12
; [then-branch: 157 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 157 | True]
; [eval] (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false)
(push) ; 13
; [then-branch: 158 | False | live]
; [else-branch: 158 | True | live]
(push) ; 14
; [then-branch: 158 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 158 | True]
; [eval] (forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false)
(push) ; 15
; [then-branch: 159 | False | live]
; [else-branch: 159 | True | live]
(push) ; 16
; [then-branch: 159 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 159 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 160 | False | live]
; [else-branch: 160 | True | live]
(push) ; 18
; [then-branch: 160 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 160 | True]
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@241@01 $Ref.null) (not (= _err@241@01 $Ref.null))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@241@01 $Ref.null) (not (= _err@241@01 $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or (= _err@241@01 $Ref.null) (not (= _err@241@01 $Ref.null))))
; [eval] !_loop_check_before_0 ==> (forperm _r_5: Ref [MustInvokeBounded(_r_5)] :: false) && ((forperm _r_5: Ref [MustInvokeUnbounded(_r_5)] :: false) && ((forperm _r_5: Ref [_r_5.MustReleaseBounded] :: false) && (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_0
(push) ; 5
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 6
; [else-branch: 161 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@261@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((inv@260@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@261@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@260@01 r) ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
    (= (inv@260@01 r) r))
  :pattern ((inv@260@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@206@01 3170145))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |quant-u-3353|)))
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (and
      (= (inv@260@01 lambda21_28$l@259@01) lambda21_28$l@259@01)
      (img@261@01 lambda21_28$l@259@01)))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |quant-u-3353|)))
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (not (= lambda21_28$l@259@01 $Ref.null)))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
  $Snap.unit))
(assert ($Perm.isReadVar $k@256@01))
(assert ($Perm.isReadVar $k@258@01))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (=
      ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef40|)))
(assert (=
  ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) iterable_0@228@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  $Snap.unit))
(assert (=
  ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01)
  ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) iterable_0@228@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_0@246@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) iterable_0@228@01))) iterable_0@228@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err_0@251@01 $Ref.null)) (= iter_err_0@251@01 $Ref.null)))
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err_0@251@01 $Ref.null) (not (= iter_err_0@251@01 $Ref.null))))
(assert (=>
  (not (= iter_err_0@251@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (=
    loop_target_0@250@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
    loop_target_0@250@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_0@251@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_0@250@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (or
    (= c_0@252@01 loop_target_0@250@01)
    (not (= c_0@252@01 loop_target_0@250@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)
  (and (= c_0@252@01 loop_target_0@250@01) (_isDefined $Snap.unit 3170147))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err_0@251@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))))))))))))))))))))))))
(assert (forall ((lambda21_28$l@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda21_28$l@259@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda21_28$l@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
  :qid |set_acc-aux|)))
(assert (forall ((lambda21_28$l1@259@01 $Ref) (lambda21_28$l2@259@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda21_28$l1@259@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda21_28$l1@259@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda21_28$l1@259@01 ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145))))
        (issubtype<Bool> (typeof<PyType> lambda21_28$l2@259@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@206@01 3170145)))
  
  :qid |set_acc-rcvrInj|)))
(assert (= $t@254@01 ($Snap.combine ($Snap.first $t@254@01) ($Snap.second $t@254@01))))
(assert (= ($Snap.first $t@254@01) $Snap.unit))
(assert (=
  ($Snap.second $t@254@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@254@01))
    ($Snap.second ($Snap.second $t@254@01)))))
(assert (= ($Snap.first ($Snap.second $t@254@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@254@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@254@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@254@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@254@01))) $Snap.unit))
(assert (<= _residue_157@173@01 _residue_162@193@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@254@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@254@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err_0 == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err_0 == null)
; [eval] iter_err_0 == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err_0 == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_0@251@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_0@251@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | iter_err_0@251@01 == Null | live]
; [else-branch: 162 | iter_err_0@251@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 162 | iter_err_0@251@01 == Null]
(assert (= iter_err_0@251@01 $Ref.null))
; [exec]
; _loop_measures_0 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; assert false
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@273@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_0@228@01)
    (=
      ($FVF.lookup_set_acc (as sm@273@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@273@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@255@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@261@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@260@01 r) ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
    (=
      ($FVF.lookup_set_acc (as sm@273@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@273@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@254@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef42|)))
(declare-const pm@274@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@274@01  $FPM) r)
    (+
      (ite (= r iterable_0@228@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (ite
        (and
          (img@261@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@260@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@260@01 r) ($FVF.lookup_set_acc (as sm@257@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@206@01 3170145)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@274@01  $FPM) r))
  :qid |qp.resPrmSumDef43|)))
(assert (<= ($FVF.perm_set_acc (as pm@274@01  $FPM) iterable_0@228@01) $Perm.Write))
; Assume upper permission bound for field set_acc
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_set_acc (as pm@274@01  $FPM) r) $Perm.Write)
  :pattern ((inv@260@01 r))
  :qid |qp-fld-prm-bnd|)))
(set-option :timeout 0)
(check-sat)
; unknown
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- set_concurrent_modification ----------
(declare-const _cthread_158@275@01 $Ref)
(declare-const _caller_measures_158@276@01 Seq<Measure$>)
(declare-const _residue_158@277@01 $Perm)
(declare-const _current_wait_level_158@278@01 $Perm)
(declare-const _cthread_158@279@01 $Ref)
(declare-const _caller_measures_158@280@01 Seq<Measure$>)
(declare-const _residue_158@281@01 $Perm)
(declare-const _current_wait_level_158@282@01 $Perm)
(push) ; 1
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 ($Snap.combine ($Snap.first $t@283@01) ($Snap.second $t@283@01))))
(assert (= ($Snap.first $t@283@01) $Snap.unit))
; [eval] _cthread_158 != null
(assert (not (= _cthread_158@279@01 $Ref.null)))
(assert (=
  ($Snap.second $t@283@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@283@01))
    ($Snap.second ($Snap.second $t@283@01)))))
(assert (= ($Snap.first ($Snap.second $t@283@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_158@279@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@283@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@284@01 $Snap)
(assert (= $t@284@01 ($Snap.combine ($Snap.first $t@284@01) ($Snap.second $t@284@01))))
(assert (= ($Snap.first $t@284@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@284@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@284@01))
    ($Snap.second ($Snap.second $t@284@01)))))
(assert (= ($Snap.first ($Snap.second $t@284@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@284@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@284@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@284@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@284@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_158@281@01 _current_wait_level_158@282@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@284@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@285@01 $Ref)
; [exec]
; var b_1: Ref
(declare-const b_1@286@01 $Ref)
; [exec]
; var a_1: Ref
(declare-const a_1@287@01 $Ref)
; [exec]
; var c_1: Ref
(declare-const c_1@288@01 $Ref)
; [exec]
; var set_8: Ref
(declare-const set_8@289@01 $Ref)
; [exec]
; var set_9: Ref
(declare-const set_9@290@01 $Ref)
; [exec]
; var set_10: Ref
(declare-const set_10@291@01 $Ref)
; [exec]
; var iterable_1: Ref
(declare-const iterable_1@292@01 $Ref)
; [exec]
; var iter_1: Ref
(declare-const iter_1@293@01 $Ref)
; [exec]
; var loop_target_1: Ref
(declare-const loop_target_1@294@01 $Ref)
; [exec]
; var iter_err_1: Ref
(declare-const iter_err_1@295@01 $Ref)
; [exec]
; var seqtmp_1: Seq[Ref]
(declare-const seqtmp_1@296@01 Seq<$Ref>)
; [exec]
; var _loop_measures_1: Seq[Measure$]
(declare-const _loop_measures_1@297@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_1: Bool
(declare-const _loop_check_before_1@298@01 Bool)
; [exec]
; var _loop_termination_flag_1: Bool
(declare-const _loop_termination_flag_1@299@01 Bool)
; [exec]
; var _loop_original_must_terminate_1: Perm
(declare-const _loop_original_must_terminate_1@300@01 $Perm)
; [exec]
; var _residue_163: Perm
(declare-const _residue_163@301@01 $Perm)
; [exec]
; var set_11: Ref
(declare-const set_11@302@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@303@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@304@01 Seq<Measure$>)
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_158, set_8 := set___init__(_cthread_158, _method_measures_158, _residue_158)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@279@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@279@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@279@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@279@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@305@01 $Perm)
(declare-const res@306@01 $Ref)
(declare-const $t@307@01 $Snap)
(assert (= $t@307@01 ($Snap.combine ($Snap.first $t@307@01) ($Snap.second $t@307@01))))
(assert (= ($Snap.first $t@307@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@307@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@307@01))
    ($Snap.second ($Snap.second $t@307@01)))))
(assert (= ($Snap.first ($Snap.second $t@307@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@307@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@307@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@307@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_158@281@01 _current_wait_level_21@305@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@307@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@307@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
(declare-const sm@308@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@308@01  $FVF<set_acc>) res@306@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))))
(assert (not (= res@306@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@308@01  $FVF<set_acc>) res@306@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@307@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@306@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@306@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_8), set(int()))
(declare-const $t@309@01 $Snap)
(assert (= $t@309@01 $Snap.unit))
; [eval] issubtype(typeof(set_8), set(int()))
; [eval] typeof(set_8)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@306@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(1)), int())
; [eval] issubtype(typeof(__prim__int___box__(1)), int())
; [eval] typeof(__prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(2)), int())
; [eval] issubtype(typeof(__prim__int___box__(2)), int())
; [eval] typeof(__prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; set_8.set_acc := Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] __prim__int___box__(1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@310@01 ((r $Ref)) $Perm
  (ite
    (= r res@306@01)
    ($Perm.min (ite (= r res@306@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@310@01 res@306@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@306@01) (= (- $Perm.Write (pTaken@310@01 r)) $Perm.No))
  
  :qid |quant-u-3368|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@311@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) res@306@01)
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 1)) (__prim__int___box__ $Snap.unit 2)) (__prim__int___box__ $Snap.unit 3))))
; [exec]
; b_1 := set_8
; [exec]
; inhale _isDefined(3235682)
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 $Snap.unit))
; [eval] _isDefined(3235682)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235682))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235682))
(assert (_isDefined $Snap.unit 3235682))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_158, set_9 := set___init__(_cthread_158, _method_measures_158, _residue_158)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@313@01 $Perm)
(declare-const res@314@01 $Ref)
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (= ($Snap.first $t@315@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@315@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@315@01))
    ($Snap.second ($Snap.second $t@315@01)))))
(assert (= ($Snap.first ($Snap.second $t@315@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@315@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@315@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@315@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_158@281@01 _current_wait_level_21@313@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@315@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@315@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))))
(declare-const sm@316@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@316@01  $FVF<set_acc>) res@314@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@314@01 res@306@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@314@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@317@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@306@01)
    (=
      ($FVF.lookup_set_acc (as sm@317@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@317@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@314@01)
    (=
      ($FVF.lookup_set_acc (as sm@317@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@316@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@317@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@316@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef45|)))
(declare-const pm@318@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@318@01  $FPM) r)
    (+
      (ite (= r res@306@01) $Perm.Write $Perm.No)
      (ite (= r res@314@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@318@01  $FPM) r))
  :qid |qp.resPrmSumDef46|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@318@01  $FPM) res@314@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@317@01  $FVF<set_acc>) res@314@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@314@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@314@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_9), set(set(int())))
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 $Snap.unit))
; [eval] issubtype(typeof(set_9), set(set(int())))
; [eval] typeof(set_9)
; [eval] set(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@314@01) (set<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(b_1, 3235682)), set(int()))
; [eval] issubtype(typeof(_checkDefined(b_1, 3235682)), set(int()))
; [eval] typeof(_checkDefined(b_1, 3235682))
; [eval] _checkDefined(b_1, 3235682)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@306@01 3235682))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@306@01 3235682))
; [eval] set(int())
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@306@01 3235682)) (set<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@306@01 3235682)) (set<PyType> (as int<PyType>  PyType))))
; [exec]
; _cwl_158, set_10 := set___init__(_cthread_158, _method_measures_158, _residue_158)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@320@01 $Perm)
(declare-const res@321@01 $Ref)
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@322@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@01))
    ($Snap.second ($Snap.second $t@322@01)))))
(assert (= ($Snap.first ($Snap.second $t@322@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@322@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@322@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_158@281@01 _current_wait_level_21@320@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
(declare-const sm@323@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@323@01  $FVF<set_acc>) res@321@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@321@01 res@314@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@321@01 res@306@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@321@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@324@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@306@01)
    (=
      ($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@314@01)
    (=
      ($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@316@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@316@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@321@01)
    (=
      ($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@323@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@323@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef49|)))
(declare-const pm@325@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@325@01  $FPM) r)
    (+
      (+
        (ite (= r res@306@01) $Perm.Write $Perm.No)
        (ite (= r res@314@01) $Perm.Write $Perm.No))
      (ite (= r res@321@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@325@01  $FPM) r))
  :qid |qp.resPrmSumDef50|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@325@01  $FPM) res@321@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@324@01  $FVF<set_acc>) res@321@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@321@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@321@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_10), set(int()))
(declare-const $t@326@01 $Snap)
(assert (= $t@326@01 $Snap.unit))
; [eval] issubtype(typeof(set_10), set(int()))
; [eval] typeof(set_10)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@321@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_10.set_acc := Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@327@01 ((r $Ref)) $Perm
  (ite
    (= r res@321@01)
    ($Perm.min (ite (= r res@321@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@328@01 ((r $Ref)) $Perm
  (ite
    (= r res@321@01)
    ($Perm.min
      (ite (= r res@306@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@327@01 r)))
    $Perm.No))
(define-fun pTaken@329@01 ((r $Ref)) $Perm
  (ite
    (= r res@321@01)
    ($Perm.min
      (ite (= r res@314@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@327@01 r)) (pTaken@328@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@327@01 res@321@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@321@01) (= (- $Perm.Write (pTaken@327@01 r)) $Perm.No))
  
  :qid |quant-u-3371|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@330@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) res@321@01)
  (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; assert issubtype(typeof(set_10), set(int()))
; [eval] issubtype(typeof(set_10), set(int()))
; [eval] typeof(set_10)
; [eval] set(int())
; [eval] int()
; [exec]
; set_9.set_acc := Set(_checkDefined(b_1, 3235682), set_10)
; [eval] Set(_checkDefined(b_1, 3235682), set_10)
; [eval] _checkDefined(b_1, 3235682)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@331@01 ((r $Ref)) $Perm
  (ite
    (= r res@314@01)
    ($Perm.min (ite (= r res@314@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@332@01 ((r $Ref)) $Perm
  (ite
    (= r res@314@01)
    ($Perm.min
      (ite (= r res@321@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@331@01 r)))
    $Perm.No))
(define-fun pTaken@333@01 ((r $Ref)) $Perm
  (ite
    (= r res@314@01)
    ($Perm.min
      (ite (= r res@306@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@331@01 r)) (pTaken@332@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@331@01 res@314@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@314@01) (= (- $Perm.Write (pTaken@331@01 r)) $Perm.No))
  
  :qid |quant-u-3374|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@334@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@334@01  $FVF<set_acc>) res@314@01)
  (Set_unionone (Set_singleton (_checkDefined $Snap.unit res@306@01 3235682)) res@321@01)))
; [exec]
; a_1 := set_9
; [exec]
; inhale _isDefined(3235681)
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 $Snap.unit))
; [eval] _isDefined(3235681)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235681))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235681))
(assert (_isDefined $Snap.unit 3235681))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable_1 := _checkDefined(a_1, 3235681)
; [eval] _checkDefined(a_1, 3235681)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@314@01 3235681))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@314@01 3235681))
(declare-const iterable_1@336@01 $Ref)
(assert (= iterable_1@336@01 (_checkDefined $Snap.unit res@314@01 3235681)))
; [exec]
; _cwl_158, iter_1 := set___iter__(_cthread_158, _method_measures_158, _residue_158,
;   iterable_1)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> iterable_1@336@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_1@336@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable_1@336@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_1@336@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@337@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite (= r res@314@01) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 10)))
    $Perm.No))
(define-fun pTaken@338@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite (= r res@306@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 10)) (pTaken@337@01 r)))
    $Perm.No))
(define-fun pTaken@339@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite (= r res@321@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 10)) (pTaken@337@01 r)) (pTaken@338@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@337@01 res@314@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@337@01 r) $Perm.No)
  
  :qid |quant-u-3377|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (= (- (/ (to_real 1) (to_real 10)) (pTaken@337@01 r)) $Perm.No))
  
  :qid |quant-u-3378|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@340@01 $Perm)
(declare-const _res@341@01 $Ref)
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 ($Snap.combine ($Snap.first $t@342@01) ($Snap.second $t@342@01))))
(assert (= ($Snap.first $t@342@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@342@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@342@01))
    ($Snap.second ($Snap.second $t@342@01)))))
(assert (= ($Snap.first ($Snap.second $t@342@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@342@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@342@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@342@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_158@281@01 _current_wait_level_25@340@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@342@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@342@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@341@01 iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
(assert (not (= _res@341@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(declare-const sm@343@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@343@01  $FVF<set_acc>) iterable_1@336@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= iterable_1@336@01 res@314@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= iterable_1@336@01 res@314@01))
(declare-const $t@344@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite (= r res@314@01) (< $Perm.No (- $Perm.Write (pTaken@337@01 r))) false)
      (Set_equal ($FVF.lookup_set_acc $t@344@01 r) ($FVF.lookup_set_acc (as sm@334@01  $FVF<set_acc>) r)))
    (=>
      (= r iterable_1@336@01)
      (Set_equal ($FVF.lookup_set_acc $t@344@01 r) ($FVF.lookup_set_acc (as sm@343@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc (as sm@334@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@343@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@344@01 r))
  :qid |quant-u-3379|)))
(assert (not (= iterable_1@336@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@345@01 $Perm)
(assert ($Perm.isReadVar $k@345@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@321@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@306@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@345@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@314@01)
            (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@321@01) $Perm.Write $Perm.No))
        (ite (= r res@306@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3380|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@346@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= iterable_1@336@01 res@321@01)
  (=
    ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
    ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) iterable_1@336@01))))
(assert (=>
  (= iterable_1@336@01 res@306@01)
  (=
    ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
    ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) iterable_1@336@01))))
(assert (=>
  (ite
    (= iterable_1@336@01 res@314@01)
    (<
      $Perm.No
      (+
        (- $Perm.Write (pTaken@337@01 iterable_1@336@01))
        (/ (to_real 1) (to_real 20))))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
    ($FVF.lookup_set_acc $t@344@01 iterable_1@336@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@345@01))
(assert (and
  (=>
    (= iterable_1@336@01 res@321@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
      ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) iterable_1@336@01)))
  (=>
    (= iterable_1@336@01 res@306@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
      ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) iterable_1@336@01)))
  (=>
    (ite
      (= iterable_1@336@01 res@314@01)
      (<
        $Perm.No
        (+
          (- $Perm.Write (pTaken@337@01 iterable_1@336@01))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01)
      ($FVF.lookup_set_acc $t@344@01 iterable_1@336@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
  iterable_1@336@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@341@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> iterable_1@336@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_158, loop_target_1, iter_err_1 := Iterator___next__(_cthread_158, _method_measures_158,
;   _residue_158, iter_1)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@347@01 $Perm)
(declare-const _res@348@01 $Ref)
(declare-const _err@349@01 $Ref)
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 ($Snap.combine ($Snap.first $t@350@01) ($Snap.second $t@350@01))))
(assert (= ($Snap.first $t@350@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@350@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@350@01))
    ($Snap.second ($Snap.second $t@350@01)))))
(assert (= ($Snap.first ($Snap.second $t@350@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@350@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@350@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@350@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_158@281@01 _current_wait_level_149@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@350@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@350@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))
  (not (= _err@349@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@349@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | _err@349@01 == Null | live]
; [else-branch: 163 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 163 | _err@349@01 == Null]
(assert (= _err@349@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (= _err@349@01 $Ref.null))
(assert (=>
  (= _err@349@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | _err@349@01 == Null | live]
; [else-branch: 164 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 164 | _err@349@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@349@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | _err@349@01 == Null | live]
; [else-branch: 165 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 165 | _err@349@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@349@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 166 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 166 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
; [then-branch: 167 | _err@349@01 != Null | dead]
; [else-branch: 167 | _err@349@01 == Null | live]
(push) ; 4
; [else-branch: 167 | _err@349@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
; [then-branch: 168 | _err@349@01 != Null | dead]
; [else-branch: 168 | _err@349@01 == Null | live]
(push) ; 4
; [else-branch: 168 | _err@349@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 169 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 169 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 170 | _res@348@01 != First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 1] | live]
; [else-branch: 170 | _res@348@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 170 | _res@348@01 != First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 1]]
(assert (not
  (=
    _res@348@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 170 | _res@348@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 1]]
(assert (=
  _res@348@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@348@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)))
  (not
    (=
      _res@348@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (or
    (=
      _res@348@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)))
    (not
      (=
        _res@348@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (and
    (=
      _res@348@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      _res@348@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 171 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 171 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@348@01) (Iterator_arg<PyType> (typeof<PyType> _res@341@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@351@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 172 | r@351@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))))))))) | live]
; [else-branch: 172 | !(r@351@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@342@01))))))))))))) | live]
(push) ; 5
; [then-branch: 172 | r@351@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@342@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
  r@351@01))
(pop) ; 5
(push) ; 5
; [else-branch: 172 | !(r@351@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@342@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
    r@351@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 173 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1) | live]
; [else-branch: 173 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 173 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 173 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 174 | r@351@01 != First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] | live]
; [else-branch: 174 | r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 174 | r@351@01 != First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2]]
(assert (not
  (=
    r@351@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 174 | r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2]]
(assert (=
  r@351@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@351@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        2)))
  (not
    (=
      r@351@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (or
      (=
        r@351@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            2)))
      (not
        (=
          r@351@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1))))
(push) ; 6
; [then-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1 && r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] && _err@349@01 == Null | live]
; [else-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1 && r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] && _err@349@01 == Null) | live]
(push) ; 7
; [then-branch: 175 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1 && r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] && _err@349@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (and
    (=
      r@351@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          2)))
    (= _err@349@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 175 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 1 && r@351@01 == First:(Second:(Second:(Second:(Second:($t@342@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) - 2] && _err@349@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (and
      (=
        r@351@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            2)))
      (= _err@349@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 176 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 0) | live]
; [else-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 176 | !(First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 176 | First:(Second:(Second:(Second:(Second:(Second:($t@350@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 177 | _err@349@01 == Null | live]
; [else-branch: 177 | _err@349@01 != Null | live]
(push) ; 11
; [then-branch: 177 | _err@349@01 == Null]
(assert (= _err@349@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 177 | _err@349@01 != Null]
(assert (not (= _err@349@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      0)
    (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (and
      (=
        r@351@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            2)))
      (= _err@349@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (=
      r@351@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          2)))
    (= _err@349@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)
      (and
        (=
          r@351@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              2)))
        (= _err@349@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)
        (and
          (=
            r@351@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                2)))
          (= _err@349@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          0)
        (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)
      (and
        (=
          r@351@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              2)))
        (= _err@349@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (and
      (=
        r@351@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            2)))
      (= _err@349@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
      r@351@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
        r@351@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)
        (or
          (=
            r@351@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                2)))
          (not
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)
        (and
          (=
            r@351@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                2)))
          (= _err@349@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)
        (=
          r@351@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              2)))
        (= _err@349@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (and
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))
            (= _err@349@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (and
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (= _err@349@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              0)
            (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (and
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))
            (= _err@349@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
          1)
        (and
          (=
            r@351@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                2)))
          (= _err@349@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
      r@351@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
    r@351@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@351@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
          r@351@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
            r@351@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (or
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (not
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (and
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (= _err@349@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))
            (= _err@349@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                1)
              (and
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))
                (= _err@349@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  1)
                (and
                  (=
                    r@351@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                        2)))
                  (= _err@349@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  0)
                (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                1)
              (and
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))
                (= _err@349@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (and
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (= _err@349@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
          r@351@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
        r@351@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    r@351@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    r@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@351@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
          r@351@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
            r@351@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (or
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (not
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (and
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (= _err@349@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))
            (= _err@349@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                1)
              (and
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))
                (= _err@349@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  1)
                (and
                  (=
                    r@351@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                        2)))
                  (= _err@349@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  0)
                (or (not (= _err@349@01 $Ref.null)) (= _err@349@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                1)
              (and
                (=
                  r@351@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                      2)))
                (= _err@349@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
              1)
            (and
              (=
                r@351@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                    2)))
              (= _err@349@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
          r@351@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
        r@351@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    r@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@351@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
      r@351@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))))))
        r@351@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            1)
          (and
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  2)))
            (= _err@349@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
            0)
          (and
            (not (= _err@349@01 $Ref.null))
            (=
              r@351@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    r@351@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))
    r@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_1 == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@349@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | _err@349@01 == Null | live]
; [else-branch: 178 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 178 | _err@349@01 == Null]
(assert (= _err@349@01 $Ref.null))
; [exec]
; c_1 := loop_target_1
; [exec]
; inhale _isDefined(3235683)
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 $Snap.unit))
; [eval] _isDefined(3235683)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3235683))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235683))
(assert (_isDefined $Snap.unit 3235683))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_1 := set___sil_seq__(iterable_1)
; [eval] set___sil_seq__(iterable_1)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@353@01 $Perm)
(assert ($Perm.isReadVar $k@353@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@321@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@306@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@353@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@314@01)
            (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@321@01) $Perm.Write $Perm.No))
        (ite (= r res@306@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3381|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(declare-const seqtmp_1@354@01 Seq<$Ref>)
(assert (=
  seqtmp_1@354@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
; [exec]
; _loop_original_must_terminate_1 := perm(MustTerminate(_cthread_158))
; [eval] perm(MustTerminate(_cthread_158))
(declare-const _loop_original_must_terminate_1@355@01 $Perm)
(assert (= _loop_original_must_terminate_1@355@01 $Perm.No))
; [exec]
; _loop_termination_flag_1 := false
; [exec]
; _loop_check_before_1 := true
(declare-const _loop_measures_1@356@01 Seq<Measure$>)
(declare-const _cwl_158@357@01 $Perm)
(declare-const set_11@358@01 $Ref)
(declare-const loop_target_1@359@01 $Ref)
(declare-const iter_err_1@360@01 $Ref)
(declare-const c_1@361@01 $Ref)
(declare-const _loop_check_before_1@362@01 Bool)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: Level(_r_9) <= _residue_163)
(assert (=
  ($Snap.second $t@363@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@363@01))
    ($Snap.second ($Snap.second $t@363@01)))))
(assert (= ($Snap.first ($Snap.second $t@363@01)) $Snap.unit))
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: Level(_r_9) <= _residue_163)
(assert (=
  ($Snap.second ($Snap.second $t@363@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@363@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@363@01))) $Snap.unit))
; [eval] _residue_158 <= _residue_163
(assert (<= _residue_158@281@01 _residue_163@301@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@363@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
(declare-const sm@364@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
; [eval] iter_1.list_acc == set___sil_seq__(iterable_1)
; [eval] set___sil_seq__(iterable_1)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@365@01 $Perm)
(assert ($Perm.isReadVar $k@365@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@365@01 $Perm.No))
    (>
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3382|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@366@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01)
  ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@365@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01)
    ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
; [eval] seqtmp_1 == set___sil_seq__(iterable_1)
; [eval] set___sil_seq__(iterable_1)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@367@01 $Perm)
(assert ($Perm.isReadVar $k@367@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@367@01 $Perm.No))
    (>
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3383|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@367@01))
(assert (Seq_equal
  seqtmp_1@354@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | iter_err_1@360@01 == Null | live]
; [else-branch: 179 | iter_err_1@360@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 179 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
; [eval] iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_1.__iter_index - 1
; [eval] |iter_1.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 179 | iter_err_1@360@01 != Null]
(assert (not (= iter_err_1@360@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err_1@360@01 $Ref.null)) (= iter_err_1@360@01 $Ref.null)))
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  $Snap.unit))
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | iter_err_1@360@01 != Null | live]
; [else-branch: 180 | iter_err_1@360@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 180 | iter_err_1@360@01 != Null]
(assert (not (= iter_err_1@360@01 $Ref.null)))
; [eval] iter_1.__iter_index == |iter_1.__previous|
; [eval] |iter_1.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 180 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err_1@360@01 $Ref.null) (not (= iter_err_1@360@01 $Ref.null))))
(assert (=>
  (not (= iter_err_1@360@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | iter_err_1@360@01 == Null | live]
; [else-branch: 181 | iter_err_1@360@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 181 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 181 | iter_err_1@360@01 != Null]
(assert (not (= iter_err_1@360@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
  $Snap.unit))
; [eval] iter_1.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
  $Snap.unit))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0 | live]
; [else-branch: 182 | !(|First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 182 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  0))
; [eval] iter_1.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0 | live]
; [else-branch: 183 | !(|First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 183 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0]
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (=
    loop_target_1@359@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0 | live]
; [else-branch: 184 | !(|First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 184 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0]
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    loop_target_1@359@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | iter_err_1@360@01 == Null | live]
; [else-branch: 185 | iter_err_1@360@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 185 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
; [eval] iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 185 | iter_err_1@360@01 != Null]
(assert (not (= iter_err_1@360@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), set(int()))
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0 | live]
; [else-branch: 186 | !(|First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 186 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_1), set(int()))
; [eval] typeof(loop_target_1)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_1@359@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| > 0 ==> c_1 == loop_target_1 && _isDefined(3235683)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0 | live]
; [else-branch: 187 | !(|First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 187 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| > 0]
; [eval] c_1 == loop_target_1 && _isDefined(3235683)
; [eval] c_1 == loop_target_1
(push) ; 7
; [then-branch: 188 | c_1@361@01 != loop_target_1@359@01 | live]
; [else-branch: 188 | c_1@361@01 == loop_target_1@359@01 | live]
(push) ; 8
; [then-branch: 188 | c_1@361@01 != loop_target_1@359@01]
(assert (not (= c_1@361@01 loop_target_1@359@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 188 | c_1@361@01 == loop_target_1@359@01]
(assert (= c_1@361@01 loop_target_1@359@01))
; [eval] _isDefined(3235683)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= c_1@361@01 loop_target_1@359@01)
  (not (= c_1@361@01 loop_target_1@359@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (or
    (= c_1@361@01 loop_target_1@359@01)
    (not (= c_1@361@01 loop_target_1@359@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (and (= c_1@361@01 loop_target_1@359@01) (_isDefined $Snap.unit 3235683))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | iter_err_1@360@01 != Null | live]
; [else-branch: 189 | iter_err_1@360@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 189 | iter_err_1@360@01 != Null]
(assert (not (= iter_err_1@360@01 $Ref.null)))
; [eval] iter_1.__previous == iter_1.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 189 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err_1@360@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| == 0 | dead]
; [else-branch: 190 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 190 | |First:(Second:(Second:(Second:(Second:($t@363@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))))
(declare-const lambda32_28$l@368@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda32_28$l), set(int())) && (lambda32_28$l in _checkDefined(a_1, 3235681).set_acc)
; [eval] issubtype(typeof(lambda32_28$l), set(int()))
; [eval] typeof(lambda32_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 191 | !(issubtype[Bool](typeof[PyType](lambda32_28$l@368@01), set[PyType](int[PyType]))) | live]
; [else-branch: 191 | issubtype[Bool](typeof[PyType](lambda32_28$l@368@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 191 | !(issubtype[Bool](typeof[PyType](lambda32_28$l@368@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 191 | issubtype[Bool](typeof[PyType](lambda32_28$l@368@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda32_28$l in _checkDefined(a_1, 3235681).set_acc)
; [eval] _checkDefined(a_1, 3235681)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef54|)))
(push) ; 8
(assert (not (= (_checkDefined $Snap.unit res@314@01 3235681) iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef54|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
(pop) ; 5
(declare-fun inv@369@01 ($Ref) $Ref)
(declare-fun img@370@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef54|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda32_28$l1@368@01 $Ref) (lambda32_28$l2@368@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda32_28$l1@368@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda32_28$l1@368@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda32_28$l1@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
        (issubtype<Bool> (typeof<PyType> lambda32_28$l2@368@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda32_28$l1@368@01 $Ref) (lambda32_28$l2@368@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda32_28$l1@368@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda32_28$l1@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda32_28$l2@368@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda32_28$l2@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (= lambda32_28$l1@368@01 lambda32_28$l2@368@01))
    (= lambda32_28$l1@368@01 lambda32_28$l2@368@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |quant-u-3385|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((inv@369@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (and
      (= (inv@369@01 lambda32_28$l@368@01) lambda32_28$l@368@01)
      (img@370@01 lambda32_28$l@368@01)))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |quant-u-3385|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
    (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |set_acc-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (not (= lambda32_28$l@368@01 $Ref.null)))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@321@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@306@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@371@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite
        (= r res@314@01)
        (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@372@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite (= r res@321@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@371@01 r)))
    $Perm.No))
(define-fun pTaken@373@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_1@336@01)
    ($Perm.min
      (ite (= r res@306@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@371@01 r)) (pTaken@372@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (=
  (-
    (+ (- $Perm.Write (pTaken@337@01 res@314@01)) (/ (to_real 1) (to_real 20)))
    (pTaken@371@01 res@314@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@371@01 r) $Perm.No)
  
  :qid |quant-u-3388|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@371@01 r)) $Perm.No))
  
  :qid |quant-u-3389|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_1.list_acc == set___sil_seq__(iterable_1)
; [eval] set___sil_seq__(iterable_1)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@374@01 $Perm)
(assert ($Perm.isReadVar $k@374@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@321@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@306@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@374@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@314@01)
            (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@321@01) $Perm.Write $Perm.No))
        (ite (= r res@306@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3390|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@374@01))
; [eval] seqtmp_1 == set___sil_seq__(iterable_1)
; [eval] set___sil_seq__(iterable_1)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@375@01 $Perm)
(assert ($Perm.isReadVar $k@375@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@321@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@306@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@314@01 iterable_1@336@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_1@336@01) (> $k@375@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@314@01)
            (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@321@01) $Perm.Write $Perm.No))
        (ite (= r res@306@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3391|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@375@01))
(push) ; 5
(assert (not (Seq_equal
  seqtmp_1@354@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_1@354@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
; [eval] iter_err_1 == null ==> iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | _err@349@01 == Null | live]
; [else-branch: 192 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 192 | _err@349@01 == Null]
; [eval] iter_1.__iter_index - 1 == |iter_1.__previous|
; [eval] iter_1.__iter_index - 1
; [eval] |iter_1.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@349@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@349@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01))))))))))))))
; [eval] iter_err_1 != null ==> iter_1.__iter_index == |iter_1.__previous|
; [eval] iter_err_1 != null
(push) ; 5
; [then-branch: 193 | _err@349@01 != Null | dead]
; [else-branch: 193 | _err@349@01 == Null | live]
(push) ; 6
; [else-branch: 193 | _err@349@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_1 == null ==> |iter_1.list_acc| > 0
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | _err@349@01 == Null | live]
; [else-branch: 194 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 194 | _err@349@01 == Null]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@349@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@349@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
; [eval] iter_1.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  0))
; [eval] iter_1.__iter_index <= |iter_1.list_acc|
; [eval] |iter_1.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))))
; [eval] |iter_1.list_acc| > 0 ==> iter_1.__iter_index > 0
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 195 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 195 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] iter_1.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 196 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 196 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] loop_target_1 == iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (=
    _res@348@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (=
    _res@348@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@350@01)))))))
        1)))))
; [eval] |iter_1.list_acc| > 0 ==> (loop_target_1 in iter_1.list_acc)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 197 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 197 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] (loop_target_1 in iter_1.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    _res@348@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01))))))
    _res@348@01)))
; [eval] iter_err_1 == null ==> iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_err_1 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@349@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | _err@349@01 == Null | live]
; [else-branch: 198 | _err@349@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 198 | _err@349@01 == Null]
; [eval] iter_1.__previous == iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.list_acc[..iter_1.__iter_index - 1]
; [eval] iter_1.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_1.list_acc| > 0 ==> issubtype(typeof(loop_target_1), set(int()))
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 199 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 199 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_1), set(int()))
; [eval] typeof(loop_target_1)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@348@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@348@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_1.list_acc| > 0 ==> c_1 == loop_target_1 && _isDefined(3235683)
; [eval] |iter_1.list_acc| > 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0 | live]
; [else-branch: 200 | !(|First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 200 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| > 0]
; [eval] c_1 == loop_target_1 && _isDefined(3235683)
; [eval] c_1 == loop_target_1
(push) ; 7
; [then-branch: 201 | False | live]
; [else-branch: 201 | True | live]
(push) ; 8
; [then-branch: 201 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 201 | True]
; [eval] _isDefined(3235683)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (_isDefined $Snap.unit 3235683))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)
  (_isDefined $Snap.unit 3235683)))
; [eval] iter_err_1 != null ==> iter_1.__previous == iter_1.list_acc
; [eval] iter_err_1 != null
(push) ; 5
; [then-branch: 202 | _err@349@01 != Null | dead]
; [else-branch: 202 | _err@349@01 == Null | live]
(push) ; 6
; [else-branch: 202 | _err@349@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_1.list_acc| == 0 ==> iter_err_1 != null
; [eval] |iter_1.list_acc| == 0
; [eval] |iter_1.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| == 0 | dead]
; [else-branch: 203 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 203 | |First:(Second:(Second:(Second:(Second:($t@342@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@342@01)))))))
    0)))
(declare-const lambda32_28$l@376@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda32_28$l), set(int())) && (lambda32_28$l in _checkDefined(a_1, 3235681).set_acc)
; [eval] issubtype(typeof(lambda32_28$l), set(int()))
; [eval] typeof(lambda32_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 204 | !(issubtype[Bool](typeof[PyType](lambda32_28$l@376@01), set[PyType](int[PyType]))) | live]
; [else-branch: 204 | issubtype[Bool](typeof[PyType](lambda32_28$l@376@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 204 | !(issubtype[Bool](typeof[PyType](lambda32_28$l@376@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 204 | issubtype[Bool](typeof[PyType](lambda32_28$l@376@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda32_28$l in _checkDefined(a_1, 3235681).set_acc)
; [eval] _checkDefined(a_1, 3235681)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r res@321@01)
      (=
        ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef51|))
  (forall ((r $Ref)) (!
    (=>
      (= r res@306@01)
      (=
        ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (= r res@314@01)
        (<
          $Perm.No
          (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20))))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc $t@344@01 r)))
    :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc $t@344@01 r))
    :qid |qp.fvfValDef53|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@314@01 3235681) res@321@01)
        $Perm.Write
        $Perm.No)
      (ite
        (= (_checkDefined $Snap.unit res@314@01 3235681) res@306@01)
        $Perm.Write
        $Perm.No))
    (ite
      (= (_checkDefined $Snap.unit res@314@01 3235681) res@314@01)
      (+
        (-
          $Perm.Write
          (pTaken@337@01 (_checkDefined $Snap.unit res@314@01 3235681)))
        (/ (to_real 1) (to_real 20)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@321@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@306@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@314@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@344@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@344@01 r))
  :qid |qp.fvfValDef53|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
(pop) ; 5
(declare-fun inv@377@01 ($Ref) $Ref)
(declare-fun img@378@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@321@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@330@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@306@01)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@311@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@314@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@344@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@344@01 r))
  :qid |qp.fvfValDef53|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda32_28$l@376@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda32_28$l1@376@01 $Ref) (lambda32_28$l2@376@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda32_28$l1@376@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda32_28$l1@376@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda32_28$l1@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
        (issubtype<Bool> (typeof<PyType> lambda32_28$l2@376@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda32_28$l1@376@01 $Ref) (lambda32_28$l2@376@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda32_28$l1@376@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda32_28$l1@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda32_28$l2@376@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda32_28$l2@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (= lambda32_28$l1@376@01 lambda32_28$l2@376@01))
    (= lambda32_28$l1@376@01 lambda32_28$l2@376@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda32_28$l@376@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@378@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((inv@377@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda32_28$l@376@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@376@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (and
      (= (inv@377@01 lambda32_28$l@376@01) lambda32_28$l@376@01)
      (img@378@01 lambda32_28$l@376@01)))
  :pattern ((Set_in lambda32_28$l@376@01 ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@378@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
    (= (inv@377@01 r) r))
  :pattern ((inv@377@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@379@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (img@378@01 r)
      (= r (inv@377@01 r)))
    ($Perm.min (ite (= r res@306@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@380@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (img@378@01 r)
      (= r (inv@377@01 r)))
    ($Perm.min
      (ite (= r res@321@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@379@01 r)))
    $Perm.No))
(define-fun pTaken@381@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (img@378@01 r)
      (= r (inv@377@01 r)))
    ($Perm.min
      (ite
        (= r res@314@01)
        (-
          (+ (- $Perm.Write (pTaken@337@01 r)) (/ (to_real 1) (to_real 20)))
          (pTaken@371@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@379@01 r)) (pTaken@380@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@379@01 res@306@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (img@378@01 r)
      (= r (inv@377@01 r)))
    (= (- $Perm.Write (pTaken@379@01 r)) $Perm.No))
  
  :qid |quant-u-3395|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@380@01 res@321@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@377@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@377@01 r) ($FVF.lookup_set_acc (as sm@346@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
      (img@378@01 r)
      (= r (inv@377@01 r)))
    (= (- (- $Perm.Write (pTaken@379@01 r)) (pTaken@380@01 r)) $Perm.No))
  
  :qid |quant-u-3397|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before_1 ==> _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | True | live]
; [else-branch: 205 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 205 | True]
; [eval] _loop_termination_flag_1 || (!(iter_err_1 == null) || perm(MustTerminate(_cthread_158)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 206 | False | live]
; [else-branch: 206 | True | live]
(push) ; 8
; [then-branch: 206 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 206 | True]
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(push) ; 9
; [then-branch: 207 | _err@349@01 != Null | live]
; [else-branch: 207 | _err@349@01 == Null | live]
(push) ; 10
; [then-branch: 207 | _err@349@01 != Null]
(assert (not (= _err@349@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 207 | _err@349@01 == Null]
; [eval] perm(MustTerminate(_cthread_158)) == none && ((forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_158)) == none
; [eval] perm(MustTerminate(_cthread_158))
(push) ; 11
; [then-branch: 208 | False | live]
; [else-branch: 208 | True | live]
(push) ; 12
; [then-branch: 208 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 208 | True]
; [eval] (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false)
(push) ; 13
; [then-branch: 209 | False | live]
; [else-branch: 209 | True | live]
(push) ; 14
; [then-branch: 209 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 209 | True]
; [eval] (forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false)
(push) ; 15
; [then-branch: 210 | False | live]
; [else-branch: 210 | True | live]
(push) ; 16
; [then-branch: 210 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 210 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 211 | False | live]
; [else-branch: 211 | True | live]
(push) ; 18
; [then-branch: 211 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 211 | True]
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@349@01 $Ref.null) (not (= _err@349@01 $Ref.null))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@349@01 $Ref.null) (not (= _err@349@01 $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or (= _err@349@01 $Ref.null) (not (= _err@349@01 $Ref.null))))
; [eval] !_loop_check_before_1 ==> (forperm _r_10: Ref [MustInvokeBounded(_r_10)] :: false) && ((forperm _r_10: Ref [MustInvokeUnbounded(_r_10)] :: false) && ((forperm _r_10: Ref [_r_10.MustReleaseBounded] :: false) && (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_1
(push) ; 5
; [then-branch: 212 | False | dead]
; [else-branch: 212 | True | live]
(push) ; 6
; [else-branch: 212 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((inv@369@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
    (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@314@01 3235681))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |quant-u-3385|)))
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (and
      (= (inv@369@01 lambda32_28$l@368@01) lambda32_28$l@368@01)
      (img@370@01 lambda32_28$l@368@01)))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |quant-u-3385|)))
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (not (= lambda32_28$l@368@01 $Ref.null)))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
  $Snap.unit))
(assert ($Perm.isReadVar $k@365@01))
(assert ($Perm.isReadVar $k@367@01))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef54|)))
(assert (=
  ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  $Snap.unit))
(assert (=
  ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01)
  ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_1@354@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) iterable_1@336@01))) iterable_1@336@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err_1@360@01 $Ref.null)) (= iter_err_1@360@01 $Ref.null)))
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err_1@360@01 $Ref.null) (not (= iter_err_1@360@01 $Ref.null))))
(assert (=>
  (not (= iter_err_1@360@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (=
    loop_target_1@359@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
    loop_target_1@359@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_1@360@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_1@359@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (or
    (= c_1@361@01 loop_target_1@359@01)
    (not (= c_1@361@01 loop_target_1@359@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)
  (and (= c_1@361@01 loop_target_1@359@01) (_isDefined $Snap.unit 3235683))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err_1@360@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))))))))))))))))))))))))
(assert (forall ((lambda32_28$l@368@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda32_28$l@368@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda32_28$l@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
  :qid |set_acc-aux|)))
(assert (forall ((lambda32_28$l1@368@01 $Ref) (lambda32_28$l2@368@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda32_28$l1@368@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda32_28$l1@368@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda32_28$l1@368@01 ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681))))
        (issubtype<Bool> (typeof<PyType> lambda32_28$l2@368@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@314@01 3235681)))
  
  :qid |set_acc-rcvrInj|)))
(assert (= $t@363@01 ($Snap.combine ($Snap.first $t@363@01) ($Snap.second $t@363@01))))
(assert (= ($Snap.first $t@363@01) $Snap.unit))
(assert (=
  ($Snap.second $t@363@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@363@01))
    ($Snap.second ($Snap.second $t@363@01)))))
(assert (= ($Snap.first ($Snap.second $t@363@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@363@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@363@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@363@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@363@01))) $Snap.unit))
(assert (<= _residue_158@281@01 _residue_163@301@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@363@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@363@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err_1 == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err_1 == null)
; [eval] iter_err_1 == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err_1 == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_1@360@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_1@360@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | iter_err_1@360@01 == Null | live]
; [else-branch: 213 | iter_err_1@360@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 213 | iter_err_1@360@01 == Null]
(assert (= iter_err_1@360@01 $Ref.null))
; [exec]
; _loop_measures_1 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _cwl_158 := set_add(_cthread_158, _method_measures_158, _residue_163, _checkDefined(c_1,
;   3235683), __prim__int___box__(7))
; [eval] _checkDefined(c_1, 3235683)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_1@361@01 3235683))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_1@361@01 3235683))
; [eval] __prim__int___box__(7)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) 0))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable_1@336@01 (_checkDefined $Snap.unit c_1@361@01 3235683))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@382@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    ($Perm.min
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@383@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    ($Perm.min
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (- $Perm.Write (pTaken@382@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        $Perm.Write
        $Perm.No)
      (pTaken@382@01 r))
    $Perm.No)
  
  :qid |quant-u-3399|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@382@01 r) $Perm.No)
  
  :qid |quant-u-3400|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    (= (- $Perm.Write (pTaken@382@01 r)) $Perm.No))
  
  :qid |quant-u-3401|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_1@361@01 3235683)) 0)))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_22@384@01 $Perm)
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 ($Snap.combine ($Snap.first $t@385@01) ($Snap.second $t@385@01))))
(assert (= ($Snap.first $t@385@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@385@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@385@01))
    ($Snap.second ($Snap.second $t@385@01)))))
(assert (= ($Snap.first ($Snap.second $t@385@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@385@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@385@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@385@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@385@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_163@301@01 _current_wait_level_22@384@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@385@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@385@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@385@01)))))))
(declare-const sm@386@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@385@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (= (_checkDefined $Snap.unit c_1@361@01 3235683) iterable_1@336@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit c_1@361@01 3235683)
      (_checkDefined $Snap.unit c_1@361@01 3235683))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit c_1@361@01 3235683)
      (_checkDefined $Snap.unit c_1@361@01 3235683))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (not (= (_checkDefined $Snap.unit c_1@361@01 3235683) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@385@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
(declare-const sm@387@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@370@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
      (< $Perm.No (- $Perm.Write (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    (=
      ($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef57|)))
(declare-const pm@388@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@388@01  $FPM) r)
    (+
      (+
        (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
        (ite
          (and
            (img@370@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
          (- $Perm.Write (pTaken@382@01 r))
          $Perm.No))
      (ite
        (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@388@01  $FPM) r))
  :qid |qp.resPrmSumDef58|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@388@01  $FPM) (_checkDefined $Snap.unit c_1@361@01 3235683)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
(declare-const sm@389@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@389@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@389@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@370@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
    (=
      ($FVF.lookup_set_acc (as sm@389@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@389@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef60|)))
(declare-const pm@390@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@390@01  $FPM) r)
    (+
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@390@01  $FPM) r))
  :qid |qp.resPrmSumDef61|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@390@01  $FPM) (_checkDefined $Snap.unit c_1@361@01 3235683)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Set(item)
(assert (Set_equal ($FVF.lookup_set_acc (as sm@387@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)) (Set_union ($FVF.lookup_set_acc (as sm@389@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)) (Set_singleton (__prim__int___box__ $Snap.unit 7)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_158, set_11 := set___init__(_cthread_158, _method_measures_158, _residue_163)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_21@391@01 $Perm)
(declare-const res@392@01 $Ref)
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 ($Snap.combine ($Snap.first $t@393@01) ($Snap.second $t@393@01))))
(assert (= ($Snap.first $t@393@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@393@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@393@01))
    ($Snap.second ($Snap.second $t@393@01)))))
(assert (= ($Snap.first ($Snap.second $t@393@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@393@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@393@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@393@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@393@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_163@301@01 _current_wait_level_21@391@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@393@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@393@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01)))))))
(declare-const sm@394@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@394@01  $FVF<set_acc>) res@392@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@393@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (= res@392@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@392@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@392@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@395@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@370@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
      (< $Perm.No (- $Perm.Write (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    (=
      ($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@392@01)
    (=
      ($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@394@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@394@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef65|)))
(declare-const pm@396@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@396@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@370@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
            (- $Perm.Write (pTaken@382@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
          $Perm.Write
          $Perm.No))
      (ite (= r res@392@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@396@01  $FPM) r))
  :qid |qp.resPrmSumDef66|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@396@01  $FPM) res@392@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@395@01  $FVF<set_acc>) res@392@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@393@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@392@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@392@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_11), set(int()))
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 $Snap.unit))
; [eval] issubtype(typeof(set_11), set(int()))
; [eval] typeof(set_11)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@392@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] int()
; [exec]
; set_11.set_acc := Set(__prim__int___box__(4))
; [eval] Set(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 7
(pop) ; 7
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@398@01 ((r $Ref)) $Perm
  (ite
    (= r res@392@01)
    ($Perm.min (ite (= r res@392@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@399@01 ((r $Ref)) $Perm
  (ite
    (= r res@392@01)
    ($Perm.min
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (- $Perm.Write (pTaken@398@01 r)))
    $Perm.No))
(define-fun pTaken@400@01 ((r $Ref)) $Perm
  (ite
    (= r res@392@01)
    ($Perm.min
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        (- $Perm.Write (pTaken@382@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@398@01 r)) (pTaken@399@01 r)))
    $Perm.No))
(define-fun pTaken@401@01 ((r $Ref)) $Perm
  (ite
    (= r res@392@01)
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@398@01 r)) (pTaken@399@01 r))
        (pTaken@400@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@398@01 res@392@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@392@01) (= (- $Perm.Write (pTaken@398@01 r)) $Perm.No))
  
  :qid |quant-u-3404|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@402@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) res@392@01)
  (Set_singleton (__prim__int___box__ $Snap.unit 4))))
; [exec]
; _cwl_158 := set_add(_cthread_158, _method_measures_158, _residue_163, _checkDefined(a_1,
;   3235681), set_11)
; [eval] _checkDefined(a_1, 3235681)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@314@01 3235681)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@314@01 3235681)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@314@01 3235681)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@314@01 3235681)) 0))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@392@01 (_checkDefined $Snap.unit res@314@01 3235681))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit c_1@361@01 3235683)
  (_checkDefined $Snap.unit res@314@01 3235681))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@403@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@404@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite (= r res@392@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@403@01 r)))
    $Perm.No))
(define-fun pTaken@405@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r)))
    $Perm.No))
(define-fun pTaken@406@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        (- $Perm.Write (pTaken@382@01 r))
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r))
        (pTaken@405@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@403@01 iterable_1@336@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (= (- $Perm.Write (pTaken@403@01 r)) $Perm.No))
  
  :qid |quant-u-3407|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@404@01 res@392@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@404@01 r) $Perm.No)
  
  :qid |quant-u-3409|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (= (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r)) $Perm.No))
  
  :qid |quant-u-3410|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)
    (pTaken@405@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@405@01 r) $Perm.No)
  
  :qid |quant-u-3412|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r))
        (pTaken@405@01 r))
      $Perm.No))
  
  :qid |quant-u-3413|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        (- $Perm.Write (pTaken@382@01 r))
        $Perm.No)
      (pTaken@406@01 r))
    $Perm.No)
  
  :qid |quant-u-3414|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@406@01 r) $Perm.No)
  
  :qid |quant-u-3415|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r))
          (pTaken@405@01 r))
        (pTaken@406@01 r))
      $Perm.No))
  
  :qid |quant-u-3416|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@403@01 r)) (pTaken@404@01 r))
          (pTaken@405@01 r))
        (pTaken@406@01 r))
      $Perm.No))
  
  :qid |quant-u-3416|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (= (_checkDefined $Snap.unit c_1@361@01 3235683) iterable_1@336@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (= res@392@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= res@392@01 iterable_1@336@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    $Perm.Write
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)
    $Perm.Write))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)
    (/ (to_real 1) (to_real 20))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (/ (to_real 1) (to_real 20))
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) res@392@01) ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Set_equal ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) res@392@01) ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)) ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) res@392@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)) ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Set_equal ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01) ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) res@392@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_1@361@01 3235683)
    (_checkDefined $Snap.unit c_1@361@01 3235683))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) iterable_1@336@01) ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_1@361@01 3235683)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (and
  (and
    (not (= res@392@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))
    (not (= res@392@01 iterable_1@336@01)))
  (and
    (not (= (_checkDefined $Snap.unit c_1@361@01 3235683) res@392@01))
    (not (= (_checkDefined $Snap.unit c_1@361@01 3235683) iterable_1@336@01)))
  (and
    (not (= iterable_1@336@01 res@392@01))
    (not (= iterable_1@336@01 (_checkDefined $Snap.unit c_1@361@01 3235683))))))
(assert (and
  (and
    (not (= res@392@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))
    (not (= res@392@01 iterable_1@336@01)))
  (not (= (_checkDefined $Snap.unit c_1@361@01 3235683) res@392@01))
  (not (= iterable_1@336@01 res@392@01))))
(declare-const sm@407@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@392@01)
    (=
      ($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@402@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
    (=
      ($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@386@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@370@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
      (< $Perm.No (- $Perm.Write (pTaken@382@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@363@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_1@336@01)
    (=
      ($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@407@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@364@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef70|)))
(declare-const pm@408@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@408@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r res@392@01) $Perm.Write $Perm.No)
          (ite
            (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
            $Perm.Write
            $Perm.No))
        (ite
          (and
            (img@370@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
          (- $Perm.Write (pTaken@382@01 r))
          $Perm.No))
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@408@01  $FPM) r))
  :qid |qp.resPrmSumDef71|)))
(assert (<= ($FVF.perm_set_acc (as pm@408@01  $FPM) res@392@01) $Perm.Write))
(assert (<=
  ($FVF.perm_set_acc (as pm@408@01  $FPM) (_checkDefined $Snap.unit c_1@361@01 3235683))
  $Perm.Write))
; Assume upper permission bound for field set_acc
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_set_acc (as pm@408@01  $FPM) r) $Perm.Write)
  :pattern ((inv@369@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_set_acc (as pm@408@01  $FPM) iterable_1@336@01) $Perm.Write))
; Precomputing data for removing quantified permissions
(define-fun pTaken@409@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite (= r iterable_1@336@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@410@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        (- $Perm.Write (pTaken@382@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@409@01 r)))
    $Perm.No))
(define-fun pTaken@411@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_1@361@01 3235683))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r)))
    $Perm.No))
(define-fun pTaken@412@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    ($Perm.min
      (ite (= r res@392@01) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r))
        (pTaken@411@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@409@01 iterable_1@336@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (= (- $Perm.Write (pTaken@409@01 r)) $Perm.No))
  
  :qid |quant-u-3419|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@370@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@369@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@369@01 r) ($FVF.lookup_set_acc (as sm@366@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@314@01 3235681)))))
        (- $Perm.Write (pTaken@382@01 r))
        $Perm.No)
      (pTaken@410@01 r))
    $Perm.No)
  
  :qid |quant-u-3420|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@410@01 r) $Perm.No)
  
  :qid |quant-u-3421|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (= (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r)) $Perm.No))
  
  :qid |quant-u-3422|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c_1@361@01 3235683)
        (_checkDefined $Snap.unit c_1@361@01 3235683))
      $Perm.Write
      $Perm.No)
    (pTaken@411@01 (_checkDefined $Snap.unit c_1@361@01 3235683)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@411@01 r) $Perm.No)
  
  :qid |quant-u-3424|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r))
        (pTaken@411@01 r))
      $Perm.No))
  
  :qid |quant-u-3425|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@412@01 res@392@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@412@01 r) $Perm.No)
  
  :qid |quant-u-3427|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r))
          (pTaken@411@01 r))
        (pTaken@412@01 r))
      $Perm.No))
  
  :qid |quant-u-3428|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit res@314@01 3235681))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@409@01 r)) (pTaken@410@01 r))
          (pTaken@411@01 r))
        (pTaken@412@01 r))
      $Perm.No))
  
  :qid |quant-u-3428|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- set_previous ----------
(declare-const _cthread_159@413@01 $Ref)
(declare-const _caller_measures_159@414@01 Seq<Measure$>)
(declare-const _residue_159@415@01 $Perm)
(declare-const _current_wait_level_159@416@01 $Perm)
(declare-const _cthread_159@417@01 $Ref)
(declare-const _caller_measures_159@418@01 Seq<Measure$>)
(declare-const _residue_159@419@01 $Perm)
(declare-const _current_wait_level_159@420@01 $Perm)
(push) ; 1
(declare-const $t@421@01 $Snap)
(assert (= $t@421@01 ($Snap.combine ($Snap.first $t@421@01) ($Snap.second $t@421@01))))
(assert (= ($Snap.first $t@421@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@417@01 $Ref.null)))
(assert (=
  ($Snap.second $t@421@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@421@01))
    ($Snap.second ($Snap.second $t@421@01)))))
(assert (= ($Snap.first ($Snap.second $t@421@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@417@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@421@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 ($Snap.combine ($Snap.first $t@422@01) ($Snap.second $t@422@01))))
(assert (= ($Snap.first $t@422@01) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@422@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@422@01))
    ($Snap.second ($Snap.second $t@422@01)))))
(assert (= ($Snap.first ($Snap.second $t@422@01)) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@422@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@422@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@422@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@419@01 _current_wait_level_159@420@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@422@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@423@01 $Ref)
; [exec]
; var b_2: Ref
(declare-const b_2@424@01 $Ref)
; [exec]
; var a_2: Ref
(declare-const a_2@425@01 $Ref)
; [exec]
; var to_fill: Ref
(declare-const to_fill@426@01 $Ref)
; [exec]
; var c_2: Ref
(declare-const c_2@427@01 $Ref)
; [exec]
; var set_12: Ref
(declare-const set_12@428@01 $Ref)
; [exec]
; var set_13: Ref
(declare-const set_13@429@01 $Ref)
; [exec]
; var set_14: Ref
(declare-const set_14@430@01 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@431@01 $Ref)
; [exec]
; var iterable_2: Ref
(declare-const iterable_2@432@01 $Ref)
; [exec]
; var iter_2: Ref
(declare-const iter_2@433@01 $Ref)
; [exec]
; var loop_target_2: Ref
(declare-const loop_target_2@434@01 $Ref)
; [exec]
; var iter_err_2: Ref
(declare-const iter_err_2@435@01 $Ref)
; [exec]
; var seqtmp_2: Seq[Ref]
(declare-const seqtmp_2@436@01 Seq<$Ref>)
; [exec]
; var _loop_measures_2: Seq[Measure$]
(declare-const _loop_measures_2@437@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_2: Bool
(declare-const _loop_check_before_2@438@01 Bool)
; [exec]
; var _loop_termination_flag_2: Bool
(declare-const _loop_termination_flag_2@439@01 Bool)
; [exec]
; var _loop_original_must_terminate_2: Perm
(declare-const _loop_original_must_terminate_2@440@01 $Perm)
; [exec]
; var _residue_164: Perm
(declare-const _residue_164@441@01 $Perm)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@442@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@443@01 Seq<Measure$>)
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_159, set_12 := set___init__(_cthread_159, _method_measures_159, _residue_159)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@417@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@417@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@417@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@417@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@444@01 $Perm)
(declare-const res@445@01 $Ref)
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 ($Snap.combine ($Snap.first $t@446@01) ($Snap.second $t@446@01))))
(assert (= ($Snap.first $t@446@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@446@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@446@01))
    ($Snap.second ($Snap.second $t@446@01)))))
(assert (= ($Snap.first ($Snap.second $t@446@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@446@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@446@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@446@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_159@419@01 _current_wait_level_21@444@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@446@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
(declare-const sm@447@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@447@01  $FVF<set_acc>) res@445@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
(assert (not (= res@445@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@447@01  $FVF<set_acc>) res@445@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@445@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@445@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_12), set(int()))
(declare-const $t@448@01 $Snap)
(assert (= $t@448@01 $Snap.unit))
; [eval] issubtype(typeof(set_12), set(int()))
; [eval] typeof(set_12)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@445@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(1)), int())
; [eval] issubtype(typeof(__prim__int___box__(1)), int())
; [eval] typeof(__prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(2)), int())
; [eval] issubtype(typeof(__prim__int___box__(2)), int())
; [eval] typeof(__prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; set_12.set_acc := Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] __prim__int___box__(1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@449@01 ((r $Ref)) $Perm
  (ite
    (= r res@445@01)
    ($Perm.min (ite (= r res@445@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@449@01 res@445@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@445@01) (= (- $Perm.Write (pTaken@449@01 r)) $Perm.No))
  
  :qid |quant-u-3431|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@450@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) res@445@01)
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 1)) (__prim__int___box__ $Snap.unit 2)) (__prim__int___box__ $Snap.unit 3))))
; [exec]
; b_2 := set_12
; [exec]
; inhale _isDefined(3301218)
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 $Snap.unit))
; [eval] _isDefined(3301218)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301218))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301218))
(assert (_isDefined $Snap.unit 3301218))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_159, set_13 := set___init__(_cthread_159, _method_measures_159, _residue_159)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@452@01 $Perm)
(declare-const res@453@01 $Ref)
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@454@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@454@01))
    ($Snap.second ($Snap.second $t@454@01)))))
(assert (= ($Snap.first ($Snap.second $t@454@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@454@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@454@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@454@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_159@419@01 _current_wait_level_21@452@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@454@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))
(declare-const sm@455@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@455@01  $FVF<set_acc>) res@453@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@453@01 res@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@453@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@456@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@445@01)
    (=
      ($FVF.lookup_set_acc (as sm@456@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@456@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@453@01)
    (=
      ($FVF.lookup_set_acc (as sm@456@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@455@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@456@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@455@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef73|)))
(declare-const pm@457@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@457@01  $FPM) r)
    (+
      (ite (= r res@445@01) $Perm.Write $Perm.No)
      (ite (= r res@453@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@457@01  $FPM) r))
  :qid |qp.resPrmSumDef74|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@457@01  $FPM) res@453@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@456@01  $FVF<set_acc>) res@453@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@454@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@453@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@453@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_13), set(set(int())))
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] issubtype(typeof(set_13), set(set(int())))
; [eval] typeof(set_13)
; [eval] set(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@453@01) (set<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(b_2, 3301218)), set(int()))
; [eval] issubtype(typeof(_checkDefined(b_2, 3301218)), set(int()))
; [eval] typeof(_checkDefined(b_2, 3301218))
; [eval] _checkDefined(b_2, 3301218)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@445@01 3301218))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@445@01 3301218))
; [eval] set(int())
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@445@01 3301218)) (set<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@445@01 3301218)) (set<PyType> (as int<PyType>  PyType))))
; [exec]
; _cwl_159, set_14 := set___init__(_cthread_159, _method_measures_159, _residue_159)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@459@01 $Perm)
(declare-const res@460@01 $Ref)
(declare-const $t@461@01 $Snap)
(assert (= $t@461@01 ($Snap.combine ($Snap.first $t@461@01) ($Snap.second $t@461@01))))
(assert (= ($Snap.first $t@461@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@461@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@461@01))
    ($Snap.second ($Snap.second $t@461@01)))))
(assert (= ($Snap.first ($Snap.second $t@461@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@461@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@461@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@461@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@461@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_159@419@01 _current_wait_level_21@459@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@461@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@461@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01)))))))
(declare-const sm@462@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@462@01  $FVF<set_acc>) res@460@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@461@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@460@01 res@453@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@460@01 res@445@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@460@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@463@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@445@01)
    (=
      ($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@453@01)
    (=
      ($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@455@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@455@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@460@01)
    (=
      ($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@462@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@462@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef77|)))
(declare-const pm@464@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@464@01  $FPM) r)
    (+
      (+
        (ite (= r res@445@01) $Perm.Write $Perm.No)
        (ite (= r res@453@01) $Perm.Write $Perm.No))
      (ite (= r res@460@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@464@01  $FPM) r))
  :qid |qp.resPrmSumDef78|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@464@01  $FPM) res@460@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@463@01  $FVF<set_acc>) res@460@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@461@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@460@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@460@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_14), set(int()))
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 $Snap.unit))
; [eval] issubtype(typeof(set_14), set(int()))
; [eval] typeof(set_14)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@460@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_14.set_acc := Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@466@01 ((r $Ref)) $Perm
  (ite
    (= r res@460@01)
    ($Perm.min (ite (= r res@460@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@467@01 ((r $Ref)) $Perm
  (ite
    (= r res@460@01)
    ($Perm.min
      (ite (= r res@445@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@466@01 r)))
    $Perm.No))
(define-fun pTaken@468@01 ((r $Ref)) $Perm
  (ite
    (= r res@460@01)
    ($Perm.min
      (ite (= r res@453@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@466@01 r)) (pTaken@467@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@466@01 res@460@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@460@01) (= (- $Perm.Write (pTaken@466@01 r)) $Perm.No))
  
  :qid |quant-u-3434|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@469@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) res@460@01)
  (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; assert issubtype(typeof(set_14), set(int()))
; [eval] issubtype(typeof(set_14), set(int()))
; [eval] typeof(set_14)
; [eval] set(int())
; [eval] int()
; [exec]
; set_13.set_acc := Set(_checkDefined(b_2, 3301218), set_14)
; [eval] Set(_checkDefined(b_2, 3301218), set_14)
; [eval] _checkDefined(b_2, 3301218)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@470@01 ((r $Ref)) $Perm
  (ite
    (= r res@453@01)
    ($Perm.min (ite (= r res@453@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@471@01 ((r $Ref)) $Perm
  (ite
    (= r res@453@01)
    ($Perm.min
      (ite (= r res@460@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@470@01 r)))
    $Perm.No))
(define-fun pTaken@472@01 ((r $Ref)) $Perm
  (ite
    (= r res@453@01)
    ($Perm.min
      (ite (= r res@445@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@470@01 r)) (pTaken@471@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@470@01 res@453@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@453@01) (= (- $Perm.Write (pTaken@470@01 r)) $Perm.No))
  
  :qid |quant-u-3437|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@473@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@473@01  $FVF<set_acc>) res@453@01)
  (Set_unionone (Set_singleton (_checkDefined $Snap.unit res@445@01 3301218)) res@460@01)))
; [exec]
; a_2 := set_13
; [exec]
; inhale _isDefined(3301217)
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 $Snap.unit))
; [eval] _isDefined(3301217)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301217))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301217))
(assert (_isDefined $Snap.unit 3301217))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_159, list_0 := list___init__(_cthread_159, _method_measures_159, _residue_159)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@475@01 $Perm)
(declare-const res@476@01 $Ref)
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 ($Snap.combine ($Snap.first $t@477@01) ($Snap.second $t@477@01))))
(assert (= ($Snap.first $t@477@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@477@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@477@01))
    ($Snap.second ($Snap.second $t@477@01)))))
(assert (= ($Snap.first ($Snap.second $t@477@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@477@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@477@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@477@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@477@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_159@419@01 _current_wait_level_8@475@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@477@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))))
(assert (not (= res@476@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@476@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@476@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@477@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@476@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(set(int())))
(declare-const $t@478@01 $Snap)
(assert (= $t@478@01 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(set(int())))
; [eval] typeof(list_0)
; [eval] list(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@476@01) (list<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; to_fill := list_0
; [exec]
; inhale _isDefined(30518497429647220)
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] _isDefined(30518497429647220)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 30518497429647220))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 30518497429647220))
(assert (_isDefined $Snap.unit 30518497429647220))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable_2 := _checkDefined(a_2, 3301217)
; [eval] _checkDefined(a_2, 3301217)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@453@01 3301217))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@453@01 3301217))
(declare-const iterable_2@480@01 $Ref)
(assert (= iterable_2@480@01 (_checkDefined $Snap.unit res@453@01 3301217)))
; [exec]
; _cwl_159, iter_2 := set___iter__(_cthread_159, _method_measures_159, _residue_159,
;   iterable_2)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> iterable_2@480@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_2@480@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable_2@480@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_2@480@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@481@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r res@453@01) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 10)))
    $Perm.No))
(define-fun pTaken@482@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r res@445@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 10)) (pTaken@481@01 r)))
    $Perm.No))
(define-fun pTaken@483@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r res@460@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 10)) (pTaken@481@01 r)) (pTaken@482@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@481@01 res@453@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@481@01 r) $Perm.No)
  
  :qid |quant-u-3440|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (= (- (/ (to_real 1) (to_real 10)) (pTaken@481@01 r)) $Perm.No))
  
  :qid |quant-u-3441|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@484@01 $Perm)
(declare-const _res@485@01 $Ref)
(declare-const $t@486@01 $Snap)
(assert (= $t@486@01 ($Snap.combine ($Snap.first $t@486@01) ($Snap.second $t@486@01))))
(assert (= ($Snap.first $t@486@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@486@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@486@01))
    ($Snap.second ($Snap.second $t@486@01)))))
(assert (= ($Snap.first ($Snap.second $t@486@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@486@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@486@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@486@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_159@419@01 _current_wait_level_25@484@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@486@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@486@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@486@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@485@01 iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@476@01 _res@485@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@485@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
(declare-const sm@487@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@487@01  $FVF<set_acc>) iterable_2@480@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= iterable_2@480@01 res@453@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= iterable_2@480@01 res@453@01))
(declare-const $t@488@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite (= r res@453@01) (< $Perm.No (- $Perm.Write (pTaken@481@01 r))) false)
      (Set_equal ($FVF.lookup_set_acc $t@488@01 r) ($FVF.lookup_set_acc (as sm@473@01  $FVF<set_acc>) r)))
    (=>
      (= r iterable_2@480@01)
      (Set_equal ($FVF.lookup_set_acc $t@488@01 r) ($FVF.lookup_set_acc (as sm@487@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc (as sm@473@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@487@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@488@01 r))
  :qid |quant-u-3442|)))
(assert (not (= iterable_2@480@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@489@01 $Perm)
(assert ($Perm.isReadVar $k@489@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@460@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@445@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@489@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@453@01)
            (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@460@01) $Perm.Write $Perm.No))
        (ite (= r res@445@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3443|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@490@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= iterable_2@480@01 res@460@01)
  (=
    ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) iterable_2@480@01))))
(assert (=>
  (= iterable_2@480@01 res@445@01)
  (=
    ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) iterable_2@480@01))))
(assert (=>
  (ite
    (= iterable_2@480@01 res@453@01)
    (<
      $Perm.No
      (+
        (- $Perm.Write (pTaken@481@01 iterable_2@480@01))
        (/ (to_real 1) (to_real 20))))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc $t@488@01 iterable_2@480@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@489@01))
(assert (and
  (=>
    (= iterable_2@480@01 res@460@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) iterable_2@480@01)))
  (=>
    (= iterable_2@480@01 res@445@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) iterable_2@480@01)))
  (=>
    (ite
      (= iterable_2@480@01 res@453@01)
      (<
        $Perm.No
        (+
          (- $Perm.Write (pTaken@481@01 iterable_2@480@01))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc $t@488@01 iterable_2@480@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
  iterable_2@480@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@485@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> iterable_2@480@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_159, loop_target_2, iter_err_2 := Iterator___next__(_cthread_159, _method_measures_159,
;   _residue_159, iter_2)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@491@01 $Perm)
(declare-const _res@492@01 $Ref)
(declare-const _err@493@01 $Ref)
(declare-const $t@494@01 $Snap)
(assert (= $t@494@01 ($Snap.combine ($Snap.first $t@494@01) ($Snap.second $t@494@01))))
(assert (= ($Snap.first $t@494@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@494@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@494@01))
    ($Snap.second ($Snap.second $t@494@01)))))
(assert (= ($Snap.first ($Snap.second $t@494@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@494@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@494@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@494@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_159@419@01 _current_wait_level_149@491@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@494@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))
  (not (= _err@493@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@493@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | _err@493@01 == Null | live]
; [else-branch: 214 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 214 | _err@493@01 == Null]
(assert (= _err@493@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (= _err@493@01 $Ref.null))
(assert (=>
  (= _err@493@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 215 | _err@493@01 == Null | live]
; [else-branch: 215 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 215 | _err@493@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@493@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | _err@493@01 == Null | live]
; [else-branch: 216 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 216 | _err@493@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@493@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 217 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 217 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
; [then-branch: 218 | _err@493@01 != Null | dead]
; [else-branch: 218 | _err@493@01 == Null | live]
(push) ; 4
; [else-branch: 218 | _err@493@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
; [then-branch: 219 | _err@493@01 != Null | dead]
; [else-branch: 219 | _err@493@01 == Null | live]
(push) ; 4
; [else-branch: 219 | _err@493@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 220 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 220 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 221 | _res@492@01 != First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 1] | live]
; [else-branch: 221 | _res@492@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 221 | _res@492@01 != First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 1]]
(assert (not
  (=
    _res@492@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 221 | _res@492@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 1]]
(assert (=
  _res@492@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@492@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)))
  (not
    (=
      _res@492@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (or
    (=
      _res@492@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)))
    (not
      (=
        _res@492@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (and
    (=
      _res@492@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      _res@492@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 222 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 222 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@492@01) (Iterator_arg<PyType> (typeof<PyType> _res@485@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@495@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 223 | r@495@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01)))))))))))) | live]
; [else-branch: 223 | !(r@495@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))))))) | live]
(push) ; 5
; [then-branch: 223 | r@495@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
  r@495@01))
(pop) ; 5
(push) ; 5
; [else-branch: 223 | !(r@495@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
    r@495@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 224 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1) | live]
; [else-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 224 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 224 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 225 | r@495@01 != First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] | live]
; [else-branch: 225 | r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 225 | r@495@01 != First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2]]
(assert (not
  (=
    r@495@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 225 | r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2]]
(assert (=
  r@495@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@495@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        2)))
  (not
    (=
      r@495@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (or
      (=
        r@495@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            2)))
      (not
        (=
          r@495@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1))))
(push) ; 6
; [then-branch: 226 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1 && r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] && _err@493@01 == Null | live]
; [else-branch: 226 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1 && r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] && _err@493@01 == Null) | live]
(push) ; 7
; [then-branch: 226 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1 && r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] && _err@493@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (and
    (=
      r@495@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          2)))
    (= _err@493@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 226 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 1 && r@495@01 == First:(Second:(Second:(Second:(Second:($t@486@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) - 2] && _err@493@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (and
      (=
        r@495@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            2)))
      (= _err@493@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 227 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 0) | live]
; [else-branch: 227 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 227 | !(First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 227 | First:(Second:(Second:(Second:(Second:(Second:($t@494@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 228 | _err@493@01 == Null | live]
; [else-branch: 228 | _err@493@01 != Null | live]
(push) ; 11
; [then-branch: 228 | _err@493@01 == Null]
(assert (= _err@493@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 228 | _err@493@01 != Null]
(assert (not (= _err@493@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      0)
    (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (and
      (=
        r@495@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            2)))
      (= _err@493@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (=
      r@495@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          2)))
    (= _err@493@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)
      (and
        (=
          r@495@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              2)))
        (= _err@493@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)
        (and
          (=
            r@495@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                2)))
          (= _err@493@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          0)
        (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)
      (and
        (=
          r@495@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              2)))
        (= _err@493@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (and
      (=
        r@495@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            2)))
      (= _err@493@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
      r@495@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
        r@495@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)
        (or
          (=
            r@495@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                2)))
          (not
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)
        (and
          (=
            r@495@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                2)))
          (= _err@493@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)
        (=
          r@495@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              2)))
        (= _err@493@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (and
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))
            (= _err@493@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (and
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (= _err@493@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              0)
            (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (and
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))
            (= _err@493@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
          1)
        (and
          (=
            r@495@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                2)))
          (= _err@493@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
      r@495@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
    r@495@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@495@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
          r@495@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
            r@495@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (or
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (not
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (and
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (= _err@493@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))
            (= _err@493@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                1)
              (and
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))
                (= _err@493@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  1)
                (and
                  (=
                    r@495@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                        2)))
                  (= _err@493@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  0)
                (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                1)
              (and
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))
                (= _err@493@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (and
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (= _err@493@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
          r@495@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
        r@495@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    r@495@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    r@495@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@495@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
          r@495@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
            r@495@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (or
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (not
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (and
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (= _err@493@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))
            (= _err@493@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                1)
              (and
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))
                (= _err@493@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  1)
                (and
                  (=
                    r@495@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                        2)))
                  (= _err@493@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  0)
                (or (not (= _err@493@01 $Ref.null)) (= _err@493@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                1)
              (and
                (=
                  r@495@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                      2)))
                (= _err@493@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
              1)
            (and
              (=
                r@495@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                    2)))
              (= _err@493@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
          r@495@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
        r@495@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    r@495@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@495@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
      r@495@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))))))
        r@495@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            1)
          (and
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  2)))
            (= _err@493@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
            0)
          (and
            (not (= _err@493@01 $Ref.null))
            (=
              r@495@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    r@495@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))
    r@495@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_2 == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@493@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | _err@493@01 == Null | live]
; [else-branch: 229 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 229 | _err@493@01 == Null]
(assert (= _err@493@01 $Ref.null))
; [exec]
; c_2 := loop_target_2
; [exec]
; inhale _isDefined(3301219)
(declare-const $t@496@01 $Snap)
(assert (= $t@496@01 $Snap.unit))
; [eval] _isDefined(3301219)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3301219))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301219))
(assert (_isDefined $Snap.unit 3301219))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_2 := set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@497@01 $Perm)
(assert ($Perm.isReadVar $k@497@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@460@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@445@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@497@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@453@01)
            (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@460@01) $Perm.Write $Perm.No))
        (ite (= r res@445@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3444|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@497@01))
(declare-const seqtmp_2@498@01 Seq<$Ref>)
(assert (=
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [exec]
; _loop_original_must_terminate_2 := perm(MustTerminate(_cthread_159))
; [eval] perm(MustTerminate(_cthread_159))
(declare-const _loop_original_must_terminate_2@499@01 $Perm)
(assert (= _loop_original_must_terminate_2@499@01 $Perm.No))
; [exec]
; _loop_termination_flag_2 := false
; [exec]
; _loop_check_before_2 := true
(declare-const _loop_measures_2@500@01 Seq<Measure$>)
(declare-const _cwl_159@501@01 $Perm)
(declare-const loop_target_2@502@01 $Ref)
(declare-const iter_err_2@503@01 $Ref)
(declare-const c_2@504@01 $Ref)
(declare-const _loop_check_before_2@505@01 Bool)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@506@01 $Snap)
(assert (= $t@506@01 ($Snap.combine ($Snap.first $t@506@01) ($Snap.second $t@506@01))))
(assert (= ($Snap.first $t@506@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _residue_164)
(assert (=
  ($Snap.second $t@506@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@506@01))
    ($Snap.second ($Snap.second $t@506@01)))))
(assert (= ($Snap.first ($Snap.second $t@506@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _residue_164)
(assert (=
  ($Snap.second ($Snap.second $t@506@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@506@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@506@01))) $Snap.unit))
; [eval] _residue_159 <= _residue_164
(assert (<= _residue_159@419@01 _residue_164@441@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@506@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@506@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
(declare-const sm@507@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  $Snap.unit))
; [eval] iter_2.list_acc == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@508@01 $Perm)
(assert ($Perm.isReadVar $k@508@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@508@01 $Perm.No))
    (>
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3445|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@509@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01)
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@508@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  $Snap.unit))
; [eval] seqtmp_2 == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@510@01 $Perm)
(assert ($Perm.isReadVar $k@510@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@510@01 $Perm.No))
    (>
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3446|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@510@01))
(assert (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
  $Snap.unit))
; [eval] iter_err_2 == null ==> iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | iter_err_2@503@01 == Null | live]
; [else-branch: 230 | iter_err_2@503@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 230 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
; [eval] iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_2.__iter_index - 1
; [eval] |iter_2.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 230 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err_2@503@01 $Ref.null)) (= iter_err_2@503@01 $Ref.null)))
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
  $Snap.unit))
; [eval] iter_err_2 != null ==> iter_2.__iter_index == |iter_2.__previous|
; [eval] iter_err_2 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | iter_err_2@503@01 != Null | live]
; [else-branch: 231 | iter_err_2@503@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 231 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
; [eval] iter_2.__iter_index == |iter_2.__previous|
; [eval] |iter_2.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 231 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err_2@503@01 $Ref.null) (not (= iter_err_2@503@01 $Ref.null))))
(assert (=>
  (not (= iter_err_2@503@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
  $Snap.unit))
; [eval] iter_err_2 == null ==> |iter_2.list_acc| > 0
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | iter_err_2@503@01 == Null | live]
; [else-branch: 232 | iter_err_2@503@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 232 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 232 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
  $Snap.unit))
; [eval] iter_2.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
  $Snap.unit))
; [eval] iter_2.__iter_index <= |iter_2.list_acc|
; [eval] |iter_2.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| > 0 ==> iter_2.__iter_index > 0
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 233 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 233 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  0))
; [eval] iter_2.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| > 0 ==> loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 234 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 234 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    loop_target_2@502@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| > 0 ==> (loop_target_2 in iter_2.list_acc)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 235 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 235 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] (loop_target_2 in iter_2.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    loop_target_2@502@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_2 == null ==> iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | iter_err_2@503@01 == Null | live]
; [else-branch: 236 | iter_err_2@503@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 236 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
; [eval] iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 236 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| > 0 ==> issubtype(typeof(loop_target_2), set(int()))
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 237 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 237 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_2), set(int()))
; [eval] typeof(loop_target_2)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_2@502@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| > 0 ==> c_2 == loop_target_2 && _isDefined(3301219)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 238 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 238 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] c_2 == loop_target_2 && _isDefined(3301219)
; [eval] c_2 == loop_target_2
(push) ; 7
; [then-branch: 239 | c_2@504@01 != loop_target_2@502@01 | live]
; [else-branch: 239 | c_2@504@01 == loop_target_2@502@01 | live]
(push) ; 8
; [then-branch: 239 | c_2@504@01 != loop_target_2@502@01]
(assert (not (= c_2@504@01 loop_target_2@502@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 239 | c_2@504@01 == loop_target_2@502@01]
(assert (= c_2@504@01 loop_target_2@502@01))
; [eval] _isDefined(3301219)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= c_2@504@01 loop_target_2@502@01)
  (not (= c_2@504@01 loop_target_2@502@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (or
    (= c_2@504@01 loop_target_2@502@01)
    (not (= c_2@504@01 loop_target_2@502@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (and (= c_2@504@01 loop_target_2@502@01) (_isDefined $Snap.unit 3301219))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_2 != null ==> iter_2.__previous == iter_2.list_acc
; [eval] iter_err_2 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | iter_err_2@503@01 != Null | live]
; [else-branch: 240 | iter_err_2@503@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 240 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
; [eval] iter_2.__previous == iter_2.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 240 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err_2@503@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_2.list_acc| == 0 ==> iter_err_2 != null
; [eval] |iter_2.list_acc| == 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| == 0 | dead]
; [else-branch: 241 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 241 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
(declare-const lambda43_28$l@511@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda43_28$l), set(int())) && (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] issubtype(typeof(lambda43_28$l), set(int()))
; [eval] typeof(lambda43_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 242 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@511@01), set[PyType](int[PyType]))) | live]
; [else-branch: 242 | issubtype[Bool](typeof[PyType](lambda43_28$l@511@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 242 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@511@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 242 | issubtype[Bool](typeof[PyType](lambda43_28$l@511@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] _checkDefined(a_2, 3301217)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef82|)))
(push) ; 8
(assert (not (= (_checkDefined $Snap.unit res@453@01 3301217) iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef82|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
(pop) ; 5
(declare-fun inv@512@01 ($Ref) $Ref)
(declare-fun img@513@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef82|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda43_28$l1@511@01 $Ref) (lambda43_28$l2@511@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda43_28$l1@511@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda43_28$l1@511@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda43_28$l1@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@511@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda43_28$l1@511@01 $Ref) (lambda43_28$l2@511@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l1@511@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l1@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@511@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l2@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (= lambda43_28$l1@511@01 lambda43_28$l2@511@01))
    (= lambda43_28$l1@511@01 lambda43_28$l2@511@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |quant-u-3448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@513@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((inv@512@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (and
      (= (inv@512@01 lambda43_28$l@511@01) lambda43_28$l@511@01)
      (img@513@01 lambda43_28$l@511@01)))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |quant-u-3448|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@513@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (= (inv@512@01 r) r))
  :pattern ((inv@512@01 r))
  :qid |set_acc-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (not (= lambda43_28$l@511@01 $Ref.null)))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))))
; [eval] _checkDefined(to_fill, 30518497429647220)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@476@01 30518497429647220))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@476@01 30518497429647220))
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@485@01 (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@476@01 30518497429647220) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220)))
; [eval] list___len__(_checkDefined(to_fill, 30518497429647220))
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0))))
(declare-const $k@514@01 $Perm)
(assert ($Perm.isReadVar $k@514@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@514@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@514@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))
; [eval] PSeq___create__(iter_2.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 5
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 5
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 5
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@460@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@445@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@515@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite
        (= r res@453@01)
        (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@516@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r res@460@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@515@01 r)))
    $Perm.No))
(define-fun pTaken@517@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r res@445@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@515@01 r)) (pTaken@516@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (=
  (-
    (+ (- $Perm.Write (pTaken@481@01 res@453@01)) (/ (to_real 1) (to_real 20)))
    (pTaken@515@01 res@453@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@515@01 r) $Perm.No)
  
  :qid |quant-u-3451|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@515@01 r)) $Perm.No))
  
  :qid |quant-u-3452|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_2.list_acc == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@518@01 $Perm)
(assert ($Perm.isReadVar $k@518@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@460@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@445@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@518@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@453@01)
            (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@460@01) $Perm.Write $Perm.No))
        (ite (= r res@445@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3453|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@518@01))
; [eval] seqtmp_2 == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@519@01 $Perm)
(assert ($Perm.isReadVar $k@519@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@460@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@445@01 iterable_2@480@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@519@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@453@01)
            (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@460@01) $Perm.Write $Perm.No))
        (ite (= r res@445@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3454|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@519@01))
(push) ; 5
(assert (not (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [eval] iter_err_2 == null ==> iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | _err@493@01 == Null | live]
; [else-branch: 243 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 243 | _err@493@01 == Null]
; [eval] iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_2.__iter_index - 1
; [eval] |iter_2.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@493@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@493@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01))))))))))))))
; [eval] iter_err_2 != null ==> iter_2.__iter_index == |iter_2.__previous|
; [eval] iter_err_2 != null
(push) ; 5
; [then-branch: 244 | _err@493@01 != Null | dead]
; [else-branch: 244 | _err@493@01 == Null | live]
(push) ; 6
; [else-branch: 244 | _err@493@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_2 == null ==> |iter_2.list_acc| > 0
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | _err@493@01 == Null | live]
; [else-branch: 245 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 245 | _err@493@01 == Null]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@493@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@493@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)))
; [eval] iter_2.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  0))
; [eval] iter_2.__iter_index <= |iter_2.list_acc|
; [eval] |iter_2.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
; [eval] |iter_2.list_acc| > 0 ==> iter_2.__iter_index > 0
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 246 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 246 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] iter_2.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 247 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 247 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (=
    _res@492@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (=
    _res@492@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))
        1)))))
; [eval] |iter_2.list_acc| > 0 ==> (loop_target_2 in iter_2.list_acc)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 248 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 248 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] (loop_target_2 in iter_2.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
    _res@492@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))
    _res@492@01)))
; [eval] iter_err_2 == null ==> iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_err_2 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@493@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | _err@493@01 == Null | live]
; [else-branch: 249 | _err@493@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 249 | _err@493@01 == Null]
; [eval] iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> issubtype(typeof(loop_target_2), set(int()))
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 250 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 250 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_2), set(int()))
; [eval] typeof(loop_target_2)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@492@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@492@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_2.list_acc| > 0 ==> c_2 == loop_target_2 && _isDefined(3301219)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0 | live]
; [else-branch: 251 | !(|First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 251 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| > 0]
; [eval] c_2 == loop_target_2 && _isDefined(3301219)
; [eval] c_2 == loop_target_2
(push) ; 7
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 8
; [then-branch: 252 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 252 | True]
; [eval] _isDefined(3301219)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (_isDefined $Snap.unit 3301219))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)
  (_isDefined $Snap.unit 3301219)))
; [eval] iter_err_2 != null ==> iter_2.__previous == iter_2.list_acc
; [eval] iter_err_2 != null
(push) ; 5
; [then-branch: 253 | _err@493@01 != Null | dead]
; [else-branch: 253 | _err@493@01 == Null | live]
(push) ; 6
; [else-branch: 253 | _err@493@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_2.list_acc| == 0 ==> iter_err_2 != null
; [eval] |iter_2.list_acc| == 0
; [eval] |iter_2.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| == 0 | dead]
; [else-branch: 254 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 254 | |First:(Second:(Second:(Second:(Second:($t@486@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))
    0)))
(declare-const lambda43_28$l@520@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda43_28$l), set(int())) && (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] issubtype(typeof(lambda43_28$l), set(int()))
; [eval] typeof(lambda43_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 255 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@520@01), set[PyType](int[PyType]))) | live]
; [else-branch: 255 | issubtype[Bool](typeof[PyType](lambda43_28$l@520@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 255 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@520@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 255 | issubtype[Bool](typeof[PyType](lambda43_28$l@520@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] _checkDefined(a_2, 3301217)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r res@460@01)
      (=
        ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (=>
      (= r res@445@01)
      (=
        ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef80|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (= r res@453@01)
        (<
          $Perm.No
          (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20))))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc $t@488@01 r)))
    :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc $t@488@01 r))
    :qid |qp.fvfValDef81|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@453@01 3301217) res@460@01)
        $Perm.Write
        $Perm.No)
      (ite
        (= (_checkDefined $Snap.unit res@453@01 3301217) res@445@01)
        $Perm.Write
        $Perm.No))
    (ite
      (= (_checkDefined $Snap.unit res@453@01 3301217) res@453@01)
      (+
        (-
          $Perm.Write
          (pTaken@481@01 (_checkDefined $Snap.unit res@453@01 3301217)))
        (/ (to_real 1) (to_real 20)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@460@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@445@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@453@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@488@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@488@01 r))
  :qid |qp.fvfValDef81|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
(pop) ; 5
(declare-fun inv@521@01 ($Ref) $Ref)
(declare-fun img@522@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@460@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@469@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@445@01)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@450@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@453@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@488@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@488@01 r))
  :qid |qp.fvfValDef81|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda43_28$l@520@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda43_28$l1@520@01 $Ref) (lambda43_28$l2@520@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda43_28$l1@520@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda43_28$l1@520@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda43_28$l1@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@520@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda43_28$l1@520@01 $Ref) (lambda43_28$l2@520@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l1@520@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l1@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@520@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l2@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (= lambda43_28$l1@520@01 lambda43_28$l2@520@01))
    (= lambda43_28$l1@520@01 lambda43_28$l2@520@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda43_28$l@520@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@522@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((inv@521@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda43_28$l@520@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@520@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (and
      (= (inv@521@01 lambda43_28$l@520@01) lambda43_28$l@520@01)
      (img@522@01 lambda43_28$l@520@01)))
  :pattern ((Set_in lambda43_28$l@520@01 ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@522@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (= (inv@521@01 r) r))
  :pattern ((inv@521@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@523@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@522@01 r)
      (= r (inv@521@01 r)))
    ($Perm.min (ite (= r res@445@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@524@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@522@01 r)
      (= r (inv@521@01 r)))
    ($Perm.min
      (ite (= r res@460@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@523@01 r)))
    $Perm.No))
(define-fun pTaken@525@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@522@01 r)
      (= r (inv@521@01 r)))
    ($Perm.min
      (ite
        (= r res@453@01)
        (-
          (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
          (pTaken@515@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@523@01 r)) (pTaken@524@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@523@01 res@445@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@522@01 r)
      (= r (inv@521@01 r)))
    (= (- $Perm.Write (pTaken@523@01 r)) $Perm.No))
  
  :qid |quant-u-3458|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@524@01 res@460@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@521@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@521@01 r) ($FVF.lookup_set_acc (as sm@490@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@522@01 r)
      (= r (inv@521@01 r)))
    (= (- (- $Perm.Write (pTaken@523@01 r)) (pTaken@524@01 r)) $Perm.No))
  
  :qid |quant-u-3460|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@476@01 30518497429647220))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@476@01 30518497429647220))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@476@01 (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220)))
; [eval] list___len__(_checkDefined(to_fill, 30518497429647220))
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0))))
(declare-const $k@526@01 $Perm)
(assert ($Perm.isReadVar $k@526@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@485@01 (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@476@01 (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@526@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@526@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))
; [eval] PSeq___create__(iter_2.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 5
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 5
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 5
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(push) ; 5
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@477@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@494@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!(iter_err_2 == null) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 256 | True | live]
; [else-branch: 256 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 256 | True]
; [eval] _loop_termination_flag_2 || (!(iter_err_2 == null) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 257 | False | live]
; [else-branch: 257 | True | live]
(push) ; 8
; [then-branch: 257 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 257 | True]
; [eval] !(iter_err_2 == null)
; [eval] iter_err_2 == null
(push) ; 9
; [then-branch: 258 | _err@493@01 != Null | live]
; [else-branch: 258 | _err@493@01 == Null | live]
(push) ; 10
; [then-branch: 258 | _err@493@01 != Null]
(assert (not (= _err@493@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 258 | _err@493@01 == Null]
; [eval] perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_159)) == none
; [eval] perm(MustTerminate(_cthread_159))
(push) ; 11
; [then-branch: 259 | False | live]
; [else-branch: 259 | True | live]
(push) ; 12
; [then-branch: 259 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 259 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 13
; [then-branch: 260 | False | live]
; [else-branch: 260 | True | live]
(push) ; 14
; [then-branch: 260 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 260 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 15
; [then-branch: 261 | False | live]
; [else-branch: 261 | True | live]
(push) ; 16
; [then-branch: 261 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 261 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 262 | False | live]
; [else-branch: 262 | True | live]
(push) ; 18
; [then-branch: 262 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 262 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@493@01 $Ref.null) (not (= _err@493@01 $Ref.null))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@493@01 $Ref.null) (not (= _err@493@01 $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or (= _err@493@01 $Ref.null) (not (= _err@493@01 $Ref.null))))
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 5
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 6
; [else-branch: 263 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@513@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((inv@512@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@513@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (= (inv@512@01 r) r))
  :pattern ((inv@512@01 r))
  :qid |set_acc-fctOfInv|)))
(assert ($Perm.isReadVar $k@514@01))
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |quant-u-3448|)))
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (and
      (= (inv@512@01 lambda43_28$l@511@01) lambda43_28$l@511@01)
      (img@513@01 lambda43_28$l@511@01)))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |quant-u-3448|)))
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (not (= lambda43_28$l@511@01 $Ref.null)))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@476@01 30518497429647220) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($Perm.isReadVar $k@508@01))
(assert ($Perm.isReadVar $k@510@01))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef82|)))
(assert (=
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  $Snap.unit))
(assert (=
  ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01)
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err_2@503@01 $Ref.null)) (= iter_err_2@503@01 $Ref.null)))
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err_2@503@01 $Ref.null) (not (= iter_err_2@503@01 $Ref.null))))
(assert (=>
  (not (= iter_err_2@503@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    loop_target_2@502@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    loop_target_2@502@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_2@503@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_2@502@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (or
    (= c_2@504@01 loop_target_2@502@01)
    (not (= c_2@504@01 loop_target_2@502@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (and (= c_2@504@01 loop_target_2@502@01) (_isDefined $Snap.unit 3301219))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err_2@503@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))))))))))))))))))))
(assert (forall ((lambda43_28$l@511@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda43_28$l@511@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda43_28$l@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-aux|)))
(assert (forall ((lambda43_28$l1@511@01 $Ref) (lambda43_28$l2@511@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda43_28$l1@511@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda43_28$l1@511@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda43_28$l1@511@01 ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@511@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217)))
  
  :qid |set_acc-rcvrInj|)))
(assert (= $t@506@01 ($Snap.combine ($Snap.first $t@506@01) ($Snap.second $t@506@01))))
(assert (= ($Snap.first $t@506@01) $Snap.unit))
(assert (=
  ($Snap.second $t@506@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@506@01))
    ($Snap.second ($Snap.second $t@506@01)))))
(assert (= ($Snap.first ($Snap.second $t@506@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@506@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@506@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@506@01))) $Snap.unit))
(assert (<= _residue_159@419@01 _residue_164@441@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@506@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@506@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err_2 == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err_2 == null)
; [eval] iter_err_2 == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err_2 == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 264 | iter_err_2@503@01 == Null | live]
; [else-branch: 264 | iter_err_2@503@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 264 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
; [exec]
; _loop_measures_2 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _cwl_159 := set_add(_cthread_159, _method_measures_159, _residue_164, _checkDefined(c_2,
;   3301219), __prim__int___box__(7))
; [eval] _checkDefined(c_2, 3301219)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_2@504@01 3301219))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_2@504@01 3301219))
; [eval] __prim__int___box__(7)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) 0))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable_2@480@01 (_checkDefined $Snap.unit c_2@504@01 3301219))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@527@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    ($Perm.min
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@528@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    ($Perm.min
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (- $Perm.Write (pTaken@527@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        $Perm.Write
        $Perm.No)
      (pTaken@527@01 r))
    $Perm.No)
  
  :qid |quant-u-3462|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@527@01 r) $Perm.No)
  
  :qid |quant-u-3463|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (= (- $Perm.Write (pTaken@527@01 r)) $Perm.No))
  
  :qid |quant-u-3464|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) 0)))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_22@529@01 $Perm)
(declare-const $t@530@01 $Snap)
(assert (= $t@530@01 ($Snap.combine ($Snap.first $t@530@01) ($Snap.second $t@530@01))))
(assert (= ($Snap.first $t@530@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@530@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@530@01))
    ($Snap.second ($Snap.second $t@530@01)))))
(assert (= ($Snap.first ($Snap.second $t@530@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@530@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@530@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@530@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@530@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_164@441@01 _current_wait_level_22@529@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@530@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@530@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@530@01)))))))
(declare-const sm@531@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_2@504@01 3301219))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@530@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_2@504@01 3301219)
    (_checkDefined $Snap.unit c_2@504@01 3301219))
  (= (_checkDefined $Snap.unit c_2@504@01 3301219) iterable_2@480@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit c_2@504@01 3301219)
      (_checkDefined $Snap.unit c_2@504@01 3301219))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit c_2@504@01 3301219)
      (_checkDefined $Snap.unit c_2@504@01 3301219))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (_checkDefined $Snap.unit c_2@504@01 3301219)
    (_checkDefined $Snap.unit c_2@504@01 3301219))
  (not (= (_checkDefined $Snap.unit c_2@504@01 3301219) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@530@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
(declare-const sm@532@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@513@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef85|)))
(declare-const pm@533@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@533@01  $FPM) r)
    (+
      (+
        (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
        (ite
          (and
            (img@513@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
          (- $Perm.Write (pTaken@527@01 r))
          $Perm.No))
      (ite
        (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@533@01  $FPM) r))
  :qid |qp.resPrmSumDef86|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@533@01  $FPM) (_checkDefined $Snap.unit c_2@504@01 3301219)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
(declare-const sm@534@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@534@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@534@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@513@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (=
      ($FVF.lookup_set_acc (as sm@534@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@534@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef88|)))
(declare-const pm@535@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@535@01  $FPM) r)
    (+
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@535@01  $FPM) r))
  :qid |qp.resPrmSumDef89|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@535@01  $FPM) (_checkDefined $Snap.unit c_2@504@01 3301219)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Set(item)
(assert (Set_equal ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_2@504@01 3301219)) (Set_union ($FVF.lookup_set_acc (as sm@534@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_2@504@01 3301219)) (Set_singleton (__prim__int___box__ $Snap.unit 7)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_159 := list_append(_cthread_159, _method_measures_159, _residue_164, _checkDefined(to_fill,
;   30518497429647220), _checkDefined(c_2, 3301219))
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _checkDefined(c_2, 3301219)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_2@504@01 3301219)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@476@01 30518497429647220)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_9@536@01 $Perm)
(declare-const $t@537@01 $Snap)
(assert (= $t@537@01 ($Snap.combine ($Snap.first $t@537@01) ($Snap.second $t@537@01))))
(assert (= ($Snap.first $t@537@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@537@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@537@01))
    ($Snap.second ($Snap.second $t@537@01)))))
(assert (= ($Snap.first ($Snap.second $t@537@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@537@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@537@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@537@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@537@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_164@441@01 _current_wait_level_9@536@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@537@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@485@01 (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@537@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton (_checkDefined $Snap.unit c_2@504@01 3301219))) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit c_2@504@01 3301219)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_2
; [exec]
; _cwl_159, loop_target_2, iter_err_2 := Iterator___next__(_cthread_159, _method_measures_159,
;   _residue_159, iter_2)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_149@538@01 $Perm)
(declare-const _res@539@01 $Ref)
(declare-const _err@540@01 $Ref)
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 ($Snap.combine ($Snap.first $t@541@01) ($Snap.second $t@541@01))))
(assert (= ($Snap.first $t@541@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@541@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@541@01))
    ($Snap.second ($Snap.second $t@541@01)))))
(assert (= ($Snap.first ($Snap.second $t@541@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@541@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@541@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@541@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_159@419@01 _current_wait_level_149@538@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@541@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))
  (not (= _err@540@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 265 | _err@540@01 == Null | live]
; [else-branch: 265 | _err@540@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 265 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 8
(push) ; 8
; [else-branch: 265 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@540@01 $Ref.null)) (= _err@540@01 $Ref.null)))
(assert (=>
  (= _err@540@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 266 | _err@540@01 == Null | live]
; [else-branch: 266 | _err@540@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 266 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 8
(push) ; 8
; [else-branch: 266 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@540@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 267 | _err@540@01 == Null | live]
; [else-branch: 267 | _err@540@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 267 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 8
(push) ; 8
; [else-branch: 267 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@540@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 268 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 268 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 268 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 269 | _err@540@01 != Null | live]
; [else-branch: 269 | _err@540@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 269 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 8
(push) ; 8
; [else-branch: 269 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@540@01 $Ref.null) (not (= _err@540@01 $Ref.null))))
(assert (=>
  (not (= _err@540@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 270 | _err@540@01 != Null | live]
; [else-branch: 270 | _err@540@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 270 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 8
(push) ; 8
; [else-branch: 270 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@540@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 271 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 271 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 271 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 272 | _res@539@01 != First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 1] | live]
; [else-branch: 272 | _res@539@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 1] | live]
(push) ; 10
; [then-branch: 272 | _res@539@01 != First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 1]]
(assert (not
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 272 | _res@539@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 1]]
(assert (=
  _res@539@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)))
  (not
    (=
      _res@539@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (or
    (=
      _res@539@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)))
    (not
      (=
        _res@539@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (and
    (=
      _res@539@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      _res@539@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 273 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 273 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 273 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@539@01) (Iterator_arg<PyType> (typeof<PyType> _res@485@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@542@01 $Ref)
(push) ; 7
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 8
; [then-branch: 274 | r@542@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@506@01))))))))) | live]
; [else-branch: 274 | !(r@542@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@506@01)))))))))) | live]
(push) ; 9
; [then-branch: 274 | r@542@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@506@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
  r@542@01))
(pop) ; 9
(push) ; 9
; [else-branch: 274 | !(r@542@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@506@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    r@542@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 10
; [then-branch: 275 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1) | live]
; [else-branch: 275 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1 | live]
(push) ; 11
; [then-branch: 275 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)))
(pop) ; 11
(push) ; 11
; [else-branch: 275 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 276 | r@542@01 != First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] | live]
; [else-branch: 276 | r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] | live]
(push) ; 13
; [then-branch: 276 | r@542@01 != First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2]]
(assert (not
  (=
    r@542@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        2)))))
(pop) ; 13
(push) ; 13
; [else-branch: 276 | r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2]]
(assert (=
  r@542@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      2))))
; [eval] _err == null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@542@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        2)))
  (not
    (=
      r@542@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          2))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (or
      (=
        r@542@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            2)))
      (not
        (=
          r@542@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1))))
(push) ; 10
; [then-branch: 277 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1 && r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] && _err@540@01 == Null | live]
; [else-branch: 277 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1 && r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] && _err@540@01 == Null) | live]
(push) ; 11
; [then-branch: 277 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1 && r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] && _err@540@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (and
    (=
      r@542@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          2)))
    (= _err@540@01 $Ref.null))))
(pop) ; 11
(push) ; 11
; [else-branch: 277 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 1 && r@542@01 == First:(Second:(Second:(Second:(Second:($t@506@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) - 2] && _err@540@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (and
      (=
        r@542@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            2)))
      (= _err@540@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 12
; [then-branch: 278 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 0) | live]
; [else-branch: 278 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 0 | live]
(push) ; 13
; [then-branch: 278 | !(First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    0)))
(pop) ; 13
(push) ; 13
; [else-branch: 278 | First:(Second:(Second:(Second:(Second:(Second:($t@541@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  0))
; [eval] _err != null
(push) ; 14
; [then-branch: 279 | _err@540@01 == Null | live]
; [else-branch: 279 | _err@540@01 != Null | live]
(push) ; 15
; [then-branch: 279 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 279 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (and
      (=
        r@542@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            2)))
      (= _err@540@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (=
      r@542@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          2)))
    (= _err@540@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)
      (and
        (=
          r@542@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              2)))
        (= _err@540@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)
        (and
          (=
            r@542@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                2)))
          (= _err@540@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)
      (and
        (=
          r@542@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              2)))
        (= _err@540@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (and
      (=
        r@542@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            2)))
      (= _err@540@01 $Ref.null)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
      r@542@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
        r@542@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)
        (or
          (=
            r@542@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                2)))
          (not
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)
        (and
          (=
            r@542@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                2)))
          (= _err@540@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)
        (=
          r@542@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              2)))
        (= _err@540@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (and
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))
            (= _err@540@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (and
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (= _err@540@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (and
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))
            (= _err@540@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
          1)
        (and
          (=
            r@542@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                2)))
          (= _err@540@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
      r@542@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
    r@542@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@542@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
          r@542@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
            r@542@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (or
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (not
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (and
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (= _err@540@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))
            (= _err@540@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                1)
              (and
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))
                (= _err@540@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  1)
                (and
                  (=
                    r@542@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                        2)))
                  (= _err@540@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                1)
              (and
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))
                (= _err@540@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (and
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (= _err@540@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
          r@542@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
        r@542@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    r@542@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    r@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@542@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
          r@542@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
            r@542@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (or
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (not
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (and
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (= _err@540@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))
            (= _err@540@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                1)
              (and
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))
                (= _err@540@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  1)
                (and
                  (=
                    r@542@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                        2)))
                  (= _err@540@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                1)
              (and
                (=
                  r@542@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                      2)))
                (= _err@540@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
              1)
            (and
              (=
                r@542@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                    2)))
              (= _err@540@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
          r@542@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
        r@542@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    r@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@542@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
      r@542@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
        r@542@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            1)
          (and
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  2)))
            (= _err@540@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
            0)
          (and
            (not (= _err@540@01 $Ref.null))
            (=
              r@542@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    r@542@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
    r@542@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_2 == null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 280 | _err@540@01 == Null | live]
; [else-branch: 280 | _err@540@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 280 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
; [exec]
; c_2 := loop_target_2
; [exec]
; inhale _isDefined(3301219)
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 $Snap.unit))
; [eval] _isDefined(3301219)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_2 := false
; [exec]
; assert _loop_termination_flag_2 ==> !(iter_err_2 == null)
; [eval] _loop_termination_flag_2 ==> !(iter_err_2 == null)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 281 | False | dead]
; [else-branch: 281 | True | live]
(push) ; 9
; [else-branch: 281 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; Precomputing data for removing quantified permissions
(define-fun pTaken@544@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@545@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@544@01 r)))
    $Perm.No))
(define-fun pTaken@546@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
        $Perm.Write
        $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@544@01 r)) (pTaken@545@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@544@01 iterable_2@480@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@544@01 r)) $Perm.No))
  
  :qid |quant-u-3467|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_2.list_acc == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@547@01 $Perm)
(assert ($Perm.isReadVar $k@547@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@547@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@513@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
            (- $Perm.Write (pTaken@527@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3468|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)))
(assert (=>
  (ite
    (and
      (img@513@01 iterable_2@480@01)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@512@01 iterable_2@480@01)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@512@01 iterable_2@480@01) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (< $Perm.No (- $Perm.Write (pTaken@527@01 iterable_2@480@01)))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) iterable_2@480@01))))
(assert (=>
  (= iterable_2@480@01 (_checkDefined $Snap.unit c_2@504@01 3301219))
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) iterable_2@480@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@547@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01))
  (=>
    (ite
      (and
        (img@513@01 iterable_2@480@01)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 iterable_2@480@01)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 iterable_2@480@01) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 iterable_2@480@01)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) iterable_2@480@01)))
  (=>
    (= iterable_2@480@01 (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) iterable_2@480@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(push) ; 8
(assert (not (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [eval] seqtmp_2 == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@548@01 $Perm)
(assert ($Perm.isReadVar $k@548@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@548@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@513@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
            (- $Perm.Write (pTaken@527@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3469|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@548@01))
(push) ; 8
(assert (not (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [eval] iter_err_2 == null ==> iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_err_2 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 282 | _err@540@01 == Null | live]
; [else-branch: 282 | _err@540@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 282 | _err@540@01 == Null]
; [eval] iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_2.__iter_index - 1
; [eval] |iter_2.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@540@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@540@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
; [eval] iter_err_2 != null ==> iter_2.__iter_index == |iter_2.__previous|
; [eval] iter_err_2 != null
(push) ; 8
; [then-branch: 283 | _err@540@01 != Null | dead]
; [else-branch: 283 | _err@540@01 == Null | live]
(push) ; 9
; [else-branch: 283 | _err@540@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err_2 == null ==> |iter_2.list_acc| > 0
; [eval] iter_err_2 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 284 | _err@540@01 == Null | live]
; [else-branch: 284 | _err@540@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 284 | _err@540@01 == Null]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@540@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@540@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)))
; [eval] iter_2.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  0))
; [eval] iter_2.__iter_index <= |iter_2.list_acc|
; [eval] |iter_2.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
; [eval] |iter_2.list_acc| > 0 ==> iter_2.__iter_index > 0
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 285 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 285 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 285 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] iter_2.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 286 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 286 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)))))
; [eval] |iter_2.list_acc| > 0 ==> (loop_target_2 in iter_2.list_acc)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 287 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 287 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 287 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] (loop_target_2 in iter_2.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    _res@539@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    _res@539@01)))
; [eval] iter_err_2 == null ==> iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_err_2 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 288 | _err@540@01 == Null | live]
; [else-branch: 288 | _err@540@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 288 | _err@540@01 == Null]
; [eval] iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> issubtype(typeof(loop_target_2), set(int()))
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 289 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 289 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 289 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_2), set(int()))
; [eval] typeof(loop_target_2)
; [eval] set(int())
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@539@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@539@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_2.list_acc| > 0 ==> c_2 == loop_target_2 && _isDefined(3301219)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 290 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 290 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 290 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] c_2 == loop_target_2 && _isDefined(3301219)
; [eval] c_2 == loop_target_2
(push) ; 10
; [then-branch: 291 | False | live]
; [else-branch: 291 | True | live]
(push) ; 11
; [then-branch: 291 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 291 | True]
; [eval] _isDefined(3301219)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (_isDefined $Snap.unit 3301219))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (_isDefined $Snap.unit 3301219)))
; [eval] iter_err_2 != null ==> iter_2.__previous == iter_2.list_acc
; [eval] iter_err_2 != null
(push) ; 8
; [then-branch: 292 | _err@540@01 != Null | dead]
; [else-branch: 292 | _err@540@01 == Null | live]
(push) ; 9
; [else-branch: 292 | _err@540@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| == 0 ==> iter_err_2 != null
; [eval] |iter_2.list_acc| == 0
; [eval] |iter_2.list_acc|
(push) ; 8
; [then-branch: 293 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| == 0 | dead]
; [else-branch: 293 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 293 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda43_28$l@549@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda43_28$l), set(int())) && (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] issubtype(typeof(lambda43_28$l), set(int()))
; [eval] typeof(lambda43_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 9
; [then-branch: 294 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@549@01), set[PyType](int[PyType]))) | live]
; [else-branch: 294 | issubtype[Bool](typeof[PyType](lambda43_28$l@549@01), set[PyType](int[PyType])) | live]
(push) ; 10
; [then-branch: 294 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@549@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 10
(push) ; 10
; [else-branch: 294 | issubtype[Bool](typeof[PyType](lambda43_28$l@549@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] _checkDefined(a_2, 3301217)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r iterable_2@480@01)
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef83|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
    :qid |qp.fvfValDef84|))
  (forall ((r $Ref)) (!
    (=>
      (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef85|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@453@01 3301217) iterable_2@480@01)
        (/ (to_real 1) (to_real 20))
        $Perm.No)
      (ite
        (and
          (img@513@01 (_checkDefined $Snap.unit res@453@01 3301217))
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 (_checkDefined $Snap.unit res@453@01 3301217))) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 (_checkDefined $Snap.unit res@453@01 3301217)) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (-
          $Perm.Write
          (pTaken@527@01 (_checkDefined $Snap.unit res@453@01 3301217)))
        $Perm.No))
    (ite
      (=
        (_checkDefined $Snap.unit res@453@01 3301217)
        (_checkDefined $Snap.unit c_2@504@01 3301219))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@513@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef85|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
(pop) ; 8
(declare-fun inv@550@01 ($Ref) $Ref)
(declare-fun img@551@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@513@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef85|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda43_28$l@549@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda43_28$l1@549@01 $Ref) (lambda43_28$l2@549@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda43_28$l1@549@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda43_28$l1@549@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda43_28$l1@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@549@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda43_28$l1@549@01 $Ref) (lambda43_28$l2@549@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l1@549@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l1@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@549@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l2@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (= lambda43_28$l1@549@01 lambda43_28$l2@549@01))
    (= lambda43_28$l1@549@01 lambda43_28$l2@549@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda43_28$l@549@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@551@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((inv@550@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda43_28$l@549@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@549@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (and
      (= (inv@550@01 lambda43_28$l@549@01) lambda43_28$l@549@01)
      (img@551@01 lambda43_28$l@549@01)))
  :pattern ((Set_in lambda43_28$l@549@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@551@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@550@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (= (inv@550@01 r) r))
  :pattern ((inv@550@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@552@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@550@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@551@01 r)
      (= r (inv@550@01 r)))
    ($Perm.min
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@553@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@550@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@551@01 r)
      (= r (inv@550@01 r)))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@552@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      (pTaken@552@01 r))
    $Perm.No)
  
  :qid |quant-u-3472|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@550@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@551@01 r)
      (= r (inv@550@01 r)))
    (= (- $Perm.Write (pTaken@552@01 r)) $Perm.No))
  
  :qid |quant-u-3473|))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c_2@504@01 3301219)
        (_checkDefined $Snap.unit c_2@504@01 3301219))
      $Perm.Write
      $Perm.No)
    (pTaken@553@01 (_checkDefined $Snap.unit c_2@504@01 3301219)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@550@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@550@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@551@01 r)
      (= r (inv@550@01 r)))
    (= (- (- $Perm.Write (pTaken@552@01 r)) (pTaken@553@01 r)) $Perm.No))
  
  :qid |quant-u-3475|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220)))
; [eval] list___len__(_checkDefined(to_fill, 30518497429647220))
; [eval] _checkDefined(to_fill, 30518497429647220)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@554@01 $Perm)
(assert ($Perm.isReadVar $k@554@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@554@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@554@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))
; [eval] PSeq___create__(iter_2.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!(iter_err_2 == null) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 9
; [else-branch: 295 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 296 | True | live]
; [else-branch: 296 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 296 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 10
; [then-branch: 297 | False | live]
; [else-branch: 297 | True | live]
(push) ; 11
; [then-branch: 297 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 297 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 12
; [then-branch: 298 | False | live]
; [else-branch: 298 | True | live]
(push) ; 13
; [then-branch: 298 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 298 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 299 | False | live]
; [else-branch: 299 | True | live]
(push) ; 15
; [then-branch: 299 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 299 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 280 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
(pop) ; 7
; [eval] !(iter_err_2 == null)
; [eval] iter_err_2 == null
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@540@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 300 | _err@540@01 != Null | live]
; [else-branch: 300 | _err@540@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 300 | _err@540@01 != Null]
(assert (not (= _err@540@01 $Ref.null)))
; [exec]
; _loop_check_before_2 := false
; [exec]
; assert _loop_termination_flag_2 ==> !(iter_err_2 == null)
; [eval] _loop_termination_flag_2 ==> !(iter_err_2 == null)
(push) ; 8
; [then-branch: 301 | False | dead]
; [else-branch: 301 | True | live]
(push) ; 9
; [else-branch: 301 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; Precomputing data for removing quantified permissions
(define-fun pTaken@555@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@556@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@555@01 r)))
    $Perm.No))
(define-fun pTaken@557@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_2@480@01)
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
        $Perm.Write
        $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@555@01 r)) (pTaken@556@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@555@01 iterable_2@480@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@555@01 r)) $Perm.No))
  
  :qid |quant-u-3478|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_2.list_acc == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@558@01 $Perm)
(assert ($Perm.isReadVar $k@558@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@558@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@513@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
            (- $Perm.Write (pTaken@527@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3479|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
  ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01)))
(assert (=>
  (ite
    (and
      (img@513@01 iterable_2@480@01)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@512@01 iterable_2@480@01)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@512@01 iterable_2@480@01) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (< $Perm.No (- $Perm.Write (pTaken@527@01 iterable_2@480@01)))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) iterable_2@480@01))))
(assert (=>
  (= iterable_2@480@01 (_checkDefined $Snap.unit c_2@504@01 3301219))
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) iterable_2@480@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@558@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
    ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) iterable_2@480@01))
  (=>
    (ite
      (and
        (img@513@01 iterable_2@480@01)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 iterable_2@480@01)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 iterable_2@480@01) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 iterable_2@480@01)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) iterable_2@480@01)))
  (=>
    (= iterable_2@480@01 (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) iterable_2@480@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
(push) ; 8
(assert (not (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [eval] seqtmp_2 == set___sil_seq__(iterable_2)
; [eval] set___sil_seq__(iterable_2)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@559@01 $Perm)
(assert ($Perm.isReadVar $k@559@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_2@480@01) (> $k@559@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_2@480@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@513@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
            (- $Perm.Write (pTaken@527@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3480|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@559@01))
(push) ; 8
(assert (not (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_2@498@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) iterable_2@480@01))) iterable_2@480@01)))
; [eval] iter_err_2 == null ==> iter_2.__iter_index - 1 == |iter_2.__previous|
; [eval] iter_err_2 == null
(push) ; 8
; [then-branch: 302 | _err@540@01 == Null | dead]
; [else-branch: 302 | _err@540@01 != Null | live]
(push) ; 9
; [else-branch: 302 | _err@540@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err_2 != null ==> iter_2.__iter_index == |iter_2.__previous|
; [eval] iter_err_2 != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 303 | _err@540@01 != Null | live]
; [else-branch: 303 | _err@540@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 303 | _err@540@01 != Null]
; [eval] iter_2.__iter_index == |iter_2.__previous|
; [eval] |iter_2.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= _err@540@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@540@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))))
; [eval] iter_err_2 == null ==> |iter_2.list_acc| > 0
; [eval] iter_err_2 == null
(push) ; 8
; [then-branch: 304 | _err@540@01 == Null | dead]
; [else-branch: 304 | _err@540@01 != Null | live]
(push) ; 9
; [else-branch: 304 | _err@540@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_2.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  0))
; [eval] iter_2.__iter_index <= |iter_2.list_acc|
; [eval] |iter_2.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))
; [eval] |iter_2.list_acc| > 0 ==> iter_2.__iter_index > 0
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 305 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 305 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 305 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] iter_2.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 306 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 306 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 306 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] loop_target_2 == iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.list_acc[iter_2.__iter_index - 1]
; [eval] iter_2.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (=
    _res@539@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
        1)))))
; [eval] |iter_2.list_acc| > 0 ==> (loop_target_2 in iter_2.list_acc)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 307 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 307 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 307 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] (loop_target_2 in iter_2.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    _res@539@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01))))))
    _res@539@01)))
; [eval] iter_err_2 == null ==> iter_2.__previous == iter_2.list_acc[..iter_2.__iter_index - 1]
; [eval] iter_err_2 == null
(push) ; 8
; [then-branch: 308 | _err@540@01 == Null | dead]
; [else-branch: 308 | _err@540@01 != Null | live]
(push) ; 9
; [else-branch: 308 | _err@540@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| > 0 ==> issubtype(typeof(loop_target_2), set(int()))
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 309 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 309 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 309 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_2), set(int()))
; [eval] typeof(loop_target_2)
; [eval] set(int())
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@539@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@539@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_2.list_acc| > 0 ==> c_2 == loop_target_2 && _isDefined(3301219)
; [eval] |iter_2.list_acc| > 0
; [eval] |iter_2.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 310 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0 | live]
; [else-branch: 310 | !(|First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 310 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| > 0]
; [eval] c_2 == loop_target_2 && _isDefined(3301219)
; [eval] c_2 == loop_target_2
(push) ; 10
; [then-branch: 311 | c_2@504@01 != _res@539@01 | live]
; [else-branch: 311 | c_2@504@01 == _res@539@01 | live]
(push) ; 11
; [then-branch: 311 | c_2@504@01 != _res@539@01]
(assert (not (= c_2@504@01 _res@539@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 311 | c_2@504@01 == _res@539@01]
(assert (= c_2@504@01 _res@539@01))
; [eval] _isDefined(3301219)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= c_2@504@01 _res@539@01) (not (= c_2@504@01 _res@539@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (or (= c_2@504@01 _res@539@01) (not (= c_2@504@01 _res@539@01)))))
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (and (= c_2@504@01 _res@539@01) (_isDefined $Snap.unit 3301219)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))
    0)
  (and (= c_2@504@01 _res@539@01) (_isDefined $Snap.unit 3301219))))
; [eval] iter_err_2 != null ==> iter_2.__previous == iter_2.list_acc
; [eval] iter_err_2 != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@540@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 312 | _err@540@01 != Null | live]
; [else-branch: 312 | _err@540@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 312 | _err@540@01 != Null]
; [eval] iter_2.__previous == iter_2.list_acc
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_2.list_acc| == 0 ==> iter_err_2 != null
; [eval] |iter_2.list_acc| == 0
; [eval] |iter_2.list_acc|
(push) ; 8
; [then-branch: 313 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| == 0 | dead]
; [else-branch: 313 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 313 | |First:(Second:(Second:(Second:(Second:($t@506@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda43_28$l@560@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda43_28$l), set(int())) && (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] issubtype(typeof(lambda43_28$l), set(int()))
; [eval] typeof(lambda43_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 9
; [then-branch: 314 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@560@01), set[PyType](int[PyType]))) | live]
; [else-branch: 314 | issubtype[Bool](typeof[PyType](lambda43_28$l@560@01), set[PyType](int[PyType])) | live]
(push) ; 10
; [then-branch: 314 | !(issubtype[Bool](typeof[PyType](lambda43_28$l@560@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 10
(push) ; 10
; [else-branch: 314 | issubtype[Bool](typeof[PyType](lambda43_28$l@560@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda43_28$l in _checkDefined(a_2, 3301217).set_acc)
; [eval] _checkDefined(a_2, 3301217)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r iterable_2@480@01)
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef83|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
    :qid |qp.fvfValDef84|))
  (forall ((r $Ref)) (!
    (=>
      (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
      (=
        ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef85|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@453@01 3301217) iterable_2@480@01)
        (/ (to_real 1) (to_real 20))
        $Perm.No)
      (ite
        (and
          (img@513@01 (_checkDefined $Snap.unit res@453@01 3301217))
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 (_checkDefined $Snap.unit res@453@01 3301217))) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 (_checkDefined $Snap.unit res@453@01 3301217)) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (-
          $Perm.Write
          (pTaken@527@01 (_checkDefined $Snap.unit res@453@01 3301217)))
        $Perm.No))
    (ite
      (=
        (_checkDefined $Snap.unit res@453@01 3301217)
        (_checkDefined $Snap.unit c_2@504@01 3301219))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@513@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef85|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
(pop) ; 8
(declare-fun inv@561@01 ($Ref) $Ref)
(declare-fun img@562@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_2@480@01)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef83|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@513@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
      (< $Perm.No (- $Perm.Write (pTaken@527@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
    (=
      ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@531@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef85|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda43_28$l@560@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda43_28$l1@560@01 $Ref) (lambda43_28$l2@560@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda43_28$l1@560@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda43_28$l1@560@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda43_28$l1@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@560@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@453@01 3301217)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda43_28$l1@560@01 $Ref) (lambda43_28$l2@560@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l1@560@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l1@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda43_28$l2@560@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda43_28$l2@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (= lambda43_28$l1@560@01 lambda43_28$l2@560@01))
    (= lambda43_28$l1@560@01 lambda43_28$l2@560@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda43_28$l@560@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@562@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@453@01 3301217))
  :pattern ((inv@561@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda43_28$l@560@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda43_28$l@560@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
    (and
      (= (inv@561@01 lambda43_28$l@560@01) lambda43_28$l@560@01)
      (img@562@01 lambda43_28$l@560@01)))
  :pattern ((Set_in lambda43_28$l@560@01 ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@562@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@561@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
    (= (inv@561@01 r) r))
  :pattern ((inv@561@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@563@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@561@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@562@01 r)
      (= r (inv@561@01 r)))
    ($Perm.min
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@564@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@561@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@562@01 r)
      (= r (inv@561@01 r)))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_2@504@01 3301219))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@563@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@513@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@512@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@512@01 r) ($FVF.lookup_set_acc (as sm@509@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217)))))
        (- $Perm.Write (pTaken@527@01 r))
        $Perm.No)
      (pTaken@563@01 r))
    $Perm.No)
  
  :qid |quant-u-3483|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@561@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@562@01 r)
      (= r (inv@561@01 r)))
    (= (- $Perm.Write (pTaken@563@01 r)) $Perm.No))
  
  :qid |quant-u-3484|))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c_2@504@01 3301219)
        (_checkDefined $Snap.unit c_2@504@01 3301219))
      $Perm.Write
      $Perm.No)
    (pTaken@564@01 (_checkDefined $Snap.unit c_2@504@01 3301219)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@561@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@561@01 r) ($FVF.lookup_set_acc (as sm@532@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@453@01 3301217))))
      (img@562@01 r)
      (= r (inv@561@01 r)))
    (= (- (- $Perm.Write (pTaken@563@01 r)) (pTaken@564@01 r)) $Perm.No))
  
  :qid |quant-u-3486|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _checkDefined(to_fill, 30518497429647220)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill, 30518497429647220)))
; [eval] list___len__(_checkDefined(to_fill, 30518497429647220))
; [eval] _checkDefined(to_fill, 30518497429647220)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@565@01 $Perm)
(assert ($Perm.isReadVar $k@565@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@565@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_2.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_2.__previous, set(int())))
; [eval] PSeq___create__(iter_2.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@537@01))))) (_checkDefined $Snap.unit res@476@01 30518497429647220))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
; [eval] _loop_check_before_2 ==> _loop_termination_flag_2 || (!(iter_err_2 == null) || perm(MustTerminate(_cthread_159)) == none && ((forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))))
(push) ; 8
; [then-branch: 315 | False | dead]
; [else-branch: 315 | True | live]
(push) ; 9
; [else-branch: 315 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before_2 ==> (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_2
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 316 | True | live]
; [else-branch: 316 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 316 | True]
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false) && ((forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false) && ((forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false) && (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_15: Ref [MustInvokeBounded(_r_15)] :: false)
(push) ; 10
; [then-branch: 317 | False | live]
; [else-branch: 317 | True | live]
(push) ; 11
; [then-branch: 317 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 317 | True]
; [eval] (forperm _r_15: Ref [MustInvokeUnbounded(_r_15)] :: false)
(push) ; 12
; [then-branch: 318 | False | live]
; [else-branch: 318 | True | live]
(push) ; 13
; [then-branch: 318 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 318 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 319 | False | live]
; [else-branch: 319 | True | live]
(push) ; 15
; [then-branch: 319 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 319 | True]
; [eval] (forperm _r_15: Ref [_r_15.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 300 | _err@540@01 == Null]
(assert (= _err@540@01 $Ref.null))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 264 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
(pop) ; 6
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@453@01 iterable_2@480@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= res@453@01 iterable_2@480@01))
(declare-const $t@566@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (= r iterable_2@480@01)
      (Set_equal ($FVF.lookup_set_acc $t@566@01 r) ($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r)))
    (=>
      (ite
        (= r res@453@01)
        (<
          $Perm.No
          (-
            (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
            (pTaken@515@01 r)))
        false)
      (Set_equal ($FVF.lookup_set_acc $t@566@01 r) ($FVF.lookup_set_acc $t@488@01 r))))
  :pattern (($FVF.lookup_set_acc (as sm@507@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@488@01 r))
  :pattern (($FVF.lookup_set_acc $t@566@01 r))
  :qid |quant-u-3487|)))
; [eval] !(iter_err_2 == null)
; [eval] iter_err_2 == null
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_2@503@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_2@503@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 320 | iter_err_2@503@01 != Null | live]
; [else-branch: 320 | iter_err_2@503@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 320 | iter_err_2@503@01 != Null]
(assert (not (= iter_err_2@503@01 $Ref.null)))
; [exec]
; exhale perm(MustTerminate(_cthread_159)) > none ==>
;   acc(MustTerminate(_cthread_159), perm(MustTerminate(_cthread_159)) -
;   _loop_original_must_terminate_2)
; [eval] perm(MustTerminate(_cthread_159)) > none
; [eval] perm(MustTerminate(_cthread_159))
; [then-branch: 321 | False | dead]
; [else-branch: 321 | True | live]
(push) ; 7
; [else-branch: 321 | True]
; [exec]
; _cwl_159 := Iterator___del__(_cthread_159, _method_measures_159, _residue_164,
;   iter_2)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@567@01 $Perm)
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 ($Snap.combine ($Snap.first $t@568@01) ($Snap.second $t@568@01))))
(assert (= ($Snap.first $t@568@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@568@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@568@01))
    ($Snap.second ($Snap.second $t@568@01)))))
(assert (= ($Snap.first ($Snap.second $t@568@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@568@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@568@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@568@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_164@441@01 _current_wait_level_150@567@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@568@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@568@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 322 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0))) | live]
; [else-branch: 322 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 322 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0))))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (_checkDefined $Snap.unit res@476@01 30518497429647220)
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@506@01)))))))))))))))))))))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))))
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1))) | dead]
; [else-branch: 323 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 323 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0))) | dead]
; [else-branch: 324 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 324 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; label post_loop_2
; [exec]
; label __end
; [eval] (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 322 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1))) | dead]
; [else-branch: 325 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 325 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0))) | live]
; [else-branch: 326 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 326 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@486@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))) 0))))
(declare-const sm@569@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@569@01  $FVF<set_acc>) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@568@01)))))))))
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
    iterable_2@480@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $t@570@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite
        (= r iterable_2@480@01)
        (<
          $Perm.No
          (+
            (/ (to_real 1) (to_real 20))
            (-
              (+ (- $Perm.Write (pTaken@481@01 r)) (/ (to_real 1) (to_real 20)))
              (pTaken@515@01 r))))
        false)
      (Set_equal ($FVF.lookup_set_acc $t@570@01 r) ($FVF.lookup_set_acc $t@566@01 r)))
    (=>
      (=
        r
        ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
      (Set_equal ($FVF.lookup_set_acc $t@570@01 r) ($FVF.lookup_set_acc (as sm@569@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc $t@566@01 r))
  :pattern (($FVF.lookup_set_acc (as sm@569@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@570@01 r))
  :qid |quant-u-3488|)))
(assert (<=
  $Perm.No
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
    (/ (to_real 1) (to_real 20))
    $Perm.No)))
(assert (<=
  (ite
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
    (/ (to_real 1) (to_real 20))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@486@01)))))))))
      $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label post_loop_2
; [exec]
; label __end
; [eval] (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 320 | iter_err_2@503@01 == Null]
(assert (= iter_err_2@503@01 $Ref.null))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !(iter_err_2 == null)
; [eval] iter_err_2 == null
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@493@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | _err@493@01 != Null | dead]
; [else-branch: 327 | _err@493@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 327 | _err@493@01 == Null]
(assert (= _err@493@01 $Ref.null))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- set_previous_2 ----------
(declare-const _cthread_160@571@01 $Ref)
(declare-const _caller_measures_160@572@01 Seq<Measure$>)
(declare-const _residue_160@573@01 $Perm)
(declare-const _current_wait_level_160@574@01 $Perm)
(declare-const _cthread_160@575@01 $Ref)
(declare-const _caller_measures_160@576@01 Seq<Measure$>)
(declare-const _residue_160@577@01 $Perm)
(declare-const _current_wait_level_160@578@01 $Perm)
(push) ; 1
(declare-const $t@579@01 $Snap)
(assert (= $t@579@01 ($Snap.combine ($Snap.first $t@579@01) ($Snap.second $t@579@01))))
(assert (= ($Snap.first $t@579@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@575@01 $Ref.null)))
(assert (=
  ($Snap.second $t@579@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@579@01))
    ($Snap.second ($Snap.second $t@579@01)))))
(assert (= ($Snap.first ($Snap.second $t@579@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@575@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@579@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@580@01 $Snap)
(assert (= $t@580@01 ($Snap.combine ($Snap.first $t@580@01) ($Snap.second $t@580@01))))
(assert (= ($Snap.first $t@580@01) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseBounded] :: Level(_r_21) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@580@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@580@01))
    ($Snap.second ($Snap.second $t@580@01)))))
(assert (= ($Snap.first ($Snap.second $t@580@01)) $Snap.unit))
; [eval] (forperm _r_21: Ref [_r_21.MustReleaseUnbounded] :: Level(_r_21) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@580@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@580@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@580@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@580@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@577@01 _current_wait_level_160@578@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@580@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@581@01 $Ref)
; [exec]
; var b_3: Ref
(declare-const b_3@582@01 $Ref)
; [exec]
; var a_3: Ref
(declare-const a_3@583@01 $Ref)
; [exec]
; var to_fill_0: Ref
(declare-const to_fill_0@584@01 $Ref)
; [exec]
; var c_3: Ref
(declare-const c_3@585@01 $Ref)
; [exec]
; var set_15: Ref
(declare-const set_15@586@01 $Ref)
; [exec]
; var set_16: Ref
(declare-const set_16@587@01 $Ref)
; [exec]
; var set_17: Ref
(declare-const set_17@588@01 $Ref)
; [exec]
; var list_1: Ref
(declare-const list_1@589@01 $Ref)
; [exec]
; var iterable_3: Ref
(declare-const iterable_3@590@01 $Ref)
; [exec]
; var iter_3: Ref
(declare-const iter_3@591@01 $Ref)
; [exec]
; var loop_target_3: Ref
(declare-const loop_target_3@592@01 $Ref)
; [exec]
; var iter_err_3: Ref
(declare-const iter_err_3@593@01 $Ref)
; [exec]
; var seqtmp_3: Seq[Ref]
(declare-const seqtmp_3@594@01 Seq<$Ref>)
; [exec]
; var _loop_measures_3: Seq[Measure$]
(declare-const _loop_measures_3@595@01 Seq<Measure$>)
; [exec]
; var _loop_check_before_3: Bool
(declare-const _loop_check_before_3@596@01 Bool)
; [exec]
; var _loop_termination_flag_3: Bool
(declare-const _loop_termination_flag_3@597@01 Bool)
; [exec]
; var _loop_original_must_terminate_3: Perm
(declare-const _loop_original_must_terminate_3@598@01 $Perm)
; [exec]
; var _residue_165: Perm
(declare-const _residue_165@599@01 $Perm)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@600@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@601@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_160, set_15 := set___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@575@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@575@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@575@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@575@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@602@01 $Perm)
(declare-const res@603@01 $Ref)
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 ($Snap.combine ($Snap.first $t@604@01) ($Snap.second $t@604@01))))
(assert (= ($Snap.first $t@604@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@604@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@604@01))
    ($Snap.second ($Snap.second $t@604@01)))))
(assert (= ($Snap.first ($Snap.second $t@604@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@604@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@604@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@604@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_160@577@01 _current_wait_level_21@602@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@604@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@604@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))))
(declare-const sm@605@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@605@01  $FVF<set_acc>) res@603@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))))
(assert (not (= res@603@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@605@01  $FVF<set_acc>) res@603@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@603@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@603@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_15), set(int()))
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 $Snap.unit))
; [eval] issubtype(typeof(set_15), set(int()))
; [eval] typeof(set_15)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@603@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(1)), int())
; [eval] issubtype(typeof(__prim__int___box__(1)), int())
; [eval] typeof(__prim__int___box__(1))
; [eval] __prim__int___box__(1)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 1))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 1))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 1)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(2)), int())
; [eval] issubtype(typeof(__prim__int___box__(2)), int())
; [eval] typeof(__prim__int___box__(2))
; [eval] __prim__int___box__(2)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 2))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 2))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 2)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; set_15.set_acc := Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] Set(__prim__int___box__(1), __prim__int___box__(2), __prim__int___box__(3))
; [eval] __prim__int___box__(1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(2)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@607@01 ((r $Ref)) $Perm
  (ite
    (= r res@603@01)
    ($Perm.min (ite (= r res@603@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@607@01 res@603@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@603@01) (= (- $Perm.Write (pTaken@607@01 r)) $Perm.No))
  
  :qid |quant-u-3491|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@608@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) res@603@01)
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 1)) (__prim__int___box__ $Snap.unit 2)) (__prim__int___box__ $Snap.unit 3))))
; [exec]
; b_3 := set_15
; [exec]
; inhale _isDefined(3366754)
(declare-const $t@609@01 $Snap)
(assert (= $t@609@01 $Snap.unit))
; [eval] _isDefined(3366754)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366754))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366754))
(assert (_isDefined $Snap.unit 3366754))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_160, set_16 := set___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@610@01 $Perm)
(declare-const res@611@01 $Ref)
(declare-const $t@612@01 $Snap)
(assert (= $t@612@01 ($Snap.combine ($Snap.first $t@612@01) ($Snap.second $t@612@01))))
(assert (= ($Snap.first $t@612@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@612@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@612@01))
    ($Snap.second ($Snap.second $t@612@01)))))
(assert (= ($Snap.first ($Snap.second $t@612@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@612@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@612@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@612@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@612@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_160@577@01 _current_wait_level_21@610@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@612@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@612@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))))
(declare-const sm@613@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@613@01  $FVF<set_acc>) res@611@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@611@01 res@603@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@611@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@614@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@603@01)
    (=
      ($FVF.lookup_set_acc (as sm@614@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@614@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@611@01)
    (=
      ($FVF.lookup_set_acc (as sm@614@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@613@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@614@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@613@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef91|)))
(declare-const pm@615@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@615@01  $FPM) r)
    (+
      (ite (= r res@603@01) $Perm.Write $Perm.No)
      (ite (= r res@611@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@615@01  $FPM) r))
  :qid |qp.resPrmSumDef92|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@615@01  $FPM) res@611@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@614@01  $FVF<set_acc>) res@611@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@612@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@611@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@611@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_16), set(set(int())))
(declare-const $t@616@01 $Snap)
(assert (= $t@616@01 $Snap.unit))
; [eval] issubtype(typeof(set_16), set(set(int())))
; [eval] typeof(set_16)
; [eval] set(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@611@01) (set<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(b_3, 3366754)), set(int()))
; [eval] issubtype(typeof(_checkDefined(b_3, 3366754)), set(int()))
; [eval] typeof(_checkDefined(b_3, 3366754))
; [eval] _checkDefined(b_3, 3366754)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@603@01 3366754))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@603@01 3366754))
; [eval] set(int())
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@603@01 3366754)) (set<PyType> (as int<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@603@01 3366754)) (set<PyType> (as int<PyType>  PyType))))
; [exec]
; _cwl_160, set_17 := set___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@617@01 $Perm)
(declare-const res@618@01 $Ref)
(declare-const $t@619@01 $Snap)
(assert (= $t@619@01 ($Snap.combine ($Snap.first $t@619@01) ($Snap.second $t@619@01))))
(assert (= ($Snap.first $t@619@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@619@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@619@01))
    ($Snap.second ($Snap.second $t@619@01)))))
(assert (= ($Snap.first ($Snap.second $t@619@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@619@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@619@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@619@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@619@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_160@577@01 _current_wait_level_21@617@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@619@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@619@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01)))))))
(declare-const sm@620@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@620@01  $FVF<set_acc>) res@618@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@619@01)))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@618@01 res@611@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@618@01 res@603@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= res@618@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
(declare-const sm@621@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@603@01)
    (=
      ($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@611@01)
    (=
      ($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@613@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@613@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@618@01)
    (=
      ($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@620@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@620@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef95|)))
(declare-const pm@622@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@622@01  $FPM) r)
    (+
      (+
        (ite (= r res@603@01) $Perm.Write $Perm.No)
        (ite (= r res@611@01) $Perm.Write $Perm.No))
      (ite (= r res@618@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@622@01  $FPM) r))
  :qid |qp.resPrmSumDef96|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (< $Perm.No ($FVF.perm_set_acc (as pm@622@01  $FPM) res@618@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Set[Ref]()
(assert (Set_equal ($FVF.lookup_set_acc (as sm@621@01  $FVF<set_acc>) res@618@01) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@619@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@618@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@618@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_17), set(int()))
(declare-const $t@623@01 $Snap)
(assert (= $t@623@01 $Snap.unit))
; [eval] issubtype(typeof(set_17), set(int()))
; [eval] typeof(set_17)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@618@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_17.set_acc := Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@624@01 ((r $Ref)) $Perm
  (ite
    (= r res@618@01)
    ($Perm.min (ite (= r res@618@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@625@01 ((r $Ref)) $Perm
  (ite
    (= r res@618@01)
    ($Perm.min
      (ite (= r res@603@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@624@01 r)))
    $Perm.No))
(define-fun pTaken@626@01 ((r $Ref)) $Perm
  (ite
    (= r res@618@01)
    ($Perm.min
      (ite (= r res@611@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@624@01 r)) (pTaken@625@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@624@01 res@618@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@618@01) (= (- $Perm.Write (pTaken@624@01 r)) $Perm.No))
  
  :qid |quant-u-3494|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@627@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) res@618@01)
  (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; assert issubtype(typeof(set_17), set(int()))
; [eval] issubtype(typeof(set_17), set(int()))
; [eval] typeof(set_17)
; [eval] set(int())
; [eval] int()
; [exec]
; set_16.set_acc := Set(_checkDefined(b_3, 3366754), set_17)
; [eval] Set(_checkDefined(b_3, 3366754), set_17)
; [eval] _checkDefined(b_3, 3366754)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@628@01 ((r $Ref)) $Perm
  (ite
    (= r res@611@01)
    ($Perm.min (ite (= r res@611@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@629@01 ((r $Ref)) $Perm
  (ite
    (= r res@611@01)
    ($Perm.min
      (ite (= r res@618@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@628@01 r)))
    $Perm.No))
(define-fun pTaken@630@01 ((r $Ref)) $Perm
  (ite
    (= r res@611@01)
    ($Perm.min
      (ite (= r res@603@01) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@628@01 r)) (pTaken@629@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@628@01 res@611@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r res@611@01) (= (- $Perm.Write (pTaken@628@01 r)) $Perm.No))
  
  :qid |quant-u-3497|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@631@01 $FVF<set_acc>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_set_acc (as sm@631@01  $FVF<set_acc>) res@611@01)
  (Set_unionone (Set_singleton (_checkDefined $Snap.unit res@603@01 3366754)) res@618@01)))
; [exec]
; a_3 := set_16
; [exec]
; inhale _isDefined(3366753)
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 $Snap.unit))
; [eval] _isDefined(3366753)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366753))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366753))
(assert (_isDefined $Snap.unit 3366753))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_160, list_1 := list___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@633@01 $Perm)
(declare-const res@634@01 $Ref)
(declare-const $t@635@01 $Snap)
(assert (= $t@635@01 ($Snap.combine ($Snap.first $t@635@01) ($Snap.second $t@635@01))))
(assert (= ($Snap.first $t@635@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@635@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@635@01))
    ($Snap.second ($Snap.second $t@635@01)))))
(assert (= ($Snap.first ($Snap.second $t@635@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@635@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@635@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@635@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_160@577@01 _current_wait_level_8@633@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@635@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))
(assert (not (= res@634@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@634@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@634@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@635@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@634@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_1), list(set(int())))
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 $Snap.unit))
; [eval] issubtype(typeof(list_1), list(set(int())))
; [eval] typeof(list_1)
; [eval] list(set(int()))
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@634@01) (list<PyType> (set<PyType> (as int<PyType>  PyType)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; to_fill_0 := list_1
; [exec]
; inhale _isDefined(892319705469091278708)
(declare-const $t@637@01 $Snap)
(assert (= $t@637@01 $Snap.unit))
; [eval] _isDefined(892319705469091278708)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 892319705469091278708))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 892319705469091278708))
(assert (_isDefined $Snap.unit 892319705469091278708))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; iterable_3 := _checkDefined(a_3, 3366753)
; [eval] _checkDefined(a_3, 3366753)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@611@01 3366753))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@611@01 3366753))
(declare-const iterable_3@638@01 $Ref)
(assert (= iterable_3@638@01 (_checkDefined $Snap.unit res@611@01 3366753)))
; [exec]
; _cwl_160, iter_3 := set___iter__(_cthread_160, _method_measures_160, _residue_160,
;   iterable_3)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> iterable_3@638@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_3@638@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> iterable_3@638@01) (set<PyType> (set_arg<PyType> (typeof<PyType> iterable_3@638@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@639@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r res@611@01) $Perm.Write $Perm.No)
      (/ (to_real 1) (to_real 10)))
    $Perm.No))
(define-fun pTaken@640@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r res@603@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 10)) (pTaken@639@01 r)))
    $Perm.No))
(define-fun pTaken@641@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r res@618@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 10)) (pTaken@639@01 r)) (pTaken@640@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@639@01 res@611@01)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@639@01 r) $Perm.No)
  
  :qid |quant-u-3500|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (= (- (/ (to_real 1) (to_real 10)) (pTaken@639@01 r)) $Perm.No))
  
  :qid |quant-u-3501|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@642@01 $Perm)
(declare-const _res@643@01 $Ref)
(declare-const $t@644@01 $Snap)
(assert (= $t@644@01 ($Snap.combine ($Snap.first $t@644@01) ($Snap.second $t@644@01))))
(assert (= ($Snap.first $t@644@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@644@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@644@01))
    ($Snap.second ($Snap.second $t@644@01)))))
(assert (= ($Snap.first ($Snap.second $t@644@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@644@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@644@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@644@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_160@577@01 _current_wait_level_25@642@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@644@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@644@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@644@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@643@01 iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (= res@634@01 _res@643@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= _res@643@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
(declare-const sm@645@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@645@01  $FVF<set_acc>) iterable_3@638@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= iterable_3@638@01 res@611@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= iterable_3@638@01 res@611@01))
(declare-const $t@646@01 $FVF<set_acc>)
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (ite (= r res@611@01) (< $Perm.No (- $Perm.Write (pTaken@639@01 r))) false)
      (Set_equal ($FVF.lookup_set_acc $t@646@01 r) ($FVF.lookup_set_acc (as sm@631@01  $FVF<set_acc>) r)))
    (=>
      (= r iterable_3@638@01)
      (Set_equal ($FVF.lookup_set_acc $t@646@01 r) ($FVF.lookup_set_acc (as sm@645@01  $FVF<set_acc>) r))))
  :pattern (($FVF.lookup_set_acc (as sm@631@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@645@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@646@01 r))
  :qid |quant-u-3502|)))
(assert (not (= iterable_3@638@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@647@01 $Perm)
(assert ($Perm.isReadVar $k@647@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@618@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@603@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@647@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@611@01)
            (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@618@01) $Perm.Write $Perm.No))
        (ite (= r res@603@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3503|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@648@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (= iterable_3@638@01 res@618@01)
  (=
    ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) iterable_3@638@01))))
(assert (=>
  (= iterable_3@638@01 res@603@01)
  (=
    ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) iterable_3@638@01))))
(assert (=>
  (ite
    (= iterable_3@638@01 res@611@01)
    (<
      $Perm.No
      (+
        (- $Perm.Write (pTaken@639@01 iterable_3@638@01))
        (/ (to_real 1) (to_real 20))))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc $t@646@01 iterable_3@638@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@647@01))
(assert (and
  (=>
    (= iterable_3@638@01 res@618@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
      ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) iterable_3@638@01)))
  (=>
    (= iterable_3@638@01 res@603@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
      ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) iterable_3@638@01)))
  (=>
    (ite
      (= iterable_3@638@01 res@611@01)
      (<
        $Perm.No
        (+
          (- $Perm.Write (pTaken@639@01 iterable_3@638@01))
          (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01)
      ($FVF.lookup_set_acc $t@646@01 iterable_3@638@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
  iterable_3@638@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@643@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> iterable_3@638@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_160, loop_target_3, iter_err_3 := Iterator___next__(_cthread_160, _method_measures_160,
;   _residue_160, iter_3)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@649@01 $Perm)
(declare-const _res@650@01 $Ref)
(declare-const _err@651@01 $Ref)
(declare-const $t@652@01 $Snap)
(assert (= $t@652@01 ($Snap.combine ($Snap.first $t@652@01) ($Snap.second $t@652@01))))
(assert (= ($Snap.first $t@652@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@652@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@652@01))
    ($Snap.second ($Snap.second $t@652@01)))))
(assert (= ($Snap.first ($Snap.second $t@652@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@652@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@652@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@652@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_160@577@01 _current_wait_level_149@649@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@652@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@652@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))
  (not (= _err@651@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@651@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | _err@651@01 == Null | live]
; [else-branch: 328 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 328 | _err@651@01 == Null]
(assert (= _err@651@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (= _err@651@01 $Ref.null))
(assert (=>
  (= _err@651@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | _err@651@01 == Null | live]
; [else-branch: 329 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 329 | _err@651@01 == Null]
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@651@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 330 | _err@651@01 == Null | live]
; [else-branch: 330 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 330 | _err@651@01 == Null]
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (= _err@651@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 331 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 331 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 331 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
; [then-branch: 332 | _err@651@01 != Null | dead]
; [else-branch: 332 | _err@651@01 == Null | live]
(push) ; 4
; [else-branch: 332 | _err@651@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
; [then-branch: 333 | _err@651@01 != Null | dead]
; [else-branch: 333 | _err@651@01 == Null | live]
(push) ; 4
; [else-branch: 333 | _err@651@01 == Null]
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 334 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 334 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 335 | _res@650@01 != First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 1] | live]
; [else-branch: 335 | _res@650@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 335 | _res@650@01 != First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 1]]
(assert (not
  (=
    _res@650@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 335 | _res@650@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 1]]
(assert (=
  _res@650@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@650@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)))
  (not
    (=
      _res@650@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (or
    (=
      _res@650@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)))
    (not
      (=
        _res@650@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (and
    (=
      _res@650@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      _res@650@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 336 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 336 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@650@01) (Iterator_arg<PyType> (typeof<PyType> _res@643@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@653@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 337 | r@653@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@644@01)))))))))))) | live]
; [else-branch: 337 | !(r@653@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@644@01))))))))))))) | live]
(push) ; 5
; [then-branch: 337 | r@653@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@644@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
  r@653@01))
(pop) ; 5
(push) ; 5
; [else-branch: 337 | !(r@653@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@644@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
    r@653@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 338 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1) | live]
; [else-branch: 338 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 338 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 338 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 339 | r@653@01 != First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] | live]
; [else-branch: 339 | r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 339 | r@653@01 != First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2]]
(assert (not
  (=
    r@653@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 339 | r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2]]
(assert (=
  r@653@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@653@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        2)))
  (not
    (=
      r@653@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (or
      (=
        r@653@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            2)))
      (not
        (=
          r@653@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1))))
(push) ; 6
; [then-branch: 340 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1 && r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] && _err@651@01 == Null | live]
; [else-branch: 340 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1 && r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] && _err@651@01 == Null) | live]
(push) ; 7
; [then-branch: 340 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1 && r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] && _err@651@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (and
    (=
      r@653@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          2)))
    (= _err@651@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 340 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 1 && r@653@01 == First:(Second:(Second:(Second:(Second:($t@644@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) - 2] && _err@651@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (and
      (=
        r@653@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            2)))
      (= _err@651@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 341 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 0) | live]
; [else-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 341 | !(First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 341 | First:(Second:(Second:(Second:(Second:(Second:($t@652@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 342 | _err@651@01 == Null | live]
; [else-branch: 342 | _err@651@01 != Null | live]
(push) ; 11
; [then-branch: 342 | _err@651@01 == Null]
(assert (= _err@651@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 342 | _err@651@01 != Null]
(assert (not (= _err@651@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    0)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      0)
    (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null)))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (and
      (=
        r@653@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            2)))
      (= _err@651@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (=
      r@653@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          2)))
    (= _err@651@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)
      (and
        (=
          r@653@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              2)))
        (= _err@651@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)
        (and
          (=
            r@653@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                2)))
          (= _err@651@01 $Ref.null))))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        0)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          0)
        (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)
      (and
        (=
          r@653@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              2)))
        (= _err@651@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (and
      (=
        r@653@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            2)))
      (= _err@651@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
      r@653@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
        r@653@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)
        (or
          (=
            r@653@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                2)))
          (not
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)
        (and
          (=
            r@653@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                2)))
          (= _err@651@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)
        (=
          r@653@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              2)))
        (= _err@651@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (and
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))
            (= _err@651@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (and
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (= _err@651@01 $Ref.null))))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            0)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              0)
            (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (and
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))
            (= _err@651@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
          1)
        (and
          (=
            r@653@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                2)))
          (= _err@651@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
      r@653@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
    r@653@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@653@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
          r@653@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
            r@653@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (or
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (not
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (and
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (= _err@651@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))
            (= _err@651@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                1)
              (and
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))
                (= _err@651@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  1)
                (and
                  (=
                    r@653@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                        2)))
                  (= _err@651@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  0)
                (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                1)
              (and
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))
                (= _err@651@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (and
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (= _err@651@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
          r@653@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
        r@653@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    r@653@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    r@653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@653@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
          r@653@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
            r@653@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (or
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (not
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (and
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (= _err@651@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))
            (= _err@651@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                1)
              (and
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))
                (= _err@651@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  1)
                (and
                  (=
                    r@653@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                        2)))
                  (= _err@651@01 $Ref.null))))
            (=>
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                0)
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  0)
                (or (not (= _err@651@01 $Ref.null)) (= _err@651@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                1)
              (and
                (=
                  r@653@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                      2)))
                (= _err@651@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
              1)
            (and
              (=
                r@653@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                    2)))
              (= _err@651@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
          r@653@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
        r@653@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    r@653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@653@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
      r@653@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))))))
        r@653@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            1)
          (and
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  2)))
            (= _err@651@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
            0)
          (and
            (not (= _err@651@01 $Ref.null))
            (=
              r@653@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    r@653@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))
    r@653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_3 == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@651@01 $Ref.null)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | _err@651@01 == Null | live]
; [else-branch: 343 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 343 | _err@651@01 == Null]
(assert (= _err@651@01 $Ref.null))
; [exec]
; c_3 := loop_target_3
; [exec]
; inhale _isDefined(3366755)
(declare-const $t@654@01 $Snap)
(assert (= $t@654@01 $Snap.unit))
; [eval] _isDefined(3366755)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 3366755))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366755))
(assert (_isDefined $Snap.unit 3366755))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp_3 := set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@655@01 $Perm)
(assert ($Perm.isReadVar $k@655@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@618@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@603@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@655@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@611@01)
            (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@618@01) $Perm.Write $Perm.No))
        (ite (= r res@603@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3504|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@655@01))
(declare-const seqtmp_3@656@01 Seq<$Ref>)
(assert (=
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
; [exec]
; _loop_original_must_terminate_3 := perm(MustTerminate(_cthread_160))
; [eval] perm(MustTerminate(_cthread_160))
(declare-const _loop_original_must_terminate_3@657@01 $Perm)
(assert (= _loop_original_must_terminate_3@657@01 $Perm.No))
; [exec]
; _loop_termination_flag_3 := false
; [exec]
; _loop_check_before_3 := true
(declare-const _loop_measures_3@658@01 Seq<Measure$>)
(declare-const _cwl_160@659@01 $Perm)
(declare-const loop_target_3@660@01 $Ref)
(declare-const iter_err_3@661@01 $Ref)
(declare-const c_3@662@01 $Ref)
(declare-const _loop_check_before_3@663@01 Bool)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 ($Snap.combine ($Snap.first $t@664@01) ($Snap.second $t@664@01))))
(assert (= ($Snap.first $t@664@01) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _residue_165)
(assert (=
  ($Snap.second $t@664@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@664@01))
    ($Snap.second ($Snap.second $t@664@01)))))
(assert (= ($Snap.first ($Snap.second $t@664@01)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _residue_165)
(assert (=
  ($Snap.second ($Snap.second $t@664@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@664@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@664@01))) $Snap.unit))
; [eval] _residue_160 <= _residue_165
(assert (<= _residue_160@577@01 _residue_165@599@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@664@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@664@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
(declare-const sm@665@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  $Snap.unit))
; [eval] iter_3.list_acc == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@666@01 $Perm)
(assert ($Perm.isReadVar $k@666@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@666@01 $Perm.No))
    (>
      (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3505|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@667@01 $FVF<set_acc>)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01)
  ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@666@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  $Snap.unit))
; [eval] seqtmp_3 == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@668@01 $Perm)
(assert ($Perm.isReadVar $k@668@01))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@668@01 $Perm.No))
    (>
      (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      $Perm.No))
  
  :qid |quant-u-3506|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@668@01))
(assert (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
  $Snap.unit))
; [eval] iter_err_3 == null ==> iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 344 | iter_err_3@661@01 == Null | live]
; [else-branch: 344 | iter_err_3@661@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 344 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
; [eval] iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_3.__iter_index - 1
; [eval] |iter_3.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 344 | iter_err_3@661@01 != Null]
(assert (not (= iter_err_3@661@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err_3@661@01 $Ref.null)) (= iter_err_3@661@01 $Ref.null)))
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
  $Snap.unit))
; [eval] iter_err_3 != null ==> iter_3.__iter_index == |iter_3.__previous|
; [eval] iter_err_3 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | iter_err_3@661@01 != Null | live]
; [else-branch: 345 | iter_err_3@661@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 345 | iter_err_3@661@01 != Null]
(assert (not (= iter_err_3@661@01 $Ref.null)))
; [eval] iter_3.__iter_index == |iter_3.__previous|
; [eval] |iter_3.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 345 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err_3@661@01 $Ref.null) (not (= iter_err_3@661@01 $Ref.null))))
(assert (=>
  (not (= iter_err_3@661@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
  $Snap.unit))
; [eval] iter_err_3 == null ==> |iter_3.list_acc| > 0
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | iter_err_3@661@01 == Null | live]
; [else-branch: 346 | iter_err_3@661@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 346 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 346 | iter_err_3@661@01 != Null]
(assert (not (= iter_err_3@661@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
  $Snap.unit))
; [eval] iter_3.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
  $Snap.unit))
; [eval] iter_3.__iter_index <= |iter_3.list_acc|
; [eval] |iter_3.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| > 0 ==> iter_3.__iter_index > 0
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 347 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 347 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  0))
; [eval] iter_3.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| > 0 ==> loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 348 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 348 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (=
    loop_target_3@660@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| > 0 ==> (loop_target_3 in iter_3.list_acc)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 349 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 349 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] (loop_target_3 in iter_3.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    loop_target_3@660@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_3 == null ==> iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | iter_err_3@661@01 == Null | live]
; [else-branch: 350 | iter_err_3@661@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 350 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
; [eval] iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 350 | iter_err_3@661@01 != Null]
(assert (not (= iter_err_3@661@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| > 0 ==> issubtype(typeof(loop_target_3), set(int()))
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 351 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 351 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 351 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_3), set(int()))
; [eval] typeof(loop_target_3)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_3@660@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| > 0 ==> c_3 == loop_target_3 && _isDefined(3366755)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 352 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 352 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 352 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] c_3 == loop_target_3 && _isDefined(3366755)
; [eval] c_3 == loop_target_3
(push) ; 7
; [then-branch: 353 | c_3@662@01 != loop_target_3@660@01 | live]
; [else-branch: 353 | c_3@662@01 == loop_target_3@660@01 | live]
(push) ; 8
; [then-branch: 353 | c_3@662@01 != loop_target_3@660@01]
(assert (not (= c_3@662@01 loop_target_3@660@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 353 | c_3@662@01 == loop_target_3@660@01]
(assert (= c_3@662@01 loop_target_3@660@01))
; [eval] _isDefined(3366755)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= c_3@662@01 loop_target_3@660@01)
  (not (= c_3@662@01 loop_target_3@660@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (or
    (= c_3@662@01 loop_target_3@660@01)
    (not (= c_3@662@01 loop_target_3@660@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (and (= c_3@662@01 loop_target_3@660@01) (_isDefined $Snap.unit 3366755))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err_3 != null ==> iter_3.__previous == iter_3.list_acc
; [eval] iter_err_3 != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | iter_err_3@661@01 != Null | live]
; [else-branch: 354 | iter_err_3@661@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 354 | iter_err_3@661@01 != Null]
(assert (not (= iter_err_3@661@01 $Ref.null)))
; [eval] iter_3.__previous == iter_3.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 354 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err_3@661@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter_3.list_acc| == 0 ==> iter_err_3 != null
; [eval] |iter_3.list_acc| == 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| == 0 | dead]
; [else-branch: 355 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 355 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
(declare-const lambda55_28$l@669@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda55_28$l), set(int())) && (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] issubtype(typeof(lambda55_28$l), set(int()))
; [eval] typeof(lambda55_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 356 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@669@01), set[PyType](int[PyType]))) | live]
; [else-branch: 356 | issubtype[Bool](typeof[PyType](lambda55_28$l@669@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 356 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@669@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 356 | issubtype[Bool](typeof[PyType](lambda55_28$l@669@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] _checkDefined(a_3, 3366753)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef100|)))
(push) ; 8
(assert (not (= (_checkDefined $Snap.unit res@611@01 3366753) iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef100|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
(pop) ; 5
(declare-fun inv@670@01 ($Ref) $Ref)
(declare-fun img@671@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef100|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda55_28$l1@669@01 $Ref) (lambda55_28$l2@669@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda55_28$l1@669@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda55_28$l1@669@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda55_28$l1@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@669@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda55_28$l1@669@01 $Ref) (lambda55_28$l2@669@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l1@669@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l1@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@669@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l2@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (= lambda55_28$l1@669@01 lambda55_28$l2@669@01))
    (= lambda55_28$l1@669@01 lambda55_28$l2@669@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |quant-u-3508|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@671@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((inv@670@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (and
      (= (inv@670@01 lambda55_28$l@669@01) lambda55_28$l@669@01)
      (img@671@01 lambda55_28$l@669@01)))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |quant-u-3508|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@671@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (= (inv@670@01 r) r))
  :pattern ((inv@670@01 r))
  :qid |set_acc-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (not (= lambda55_28$l@669@01 $Ref.null)))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@634@01 892319705469091278708))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@634@01 892319705469091278708))
(push) ; 5
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0))))
(declare-const $k@672@01 $Perm)
(assert ($Perm.isReadVar $k@672@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@672@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@672@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 5
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 5
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 5
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@618@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@603@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@673@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite
        (= r res@611@01)
        (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
        $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@674@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r res@618@01) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@673@01 r)))
    $Perm.No))
(define-fun pTaken@675@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r res@603@01) $Perm.Write $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@673@01 r)) (pTaken@674@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (=
  (-
    (+ (- $Perm.Write (pTaken@639@01 res@611@01)) (/ (to_real 1) (to_real 20)))
    (pTaken@673@01 res@611@01))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@673@01 r) $Perm.No)
  
  :qid |quant-u-3511|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@673@01 r)) $Perm.No))
  
  :qid |quant-u-3512|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_3.list_acc == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@676@01 $Perm)
(assert ($Perm.isReadVar $k@676@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@618@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@603@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@676@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@611@01)
            (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@618@01) $Perm.Write $Perm.No))
        (ite (= r res@603@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3513|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@676@01))
; [eval] seqtmp_3 == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@677@01 $Perm)
(assert ($Perm.isReadVar $k@677@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@618@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@603@01 iterable_3@638@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@611@01 iterable_3@638@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@677@01 $Perm.No))
    (>
      (+
        (+
          (ite
            (= r res@611@01)
            (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
            $Perm.No)
          (ite (= r res@618@01) $Perm.Write $Perm.No))
        (ite (= r res@603@01) $Perm.Write $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3514|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@677@01))
(push) ; 5
(assert (not (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
; [eval] iter_err_3 == null ==> iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 357 | _err@651@01 == Null | live]
; [else-branch: 357 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 357 | _err@651@01 == Null]
; [eval] iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_3.__iter_index - 1
; [eval] |iter_3.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@651@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@651@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01))))))))))))))
; [eval] iter_err_3 != null ==> iter_3.__iter_index == |iter_3.__previous|
; [eval] iter_err_3 != null
(push) ; 5
; [then-branch: 358 | _err@651@01 != Null | dead]
; [else-branch: 358 | _err@651@01 == Null | live]
(push) ; 6
; [else-branch: 358 | _err@651@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err_3 == null ==> |iter_3.list_acc| > 0
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | _err@651@01 == Null | live]
; [else-branch: 359 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 359 | _err@651@01 == Null]
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@651@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@651@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)))
; [eval] iter_3.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  0))
; [eval] iter_3.__iter_index <= |iter_3.list_acc|
; [eval] |iter_3.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))))
; [eval] |iter_3.list_acc| > 0 ==> iter_3.__iter_index > 0
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 360 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 360 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] iter_3.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_3.list_acc| > 0 ==> loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 361 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 361 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (=
    _res@650@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (=
    _res@650@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))
        1)))))
; [eval] |iter_3.list_acc| > 0 ==> (loop_target_3 in iter_3.list_acc)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 362 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 362 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] (loop_target_3 in iter_3.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
    _res@650@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01))))))
    _res@650@01)))
; [eval] iter_err_3 == null ==> iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_err_3 == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@651@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | _err@651@01 == Null | live]
; [else-branch: 363 | _err@651@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 363 | _err@651@01 == Null]
; [eval] iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_3.list_acc| > 0 ==> issubtype(typeof(loop_target_3), set(int()))
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 364 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 364 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_3), set(int()))
; [eval] typeof(loop_target_3)
; [eval] set(int())
; [eval] int()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@650@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@650@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_3.list_acc| > 0 ==> c_3 == loop_target_3 && _isDefined(3366755)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0 | live]
; [else-branch: 365 | !(|First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 365 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| > 0]
; [eval] c_3 == loop_target_3 && _isDefined(3366755)
; [eval] c_3 == loop_target_3
(push) ; 7
; [then-branch: 366 | False | live]
; [else-branch: 366 | True | live]
(push) ; 8
; [then-branch: 366 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 366 | True]
; [eval] _isDefined(3366755)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (_isDefined $Snap.unit 3366755))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)
  (_isDefined $Snap.unit 3366755)))
; [eval] iter_err_3 != null ==> iter_3.__previous == iter_3.list_acc
; [eval] iter_err_3 != null
(push) ; 5
; [then-branch: 367 | _err@651@01 != Null | dead]
; [else-branch: 367 | _err@651@01 == Null | live]
(push) ; 6
; [else-branch: 367 | _err@651@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter_3.list_acc| == 0 ==> iter_err_3 != null
; [eval] |iter_3.list_acc| == 0
; [eval] |iter_3.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| == 0 | dead]
; [else-branch: 368 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 368 | |First:(Second:(Second:(Second:(Second:($t@644@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@644@01)))))))
    0)))
(declare-const lambda55_28$l@678@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda55_28$l), set(int())) && (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] issubtype(typeof(lambda55_28$l), set(int()))
; [eval] typeof(lambda55_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 6
; [then-branch: 369 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@678@01), set[PyType](int[PyType]))) | live]
; [else-branch: 369 | issubtype[Bool](typeof[PyType](lambda55_28$l@678@01), set[PyType](int[PyType])) | live]
(push) ; 7
; [then-branch: 369 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@678@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 7
(push) ; 7
; [else-branch: 369 | issubtype[Bool](typeof[PyType](lambda55_28$l@678@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] _checkDefined(a_3, 3366753)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r res@618@01)
      (=
        ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef97|))
  (forall ((r $Ref)) (!
    (=>
      (= r res@603@01)
      (=
        ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef98|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (= r res@611@01)
        (<
          $Perm.No
          (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20))))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc $t@646@01 r)))
    :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc $t@646@01 r))
    :qid |qp.fvfValDef99|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@611@01 3366753) res@618@01)
        $Perm.Write
        $Perm.No)
      (ite
        (= (_checkDefined $Snap.unit res@611@01 3366753) res@603@01)
        $Perm.Write
        $Perm.No))
    (ite
      (= (_checkDefined $Snap.unit res@611@01 3366753) res@611@01)
      (+
        (-
          $Perm.Write
          (pTaken@639@01 (_checkDefined $Snap.unit res@611@01 3366753)))
        (/ (to_real 1) (to_real 20)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@618@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@603@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@611@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@646@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@646@01 r))
  :qid |qp.fvfValDef99|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
(pop) ; 5
(declare-fun inv@679@01 ($Ref) $Ref)
(declare-fun img@680@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@618@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@627@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r res@603@01)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@608@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (= r res@611@01)
      (<
        $Perm.No
        (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20))))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc $t@646@01 r)))
  :pattern (($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc $t@646@01 r))
  :qid |qp.fvfValDef99|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda55_28$l@678@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda55_28$l1@678@01 $Ref) (lambda55_28$l2@678@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda55_28$l1@678@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda55_28$l1@678@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda55_28$l1@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@678@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda55_28$l1@678@01 $Ref) (lambda55_28$l2@678@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l1@678@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l1@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@678@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l2@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (= lambda55_28$l1@678@01 lambda55_28$l2@678@01))
    (= lambda55_28$l1@678@01 lambda55_28$l2@678@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda55_28$l@678@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@680@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((inv@679@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda55_28$l@678@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@678@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (and
      (= (inv@679@01 lambda55_28$l@678@01) lambda55_28$l@678@01)
      (img@680@01 lambda55_28$l@678@01)))
  :pattern ((Set_in lambda55_28$l@678@01 ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@680@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (= (inv@679@01 r) r))
  :pattern ((inv@679@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@681@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@680@01 r)
      (= r (inv@679@01 r)))
    ($Perm.min (ite (= r res@603@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@682@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@680@01 r)
      (= r (inv@679@01 r)))
    ($Perm.min
      (ite (= r res@618@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@681@01 r)))
    $Perm.No))
(define-fun pTaken@683@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@680@01 r)
      (= r (inv@679@01 r)))
    ($Perm.min
      (ite
        (= r res@611@01)
        (-
          (+ (- $Perm.Write (pTaken@639@01 r)) (/ (to_real 1) (to_real 20)))
          (pTaken@673@01 r))
        $Perm.No)
      (- (- $Perm.Write (pTaken@681@01 r)) (pTaken@682@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@681@01 res@603@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@680@01 r)
      (= r (inv@679@01 r)))
    (= (- $Perm.Write (pTaken@681@01 r)) $Perm.No))
  
  :qid |quant-u-3518|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@682@01 res@618@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@679@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@679@01 r) ($FVF.lookup_set_acc (as sm@648@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@680@01 r)
      (= r (inv@679@01 r)))
    (= (- (- $Perm.Write (pTaken@681@01 r)) (pTaken@682@01 r)) $Perm.No))
  
  :qid |quant-u-3520|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@634@01 892319705469091278708))
(pop) ; 5
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@634@01 892319705469091278708))
(push) ; 5
(set-option :timeout 10)
(assert (not (= res@634@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0))))
(declare-const $k@684@01 $Perm)
(assert ($Perm.isReadVar $k@684@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@634@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@684@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@684@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(set-option :timeout 0)
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 5
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 5
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 5
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 5
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 5
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 6
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 5
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(push) ; 5
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@635@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@652@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
; [eval] _loop_check_before_3 ==> _loop_termination_flag_3 || (!(iter_err_3 == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 370 | True | live]
; [else-branch: 370 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 370 | True]
; [eval] _loop_termination_flag_3 || (!(iter_err_3 == null) || perm(MustTerminate(_cthread_160)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 371 | False | live]
; [else-branch: 371 | True | live]
(push) ; 8
; [then-branch: 371 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 371 | True]
; [eval] !(iter_err_3 == null)
; [eval] iter_err_3 == null
(push) ; 9
; [then-branch: 372 | _err@651@01 != Null | live]
; [else-branch: 372 | _err@651@01 == Null | live]
(push) ; 10
; [then-branch: 372 | _err@651@01 != Null]
(assert (not (= _err@651@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 372 | _err@651@01 == Null]
; [eval] perm(MustTerminate(_cthread_160)) == none && ((forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_160)) == none
; [eval] perm(MustTerminate(_cthread_160))
(push) ; 11
; [then-branch: 373 | False | live]
; [else-branch: 373 | True | live]
(push) ; 12
; [then-branch: 373 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 373 | True]
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
(push) ; 13
; [then-branch: 374 | False | live]
; [else-branch: 374 | True | live]
(push) ; 14
; [then-branch: 374 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 374 | True]
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
(push) ; 15
; [then-branch: 375 | False | live]
; [else-branch: 375 | True | live]
(push) ; 16
; [then-branch: 375 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 375 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 376 | False | live]
; [else-branch: 376 | True | live]
(push) ; 18
; [then-branch: 376 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 376 | True]
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (= _err@651@01 $Ref.null) (not (= _err@651@01 $Ref.null))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@651@01 $Ref.null) (not (= _err@651@01 $Ref.null))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (or (= _err@651@01 $Ref.null) (not (= _err@651@01 $Ref.null))))
; [eval] !_loop_check_before_3 ==> (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false) && ((forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false) && ((forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false) && (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before_3
(push) ; 5
; [then-branch: 377 | False | dead]
; [else-branch: 377 | True | live]
(push) ; 6
; [else-branch: 377 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@671@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((inv@670@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@671@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (= (inv@670@01 r) r))
  :pattern ((inv@670@01 r))
  :qid |set_acc-fctOfInv|)))
(assert ($Perm.isReadVar $k@672@01))
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |quant-u-3508|)))
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (and
      (= (inv@670@01 lambda55_28$l@669@01) lambda55_28$l@669@01)
      (img@671@01 lambda55_28$l@669@01)))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |quant-u-3508|)))
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (not (= lambda55_28$l@669@01 $Ref.null)))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))))
(assert (not (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType)))
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($Perm.isReadVar $k@666@01))
(assert ($Perm.isReadVar $k@668@01))
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef100|)))
(assert (=
  ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01)
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  $Snap.unit))
(assert (=
  ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01)
  ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01)))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err_3@661@01 $Ref.null)) (= iter_err_3@661@01 $Ref.null)))
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err_3@661@01 $Ref.null) (not (= iter_err_3@661@01 $Ref.null))))
(assert (=>
  (not (= iter_err_3@661@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (=
    loop_target_3@660@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    loop_target_3@660@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err_3@661@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target_3@660@01) (set<PyType> (as int<PyType>  PyType)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (or
    (= c_3@662@01 loop_target_3@660@01)
    (not (= c_3@662@01 loop_target_3@660@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (and (= c_3@662@01 loop_target_3@660@01) (_isDefined $Snap.unit 3366755))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err_3@661@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))))))))))))))))))))
(assert (forall ((lambda55_28$l@669@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda55_28$l@669@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda55_28$l@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-aux|)))
(assert (forall ((lambda55_28$l1@669@01 $Ref) (lambda55_28$l2@669@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda55_28$l1@669@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda55_28$l1@669@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda55_28$l1@669@01 ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@669@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753)))
  
  :qid |set_acc-rcvrInj|)))
(assert (= $t@664@01 ($Snap.combine ($Snap.first $t@664@01) ($Snap.second $t@664@01))))
(assert (= ($Snap.first $t@664@01) $Snap.unit))
(assert (=
  ($Snap.second $t@664@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@664@01))
    ($Snap.second ($Snap.second $t@664@01)))))
(assert (= ($Snap.first ($Snap.second $t@664@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@664@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@664@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@664@01))) $Snap.unit))
(assert (<= _residue_160@577@01 _residue_165@599@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@664@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@664@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err_3 == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err_3 == null)
; [eval] iter_err_3 == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err_3 == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err_3@661@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err_3@661@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | iter_err_3@661@01 == Null | live]
; [else-branch: 378 | iter_err_3@661@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 378 | iter_err_3@661@01 == Null]
(assert (= iter_err_3@661@01 $Ref.null))
; [exec]
; _loop_measures_3 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _cwl_160 := set_add(_cthread_160, _method_measures_160, _residue_165, _checkDefined(c_3,
;   3366755), __prim__int___box__(7))
; [eval] _checkDefined(c_3, 3366755)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_3@662@01 3366755))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit c_3@662@01 3366755))
; [eval] __prim__int___box__(7)
(push) ; 7
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 7
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_22 != null
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) 0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) (set<PyType> (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) 0))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@685@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    ($Perm.min
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@686@01 ((r $Ref)) $Perm
  (ite
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    ($Perm.min
      (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (- $Perm.Write (pTaken@685@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        $Perm.Write
        $Perm.No)
      (pTaken@685@01 r))
    $Perm.No)
  
  :qid |quant-u-3522|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@685@01 r) $Perm.No)
  
  :qid |quant-u-3523|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    (= (- $Perm.Write (pTaken@685@01 r)) $Perm.No))
  
  :qid |quant-u-3524|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(set-option :timeout 0)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (set_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) 0)))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_22@687@01 $Perm)
(declare-const $t@688@01 $Snap)
(assert (= $t@688@01 ($Snap.combine ($Snap.first $t@688@01) ($Snap.second $t@688@01))))
(assert (= ($Snap.first $t@688@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@688@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@688@01))
    ($Snap.second ($Snap.second $t@688@01)))))
(assert (= ($Snap.first ($Snap.second $t@688@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@688@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@688@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@688@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@688@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_165@599@01 _current_wait_level_22@687@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@688@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@688@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@688@01)))))))
(declare-const sm@689@01 $FVF<set_acc>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755))
  ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@688@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (= (_checkDefined $Snap.unit c_3@662@01 3366755) iterable_3@638@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit c_3@662@01 3366755)
      (_checkDefined $Snap.unit c_3@662@01 3366755))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (_checkDefined $Snap.unit c_3@662@01 3366755)
      (_checkDefined $Snap.unit c_3@662@01 3366755))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (not (= (_checkDefined $Snap.unit c_3@662@01 3366755) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@688@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
(declare-const sm@690@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@671@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
      (< $Perm.No (- $Perm.Write (pTaken@685@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef103|)))
(declare-const pm@691@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@691@01  $FPM) r)
    (+
      (+
        (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
        (ite
          (and
            (img@671@01 r)
            (and
              (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
              (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
          (- $Perm.Write (pTaken@685@01 r))
          $Perm.No))
      (ite
        (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@691@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@691@01  $FPM) (_checkDefined $Snap.unit c_3@662@01 3366755)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
(declare-const sm@692@01 $FVF<set_acc>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@692@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@692@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@671@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (=
      ($FVF.lookup_set_acc (as sm@692@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@692@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef106|)))
(declare-const pm@693@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_set_acc (as pm@693@01  $FPM) r)
    (+
      (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_set_acc (as pm@693@01  $FPM) r))
  :qid |qp.resPrmSumDef107|)))
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_set_acc (as pm@693@01  $FPM) (_checkDefined $Snap.unit c_3@662@01 3366755)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] Set(item)
(assert (Set_equal ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)) (Set_union ($FVF.lookup_set_acc (as sm@692@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)) (Set_singleton (__prim__int___box__ $Snap.unit 7)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_160 := list_append(_cthread_160, _method_measures_160, _residue_165, _checkDefined(to_fill_0,
;   892319705469091278708), _checkDefined(c_3, 3366755))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _checkDefined(c_3, 3366755)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit c_3@662@01 3366755)) (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@634@01 892319705469091278708)) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_9@694@01 $Perm)
(declare-const $t@695@01 $Snap)
(assert (= $t@695@01 ($Snap.combine ($Snap.first $t@695@01) ($Snap.second $t@695@01))))
(assert (= ($Snap.first $t@695@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@695@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@695@01))
    ($Snap.second ($Snap.second $t@695@01)))))
(assert (= ($Snap.first ($Snap.second $t@695@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@695@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@695@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@695@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@695@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_165@599@01 _current_wait_level_9@694@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@695@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@695@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@695@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@695@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton (_checkDefined $Snap.unit c_3@662@01 3366755))) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@695@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))))
    (Seq_singleton (_checkDefined $Snap.unit c_3@662@01 3366755)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_160 := list_append(_cthread_160, _method_measures_160, _residue_165, _checkDefined(to_fill_0,
;   892319705469091278708), _checkDefined(c_3, 3366755))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _checkDefined(c_3, 3366755)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
; Joined path conditions
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_9@696@01 $Perm)
(declare-const $t@697@01 $Snap)
(assert (= $t@697@01 ($Snap.combine ($Snap.first $t@697@01) ($Snap.second $t@697@01))))
(assert (= ($Snap.first $t@697@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@697@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@697@01))
    ($Snap.second ($Snap.second $t@697@01)))))
(assert (= ($Snap.first ($Snap.second $t@697@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@697@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@697@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@697@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@697@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_165@599@01 _current_wait_level_9@696@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@697@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@697@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@695@01)))))
    (Seq_singleton (_checkDefined $Snap.unit c_3@662@01 3366755)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end_3
; [exec]
; _cwl_160, loop_target_3, iter_err_3 := Iterator___next__(_cthread_160, _method_measures_160,
;   _residue_160, iter_3)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_149@698@01 $Perm)
(declare-const _res@699@01 $Ref)
(declare-const _err@700@01 $Ref)
(declare-const $t@701@01 $Snap)
(assert (= $t@701@01 ($Snap.combine ($Snap.first $t@701@01) ($Snap.second $t@701@01))))
(assert (= ($Snap.first $t@701@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@701@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@701@01))
    ($Snap.second ($Snap.second $t@701@01)))))
(assert (= ($Snap.first ($Snap.second $t@701@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@701@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@701@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@701@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_160@577@01 _current_wait_level_149@698@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@701@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@701@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))
  (not (= _err@700@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 379 | _err@700@01 == Null | live]
; [else-branch: 379 | _err@700@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 379 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 8
(push) ; 8
; [else-branch: 379 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@700@01 $Ref.null)) (= _err@700@01 $Ref.null)))
(assert (=>
  (= _err@700@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 380 | _err@700@01 == Null | live]
; [else-branch: 380 | _err@700@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 380 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 8
(push) ; 8
; [else-branch: 380 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@700@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 381 | _err@700@01 == Null | live]
; [else-branch: 381 | _err@700@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 381 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 8
(push) ; 8
; [else-branch: 381 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@700@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 382 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 382 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 382 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 383 | _err@700@01 != Null | live]
; [else-branch: 383 | _err@700@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 383 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 8
(push) ; 8
; [else-branch: 383 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@700@01 $Ref.null) (not (= _err@700@01 $Ref.null))))
(assert (=>
  (not (= _err@700@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 384 | _err@700@01 != Null | live]
; [else-branch: 384 | _err@700@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 384 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 8
(push) ; 8
; [else-branch: 384 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@700@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 385 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 385 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 385 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 386 | _res@699@01 != First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 1] | live]
; [else-branch: 386 | _res@699@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 1] | live]
(push) ; 10
; [then-branch: 386 | _res@699@01 != First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 1]]
(assert (not
  (=
    _res@699@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 386 | _res@699@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 1]]
(assert (=
  _res@699@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@699@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)))
  (not
    (=
      _res@699@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (or
    (=
      _res@699@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)))
    (not
      (=
        _res@699@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (and
    (=
      _res@699@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      _res@699@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 387 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 387 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 387 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@699@01) (Iterator_arg<PyType> (typeof<PyType> _res@643@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@702@01 $Ref)
(push) ; 7
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 8
; [then-branch: 388 | r@702@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@664@01))))))))) | live]
; [else-branch: 388 | !(r@702@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@664@01)))))))))) | live]
(push) ; 9
; [then-branch: 388 | r@702@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@664@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
  r@702@01))
(pop) ; 9
(push) ; 9
; [else-branch: 388 | !(r@702@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@664@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    r@702@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 10
; [then-branch: 389 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1) | live]
; [else-branch: 389 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1 | live]
(push) ; 11
; [then-branch: 389 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)))
(pop) ; 11
(push) ; 11
; [else-branch: 389 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 390 | r@702@01 != First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] | live]
; [else-branch: 390 | r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] | live]
(push) ; 13
; [then-branch: 390 | r@702@01 != First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2]]
(assert (not
  (=
    r@702@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        2)))))
(pop) ; 13
(push) ; 13
; [else-branch: 390 | r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2]]
(assert (=
  r@702@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      2))))
; [eval] _err == null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@702@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        2)))
  (not
    (=
      r@702@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          2))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (or
      (=
        r@702@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            2)))
      (not
        (=
          r@702@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1))))
(push) ; 10
; [then-branch: 391 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1 && r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] && _err@700@01 == Null | live]
; [else-branch: 391 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1 && r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] && _err@700@01 == Null) | live]
(push) ; 11
; [then-branch: 391 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1 && r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] && _err@700@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (and
    (=
      r@702@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          2)))
    (= _err@700@01 $Ref.null))))
(pop) ; 11
(push) ; 11
; [else-branch: 391 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 1 && r@702@01 == First:(Second:(Second:(Second:(Second:($t@664@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) - 2] && _err@700@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (and
      (=
        r@702@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            2)))
      (= _err@700@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 12
; [then-branch: 392 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 0) | live]
; [else-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 0 | live]
(push) ; 13
; [then-branch: 392 | !(First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    0)))
(pop) ; 13
(push) ; 13
; [else-branch: 392 | First:(Second:(Second:(Second:(Second:(Second:($t@701@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  0))
; [eval] _err != null
(push) ; 14
; [then-branch: 393 | _err@700@01 == Null | live]
; [else-branch: 393 | _err@700@01 != Null | live]
(push) ; 15
; [then-branch: 393 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 393 | _err@700@01 != Null]
(assert (not (= _err@700@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (and
      (=
        r@702@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            2)))
      (= _err@700@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (=
      r@702@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          2)))
    (= _err@700@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)
      (and
        (=
          r@702@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              2)))
        (= _err@700@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)
        (and
          (=
            r@702@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                2)))
          (= _err@700@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)
      (and
        (=
          r@702@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              2)))
        (= _err@700@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (and
      (=
        r@702@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            2)))
      (= _err@700@01 $Ref.null)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
      r@702@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
        r@702@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)
        (or
          (=
            r@702@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                2)))
          (not
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)
        (and
          (=
            r@702@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                2)))
          (= _err@700@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)
        (=
          r@702@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              2)))
        (= _err@700@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (and
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))
            (= _err@700@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (and
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (= _err@700@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (and
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))
            (= _err@700@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
          1)
        (and
          (=
            r@702@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                2)))
          (= _err@700@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
      r@702@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
    r@702@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@702@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
          r@702@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
            r@702@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (or
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (not
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (and
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (= _err@700@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))
            (= _err@700@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                1)
              (and
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))
                (= _err@700@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  1)
                (and
                  (=
                    r@702@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                        2)))
                  (= _err@700@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                1)
              (and
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))
                (= _err@700@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (and
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (= _err@700@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
          r@702@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
        r@702@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    r@702@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    r@702@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@702@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
          r@702@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
            r@702@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (or
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (not
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (and
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (= _err@700@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))
            (= _err@700@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                1)
              (and
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))
                (= _err@700@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  1)
                (and
                  (=
                    r@702@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                        2)))
                  (= _err@700@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                1)
              (and
                (=
                  r@702@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                      2)))
                (= _err@700@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
              1)
            (and
              (=
                r@702@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                    2)))
              (= _err@700@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
          r@702@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
        r@702@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    r@702@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@702@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
      r@702@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
        r@702@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            1)
          (and
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  2)))
            (= _err@700@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
            0)
          (and
            (not (= _err@700@01 $Ref.null))
            (=
              r@702@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    r@702@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))
    r@702@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err_3 == null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@700@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 394 | _err@700@01 == Null | live]
; [else-branch: 394 | _err@700@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 394 | _err@700@01 == Null]
(assert (= _err@700@01 $Ref.null))
; [exec]
; c_3 := loop_target_3
; [exec]
; inhale _isDefined(3366755)
(declare-const $t@703@01 $Snap)
(assert (= $t@703@01 $Snap.unit))
; [eval] _isDefined(3366755)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before_3 := false
; [exec]
; assert _loop_termination_flag_3 ==> !(iter_err_3 == null)
; [eval] _loop_termination_flag_3 ==> !(iter_err_3 == null)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 395 | False | dead]
; [else-branch: 395 | True | live]
(push) ; 9
; [else-branch: 395 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; Precomputing data for removing quantified permissions
(define-fun pTaken@704@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
      (/ (to_real 1) (to_real 20)))
    $Perm.No))
(define-fun pTaken@705@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        (- $Perm.Write (pTaken@685@01 r))
        $Perm.No)
      (- (/ (to_real 1) (to_real 20)) (pTaken@704@01 r)))
    $Perm.No))
(define-fun pTaken@706@01 ((r $Ref)) $Perm
  (ite
    (= r iterable_3@638@01)
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
        $Perm.Write
        $Perm.No)
      (- (- (/ (to_real 1) (to_real 20)) (pTaken@704@01 r)) (pTaken@705@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (= (- (/ (to_real 1) (to_real 20)) (pTaken@704@01 iterable_3@638@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (= (- (/ (to_real 1) (to_real 20)) (pTaken@704@01 r)) $Perm.No))
  
  :qid |quant-u-3527|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] iter_3.list_acc == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@707@01 $Perm)
(assert ($Perm.isReadVar $k@707@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@707@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@671@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
            (- $Perm.Write (pTaken@685@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3528|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(assert (=
  ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
  ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01)))
(assert (=>
  (ite
    (and
      (img@671@01 iterable_3@638@01)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@670@01 iterable_3@638@01)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@670@01 iterable_3@638@01) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (< $Perm.No (- $Perm.Write (pTaken@685@01 iterable_3@638@01)))
    false)
  (=
    ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) iterable_3@638@01))))
(assert (=>
  (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755))
  (=
    ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) iterable_3@638@01))))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@707@01))
(assert (and
  (=
    ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
    ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01))
  (=>
    (ite
      (and
        (img@671@01 iterable_3@638@01)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@670@01 iterable_3@638@01)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@670@01 iterable_3@638@01) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
      (< $Perm.No (- $Perm.Write (pTaken@685@01 iterable_3@638@01)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) iterable_3@638@01)))
  (=>
    (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755))
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01)
      ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) iterable_3@638@01)))
  (set___sil_seq__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
(push) ; 8
(assert (not (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
; [eval] seqtmp_3 == set___sil_seq__(iterable_3)
; [eval] set___sil_seq__(iterable_3)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@708@01 $Perm)
(assert ($Perm.isReadVar $k@708@01))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (= r iterable_3@638@01) (> $k@708@01 $Perm.No))
    (>
      (+
        (+
          (ite (= r iterable_3@638@01) (/ (to_real 1) (to_real 20)) $Perm.No)
          (ite
            (and
              (img@671@01 r)
              (and
                (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
                (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
            (- $Perm.Write (pTaken@685@01 r))
            $Perm.No))
        (ite
          (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-3529|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for snapshot map domain (instantiated)
; Definitional axioms for snapshot map values (instantiated)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@708@01))
(push) ; 8
(assert (not (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp_3@656@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Set<$Ref>To$Snap ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) iterable_3@638@01))) iterable_3@638@01)))
; [eval] iter_err_3 == null ==> iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_err_3 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 396 | _err@700@01 == Null | live]
; [else-branch: 396 | _err@700@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 396 | _err@700@01 == Null]
; [eval] iter_3.__iter_index - 1 == |iter_3.__previous|
; [eval] iter_3.__iter_index - 1
; [eval] |iter_3.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@700@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@700@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01))))))))))))))
; [eval] iter_err_3 != null ==> iter_3.__iter_index == |iter_3.__previous|
; [eval] iter_err_3 != null
(push) ; 8
; [then-branch: 397 | _err@700@01 != Null | dead]
; [else-branch: 397 | _err@700@01 == Null | live]
(push) ; 9
; [else-branch: 397 | _err@700@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err_3 == null ==> |iter_3.list_acc| > 0
; [eval] iter_err_3 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 398 | _err@700@01 == Null | live]
; [else-branch: 398 | _err@700@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 398 | _err@700@01 == Null]
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@700@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@700@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)))
; [eval] iter_3.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  0))
; [eval] iter_3.__iter_index <= |iter_3.list_acc|
; [eval] |iter_3.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))
; [eval] |iter_3.list_acc| > 0 ==> iter_3.__iter_index > 0
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 399 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 399 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 399 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] iter_3.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_3.list_acc| > 0 ==> loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 400 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 400 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 400 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] loop_target_3 == iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (=
    _res@699@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (=
    _res@699@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))
        1)))))
; [eval] |iter_3.list_acc| > 0 ==> (loop_target_3 in iter_3.list_acc)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 401 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 401 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 401 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] (loop_target_3 in iter_3.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    _res@699@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    _res@699@01)))
; [eval] iter_err_3 == null ==> iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_err_3 == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@700@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 402 | _err@700@01 == Null | live]
; [else-branch: 402 | _err@700@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 402 | _err@700@01 == Null]
; [eval] iter_3.__previous == iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.list_acc[..iter_3.__iter_index - 1]
; [eval] iter_3.__iter_index - 1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_3.list_acc| > 0 ==> issubtype(typeof(loop_target_3), set(int()))
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 403 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 403 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 403 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] issubtype(typeof(loop_target_3), set(int()))
; [eval] typeof(loop_target_3)
; [eval] set(int())
; [eval] int()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@699@01) (set<PyType> (as int<PyType>  PyType))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@699@01) (set<PyType> (as int<PyType>  PyType)))))
; [eval] |iter_3.list_acc| > 0 ==> c_3 == loop_target_3 && _isDefined(3366755)
; [eval] |iter_3.list_acc| > 0
; [eval] |iter_3.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 404 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0 | live]
; [else-branch: 404 | !(|First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 404 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| > 0]
; [eval] c_3 == loop_target_3 && _isDefined(3366755)
; [eval] c_3 == loop_target_3
(push) ; 10
; [then-branch: 405 | False | live]
; [else-branch: 405 | True | live]
(push) ; 11
; [then-branch: 405 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 405 | True]
; [eval] _isDefined(3366755)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (_isDefined $Snap.unit 3366755))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))
    0)
  (_isDefined $Snap.unit 3366755)))
; [eval] iter_err_3 != null ==> iter_3.__previous == iter_3.list_acc
; [eval] iter_err_3 != null
(push) ; 8
; [then-branch: 406 | _err@700@01 != Null | dead]
; [else-branch: 406 | _err@700@01 == Null | live]
(push) ; 9
; [else-branch: 406 | _err@700@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter_3.list_acc| == 0 ==> iter_err_3 != null
; [eval] |iter_3.list_acc| == 0
; [eval] |iter_3.list_acc|
(push) ; 8
; [then-branch: 407 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| == 0 | dead]
; [else-branch: 407 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 407 | |First:(Second:(Second:(Second:(Second:($t@664@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda55_28$l@709@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda55_28$l), set(int())) && (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] issubtype(typeof(lambda55_28$l), set(int()))
; [eval] typeof(lambda55_28$l)
; [eval] set(int())
; [eval] int()
(push) ; 9
; [then-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@709@01), set[PyType](int[PyType]))) | live]
; [else-branch: 408 | issubtype[Bool](typeof[PyType](lambda55_28$l@709@01), set[PyType](int[PyType])) | live]
(push) ; 10
; [then-branch: 408 | !(issubtype[Bool](typeof[PyType](lambda55_28$l@709@01), set[PyType](int[PyType])))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 10
(push) ; 10
; [else-branch: 408 | issubtype[Bool](typeof[PyType](lambda55_28$l@709@01), set[PyType](int[PyType]))]
(assert (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType))))
; [eval] (lambda55_28$l in _checkDefined(a_3, 3366753).set_acc)
; [eval] _checkDefined(a_3, 3366753)
(push) ; 11
; [eval] _isDefined(id)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
; Joined path conditions
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r iterable_3@638@01)
      (=
        ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        (< $Perm.No (- $Perm.Write (pTaken@685@01 r)))
        false)
      (=
        ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r)))
    :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
      (=
        ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
        ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r)))
    :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
    :pattern (($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r))
    :qid |qp.fvfValDef103|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (_checkDefined $Snap.unit res@611@01 3366753) iterable_3@638@01)
        (/ (to_real 1) (to_real 20))
        $Perm.No)
      (ite
        (and
          (img@671@01 (_checkDefined $Snap.unit res@611@01 3366753))
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 (_checkDefined $Snap.unit res@611@01 3366753))) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 (_checkDefined $Snap.unit res@611@01 3366753)) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        (-
          $Perm.Write
          (pTaken@685@01 (_checkDefined $Snap.unit res@611@01 3366753)))
        $Perm.No))
    (ite
      (=
        (_checkDefined $Snap.unit res@611@01 3366753)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@671@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
      (< $Perm.No (- $Perm.Write (pTaken@685@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef103|)))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
  (not
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType))))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
  (Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
(pop) ; 8
(declare-fun inv@710@01 ($Ref) $Ref)
(declare-fun img@711@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (= r iterable_3@638@01)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@671@01 r)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
          (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
      (< $Perm.No (- $Perm.Write (pTaken@685@01 r)))
      false)
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc ($SortWrappers.$SnapTo$FVF<set_acc> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01)))))))))))))))))))))))))) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
    (=
      ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r)
      ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r)))
  :pattern (($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) r))
  :pattern (($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) r))
  :qid |qp.fvfValDef103|)))
; Nested auxiliary terms: non-globals
(assert (forall ((lambda55_28$l@709@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
      (not
        (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType))))))
  :pattern ((Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-aux|)))
; Check receiver injectivity
(assert (forall ((lambda55_28$l1@709@01 $Ref) (lambda55_28$l2@709@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda55_28$l1@709@01) (set<PyType> (as int<PyType>  PyType)))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda55_28$l1@709@01) (set<PyType> (as int<PyType>  PyType)))
          (Set_in lambda55_28$l1@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@709@01) (set<PyType> (as int<PyType>  PyType))))
      (_checkDefined%precondition $Snap.unit res@611@01 3366753)))
  
  :qid |set_acc-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda55_28$l1@709@01 $Ref) (lambda55_28$l2@709@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l1@709@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l1@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda55_28$l2@709@01) (set<PyType> (as int<PyType>  PyType)))
        (Set_in lambda55_28$l2@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (= lambda55_28$l1@709@01 lambda55_28$l2@709@01))
    (= lambda55_28$l1@709@01 lambda55_28$l2@709@01))
  
  :qid |set_acc-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda55_28$l@709@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@711@01 r)
      (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType))))
    (_checkDefined%precondition $Snap.unit res@611@01 3366753))
  :pattern ((inv@710@01 r))
  :qid |set_acc-fctOfInv|)))
(assert (forall ((lambda55_28$l@709@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda55_28$l@709@01) (set<PyType> (as int<PyType>  PyType)))
      (Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
    (and
      (= (inv@710@01 lambda55_28$l@709@01) lambda55_28$l@709@01)
      (img@711@01 lambda55_28$l@709@01)))
  :pattern ((Set_in lambda55_28$l@709@01 ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
  :qid |set_acc-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@711@01 r)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@710@01 r) ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
    (= (inv@710@01 r) r))
  :pattern ((inv@710@01 r))
  :qid |set_acc-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@712@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@710@01 r) ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@711@01 r)
      (= r (inv@710@01 r)))
    ($Perm.min
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        (- $Perm.Write (pTaken@685@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@713@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@710@01 r) ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@711@01 r)
      (= r (inv@710@01 r)))
    ($Perm.min
      (ite
        (= r (_checkDefined $Snap.unit c_3@662@01 3366755))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@712@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@671@01 r)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@670@01 r)) (set<PyType> (as int<PyType>  PyType)))
            (Set_in (inv@670@01 r) ($FVF.lookup_set_acc (as sm@667@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753)))))
        (- $Perm.Write (pTaken@685@01 r))
        $Perm.No)
      (pTaken@712@01 r))
    $Perm.No)
  
  :qid |quant-u-3532|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@710@01 r) ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@711@01 r)
      (= r (inv@710@01 r)))
    (= (- $Perm.Write (pTaken@712@01 r)) $Perm.No))
  
  :qid |quant-u-3533|))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit c_3@662@01 3366755)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)
    (pTaken@713@01 (_checkDefined $Snap.unit c_3@662@01 3366755)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@710@01 r)) (set<PyType> (as int<PyType>  PyType)))
        (Set_in (inv@710@01 r) ($FVF.lookup_set_acc (as sm@690@01  $FVF<set_acc>) (_checkDefined $Snap.unit res@611@01 3366753))))
      (img@711@01 r)
      (= r (inv@710@01 r)))
    (= (- (- $Perm.Write (pTaken@712@01 r)) (pTaken@713@01 r)) $Perm.No))
  
  :qid |quant-u-3535|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@714@01 $Perm)
(assert ($Perm.isReadVar $k@714@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@714@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@714@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))
(set-option :timeout 0)
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0))))
(assert (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))) 0)))
  (PSeq___len__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(pop) ; 8
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType)))
(assert (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708)))) (as int<PyType>  PyType))
  (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType)))))) (as int<PyType>  PyType))
  (int___eq__%precondition ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (/ (to_real 1) (to_real 20))
    (ite
      (=
        (_checkDefined $Snap.unit c_3@662@01 3366755)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (=
        (_checkDefined $Snap.unit c_3@662@01 3366755)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)
    (/ (to_real 1) (to_real 20))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01) ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)) ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(assert (and
  (and
    (not
      (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) _res@643@01))
    (not
      (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
  (and
    (not (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755)))
    (not (= (_checkDefined $Snap.unit c_3@662@01 3366755) iterable_3@638@01)))))
(assert (and
  (not
    (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) _res@643@01))
  (not
    (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708)))))
; Definitional axioms for snapshot map values
(assert (<= ($FVF.perm_set_acc (as pm@691@01  $FPM) iterable_3@638@01) $Perm.Write))
; Assume upper permission bound for field set_acc
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_set_acc (as pm@691@01  $FPM) r) $Perm.Write)
  :pattern ((inv@670@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_set_acc (as pm@691@01  $FPM) (_checkDefined $Snap.unit c_3@662@01 3366755))
  $Perm.Write))
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@715@01 $Perm)
(assert ($Perm.isReadVar $k@715@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@715@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@715@01))
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@716@01 $Perm)
(assert ($Perm.isReadVar $k@716@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@716@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@716@01))
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (/ (to_real 1) (to_real 20))
    (ite
      (=
        (_checkDefined $Snap.unit c_3@662@01 3366755)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (=
        (_checkDefined $Snap.unit c_3@662@01 3366755)
        (_checkDefined $Snap.unit c_3@662@01 3366755))
      $Perm.Write
      $Perm.No)
    (/ (to_real 1) (to_real 20))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@664@01))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01) ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (=
    (_checkDefined $Snap.unit c_3@662@01 3366755)
    (_checkDefined $Snap.unit c_3@662@01 3366755))
  (not
    (Set_equal ($FVF.lookup_set_acc (as sm@689@01  $FVF<set_acc>) (_checkDefined $Snap.unit c_3@662@01 3366755)) ($FVF.lookup_set_acc (as sm@665@01  $FVF<set_acc>) iterable_3@638@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(assert (and
  (and
    (not
      (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) _res@643@01))
    (not
      (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708))))
  (and
    (not (= iterable_3@638@01 (_checkDefined $Snap.unit c_3@662@01 3366755)))
    (not (= (_checkDefined $Snap.unit c_3@662@01 3366755) iterable_3@638@01)))))
(assert (and
  (not
    (= (_checkDefined $Snap.unit res@634@01 892319705469091278708) _res@643@01))
  (not
    (= _res@643@01 (_checkDefined $Snap.unit res@634@01 892319705469091278708)))))
; Definitional axioms for snapshot map values
; Assume upper permission bound for field set_acc
; [eval] int___eq__(__prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708))), __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))))
; [eval] __prim__int___box__(list___len__(_checkDefined(to_fill_0, 892319705469091278708)))
; [eval] list___len__(_checkDefined(to_fill_0, 892319705469091278708))
; [eval] _checkDefined(to_fill_0, 892319705469091278708)
(set-option :timeout 0)
(push) ; 8
; [eval] _isDefined(id)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@717@01 $Perm)
(assert ($Perm.isReadVar $k@717@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@717@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@717@01))
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] __prim__int___box__(PSeq___len__(PSeq___create__(iter_3.__previous, set(int()))))
; [eval] PSeq___len__(PSeq___create__(iter_3.__previous, set(int())))
; [eval] PSeq___create__(iter_3.__previous, set(int()))
; [eval] set(int())
; [eval] int()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
; Joined path conditions
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [eval] issubtype(typeof(self), int())
; [eval] typeof(self)
; [eval] int()
; [eval] issubtype(typeof(other), int())
; [eval] typeof(other)
; [eval] int()
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (int___eq__ ($Snap.combine $Snap.unit $Snap.unit) (__prim__int___box__ $Snap.unit (list___len__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@697@01))))) (_checkDefined $Snap.unit res@634@01 892319705469091278708))) (__prim__int___box__ $Snap.unit (PSeq___len__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@701@01)))))))))) (set<PyType> (as int<PyType>  PyType))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_161@718@01 $Ref)
(declare-const _caller_measures_161@719@01 Seq<Measure$>)
(declare-const _residue_166@720@01 $Perm)
(declare-const _current_wait_level_161@721@01 $Perm)
(declare-const _cthread_161@722@01 $Ref)
(declare-const _caller_measures_161@723@01 Seq<Measure$>)
(declare-const _residue_166@724@01 $Perm)
(declare-const _current_wait_level_161@725@01 $Perm)
(push) ; 1
(declare-const $t@726@01 $Snap)
(assert (= $t@726@01 ($Snap.combine ($Snap.first $t@726@01) ($Snap.second $t@726@01))))
(assert (= ($Snap.first $t@726@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@722@01 $Ref.null)))
(assert (=
  ($Snap.second $t@726@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@726@01))
    ($Snap.second ($Snap.second $t@726@01)))))
(assert (= ($Snap.first ($Snap.second $t@726@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@722@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@726@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 ($Snap.combine ($Snap.first $t@727@01) ($Snap.second $t@727@01))))
(assert (= ($Snap.first $t@727@01) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: Level(_r_24) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@727@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@727@01))
    ($Snap.second ($Snap.second $t@727@01)))))
(assert (= ($Snap.first ($Snap.second $t@727@01)) $Snap.unit))
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: Level(_r_24) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@727@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@727@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@727@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@727@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_161
(assert (<= _residue_166@724@01 _current_wait_level_161@725@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@727@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@728@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@729@01 Set<_Name>)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@730@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@731@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@732@01 Set<_Name>)
(assert (=
  module_names_0@732@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@733@01 $Snap)
(assert (= $t@733@01 ($Snap.combine ($Snap.first $t@733@01) ($Snap.second $t@733@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@733@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@733@01))
    ($Snap.second ($Snap.second $t@733@01)))))
(assert (= ($Snap.first ($Snap.second $t@733@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@733@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@733@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@734@01 Set<_Name>)
(assert (=
  module_names_0@734@01
  (Set_union module_names_0@732@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@735@01 $Snap)
(assert (= $t@735@01 ($Snap.combine ($Snap.first $t@735@01) ($Snap.second $t@735@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@735@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@735@01))
    ($Snap.second ($Snap.second $t@735@01)))))
(assert (= ($Snap.first ($Snap.second $t@735@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@735@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@735@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@735@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@735@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@735@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@735@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@735@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@735@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@735@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953720652)))
; [eval] (module_names_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0@736@01 Set<_Name>)
(assert (=
  module_names_0@736@01
  (Set_union module_names_0@734@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7628115)))
; [eval] (module_names_0 union Set(_single(7628115)))
; [eval] Set(_single(7628115))
; [eval] _single(7628115)
(declare-const module_names_0@737@01 Set<_Name>)
(assert (=
  module_names_0@737@01
  (Set_union module_names_0@736@01 (Set_singleton (_single<_Name> 7628115)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(8101816765911426419)))
; [eval] (module_names_0 union Set(_single(8101816765911426419)))
; [eval] Set(_single(8101816765911426419))
; [eval] _single(8101816765911426419)
(declare-const module_names_0@738@01 Set<_Name>)
(assert (=
  module_names_0@738@01
  (Set_union module_names_0@737@01 (Set_singleton (_single<_Name> 8101816765911426419)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(31397524273502596602298393971)))
; [eval] (module_names_0 union Set(_single(31397524273502596602298393971)))
; [eval] Set(_single(31397524273502596602298393971))
; [eval] _single(31397524273502596602298393971)
(declare-const module_names_0@739@01 Set<_Name>)
(assert (=
  module_names_0@739@01
  (Set_union module_names_0@738@01 (Set_singleton (_single<_Name> 31397524273502596602298393971)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(45430407398567802084752005550916103957860198256420907146787710323)))
; [eval] (module_names_0 union Set(_single(45430407398567802084752005550916103957860198256420907146787710323)))
; [eval] Set(_single(45430407398567802084752005550916103957860198256420907146787710323))
; [eval] _single(45430407398567802084752005550916103957860198256420907146787710323)
(declare-const module_names_0@740@01 Set<_Name>)
(assert (=
  module_names_0@740@01
  (Set_union module_names_0@739@01 (Set_singleton (_single<_Name> 45430407398567802084752005550916103957860198256420907146787710323)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(35732746578468671682998723955)))
; [eval] (module_names_0 union Set(_single(35732746578468671682998723955)))
; [eval] Set(_single(35732746578468671682998723955))
; [eval] _single(35732746578468671682998723955)
(declare-const module_names_0@741@01 Set<_Name>)
(assert (=
  module_names_0@741@01
  (Set_union module_names_0@740@01 (Set_singleton (_single<_Name> 35732746578468671682998723955)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(1021682888368017101940432238306675)))
; [eval] (module_names_0 union Set(_single(1021682888368017101940432238306675)))
; [eval] Set(_single(1021682888368017101940432238306675))
; [eval] _single(1021682888368017101940432238306675)
(declare-const module_names_0@742@01 Set<_Name>)
(assert (=
  module_names_0@742@01
  (Set_union module_names_0@741@01 (Set_singleton (_single<_Name> 1021682888368017101940432238306675)))))
; [exec]
; label __end
; [eval] (forperm _r_25: Ref [MustInvokeBounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [MustInvokeUnbounded(_r_25)] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: false)
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- Iterator___next__ ----------
(declare-const _cthread_149@743@01 $Ref)
(declare-const _caller_measures_149@744@01 Seq<Measure$>)
(declare-const _residue_149@745@01 $Perm)
(declare-const self@746@01 $Ref)
(declare-const _current_wait_level_149@747@01 $Perm)
(declare-const _res@748@01 $Ref)
(declare-const _err@749@01 $Ref)
(declare-const _cthread_149@750@01 $Ref)
(declare-const _caller_measures_149@751@01 Seq<Measure$>)
(declare-const _residue_149@752@01 $Perm)
(declare-const self@753@01 $Ref)
(declare-const _current_wait_level_149@754@01 $Perm)
(declare-const _res@755@01 $Ref)
(declare-const _err@756@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@757@01 $Snap)
(assert (= $t@757@01 ($Snap.combine ($Snap.first $t@757@01) ($Snap.second $t@757@01))))
(assert (= ($Snap.first $t@757@01) $Snap.unit))
; [eval] _cthread_149 != null
(assert (not (= _cthread_149@750@01 $Ref.null)))
(assert (=
  ($Snap.second $t@757@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@757@01))
    ($Snap.second ($Snap.second $t@757@01)))))
(assert (= ($Snap.first ($Snap.second $t@757@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@751@01 _cthread_149@750@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@751@01 _cthread_149@750@01 1))
(assert (Measure$check $Snap.unit _caller_measures_149@751@01 _cthread_149@750@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@757@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@757@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@757@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_149@750@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@757@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@757@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
(assert (not (= self@753@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@758@01 $Snap)
(assert (= $t@758@01 ($Snap.combine ($Snap.first $t@758@01) ($Snap.second $t@758@01))))
(assert (= ($Snap.first $t@758@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@758@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@758@01))
    ($Snap.second ($Snap.second $t@758@01)))))
(assert (= ($Snap.first ($Snap.second $t@758@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@758@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@758@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@758@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_149@752@01 _current_wait_level_149@754@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@758@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
  (not (= _err@756@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@756@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@756@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | _err@756@01 == Null | live]
; [else-branch: 409 | _err@756@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 409 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 409 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@756@01 $Ref.null)) (= _err@756@01 $Ref.null)))
(assert (=>
  (= _err@756@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@756@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@756@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 410 | _err@756@01 == Null | live]
; [else-branch: 410 | _err@756@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 410 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 410 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@756@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@756@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@756@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | _err@756@01 == Null | live]
; [else-branch: 411 | _err@756@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 411 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 411 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@756@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 412 | |First:(Second:(Second:(Second:($t@758@01))))| > 0 | live]
; [else-branch: 412 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 412 | |First:(Second:(Second:(Second:($t@758@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 412 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
      0))
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@756@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@756@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | _err@756@01 != Null | live]
; [else-branch: 413 | _err@756@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 413 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 413 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@756@01 $Ref.null) (not (= _err@756@01 $Ref.null))))
(assert (=>
  (not (= _err@756@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@756@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@756@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 414 | _err@756@01 != Null | live]
; [else-branch: 414 | _err@756@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 414 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 414 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@756@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | |First:(Second:(Second:(Second:($t@758@01))))| > 0 | live]
; [else-branch: 415 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 415 | |First:(Second:(Second:(Second:($t@758@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 416 | _res@755@01 != First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 1] | live]
; [else-branch: 416 | _res@755@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 416 | _res@755@01 != First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 1]]
(assert (not
  (=
    _res@755@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 416 | _res@755@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 1]]
(assert (=
  _res@755@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@755@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)))
  (not
    (=
      _res@755@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1))))))
(pop) ; 4
(push) ; 4
; [else-branch: 415 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)
  (and
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
      0)
    (or
      (=
        _res@755@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)))
      (not
        (=
          _res@755@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1))))))))
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)
  (and
    (=
      _res@755@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      _res@755@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | |First:(Second:(Second:(Second:($t@758@01))))| > 0 | live]
; [else-branch: 417 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 417 | |First:(Second:(Second:(Second:($t@758@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 417 | !(|First:(Second:(Second:(Second:($t@758@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@755@01) (Iterator_arg<PyType> (typeof<PyType> self@753@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@759@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 418 | r@759@01 in First:(Second:(Second:(Second:(Second:(Second:($t@757@01)))))) | live]
; [else-branch: 418 | !(r@759@01 in First:(Second:(Second:(Second:(Second:(Second:($t@757@01))))))) | live]
(push) ; 5
; [then-branch: 418 | r@759@01 in First:(Second:(Second:(Second:(Second:(Second:($t@757@01))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
  r@759@01))
(pop) ; 5
(push) ; 5
; [else-branch: 418 | !(r@759@01 in First:(Second:(Second:(Second:(Second:(Second:($t@757@01)))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
    r@759@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 419 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1) | live]
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 419 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 419 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 420 | r@759@01 != First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] | live]
; [else-branch: 420 | r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 420 | r@759@01 != First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2]]
(assert (not
  (=
    r@759@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 420 | r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2]]
(assert (=
  r@759@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@759@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        2)))
  (not
    (=
      r@759@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1)
    (or
      (=
        r@759@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            2)))
      (not
        (=
          r@759@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1))))
(push) ; 6
; [then-branch: 421 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1 && r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] && _err@756@01 == Null | live]
; [else-branch: 421 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1 && r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] && _err@756@01 == Null) | live]
(push) ; 7
; [then-branch: 421 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1 && r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] && _err@756@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  (and
    (=
      r@759@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          2)))
    (= _err@756@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 421 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 1 && r@759@01 == First:(Second:(Second:(Second:($t@758@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) - 2] && _err@756@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1)
    (and
      (=
        r@759@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            2)))
      (= _err@756@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 422 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 0) | live]
; [else-branch: 422 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 422 | !(First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 422 | First:(Second:(Second:(Second:(Second:(Second:($t@758@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 423 | _err@756@01 == Null | live]
; [else-branch: 423 | _err@756@01 != Null | live]
(push) ; 11
; [then-branch: 423 | _err@756@01 == Null]
(assert (= _err@756@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 423 | _err@756@01 != Null]
(assert (not (= _err@756@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1)
    (and
      (=
        r@759@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            2)))
      (= _err@756@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1)
    (=
      r@759@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          2)))
    (= _err@756@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)
      (and
        (=
          r@759@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              2)))
        (= _err@756@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)
        (and
          (=
            r@759@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                2)))
          (= _err@756@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)
      (and
        (=
          r@759@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              2)))
        (= _err@756@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
      1)
    (and
      (=
        r@759@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            2)))
      (= _err@756@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
      r@759@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
        r@759@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)
        (or
          (=
            r@759@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                2)))
          (not
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)
        (and
          (=
            r@759@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                2)))
          (= _err@756@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)
        (=
          r@759@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              2)))
        (= _err@756@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (and
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))
            (= _err@756@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (and
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (= _err@756@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (and
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))
            (= _err@756@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
          1)
        (and
          (=
            r@759@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                2)))
          (= _err@756@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
      r@759@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
    r@759@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@759@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
          r@759@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
            r@759@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (or
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (not
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (and
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (= _err@756@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))
            (= _err@756@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                1)
              (and
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))
                (= _err@756@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  1)
                (and
                  (=
                    r@759@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                        2)))
                  (= _err@756@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                1)
              (and
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))
                (= _err@756@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (and
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (= _err@756@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
          r@759@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
        r@759@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    r@759@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    r@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@759@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
          r@759@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
            r@759@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (or
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (not
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (and
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (= _err@756@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))
            (= _err@756@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                1)
              (and
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))
                (= _err@756@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  1)
                (and
                  (=
                    r@759@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                        2)))
                  (= _err@756@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                1)
              (and
                (=
                  r@759@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                      2)))
                (= _err@756@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
              1)
            (and
              (=
                r@759@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                    2)))
              (= _err@756@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
          r@759@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
        r@759@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    r@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289-aux|)))
(assert (forall ((r@759@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
      r@759@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@757@01)))))))
        r@759@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            1)
          (and
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  2)))
            (= _err@756@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
            0)
          (and
            (not (= _err@756@01 $Ref.null))
            (=
              r@759@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    r@759@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@758@01))))))))))
    r@759@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_iterator_set.py.vpr@1179@12@1179@289|)))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_149: Perm
(declare-const _cwl_149@760@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Iterator___del__ ----------
(declare-const _cthread_150@761@01 $Ref)
(declare-const _caller_measures_150@762@01 Seq<Measure$>)
(declare-const _residue_150@763@01 $Perm)
(declare-const self@764@01 $Ref)
(declare-const _current_wait_level_150@765@01 $Perm)
(declare-const _cthread_150@766@01 $Ref)
(declare-const _caller_measures_150@767@01 Seq<Measure$>)
(declare-const _residue_150@768@01 $Perm)
(declare-const self@769@01 $Ref)
(declare-const _current_wait_level_150@770@01 $Perm)
(push) ; 1
(declare-const $t@771@01 $Snap)
(assert (= $t@771@01 ($Snap.combine ($Snap.first $t@771@01) ($Snap.second $t@771@01))))
(assert (= ($Snap.first $t@771@01) $Snap.unit))
; [eval] _cthread_150 != null
(assert (not (= _cthread_150@766@01 $Ref.null)))
(assert (=
  ($Snap.second $t@771@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@771@01))
    ($Snap.second ($Snap.second $t@771@01)))))
(assert (= ($Snap.first ($Snap.second $t@771@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@767@01 _cthread_150@766@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@767@01 _cthread_150@766@01 1))
(assert (Measure$check $Snap.unit _caller_measures_150@767@01 _cthread_150@766@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@771@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@771@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@771@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@771@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_150@766@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@771@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@771@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@771@01)))))))
(assert (not (= self@769@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@771@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@771@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@771@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@771@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@772@01 $Snap)
(assert (= $t@772@01 ($Snap.combine ($Snap.first $t@772@01) ($Snap.second $t@772@01))))
(assert (= ($Snap.first $t@772@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@772@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@772@01))
    ($Snap.second ($Snap.second $t@772@01)))))
(assert (= ($Snap.first ($Snap.second $t@772@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@772@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@772@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@772@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_150@768@01 _current_wait_level_150@770@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@772@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))) | live]
; [else-branch: 424 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 424 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1))) | dead]
; [else-branch: 425 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 425 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))) | dead]
; [else-branch: 426 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 426 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 424 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1))) | live]
; [else-branch: 427 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 427 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))) | dead]
; [else-branch: 428 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 428 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 427 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))) | live]
; [else-branch: 429 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 429 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))
    $Ref.null)))
(pop) ; 5
(push) ; 5
; [else-branch: 429 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@772@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@772@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@772@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_150: Perm
(declare-const _cwl_150@773@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___init__ ----------
(declare-const _cthread_8@774@01 $Ref)
(declare-const _caller_measures_8@775@01 Seq<Measure$>)
(declare-const _residue_8@776@01 $Perm)
(declare-const _current_wait_level_8@777@01 $Perm)
(declare-const res@778@01 $Ref)
(declare-const _cthread_8@779@01 $Ref)
(declare-const _caller_measures_8@780@01 Seq<Measure$>)
(declare-const _residue_8@781@01 $Perm)
(declare-const _current_wait_level_8@782@01 $Perm)
(declare-const res@783@01 $Ref)
(push) ; 1
(declare-const $t@784@01 $Snap)
(assert (= $t@784@01 ($Snap.combine ($Snap.first $t@784@01) ($Snap.second $t@784@01))))
(assert (= ($Snap.first $t@784@01) $Snap.unit))
; [eval] _cthread_8 != null
(assert (not (= _cthread_8@779@01 $Ref.null)))
(assert (=
  ($Snap.second $t@784@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@784@01))
    ($Snap.second ($Snap.second $t@784@01)))))
(assert (= ($Snap.first ($Snap.second $t@784@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@780@01 _cthread_8@779@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@780@01 _cthread_8@779@01 1))
(assert (Measure$check $Snap.unit _caller_measures_8@780@01 _cthread_8@779@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@784@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@784@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@784@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@784@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_8@779@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@784@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@785@01 $Snap)
(assert (= $t@785@01 ($Snap.combine ($Snap.first $t@785@01) ($Snap.second $t@785@01))))
(assert (= ($Snap.first $t@785@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@785@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@785@01))
    ($Snap.second ($Snap.second $t@785@01)))))
(assert (= ($Snap.first ($Snap.second $t@785@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@785@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@785@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@785@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_8@781@01 _current_wait_level_8@782@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@785@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))
(assert (not (= res@783@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@783@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@783@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@785@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@783@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_8: Perm
(declare-const _cwl_8@786@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list_append ----------
(declare-const _cthread_9@787@01 $Ref)
(declare-const _caller_measures_9@788@01 Seq<Measure$>)
(declare-const _residue_9@789@01 $Perm)
(declare-const self@790@01 $Ref)
(declare-const item@791@01 $Ref)
(declare-const _current_wait_level_9@792@01 $Perm)
(declare-const _cthread_9@793@01 $Ref)
(declare-const _caller_measures_9@794@01 Seq<Measure$>)
(declare-const _residue_9@795@01 $Perm)
(declare-const self@796@01 $Ref)
(declare-const item@797@01 $Ref)
(declare-const _current_wait_level_9@798@01 $Perm)
(push) ; 1
(declare-const $t@799@01 $Snap)
(assert (= $t@799@01 ($Snap.combine ($Snap.first $t@799@01) ($Snap.second $t@799@01))))
(assert (= ($Snap.first $t@799@01) $Snap.unit))
; [eval] _cthread_9 != null
(assert (not (= _cthread_9@793@01 $Ref.null)))
(assert (=
  ($Snap.second $t@799@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@799@01))
    ($Snap.second ($Snap.second $t@799@01)))))
(assert (= ($Snap.first ($Snap.second $t@799@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@794@01 _cthread_9@793@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@794@01 _cthread_9@793@01 1))
(assert (Measure$check $Snap.unit _caller_measures_9@794@01 _cthread_9@793@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@799@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@799@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@799@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_9@793@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@799@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@799@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@799@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@796@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@796@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))))
(assert (not (= self@796@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@797@01) (list_arg<PyType> (typeof<PyType> self@796@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@800@01 $Snap)
(assert (= $t@800@01 ($Snap.combine ($Snap.first $t@800@01) ($Snap.second $t@800@01))))
(assert (= ($Snap.first $t@800@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@800@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@800@01))
    ($Snap.second ($Snap.second $t@800@01)))))
(assert (= ($Snap.first ($Snap.second $t@800@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@800@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@800@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@800@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@800@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_9@795@01 _current_wait_level_9@798@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@800@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@800@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@800@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@800@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton item@797@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@800@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@799@01))))))
    (Seq_singleton item@797@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_9: Perm
(declare-const _cwl_9@801@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set___init__ ----------
(declare-const _cthread_21@802@01 $Ref)
(declare-const _caller_measures_21@803@01 Seq<Measure$>)
(declare-const _residue_21@804@01 $Perm)
(declare-const _current_wait_level_21@805@01 $Perm)
(declare-const res@806@01 $Ref)
(declare-const _cthread_21@807@01 $Ref)
(declare-const _caller_measures_21@808@01 Seq<Measure$>)
(declare-const _residue_21@809@01 $Perm)
(declare-const _current_wait_level_21@810@01 $Perm)
(declare-const res@811@01 $Ref)
(push) ; 1
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 ($Snap.combine ($Snap.first $t@812@01) ($Snap.second $t@812@01))))
(assert (= ($Snap.first $t@812@01) $Snap.unit))
; [eval] _cthread_21 != null
(assert (not (= _cthread_21@807@01 $Ref.null)))
(assert (=
  ($Snap.second $t@812@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@812@01))
    ($Snap.second ($Snap.second $t@812@01)))))
(assert (= ($Snap.first ($Snap.second $t@812@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@808@01 _cthread_21@807@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@808@01 _cthread_21@807@01 1))
(assert (Measure$check $Snap.unit _caller_measures_21@808@01 _cthread_21@807@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@812@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@812@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@812@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@812@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_21@807@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@812@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@813@01 $Snap)
(assert (= $t@813@01 ($Snap.combine ($Snap.first $t@813@01) ($Snap.second $t@813@01))))
(assert (= ($Snap.first $t@813@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@813@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@813@01))
    ($Snap.second ($Snap.second $t@813@01)))))
(assert (= ($Snap.first ($Snap.second $t@813@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@813@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@813@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@813@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@813@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_21@809@01 _current_wait_level_21@810@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@813@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@813@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01)))))))
(assert (not (= res@811@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@813@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@813@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@811@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@811@01) 0))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_21: Perm
(declare-const _cwl_21@814@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set___iter__ ----------
(declare-const _cthread_25@815@01 $Ref)
(declare-const _caller_measures_25@816@01 Seq<Measure$>)
(declare-const _residue_25@817@01 $Perm)
(declare-const self@818@01 $Ref)
(declare-const _current_wait_level_25@819@01 $Perm)
(declare-const _res@820@01 $Ref)
(declare-const _cthread_25@821@01 $Ref)
(declare-const _caller_measures_25@822@01 Seq<Measure$>)
(declare-const _residue_25@823@01 $Perm)
(declare-const self@824@01 $Ref)
(declare-const _current_wait_level_25@825@01 $Perm)
(declare-const _res@826@01 $Ref)
(push) ; 1
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 ($Snap.combine ($Snap.first $t@827@01) ($Snap.second $t@827@01))))
(assert (= ($Snap.first $t@827@01) $Snap.unit))
; [eval] _cthread_25 != null
(assert (not (= _cthread_25@821@01 $Ref.null)))
(assert (=
  ($Snap.second $t@827@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@827@01))
    ($Snap.second ($Snap.second $t@827@01)))))
(assert (= ($Snap.first ($Snap.second $t@827@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_25@822@01 _cthread_25@821@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_25@822@01 _cthread_25@821@01 1))
(assert (Measure$check $Snap.unit _caller_measures_25@822@01 _cthread_25@821@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@827@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@827@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@827@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_25@821@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@827@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@824@01) (set<PyType> (set_arg<PyType> (typeof<PyType> self@824@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01))))))))
(assert (not (= self@824@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@827@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@828@01 $Snap)
(assert (= $t@828@01 ($Snap.combine ($Snap.first $t@828@01) ($Snap.second $t@828@01))))
(assert (= ($Snap.first $t@828@01) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseBounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@828@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@828@01))
    ($Snap.second ($Snap.second $t@828@01)))))
(assert (= ($Snap.first ($Snap.second $t@828@01)) $Snap.unit))
; [eval] (forperm _r_37: Ref [_r_37.MustReleaseUnbounded] :: Level(_r_37) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@828@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@828@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@828@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_25@823@01 _current_wait_level_25@825@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@828@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@828@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@828@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@826@01 self@824@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))
(assert (not (= _res@826@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@829@01 $Perm)
(assert ($Perm.isReadVar $k@829@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@829@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))) self@824@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@829@01))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))) self@824@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))) self@824@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))
  self@824@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@828@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@826@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> self@824@01) 0))))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var _cwl_25: Perm
(declare-const _cwl_25@830@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set_add ----------
(declare-const _cthread_22@831@01 $Ref)
(declare-const _caller_measures_22@832@01 Seq<Measure$>)
(declare-const _residue_22@833@01 $Perm)
(declare-const self@834@01 $Ref)
(declare-const item@835@01 $Ref)
(declare-const _current_wait_level_22@836@01 $Perm)
(declare-const _cthread_22@837@01 $Ref)
(declare-const _caller_measures_22@838@01 Seq<Measure$>)
(declare-const _residue_22@839@01 $Perm)
(declare-const self@840@01 $Ref)
(declare-const item@841@01 $Ref)
(declare-const _current_wait_level_22@842@01 $Perm)
(push) ; 1
(declare-const $t@843@01 $Snap)
(assert (= $t@843@01 ($Snap.combine ($Snap.first $t@843@01) ($Snap.second $t@843@01))))
(assert (= ($Snap.first $t@843@01) $Snap.unit))
; [eval] _cthread_22 != null
(assert (not (= _cthread_22@837@01 $Ref.null)))
(assert (=
  ($Snap.second $t@843@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@843@01))
    ($Snap.second ($Snap.second $t@843@01)))))
(assert (= ($Snap.first ($Snap.second $t@843@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_22, _cthread_22, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_22@838@01 _cthread_22@837@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_22@838@01 _cthread_22@837@01 1))
(assert (Measure$check $Snap.unit _caller_measures_22@838@01 _cthread_22@837@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@843@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@843@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@843@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@843@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_22), Thread_0())
; [eval] typeof(_cthread_22)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_22@837@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@843@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@843@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@843@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@840@01) (set<PyType> (set_arg<PyType> (typeof<PyType> self@840@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01))))))))
(assert (not (= self@840@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), set_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@841@01) (set_arg<PyType> (typeof<PyType> self@840@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@844@01 $Snap)
(assert (= $t@844@01 ($Snap.combine ($Snap.first $t@844@01) ($Snap.second $t@844@01))))
(assert (= ($Snap.first $t@844@01) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseBounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second $t@844@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@844@01))
    ($Snap.second ($Snap.second $t@844@01)))))
(assert (= ($Snap.first ($Snap.second $t@844@01)) $Snap.unit))
; [eval] (forperm _r_39: Ref [_r_39.MustReleaseUnbounded] :: Level(_r_39) <= _current_wait_level_22)
(assert (=
  ($Snap.second ($Snap.second $t@844@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@844@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@844@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@844@01))) $Snap.unit))
; [eval] _residue_22 <= _current_wait_level_22
(assert (<= _residue_22@839@01 _current_wait_level_22@842@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@844@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@844@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@844@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@844@01))))
  $Snap.unit))
; [eval] self.set_acc == (old(self.set_acc) union Set(item))
; [eval] (old(self.set_acc) union Set(item))
; [eval] old(self.set_acc)
; [eval] Set(item)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@844@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@843@01)))))) (Set_singleton item@841@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_22: Perm
(declare-const _cwl_22@845@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
