(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-26 14:28:45
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Set<$Ref>> 0)
(declare-sort Set<$Snap> 0)
(declare-sort PyType 0)
(declare-sort SIFDomain<Ref> 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort Measure$ 0)
(declare-sort $FVF<set_acc> 0)
(declare-sort $FVF<__previous> 0)
(declare-sort $PSF<Student_undecided> 0)
(declare-sort $PSF<Student_enrolled> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<set_acc>To$Snap ($FVF<set_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<set_acc> ($Snap) $FVF<set_acc>)
(assert (forall ((x $FVF<set_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<set_acc>($SortWrappers.$FVF<set_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<set_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<set_acc>To$Snap($SortWrappers.$SnapTo$FVF<set_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<set_acc> x))
    :qid |$Snap.$FVF<set_acc>To$SnapTo$FVF<set_acc>|
    )))
(declare-fun $SortWrappers.$FVF<__previous>To$Snap ($FVF<__previous>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<__previous> ($Snap) $FVF<__previous>)
(assert (forall ((x $FVF<__previous>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<__previous>($SortWrappers.$FVF<__previous>To$Snap x)))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<__previous>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<__previous>To$Snap($SortWrappers.$SnapTo$FVF<__previous> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<__previous> x))
    :qid |$Snap.$FVF<__previous>To$SnapTo$FVF<__previous>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PSF<Student_undecided>To$Snap ($PSF<Student_undecided>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Student_undecided> ($Snap) $PSF<Student_undecided>)
(assert (forall ((x $PSF<Student_undecided>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Student_undecided>($SortWrappers.$PSF<Student_undecided>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Student_undecided>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Student_undecided>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Student_undecided>To$Snap($SortWrappers.$SnapTo$PSF<Student_undecided> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Student_undecided> x))
    :qid |$Snap.$PSF<Student_undecided>To$SnapTo$PSF<Student_undecided>|
    )))
(declare-fun $SortWrappers.$PSF<Student_enrolled>To$Snap ($PSF<Student_enrolled>) $Snap)
(declare-fun $SortWrappers.$SnapTo$PSF<Student_enrolled> ($Snap) $PSF<Student_enrolled>)
(assert (forall ((x $PSF<Student_enrolled>)) (!
    (= x ($SortWrappers.$SnapTo$PSF<Student_enrolled>($SortWrappers.$PSF<Student_enrolled>To$Snap x)))
    :pattern (($SortWrappers.$PSF<Student_enrolled>To$Snap x))
    :qid |$Snap.$SnapTo$PSF<Student_enrolled>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PSF<Student_enrolled>To$Snap($SortWrappers.$SnapTo$PSF<Student_enrolled> x)))
    :pattern (($SortWrappers.$SnapTo$PSF<Student_enrolled> x))
    :qid |$Snap.$PSF<Student_enrolled>To$SnapTo$PSF<Student_enrolled>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Set<$Ref>> Set<Set<$Ref>>) Set<$Ref>)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-const Student<PyType> PyType)
(declare-const GradStudent<PyType> PyType)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [set_acc: Set[Ref]]
(declare-fun $FVF.domain_set_acc ($FVF<set_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_set_acc ($FVF<set_acc> $Ref) Set<$Ref>)
(declare-fun $FVF.after_set_acc ($FVF<set_acc> $FVF<set_acc>) Bool)
(declare-fun $FVF.loc_set_acc (Set<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_set_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_set_acc $FVF<set_acc>)
; /field_value_functions_declarations.smt2 [__previous: Seq[Ref]]
(declare-fun $FVF.domain___previous ($FVF<__previous>) Set<$Ref>)
(declare-fun $FVF.lookup___previous ($FVF<__previous> $Ref) Seq<$Ref>)
(declare-fun $FVF.after___previous ($FVF<__previous> $FVF<__previous>) Bool)
(declare-fun $FVF.loc___previous (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm___previous ($FPM $Ref) $Perm)
(declare-const $fvfTOP___previous $FVF<__previous>)
; /predicate_snap_functions_declarations.smt2 [Student_undecided: Snap]
(declare-fun $PSF.domain_Student_undecided ($PSF<Student_undecided>) Set<$Snap>)
(declare-fun $PSF.lookup_Student_undecided ($PSF<Student_undecided> $Snap) $Snap)
(declare-fun $PSF.after_Student_undecided ($PSF<Student_undecided> $PSF<Student_undecided>) Bool)
(declare-fun $PSF.loc_Student_undecided ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Student_undecided ($PPM $Snap) $Perm)
(declare-const $psfTOP_Student_undecided $PSF<Student_undecided>)
; /predicate_snap_functions_declarations.smt2 [Student_enrolled: Snap]
(declare-fun $PSF.domain_Student_enrolled ($PSF<Student_enrolled>) Set<$Snap>)
(declare-fun $PSF.lookup_Student_enrolled ($PSF<Student_enrolled> $Snap) $Snap)
(declare-fun $PSF.after_Student_enrolled ($PSF<Student_enrolled> $PSF<Student_enrolled>) Bool)
(declare-fun $PSF.loc_Student_enrolled ($Snap $Snap) Bool)
(declare-fun $PSF.perm_Student_enrolled ($PPM $Snap) $Perm)
(declare-const $psfTOP_Student_enrolled $PSF<Student_enrolled>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun PSeq___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun PSeq___sil_seq__%stateless ($Ref) Bool)
(declare-fun PSeq___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun list___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun list___sil_seq__%stateless ($Ref) Bool)
(declare-fun list___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun PSeq___create__ ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%limited ($Snap Seq<$Ref> PyType) $Ref)
(declare-fun PSeq___create__%stateless (Seq<$Ref> PyType) Bool)
(declare-fun PSeq___create__%precondition ($Snap Seq<$Ref> PyType) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun set___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun set___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun set___sil_seq__%stateless ($Ref) Bool)
(declare-fun set___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun PSeq___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun PSeq___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun PSeq___contains__%stateless ($Ref $Ref) Bool)
(declare-fun PSeq___contains__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun list___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun list___contains__%stateless ($Ref $Ref) Bool)
(declare-fun list___contains__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
(declare-fun Student_enrolled%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Student_undecided%trigger ($Snap $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> Student<PyType> traceback<PyType> dict_basic<PyType> type<PyType> GradStudent<PyType> set_basic<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Set<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Set<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Set<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Student<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Student<PyType>  PyType))
    (as Student<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as GradStudent<PyType>  PyType) (as Student<PyType>  PyType))
  (=
    (get_basic<PyType> (as GradStudent<PyType>  PyType))
    (as GradStudent<PyType>  PyType))))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  :qid |prog.low_true|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; /field_value_functions_axioms.smt2 [set_acc: Set[Ref]]
(assert (forall ((vs $FVF<set_acc>) (ws $FVF<set_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_set_acc vs) ($FVF.domain_set_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_set_acc vs))
            (= ($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x)))
          :pattern (($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x))
          :qid |qp.$FVF<set_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap vs)
              ($SortWrappers.$FVF<set_acc>To$Snap ws)
              )
    :qid |qp.$FVF<set_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_set_acc pm r))
    :pattern (($FVF.perm_set_acc pm r)))))
(assert (forall ((r $Ref) (f Set<$Ref>)) (!
    (= ($FVF.loc_set_acc f r) true)
    :pattern (($FVF.loc_set_acc f r)))))
; /field_value_functions_axioms.smt2 [__previous: Seq[Ref]]
(assert (forall ((vs $FVF<__previous>) (ws $FVF<__previous>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain___previous vs) ($FVF.domain___previous ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain___previous vs))
            (= ($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x)))
          :pattern (($FVF.lookup___previous vs x) ($FVF.lookup___previous ws x))
          :qid |qp.$FVF<__previous>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<__previous>To$Snap vs)
              ($SortWrappers.$FVF<__previous>To$Snap ws)
              )
    :qid |qp.$FVF<__previous>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm___previous pm r))
    :pattern (($FVF.perm___previous pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc___previous f r) true)
    :pattern (($FVF.loc___previous f r)))))
; /predicate_snap_functions_axioms.smt2 [Student_undecided: Snap]
(assert (forall ((vs $PSF<Student_undecided>) (ws $PSF<Student_undecided>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Student_undecided vs) ($PSF.domain_Student_undecided ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Student_undecided vs))
            (= ($PSF.lookup_Student_undecided vs x) ($PSF.lookup_Student_undecided ws x)))
          :pattern (($PSF.lookup_Student_undecided vs x) ($PSF.lookup_Student_undecided ws x))
          :qid |qp.$PSF<Student_undecided>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Student_undecided>To$Snap vs)
              ($SortWrappers.$PSF<Student_undecided>To$Snap ws)
              )
    :qid |qp.$PSF<Student_undecided>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Student_undecided pm s))
    :pattern (($PSF.perm_Student_undecided pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Student_undecided f s) true)
    :pattern (($PSF.loc_Student_undecided f s)))))
; /predicate_snap_functions_axioms.smt2 [Student_enrolled: Snap]
(assert (forall ((vs $PSF<Student_enrolled>) (ws $PSF<Student_enrolled>)) (!
    (=>
      (and
        (Set_equal ($PSF.domain_Student_enrolled vs) ($PSF.domain_Student_enrolled ws))
        (forall ((x $Snap)) (!
          (=>
            (Set_in x ($PSF.domain_Student_enrolled vs))
            (= ($PSF.lookup_Student_enrolled vs x) ($PSF.lookup_Student_enrolled ws x)))
          :pattern (($PSF.lookup_Student_enrolled vs x) ($PSF.lookup_Student_enrolled ws x))
          :qid |qp.$PSF<Student_enrolled>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$PSF<Student_enrolled>To$Snap vs)
              ($SortWrappers.$PSF<Student_enrolled>To$Snap ws)
              )
    :qid |qp.$PSF<Student_enrolled>-eq-outer|
    )))
(assert (forall ((s $Snap) (pm $PPM)) (!
    ($Perm.isValidVar ($PSF.perm_Student_enrolled pm s))
    :pattern (($PSF.perm_Student_enrolled pm s)))))
(assert (forall ((s $Snap) (f $Snap)) (!
    (= ($PSF.loc_Student_enrolled f s) true)
    :pattern (($PSF.loc_Student_enrolled f s)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@47@00 () $Perm)
(declare-fun $k@52@00 () $Perm)
(declare-fun $k@62@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (str___val__%limited s@$ self@0@00) (str___val__ s@$ self@0@00))
  :pattern ((str___val__ s@$ self@0@00))
  :qid |quant-u-2237|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (str___val__%stateless self@0@00)
  :pattern ((str___val__%limited s@$ self@0@00))
  :qid |quant-u-2238|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___len__%limited s@$ self@2@00) (str___len__ s@$ self@2@00))
  :pattern ((str___len__ s@$ self@2@00))
  :qid |quant-u-2239|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___len__%stateless self@2@00)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2240|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) (=>
    (str___len__%precondition s@$ self@2@00)
    (>= result@3@00 0)))
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2277|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (let ((result@3@00 (str___len__%limited s@$ self@2@00))) true)
  :pattern ((str___len__%limited s@$ self@2@00))
  :qid |quant-u-2278|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (= (PSeq___sil_seq__%limited s@$ box@4@00) (PSeq___sil_seq__ s@$ box@4@00))
  :pattern ((PSeq___sil_seq__ s@$ box@4@00))
  :qid |quant-u-2241|)))
(assert (forall ((s@$ $Snap) (box@4@00 $Ref)) (!
  (PSeq___sil_seq__%stateless box@4@00)
  :pattern ((PSeq___sil_seq__%limited s@$ box@4@00))
  :qid |quant-u-2242|)))
(assert (forall ((s@$ $Snap) (id@6@00 Int)) (!
  (= (_isDefined%limited s@$ id@6@00) (_isDefined s@$ id@6@00))
  :pattern ((_isDefined s@$ id@6@00))
  :qid |quant-u-2243|)))
(assert (forall ((s@$ $Snap) (id@6@00 Int)) (!
  (_isDefined%stateless id@6@00)
  :pattern ((_isDefined%limited s@$ id@6@00))
  :qid |quant-u-2244|)))
(assert (forall ((s@$ $Snap) (r@8@00 $Ref)) (!
  (= (Level%limited s@$ r@8@00) (Level s@$ r@8@00))
  :pattern ((Level s@$ r@8@00))
  :qid |quant-u-2245|)))
(assert (forall ((s@$ $Snap) (r@8@00 $Ref)) (!
  (Level%stateless r@8@00)
  :pattern ((Level%limited s@$ r@8@00))
  :qid |quant-u-2246|)))
(assert (forall ((s@$ $Snap) (self@10@00 $Ref)) (!
  (= (list___sil_seq__%limited s@$ self@10@00) (list___sil_seq__ s@$ self@10@00))
  :pattern ((list___sil_seq__ s@$ self@10@00))
  :qid |quant-u-2247|)))
(assert (forall ((s@$ $Snap) (self@10@00 $Ref)) (!
  (list___sil_seq__%stateless self@10@00)
  :pattern ((list___sil_seq__%limited s@$ self@10@00))
  :qid |quant-u-2248|)))
(assert (forall ((s@$ $Snap) (self@10@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@47@00)
    (=>
      (list___sil_seq__%precondition s@$ self@10@00)
      (= (list___sil_seq__ s@$ self@10@00) ($SortWrappers.$SnapToSeq<$Ref> s@$))))
  :pattern ((list___sil_seq__ s@$ self@10@00))
  :qid |quant-u-2279|)))
(assert (forall ((s@$ $Snap) (self@10@00 $Ref)) (!
  true
  :pattern ((list___sil_seq__ s@$ self@10@00))
  :qid |quant-u-2280|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (=
    (str___create__%limited s@$ len@12@00 value@13@00)
    (str___create__ s@$ len@12@00 value@13@00))
  :pattern ((str___create__ s@$ len@12@00 value@13@00))
  :qid |quant-u-2249|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (str___create__%stateless len@12@00 value@13@00)
  :pattern ((str___create__%limited s@$ len@12@00 value@13@00))
  :qid |quant-u-2250|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (let ((result@14@00 (str___create__%limited s@$ len@12@00 value@13@00))) (=>
    (str___create__%precondition s@$ len@12@00 value@13@00)
    (and
      (= (str___len__ $Snap.unit result@14@00) len@12@00)
      (= (str___val__ $Snap.unit result@14@00) value@13@00)
      (= (typeof<PyType> result@14@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@12@00 value@13@00))
  :qid |quant-u-2281|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (let ((result@14@00 (str___create__%limited s@$ len@12@00 value@13@00))) (=>
    (str___create__%precondition s@$ len@12@00 value@13@00)
    (str___len__%precondition $Snap.unit result@14@00)))
  :pattern ((str___create__%limited s@$ len@12@00 value@13@00))
  :qid |quant-u-2282|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (let ((result@14@00 (str___create__%limited s@$ len@12@00 value@13@00))) (=>
    (str___create__%precondition s@$ len@12@00 value@13@00)
    (str___val__%precondition $Snap.unit result@14@00)))
  :pattern ((str___create__%limited s@$ len@12@00 value@13@00))
  :qid |quant-u-2283|)))
(assert (forall ((s@$ $Snap) (len@12@00 Int) (value@13@00 Int)) (!
  (let ((result@14@00 (str___create__%limited s@$ len@12@00 value@13@00))) true)
  :pattern ((str___create__%limited s@$ len@12@00 value@13@00))
  :qid |quant-u-2284|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Seq<$Ref>) (cont_type@16@00 PyType)) (!
  (=
    (PSeq___create__%limited s@$ prim@15@00 cont_type@16@00)
    (PSeq___create__ s@$ prim@15@00 cont_type@16@00))
  :pattern ((PSeq___create__ s@$ prim@15@00 cont_type@16@00))
  :qid |quant-u-2251|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Seq<$Ref>) (cont_type@16@00 PyType)) (!
  (PSeq___create__%stateless prim@15@00 cont_type@16@00)
  :pattern ((PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))
  :qid |quant-u-2252|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Seq<$Ref>) (cont_type@16@00 PyType)) (!
  (let ((result@17@00 (PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))) (=>
    (PSeq___create__%precondition s@$ prim@15@00 cont_type@16@00)
    (and
      (= (typeof<PyType> result@17@00) (PSeq<PyType> cont_type@16@00))
      (Seq_equal (PSeq___sil_seq__ $Snap.unit result@17@00) prim@15@00))))
  :pattern ((PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))
  :qid |quant-u-2285|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Seq<$Ref>) (cont_type@16@00 PyType)) (!
  (let ((result@17@00 (PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))) true)
  :pattern ((PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))
  :qid |quant-u-2286|)))
(assert (forall ((s@$ $Snap) (prim@15@00 Seq<$Ref>) (cont_type@16@00 PyType)) (!
  (let ((result@17@00 (PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))) (=>
    (PSeq___create__%precondition s@$ prim@15@00 cont_type@16@00)
    (PSeq___sil_seq__%precondition $Snap.unit result@17@00)))
  :pattern ((PSeq___create__%limited s@$ prim@15@00 cont_type@16@00))
  :qid |quant-u-2287|)))
(assert (forall ((s@$ $Snap) (map@18@00 Seq<Measure$>) (key@19@00 $Ref) (value@20@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@18@00 key@19@00 value@20@00)
    (Measure$check s@$ map@18@00 key@19@00 value@20@00))
  :pattern ((Measure$check s@$ map@18@00 key@19@00 value@20@00))
  :qid |quant-u-2253|)))
(assert (forall ((s@$ $Snap) (map@18@00 Seq<Measure$>) (key@19@00 $Ref) (value@20@00 Int)) (!
  (Measure$check%stateless map@18@00 key@19@00 value@20@00)
  :pattern ((Measure$check%limited s@$ map@18@00 key@19@00 value@20@00))
  :qid |quant-u-2254|)))
(assert (forall ((s@$ $Snap) (map@18@00 Seq<Measure$>) (key@19@00 $Ref) (value@20@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@18@00 key@19@00 value@20@00)
    (=
      (Measure$check s@$ map@18@00 key@19@00 value@20@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@18@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@19@00)))
          (> (Measure$value<Int> m) value@20@00))
        :pattern ((Seq_contains map@18@00 m))
        :pattern ((Seq_contains_trigger map@18@00 m))
        :pattern ((Seq_contains_trigger map@18@00 m))
        ))))
  :pattern ((Measure$check s@$ map@18@00 key@19@00 value@20@00))
  :qid |quant-u-2288|)))
(assert (forall ((s@$ $Snap) (map@18@00 Seq<Measure$>) (key@19@00 $Ref) (value@20@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@18@00 key@19@00 value@20@00))
  :qid |quant-u-2289|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (other@23@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@22@00 other@23@00)
    (str___eq__ s@$ self@22@00 other@23@00))
  :pattern ((str___eq__ s@$ self@22@00 other@23@00))
  :qid |quant-u-2255|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (other@23@00 $Ref)) (!
  (str___eq__%stateless self@22@00 other@23@00)
  :pattern ((str___eq__%limited s@$ self@22@00 other@23@00))
  :qid |quant-u-2256|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (other@23@00 $Ref)) (!
  (let ((result@24@00 (str___eq__%limited s@$ self@22@00 other@23@00))) (=>
    (str___eq__%precondition s@$ self@22@00 other@23@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@22@00)
          (str___val__ $Snap.unit other@23@00))
        result@24@00)
      (=>
        result@24@00
        (=
          (str___len__ $Snap.unit self@22@00)
          (str___len__ $Snap.unit other@23@00))))))
  :pattern ((str___eq__%limited s@$ self@22@00 other@23@00))
  :qid |quant-u-2290|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (other@23@00 $Ref)) (!
  (let ((result@24@00 (str___eq__%limited s@$ self@22@00 other@23@00))) (=>
    (str___eq__%precondition s@$ self@22@00 other@23@00)
    (and
      (str___val__%precondition $Snap.unit self@22@00)
      (str___val__%precondition $Snap.unit other@23@00))))
  :pattern ((str___eq__%limited s@$ self@22@00 other@23@00))
  :qid |quant-u-2291|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (other@23@00 $Ref)) (!
  (let ((result@24@00 (str___eq__%limited s@$ self@22@00 other@23@00))) (=>
    (and (str___eq__%precondition s@$ self@22@00 other@23@00) result@24@00)
    (and
      (str___len__%precondition $Snap.unit self@22@00)
      (str___len__%precondition $Snap.unit other@23@00))))
  :pattern ((str___eq__%limited s@$ self@22@00 other@23@00))
  :qid |quant-u-2292|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (= (set___sil_seq__%limited s@$ self@25@00) (set___sil_seq__ s@$ self@25@00))
  :pattern ((set___sil_seq__ s@$ self@25@00))
  :qid |quant-u-2257|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (set___sil_seq__%stateless self@25@00)
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2258|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (set___sil_seq__%limited s@$ self@25@00))) (and
    ($Perm.isReadVar $k@52@00)
    (=>
      (set___sil_seq__%precondition s@$ self@25@00)
      (and
        (=
          (Seq_length result@26@00)
          (Set_card ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$))))
        (forall ((c $Ref)) (!
          (=
            (Set_in c ($SortWrappers.$SnapToSet<$Ref> ($Snap.second s@$)))
            (Seq_contains result@26@00 c))
          :pattern ((Seq_contains result@26@00 c))
          :pattern ((Seq_contains_trigger result@26@00 c))
          :pattern ((Seq_contains_trigger result@26@00 c))
          ))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length result@26@00)))
            (not
              (Seq_contains (Seq_take result@26@00 i) (Seq_index result@26@00 i))))
          :pattern ((Seq_index result@26@00 i))
          ))
        (forall ((r $Ref)) (!
          (=>
            (Seq_contains result@26@00 r)
            (issubtype<Bool> (typeof<PyType> r) (set_arg<PyType> (typeof<PyType> self@25@00) 0)))
          :pattern ((Seq_contains result@26@00 r))
          :pattern ((Seq_contains_trigger result@26@00 r))
          :pattern ((Seq_contains_trigger result@26@00 r))
          ))))))
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2293|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (set___sil_seq__%limited s@$ self@25@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2294|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (set___sil_seq__%limited s@$ self@25@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2295|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (set___sil_seq__%limited s@$ self@25@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2296|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (let ((result@26@00 (set___sil_seq__%limited s@$ self@25@00))) true)
  :pattern ((set___sil_seq__%limited s@$ self@25@00))
  :qid |quant-u-2297|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-2259|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-2260|)))
(assert (forall ((s@$ $Snap) (self@28@00 $Ref) (item@29@00 $Ref)) (!
  (=
    (PSeq___contains__%limited s@$ self@28@00 item@29@00)
    (PSeq___contains__ s@$ self@28@00 item@29@00))
  :pattern ((PSeq___contains__ s@$ self@28@00 item@29@00))
  :qid |quant-u-2261|)))
(assert (forall ((s@$ $Snap) (self@28@00 $Ref) (item@29@00 $Ref)) (!
  (PSeq___contains__%stateless self@28@00 item@29@00)
  :pattern ((PSeq___contains__%limited s@$ self@28@00 item@29@00))
  :qid |quant-u-2262|)))
(assert (forall ((s@$ $Snap) (self@28@00 $Ref) (item@29@00 $Ref)) (!
  (let ((result@30@00 (PSeq___contains__%limited s@$ self@28@00 item@29@00))) (=>
    (PSeq___contains__%precondition s@$ self@28@00 item@29@00)
    (and
      (=
        result@30@00
        (Seq_contains (PSeq___sil_seq__ $Snap.unit self@28@00) item@29@00))
      (=>
        result@30@00
        (issubtype<Bool> (typeof<PyType> item@29@00) (PSeq_arg<PyType> (typeof<PyType> self@28@00) 0))))))
  :pattern ((PSeq___contains__%limited s@$ self@28@00 item@29@00))
  :qid |quant-u-2298|)))
(assert (forall ((s@$ $Snap) (self@28@00 $Ref) (item@29@00 $Ref)) (!
  (let ((result@30@00 (PSeq___contains__%limited s@$ self@28@00 item@29@00))) (=>
    (PSeq___contains__%precondition s@$ self@28@00 item@29@00)
    (PSeq___sil_seq__%precondition $Snap.unit self@28@00)))
  :pattern ((PSeq___contains__%limited s@$ self@28@00 item@29@00))
  :qid |quant-u-2299|)))
(assert (forall ((s@$ $Snap) (self@28@00 $Ref) (item@29@00 $Ref)) (!
  (let ((result@30@00 (PSeq___contains__%limited s@$ self@28@00 item@29@00))) true)
  :pattern ((PSeq___contains__%limited s@$ self@28@00 item@29@00))
  :qid |quant-u-2300|)))
(assert (forall ((s@$ $Snap) (box@31@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@31@00) (bool___unbox__ s@$ box@31@00))
  :pattern ((bool___unbox__ s@$ box@31@00))
  :qid |quant-u-2263|)))
(assert (forall ((s@$ $Snap) (box@31@00 $Ref)) (!
  (bool___unbox__%stateless box@31@00)
  :pattern ((bool___unbox__%limited s@$ box@31@00))
  :qid |quant-u-2264|)))
(assert (forall ((s@$ $Snap) (box@31@00 $Ref)) (!
  (let ((result@32@00 (bool___unbox__%limited s@$ box@31@00))) (=>
    (bool___unbox__%precondition s@$ box@31@00)
    (= (__prim__bool___box__%limited $Snap.unit result@32@00) box@31@00)))
  :pattern ((bool___unbox__%limited s@$ box@31@00))
  :qid |quant-u-2301|)))
(assert (forall ((s@$ $Snap) (box@31@00 $Ref)) (!
  (let ((result@32@00 (bool___unbox__%limited s@$ box@31@00))) (=>
    (bool___unbox__%precondition s@$ box@31@00)
    (__prim__bool___box__%precondition $Snap.unit result@32@00)))
  :pattern ((bool___unbox__%limited s@$ box@31@00))
  :qid |quant-u-2302|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@33@00)
    (__prim__bool___box__ s@$ prim@33@00))
  :pattern ((__prim__bool___box__ s@$ prim@33@00))
  :qid |quant-u-2265|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (__prim__bool___box__%stateless prim@33@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@33@00))
  :qid |quant-u-2266|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (let ((result@34@00 (__prim__bool___box__%limited s@$ prim@33@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@33@00)
    (and
      (= (typeof<PyType> result@34@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@34@00) prim@33@00)
      (= (int___unbox__%limited $Snap.unit result@34@00) (ite prim@33@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@33@00))
  :qid |quant-u-2303|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (let ((result@34@00 (__prim__bool___box__%limited s@$ prim@33@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@33@00))
  :qid |quant-u-2304|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (let ((result@34@00 (__prim__bool___box__%limited s@$ prim@33@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@33@00)
    (bool___unbox__%precondition $Snap.unit result@34@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@33@00))
  :qid |quant-u-2305|)))
(assert (forall ((s@$ $Snap) (prim@33@00 Bool)) (!
  (let ((result@34@00 (__prim__bool___box__%limited s@$ prim@33@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@33@00)
    (int___unbox__%precondition $Snap.unit result@34@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@33@00))
  :qid |quant-u-2306|)))
(assert (forall ((s@$ $Snap) (box@35@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@35@00) (int___unbox__ s@$ box@35@00))
  :pattern ((int___unbox__ s@$ box@35@00))
  :qid |quant-u-2267|)))
(assert (forall ((s@$ $Snap) (box@35@00 $Ref)) (!
  (int___unbox__%stateless box@35@00)
  :pattern ((int___unbox__%limited s@$ box@35@00))
  :qid |quant-u-2268|)))
(assert (forall ((s@$ $Snap) (box@35@00 $Ref)) (!
  (let ((result@36@00 (int___unbox__%limited s@$ box@35@00))) (=>
    (int___unbox__%precondition s@$ box@35@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@35@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@36@00) box@35@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@35@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@36@00 0)))
          box@35@00)))))
  :pattern ((int___unbox__%limited s@$ box@35@00))
  :qid |quant-u-2307|)))
(assert (forall ((s@$ $Snap) (box@35@00 $Ref)) (!
  (let ((result@36@00 (int___unbox__%limited s@$ box@35@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@35@00)
      (not
        (issubtype<Bool> (typeof<PyType> box@35@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@36@00)))
  :pattern ((int___unbox__%limited s@$ box@35@00))
  :qid |quant-u-2308|)))
(assert (forall ((s@$ $Snap) (box@35@00 $Ref)) (!
  (let ((result@36@00 (int___unbox__%limited s@$ box@35@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@35@00)
      (issubtype<Bool> (typeof<PyType> box@35@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@36@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@35@00))
  :qid |quant-u-2309|)))
(assert (forall ((s@$ $Snap) (prim@37@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@37@00)
    (__prim__int___box__ s@$ prim@37@00))
  :pattern ((__prim__int___box__ s@$ prim@37@00))
  :qid |quant-u-2269|)))
(assert (forall ((s@$ $Snap) (prim@37@00 Int)) (!
  (__prim__int___box__%stateless prim@37@00)
  :pattern ((__prim__int___box__%limited s@$ prim@37@00))
  :qid |quant-u-2270|)))
(assert (forall ((s@$ $Snap) (prim@37@00 Int)) (!
  (let ((result@38@00 (__prim__int___box__%limited s@$ prim@37@00))) (=>
    (__prim__int___box__%precondition s@$ prim@37@00)
    (and
      (= (typeof<PyType> result@38@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@38@00) prim@37@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@37@00))
  :qid |quant-u-2310|)))
(assert (forall ((s@$ $Snap) (prim@37@00 Int)) (!
  (let ((result@38@00 (__prim__int___box__%limited s@$ prim@37@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@37@00))
  :qid |quant-u-2311|)))
(assert (forall ((s@$ $Snap) (prim@37@00 Int)) (!
  (let ((result@38@00 (__prim__int___box__%limited s@$ prim@37@00))) (=>
    (__prim__int___box__%precondition s@$ prim@37@00)
    (int___unbox__%precondition $Snap.unit result@38@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@37@00))
  :qid |quant-u-2312|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@39@00 id@40@00)
    (_checkDefined s@$ val@39@00 id@40@00))
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2271|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (_checkDefined%stateless val@39@00 id@40@00)
  :pattern ((_checkDefined%limited s@$ val@39@00 id@40@00))
  :qid |quant-u-2272|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@39@00 id@40@00)
    (= (_checkDefined s@$ val@39@00 id@40@00) val@39@00))
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2313|)))
(assert (forall ((s@$ $Snap) (val@39@00 $Ref) (id@40@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@39@00 id@40@00))
  :qid |quant-u-2314|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref) (item@43@00 $Ref)) (!
  (=
    (list___contains__%limited s@$ self@42@00 item@43@00)
    (list___contains__ s@$ self@42@00 item@43@00))
  :pattern ((list___contains__ s@$ self@42@00 item@43@00))
  :qid |quant-u-2273|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref) (item@43@00 $Ref)) (!
  (list___contains__%stateless self@42@00 item@43@00)
  :pattern ((list___contains__%limited s@$ self@42@00 item@43@00))
  :qid |quant-u-2274|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref) (item@43@00 $Ref)) (!
  (let ((result@44@00 (list___contains__%limited s@$ self@42@00 item@43@00))) (and
    ($Perm.isReadVar $k@62@00)
    (=>
      (list___contains__%precondition s@$ self@42@00 item@43@00)
      (=
        result@44@00
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))
          item@43@00)))))
  :pattern ((list___contains__%limited s@$ self@42@00 item@43@00))
  :qid |quant-u-2315|)))
(assert (forall ((s@$ $Snap) (self@42@00 $Ref) (item@43@00 $Ref)) (!
  (let ((result@44@00 (list___contains__%limited s@$ self@42@00 item@43@00))) true)
  :pattern ((list___contains__%limited s@$ self@42@00 item@43@00))
  :qid |quant-u-2316|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-2275|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-2276|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- enroll_all ----------
(declare-const _cthread_164@0@01 $Ref)
(declare-const _caller_measures_164@1@01 Seq<Measure$>)
(declare-const _residue_164@2@01 $Perm)
(declare-const students@3@01 $Ref)
(declare-const course_name_3@4@01 $Ref)
(declare-const _current_wait_level_164@5@01 $Perm)
(declare-const _cthread_164@6@01 $Ref)
(declare-const _caller_measures_164@7@01 Seq<Measure$>)
(declare-const _residue_164@8@01 $Perm)
(declare-const students@9@01 $Ref)
(declare-const course_name_3@10@01 $Ref)
(declare-const _current_wait_level_164@11@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@6@01 $Ref.null)))
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(assert (= ($Snap.first ($Snap.second $t@12@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@6@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@01))) $Snap.unit))
; [eval] issubtype(typeof(students), set(Student()))
; [eval] typeof(students)
; [eval] set(Student())
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> students@9@01) (set<PyType> (as Student<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  $Snap.unit))
; [eval] issubtype(typeof(course_name_3), str())
; [eval] typeof(course_name_3)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> course_name_3@10@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (not (= students@9@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(declare-const lambda65_30$s@13@01 $Ref)
(push) ; 2
; [eval] issubtype(typeof(lambda65_30$s), Student()) && (lambda65_30$s in students.set_acc)
; [eval] issubtype(typeof(lambda65_30$s), Student())
; [eval] typeof(lambda65_30$s)
; [eval] Student()
(push) ; 3
; [then-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda65_30$s@13@01), Student[PyType])) | live]
; [else-branch: 0 | issubtype[Bool](typeof[PyType](lambda65_30$s@13@01), Student[PyType]) | live]
(push) ; 4
; [then-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda65_30$s@13@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | issubtype[Bool](typeof[PyType](lambda65_30$s@13@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType)))
; [eval] (lambda65_30$s in students.set_acc)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))
  (Set_in lambda65_30$s@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(pop) ; 2
(declare-fun inv@14@01 ($Ref) $Ref)
(declare-fun img@15@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda65_30$s@13@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))
      (Set_in lambda65_30$s@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda65_30$s@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((lambda65_30$s1@13@01 $Ref) (lambda65_30$s2@13@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda65_30$s1@13@01) (as Student<PyType>  PyType))
        (Set_in lambda65_30$s1@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda65_30$s2@13@01) (as Student<PyType>  PyType))
        (Set_in lambda65_30$s2@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
      (= lambda65_30$s1@13@01 lambda65_30$s2@13@01))
    (= lambda65_30$s1@13@01 lambda65_30$s2@13@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda65_30$s@13@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@13@01) (as Student<PyType>  PyType))
      (Set_in lambda65_30$s@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    (and
      (= (inv@14@01 lambda65_30$s@13@01) lambda65_30$s@13@01)
      (img@15@01 lambda65_30$s@13@01)))
  :pattern ((Set_in lambda65_30$s@13@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |quant-u-2318|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@15@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@14@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@14@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (= (inv@14@01 self_2) self_2))
  :pattern ((inv@14@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 ($Snap.combine ($Snap.first $t@16@01) ($Snap.second $t@16@01))))
(assert (= ($Snap.first $t@16@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@16@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@16@01))
    ($Snap.second ($Snap.second $t@16@01)))))
(assert (= ($Snap.first ($Snap.second $t@16@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@16@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@16@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@16@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@8@01 _current_wait_level_164@11@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@16@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))))
(declare-const lambda67_29$s@17@01 $Ref)
(push) ; 3
; [eval] issubtype(typeof(lambda67_29$s), Student()) && (lambda67_29$s in students.set_acc)
; [eval] issubtype(typeof(lambda67_29$s), Student())
; [eval] typeof(lambda67_29$s)
; [eval] Student()
(push) ; 4
; [then-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@17@01), Student[PyType])) | live]
; [else-branch: 1 | issubtype[Bool](typeof[PyType](lambda67_29$s@17@01), Student[PyType]) | live]
(push) ; 5
; [then-branch: 1 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@17@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | issubtype[Bool](typeof[PyType](lambda67_29$s@17@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType)))
; [eval] (lambda67_29$s in students.set_acc)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))
  (Set_in lambda67_29$s@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))))
(pop) ; 3
(declare-fun inv@18@01 ($Ref $Ref) $Ref)
(declare-fun img@19@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda67_29$s@17@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda67_29$s@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((lambda67_29$s1@17@01 $Ref) (lambda67_29$s2@17@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s1@17@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s1@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s2@17@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s2@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
      (= lambda67_29$s1@17@01 lambda67_29$s2@17@01))
    (= lambda67_29$s1@17@01 lambda67_29$s2@17@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda67_29$s@17@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@17@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
    (and
      (= (inv@18@01 lambda67_29$s@17@01 course_name_3@10@01) lambda67_29$s@17@01)
      (img@19@01 lambda67_29$s@17@01 course_name_3@10@01)))
  :pattern ((Set_in lambda67_29$s@17@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01)))))))
  :qid |quant-u-2320|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@19@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@18@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@18@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))))
    (and
      (= (inv@18@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@18@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@16@01))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@20@01 $Ref)
; [exec]
; var student: Ref
(declare-const student@21@01 $Ref)
; [exec]
; var students_0: Ref
(declare-const students_0@22@01 $Ref)
; [exec]
; var course_name_4: Ref
(declare-const course_name_4@23@01 $Ref)
; [exec]
; var iterable: Ref
(declare-const iterable@24@01 $Ref)
; [exec]
; var iter: Ref
(declare-const iter@25@01 $Ref)
; [exec]
; var loop_target: Ref
(declare-const loop_target@26@01 $Ref)
; [exec]
; var iter_err: Ref
(declare-const iter_err@27@01 $Ref)
; [exec]
; var seqtmp: Seq[Ref]
(declare-const seqtmp@28@01 Seq<$Ref>)
; [exec]
; var _loop_measures: Seq[Measure$]
(declare-const _loop_measures@29@01 Seq<Measure$>)
; [exec]
; var _loop_check_before: Bool
(declare-const _loop_check_before@30@01 Bool)
; [exec]
; var _loop_termination_flag: Bool
(declare-const _loop_termination_flag@31@01 Bool)
; [exec]
; var _loop_original_must_terminate: Perm
(declare-const _loop_original_must_terminate@32@01 $Perm)
; [exec]
; var _residue_166: Perm
(declare-const _residue_166@33@01 $Perm)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@34@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@35@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; students_0 := students
; [exec]
; course_name_4 := course_name_3
; [exec]
; iterable := students_0
; [exec]
; _cwl_164, iter := set___iter__(_cthread_164, _method_measures_164, _residue_164,
;   iterable)
; [eval] _cthread_25 != null
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@6@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@6@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@6@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@6@01 1))
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> students@9@01) (set<PyType> (set_arg<PyType> (typeof<PyType> students@9@01) 0)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> students@9@01) (set<PyType> (set_arg<PyType> (typeof<PyType> students@9@01) 0))))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_25@36@01 $Perm)
(declare-const _res@37@01 $Ref)
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(assert (= ($Snap.first $t@38@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@38@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@38@01))
    ($Snap.second ($Snap.second $t@38@01)))))
(assert (= ($Snap.first ($Snap.second $t@38@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@38@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@38@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@38@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_164@8@01 _current_wait_level_25@36@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@38@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@37@01 students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
(assert (not (= _res@37@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@39@01 $Perm)
(assert ($Perm.isReadVar $k@39@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@39@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@39@01))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
  students@9@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@37@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> students@9@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_164, loop_target, iter_err := Iterator___next__(_cthread_164, _method_measures_164,
;   _residue_164, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_149@40@01 $Perm)
(declare-const _res@41@01 $Ref)
(declare-const _err@42@01 $Ref)
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 ($Snap.combine ($Snap.first $t@43@01) ($Snap.second $t@43@01))))
(assert (= ($Snap.first $t@43@01) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@43@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@43@01))
    ($Snap.second ($Snap.second $t@43@01)))))
(assert (= ($Snap.first ($Snap.second $t@43@01)) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@43@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@43@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@43@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_164@8@01 _current_wait_level_149@40@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@43@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
  (not (= _err@42@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | _err@42@01 == Null | live]
; [else-branch: 2 | _err@42@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 2 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@42@01 $Ref.null)) (= _err@42@01 $Ref.null)))
(assert (=>
  (= _err@42@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | _err@42@01 == Null | live]
; [else-branch: 3 | _err@42@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 3 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 3 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@42@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | _err@42@01 == Null | live]
; [else-branch: 4 | _err@42@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 4 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@42@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 5 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 5 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
      0))
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | _err@42@01 != Null | live]
; [else-branch: 6 | _err@42@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 6 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 6 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@42@01 $Ref.null) (not (= _err@42@01 $Ref.null))))
(assert (=>
  (not (= _err@42@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | _err@42@01 != Null | live]
; [else-branch: 7 | _err@42@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 7 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 7 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@42@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 8 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 9 | _res@41@01 != First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 1] | live]
; [else-branch: 9 | _res@41@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 9 | _res@41@01 != First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 1]]
(assert (not
  (=
    _res@41@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | _res@41@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 1]]
(assert (=
  _res@41@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@41@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)))
  (not
    (=
      _res@41@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1))))))
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (and
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
      0)
    (or
      (=
        _res@41@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)))
      (not
        (=
          _res@41@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1))))))))
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (and
    (=
      _res@41@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      _res@41@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 10 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 10 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 10 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@41@01) (Iterator_arg<PyType> (typeof<PyType> _res@37@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@44@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 11 | r@44@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01)))))))))))) | live]
; [else-branch: 11 | !(r@44@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))))))) | live]
(push) ; 5
; [then-branch: 11 | r@44@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
  r@44@01))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(r@44@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01)))))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
    r@44@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 12 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1) | live]
; [else-branch: 12 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 12 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 12 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 13 | r@44@01 != First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] | live]
; [else-branch: 13 | r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 13 | r@44@01 != First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2]]
(assert (not
  (=
    r@44@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 13 | r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2]]
(assert (=
  r@44@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@44@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        2)))
  (not
    (=
      r@44@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (or
      (=
        r@44@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            2)))
      (not
        (=
          r@44@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1))))
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1 && r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] && _err@42@01 == Null | live]
; [else-branch: 14 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1 && r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] && _err@42@01 == Null) | live]
(push) ; 7
; [then-branch: 14 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1 && r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] && _err@42@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (and
    (=
      r@44@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          2)))
    (= _err@42@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 1 && r@44@01 == First:(Second:(Second:(Second:(Second:($t@38@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) - 2] && _err@42@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (and
      (=
        r@44@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            2)))
      (= _err@42@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 15 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 0) | live]
; [else-branch: 15 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 15 | !(First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 15 | First:(Second:(Second:(Second:(Second:(Second:($t@43@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 16 | _err@42@01 == Null | live]
; [else-branch: 16 | _err@42@01 != Null | live]
(push) ; 11
; [then-branch: 16 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 16 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (and
      (=
        r@44@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            2)))
      (= _err@42@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (=
      r@44@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          2)))
    (= _err@42@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)
      (and
        (=
          r@44@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              2)))
        (= _err@42@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)
        (and
          (=
            r@44@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                2)))
          (= _err@42@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)
      (and
        (=
          r@44@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              2)))
        (= _err@42@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (and
      (=
        r@44@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            2)))
      (= _err@42@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
      r@44@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
        r@44@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)
        (or
          (=
            r@44@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                2)))
          (not
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)
        (and
          (=
            r@44@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                2)))
          (= _err@42@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)
        (=
          r@44@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              2)))
        (= _err@42@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (and
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))
            (= _err@42@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (and
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (= _err@42@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (and
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))
            (= _err@42@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
          1)
        (and
          (=
            r@44@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                2)))
          (= _err@42@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
      r@44@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
    r@44@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@44@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
          r@44@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
            r@44@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (or
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (not
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (and
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (= _err@42@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))
            (= _err@42@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                1)
              (and
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))
                (= _err@42@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  1)
                (and
                  (=
                    r@44@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                        2)))
                  (= _err@42@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                1)
              (and
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))
                (= _err@42@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (and
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (= _err@42@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
          r@44@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
        r@44@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    r@44@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    r@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@44@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
          r@44@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
            r@44@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (or
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (not
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (and
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (= _err@42@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))
            (= _err@42@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                1)
              (and
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))
                (= _err@42@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  1)
                (and
                  (=
                    r@44@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                        2)))
                  (= _err@42@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                1)
              (and
                (=
                  r@44@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                      2)))
                (= _err@42@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
              1)
            (and
              (=
                r@44@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                    2)))
              (= _err@42@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
          r@44@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
        r@44@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    r@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@44@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
      r@44@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))))))
        r@44@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            1)
          (and
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  2)))
            (= _err@42@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
            0)
          (and
            (not (= _err@42@01 $Ref.null))
            (=
              r@44@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    r@44@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))
    r@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 17 | _err@42@01 == Null | live]
; [else-branch: 17 | _err@42@01 != Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 17 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
; [exec]
; student := loop_target
; [exec]
; inhale _isDefined(32772479054607475)
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] _isDefined(32772479054607475)
(push) ; 4
(assert (_isDefined%precondition $Snap.unit 32772479054607475))
(pop) ; 4
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 32772479054607475))
(assert (_isDefined $Snap.unit 32772479054607475))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; seqtmp := set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@46@01 $Perm)
(assert ($Perm.isReadVar $k@46@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@46@01))
(declare-const seqtmp@47@01 Seq<$Ref>)
(assert (=
  seqtmp@47@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01)))
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate@48@01 $Perm)
(assert (= _loop_original_must_terminate@48@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@49@01 Seq<Measure$>)
(declare-const _cwl_164@50@01 $Perm)
(declare-const loop_target@51@01 $Ref)
(declare-const iter_err@52@01 $Ref)
(declare-const student@53@01 $Ref)
(declare-const _loop_check_before@54@01 Bool)
(set-option :timeout 0)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (= ($Snap.first $t@55@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_166)
(assert (=
  ($Snap.second $t@55@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@55@01))
    ($Snap.second ($Snap.second $t@55@01)))))
(assert (= ($Snap.first ($Snap.second $t@55@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_166)
(assert (=
  ($Snap.second ($Snap.second $t@55@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@55@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@55@01))) $Snap.unit))
; [eval] _residue_164 <= _residue_166
(assert (<= _residue_164@8@01 _residue_166@33@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@55@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  $Snap.unit))
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@56@01 $Perm)
(assert ($Perm.isReadVar $k@56@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@56@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@56@01))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  $Snap.unit))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@57@01 $Perm)
(assert ($Perm.isReadVar $k@57@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@57@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@57@01))
(assert (Seq_equal
  seqtmp@47@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | iter_err@52@01 == Null | live]
; [else-branch: 18 | iter_err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 18 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 18 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err@52@01 $Ref.null)) (= iter_err@52@01 $Ref.null)))
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | iter_err@52@01 != Null | live]
; [else-branch: 19 | iter_err@52@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 19 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err@52@01 $Ref.null) (not (= iter_err@52@01 $Ref.null))))
(assert (=>
  (not (= iter_err@52@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | iter_err@52@01 == Null | live]
; [else-branch: 20 | iter_err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 20 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 20 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 21 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 22 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 22 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    loop_target@51@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 23 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    loop_target@51@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | iter_err@52@01 == Null | live]
; [else-branch: 24 | iter_err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 24 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(push) ; 6
; [else-branch: 24 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 25 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 25 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), Student())
; [eval] typeof(loop_target)
; [eval] Student()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@51@01) (as Student<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 26 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 26 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] student == loop_target && _isDefined(32772479054607475)
; [eval] student == loop_target
(push) ; 7
; [then-branch: 27 | student@53@01 != loop_target@51@01 | live]
; [else-branch: 27 | student@53@01 == loop_target@51@01 | live]
(push) ; 8
; [then-branch: 27 | student@53@01 != loop_target@51@01]
(assert (not (= student@53@01 loop_target@51@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 27 | student@53@01 == loop_target@51@01]
(assert (= student@53@01 loop_target@51@01))
; [eval] _isDefined(32772479054607475)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= student@53@01 loop_target@51@01)
  (not (= student@53@01 loop_target@51@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (or
    (= student@53@01 loop_target@51@01)
    (not (= student@53@01 loop_target@51@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (and
    (= student@53@01 loop_target@51@01)
    (_isDefined $Snap.unit 32772479054607475))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | iter_err@52@01 != Null | live]
; [else-branch: 28 | iter_err@52@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 28 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(push) ; 6
; [else-branch: 28 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= iter_err@52@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| == 0 | dead]
; [else-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 29 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
(declare-const lambda69_35$s@58@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 6
; [then-branch: 30 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@58@01), Student[PyType])) | live]
; [else-branch: 30 | issubtype[Bool](typeof[PyType](lambda69_35$s@58@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 30 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@58@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 30 | issubtype[Bool](typeof[PyType](lambda69_35$s@58@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 8
; [then-branch: 31 | !(lambda69_35$s@58@01 in First:(Second:(Second:(Second:($t@55@01))))) | live]
; [else-branch: 31 | lambda69_35$s@58@01 in First:(Second:(Second:(Second:($t@55@01)))) | live]
(push) ; 9
; [then-branch: 31 | !(lambda69_35$s@58@01 in First:(Second:(Second:(Second:($t@55@01)))))]
(assert (not
  (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 31 | lambda69_35$s@58@01 in First:(Second:(Second:(Second:($t@55@01))))]
(assert (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (and
    (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))))
(assert (or
  (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (not
    (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (and
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
    (or
      (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (not
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))))
(pop) ; 5
(declare-fun inv@59@01 ($Ref) $Ref)
(declare-fun img@60@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (and
              (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
          (or
            (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@58@01 $Ref) (lambda69_35$s2@58@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@58@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@58@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@58@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@58@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@58@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@58@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda69_35$s1@58@01 $Ref) (lambda69_35$s2@58@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@58@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@58@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@58@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@58@01))))
      (= lambda69_35$s1@58@01 lambda69_35$s2@58@01))
    (= lambda69_35$s1@58@01 lambda69_35$s2@58@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2322|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@60@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))
  :pattern ((inv@59@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))))
    (and
      (= (inv@59@01 lambda69_35$s@58@01) lambda69_35$s@58@01)
      (img@60@01 lambda69_35$s@58@01)))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2322|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@60@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
    (= (inv@59@01 self_2) self_2))
  :pattern ((inv@59@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))))
(declare-const lambda72_25$s@61@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 6
; [then-branch: 32 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@61@01), Student[PyType])) | live]
; [else-branch: 32 | issubtype[Bool](typeof[PyType](lambda72_25$s@61@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 32 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@61@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | issubtype[Bool](typeof[PyType](lambda72_25$s@61@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 5
(declare-fun inv@62@01 ($Ref $Ref) $Ref)
(declare-fun img@63@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@61@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@61@01 $Ref) (lambda72_25$s2@61@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@61@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@61@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@61@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@61@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda72_25$s1@61@01 $Ref) (lambda72_25$s2@61@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@61@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@61@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@61@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@61@01))
      (= lambda72_25$s1@61@01 lambda72_25$s2@61@01))
    (= lambda72_25$s1@61@01 lambda72_25$s2@61@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2324|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@63@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@62@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@61@01))
    (and
      (= (inv@62@01 lambda72_25$s@61@01 course_name_3@10@01) lambda72_25$s@61@01)
      (img@63@01 lambda72_25$s@61@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2324|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@63@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
          (inv@62@01 self_1 course_name_0))))
    (and
      (= (inv@62@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@62@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@64@01))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@65@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  seqtmp@47@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@47@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01)))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | _err@42@01 == Null | live]
; [else-branch: 33 | _err@42@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 33 | _err@42@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@42@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@42@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
; [then-branch: 34 | _err@42@01 != Null | dead]
; [else-branch: 34 | _err@42@01 == Null | live]
(push) ; 6
; [else-branch: 34 | _err@42@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | _err@42@01 == Null | live]
; [else-branch: 35 | _err@42@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 35 | _err@42@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= _err@42@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@42@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 36 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 36 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] iter.__iter_index > 0
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 37 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 37 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 7
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (=
    _res@41@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (=
    _res@41@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 38 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 38 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    _res@41@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
    _res@41@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | _err@42@01 == Null | live]
; [else-branch: 39 | _err@42@01 != Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 39 | _err@42@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 40 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 40 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), Student())
; [eval] typeof(loop_target)
; [eval] Student()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@41@01) (as Student<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@41@01) (as Student<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | live]
; [else-branch: 41 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 41 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0]
; [eval] student == loop_target && _isDefined(32772479054607475)
; [eval] student == loop_target
(push) ; 7
; [then-branch: 42 | False | live]
; [else-branch: 42 | True | live]
(push) ; 8
; [then-branch: 42 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 42 | True]
; [eval] _isDefined(32772479054607475)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (_isDefined $Snap.unit 32772479054607475))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (_isDefined $Snap.unit 32772479054607475)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
; [then-branch: 43 | _err@42@01 != Null | dead]
; [else-branch: 43 | _err@42@01 == Null | live]
(push) ; 6
; [else-branch: 43 | _err@42@01 == Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 44 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| == 0 | dead]
; [else-branch: 44 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 44 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| != 0]
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(declare-const lambda69_35$s@66@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 6
; [then-branch: 45 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@66@01), Student[PyType])) | live]
; [else-branch: 45 | issubtype[Bool](typeof[PyType](lambda69_35$s@66@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 45 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@66@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 45 | issubtype[Bool](typeof[PyType](lambda69_35$s@66@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 8
; [then-branch: 46 | !(lambda69_35$s@66@01 in First:(Second:(Second:(Second:(Second:($t@12@01)))))) | live]
; [else-branch: 46 | lambda69_35$s@66@01 in First:(Second:(Second:(Second:(Second:($t@12@01))))) | live]
(push) ; 9
; [then-branch: 46 | !(lambda69_35$s@66@01 in First:(Second:(Second:(Second:(Second:($t@12@01))))))]
(assert (not
  (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 46 | lambda69_35$s@66@01 in First:(Second:(Second:(Second:(Second:($t@12@01)))))]
(assert (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  (and
    (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01))))
(assert (or
  (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  (not
    (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
      (and
        (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01)))
    (or
      (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
      (not
        (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01)))))
(pop) ; 5
(declare-fun inv@67@01 ($Ref) $Ref)
(declare-fun img@68@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@66@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (and
              (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01)))
          (or
            (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (not
              (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@66@01 $Ref) (lambda69_35$s2@66@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@66@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@66@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@66@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@66@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@66@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@66@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda69_35$s1@66@01 $Ref) (lambda69_35$s2@66@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@66@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@66@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@66@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@66@01))))
      (= lambda69_35$s1@66@01 lambda69_35$s2@66@01))
    (= lambda69_35$s1@66@01 lambda69_35$s2@66@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@66@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01)))
  :pattern ((Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@68@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@67@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@67@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@67@01 self_2))))
  :pattern ((inv@67@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@66@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@66@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@66@01))))
    (and
      (= (inv@67@01 lambda69_35$s@66@01) lambda69_35$s@66@01)
      (img@68@01 lambda69_35$s@66@01)))
  :pattern ((Set_in lambda69_35$s@66@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@68@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@67@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@67@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@67@01 self_2))))))
    (= (inv@67@01 self_2) self_2))
  :pattern ((inv@67@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@69@01 ((self_2 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@67@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@67@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@67@01 self_2)))))
      (img@68@01 self_2)
      (= self_2 (inv@67@01 self_2)))
    ($Perm.min
      (ite
        (and
          (img@15@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@14@01 self_2)) (as Student<PyType>  PyType))
            (Set_in (inv@14@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@15@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@14@01 self_2)) (as Student<PyType>  PyType))
            (Set_in (inv@14@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@69@01 self_2))
    $Perm.No)
  
  :qid |quant-u-2327|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@67@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@67@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@67@01 self_2)))))
      (img@68@01 self_2)
      (= self_2 (inv@67@01 self_2)))
    (= (- $Perm.Write (pTaken@69@01 self_2)) $Perm.No))
  
  :qid |quant-u-2328|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda72_25$s@70@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 6
; [then-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@70@01), Student[PyType])) | live]
; [else-branch: 47 | issubtype[Bool](typeof[PyType](lambda72_25$s@70@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 47 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@70@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 47 | issubtype[Bool](typeof[PyType](lambda72_25$s@70@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 5
(declare-fun inv@71@01 ($Ref $Ref) $Ref)
(declare-fun img@72@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@70@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@70@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Set_in lambda72_25$s@70@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@70@01 $Ref) (lambda72_25$s2@70@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@70@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@70@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@70@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@70@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda72_25$s1@70@01 $Ref) (lambda72_25$s2@70@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@70@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@70@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@70@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@70@01))
      (= lambda72_25$s1@70@01 lambda72_25$s2@70@01))
    (= lambda72_25$s1@70@01 lambda72_25$s2@70@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@70@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Set_in lambda72_25$s@70@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@72@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@71@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@71@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@70@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@70@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@70@01))
    (and
      (= (inv@71@01 lambda72_25$s@70@01 course_name_3@10@01) lambda72_25$s@70@01)
      (img@72@01 lambda72_25$s@70@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@70@01))
  :pattern ((Set_in lambda72_25$s@70@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@72@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@71@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          (inv@71@01 self_1 course_name_0))))
    (and
      (= (inv@71@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@71@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@71@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          (inv@71@01 self_1 course_name_0)))
      (img@72@01 self_1 course_name_0)
      (and
        (= self_1 (inv@71@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    false)
  
  :qid |quant-u-2330|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | True | live]
; [else-branch: 48 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 48 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 49 | False | live]
; [else-branch: 49 | True | live]
(push) ; 8
; [then-branch: 49 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 49 | True]
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
; [then-branch: 50 | _err@42@01 != Null | live]
; [else-branch: 50 | _err@42@01 == Null | live]
(push) ; 10
; [then-branch: 50 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
(pop) ; 10
(push) ; 10
; [else-branch: 50 | _err@42@01 == Null]
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 11
; [then-branch: 51 | False | live]
; [else-branch: 51 | True | live]
(push) ; 12
; [then-branch: 51 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 51 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 52 | False | live]
; [else-branch: 52 | True | live]
(push) ; 14
; [then-branch: 52 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 52 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 53 | False | live]
; [else-branch: 53 | True | live]
(push) ; 16
; [then-branch: 53 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 53 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 54 | False | live]
; [else-branch: 54 | True | live]
(push) ; 18
; [then-branch: 54 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 54 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 5
; [then-branch: 55 | False | dead]
; [else-branch: 55 | True | live]
(push) ; 6
; [else-branch: 55 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@63@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@62@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@63@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
          (inv@62@01 self_1 course_name_0))))
    (and
      (= (inv@62@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@62@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2324|)))
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@61@01))
    (and
      (= (inv@62@01 lambda72_25$s@61@01 course_name_3@10@01) lambda72_25$s@61@01)
      (img@63@01 lambda72_25$s@61@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2324|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@60@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))
  :pattern ((inv@59@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@60@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
    (= (inv@59@01 self_2) self_2))
  :pattern ((inv@59@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2322|)))
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))))
    (and
      (= (inv@59@01 lambda69_35$s@58@01) lambda69_35$s@58@01)
      (img@60@01 lambda69_35$s@58@01)))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |quant-u-2322|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))))
(assert (forall ((lambda72_25$s@61@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@61@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@61@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@61@01))
  :pattern ((Set_in lambda72_25$s@61@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-aux|)))
(assert (forall ((lambda72_25$s1@61@01 $Ref) (lambda72_25$s2@61@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@61@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@61@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@61@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@61@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(assert ($Perm.isReadVar $k@56@01))
(assert ($Perm.isReadVar $k@57@01))
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (= ($Snap.first $t@55@01) $Snap.unit))
(assert (=
  ($Snap.second $t@55@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@55@01))
    ($Snap.second ($Snap.second $t@55@01)))))
(assert (= ($Snap.first ($Snap.second $t@55@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@55@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@55@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@55@01))) $Snap.unit))
(assert (<= _residue_164@8@01 _residue_166@33@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@55@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  $Snap.unit))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@47@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err@52@01 $Ref.null)) (= iter_err@52@01 $Ref.null)))
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err@52@01 $Ref.null) (not (= iter_err@52@01 $Ref.null))))
(assert (=>
  (not (= iter_err@52@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
  $Snap.unit))
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  0))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    loop_target@51@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    loop_target@51@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@52@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> loop_target@51@01) (as Student<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (or
    (= student@53@01 loop_target@51@01)
    (not (= student@53@01 loop_target@51@01)))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (and
    (= student@53@01 loop_target@51@01)
    (_isDefined $Snap.unit 32772479054607475))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err@52@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))))))))))))))
(assert (forall ((lambda69_35$s@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (and
              (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@58@01)))
          (or
            (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@58@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-aux|)))
(assert (forall ((lambda69_35$s1@58@01 $Ref) (lambda69_35$s2@58@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@58@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@58@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@58@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@58@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@58@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@58@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@58@01))))
  
  :qid |Student_undecided-rcvrInj|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 56 | iter_err@52@01 == Null | live]
; [else-branch: 56 | iter_err@52@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 56 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
; [exec]
; _loop_measures := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _cwl_164 := Student_enroll(_cthread_164, _method_measures_164, _residue_166,
;   _checkDefined(student, 32772479054607475), course_name_4)
; [eval] _checkDefined(student, 32772479054607475)
(push) ; 7
; [eval] _isDefined(id)
(push) ; 8
(pop) ; 8
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit student@53@01 32772479054607475))
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit student@53@01 32772479054607475))
; [eval] _cthread_157 != null
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_0), Student())
; [eval] typeof(self_0)
; [eval] Student()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit student@53@01 32772479054607475)) (as Student<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit student@53@01 32772479054607475)) (as Student<PyType>  PyType)))
; [eval] issubtype(typeof(course_name), str())
; [eval] typeof(course_name)
; [eval] str()
; [eval] self_0 != null
(push) ; 7
(assert (not (not (= (_checkDefined $Snap.unit student@53@01 32772479054607475) $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (_checkDefined $Snap.unit student@53@01 32772479054607475) $Ref.null)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@73@01 ((self_2 $Ref)) $Perm
  (ite
    (= self_2 (_checkDefined $Snap.unit student@53@01 32772479054607475))
    ($Perm.min
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        $Perm.Write
        $Perm.No)
      (pTaken@73@01 self_2))
    $Perm.No)
  
  :qid |quant-u-2332|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((self_2 $Ref)) (!
  (= (pTaken@73@01 self_2) $Perm.No)
  
  :qid |quant-u-2333|))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (= self_2 (_checkDefined $Snap.unit student@53@01 32772479054607475))
    (= (- $Perm.Write (pTaken@73@01 self_2)) $Perm.No))
  
  :qid |quant-u-2334|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] perm(MustTerminate(_cthread_157)) == none
; [eval] perm(MustTerminate(_cthread_157))
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_157@74@01 $Perm)
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 ($Snap.combine ($Snap.first $t@75@01) ($Snap.second $t@75@01))))
(assert (= ($Snap.first $t@75@01) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@75@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@75@01))
    ($Snap.second ($Snap.second $t@75@01)))))
(assert (= ($Snap.first ($Snap.second $t@75@01)) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@75@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@75@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@75@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_166@33@01 _current_wait_level_157@74@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@75@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
(declare-const sm@76@01 $PSF<Student_enrolled>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_Student_enrolled (as sm@76@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit student@53@01 32772479054607475))
    ($SortWrappers.$RefTo$Snap course_name_3@10@01)))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (_checkDefined $Snap.unit student@53@01 32772479054607475)
      (_checkDefined $Snap.unit student@53@01 32772479054607475))
    $Perm.Write
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label loop_end
; [exec]
; _cwl_164, loop_target, iter_err := Iterator___next__(_cthread_164, _method_measures_164,
;   _residue_164, iter)
; [eval] _cthread_149 != null
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const _current_wait_level_149@77@01 $Perm)
(declare-const _res@78@01 $Ref)
(declare-const _err@79@01 $Ref)
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(assert (= ($Snap.first $t@80@01) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(assert (= ($Snap.first ($Snap.second $t@80@01)) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@80@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@80@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_164@8@01 _current_wait_level_149@77@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
  (not (= _err@79@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 57 | _err@79@01 == Null | live]
; [else-branch: 57 | _err@79@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 57 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 8
(push) ; 8
; [else-branch: 57 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@79@01 $Ref.null)) (= _err@79@01 $Ref.null)))
(assert (=>
  (= _err@79@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | _err@79@01 == Null | live]
; [else-branch: 58 | _err@79@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 58 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 8
(push) ; 8
; [else-branch: 58 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@79@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 59 | _err@79@01 == Null | live]
; [else-branch: 59 | _err@79@01 != Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 59 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 8
(push) ; 8
; [else-branch: 59 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@79@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 60 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 60 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 60 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] self.__iter_index > 0
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 61 | _err@79@01 != Null | live]
; [else-branch: 61 | _err@79@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 61 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 8
(push) ; 8
; [else-branch: 61 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (= _err@79@01 $Ref.null) (not (= _err@79@01 $Ref.null))))
(assert (=>
  (not (= _err@79@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 62 | _err@79@01 != Null | live]
; [else-branch: 62 | _err@79@01 == Null | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 62 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 8
(push) ; 8
; [else-branch: 62 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@79@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 63 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 63 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 63 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 9
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 64 | _res@78@01 != First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 1] | live]
; [else-branch: 64 | _res@78@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 1] | live]
(push) ; 10
; [then-branch: 64 | _res@78@01 != First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 1]]
(assert (not
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)))))
(pop) ; 10
(push) ; 10
; [else-branch: 64 | _res@78@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 1]]
(assert (=
  _res@78@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)))
  (not
    (=
      _res@78@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (or
    (=
      _res@78@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)))
    (not
      (=
        _res@78@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)))))))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (and
    (=
      _res@78@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      _res@78@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 65 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 65 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 65 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@78@01) (Iterator_arg<PyType> (typeof<PyType> _res@37@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@81@01 $Ref)
(push) ; 7
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 8
; [then-branch: 66 | r@81@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01))))))))) | live]
; [else-branch: 66 | !(r@81@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))))) | live]
(push) ; 9
; [then-branch: 66 | r@81@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  r@81@01))
(pop) ; 9
(push) ; 9
; [else-branch: 66 | !(r@81@01 in First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01))))))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    r@81@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 10
; [then-branch: 67 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1) | live]
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1 | live]
(push) ; 11
; [then-branch: 67 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)))
(pop) ; 11
(push) ; 11
; [else-branch: 67 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 68 | r@81@01 != First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] | live]
; [else-branch: 68 | r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] | live]
(push) ; 13
; [then-branch: 68 | r@81@01 != First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2]]
(assert (not
  (=
    r@81@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        2)))))
(pop) ; 13
(push) ; 13
; [else-branch: 68 | r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2]]
(assert (=
  r@81@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      2))))
; [eval] _err == null
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@81@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        2)))
  (not
    (=
      r@81@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          2))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (or
      (=
        r@81@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            2)))
      (not
        (=
          r@81@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1))))
(push) ; 10
; [then-branch: 69 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1 && r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] && _err@79@01 == Null | live]
; [else-branch: 69 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1 && r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] && _err@79@01 == Null) | live]
(push) ; 11
; [then-branch: 69 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1 && r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] && _err@79@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (and
    (=
      r@81@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          2)))
    (= _err@79@01 $Ref.null))))
(pop) ; 11
(push) ; 11
; [else-branch: 69 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 1 && r@81@01 == First:(Second:(Second:(Second:(Second:($t@55@01)))))[First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) - 2] && _err@79@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (and
      (=
        r@81@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            2)))
      (= _err@79@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 12
; [then-branch: 70 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 0) | live]
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 0 | live]
(push) ; 13
; [then-branch: 70 | !(First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    0)))
(pop) ; 13
(push) ; 13
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:($t@80@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  0))
; [eval] _err != null
(push) ; 14
; [then-branch: 71 | _err@79@01 == Null | live]
; [else-branch: 71 | _err@79@01 != Null | live]
(push) ; 15
; [then-branch: 71 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
(pop) ; 15
(push) ; 15
; [else-branch: 71 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 16
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      0))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (and
      (=
        r@81@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            2)))
      (= _err@79@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (=
      r@81@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          2)))
    (= _err@79@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)
      (and
        (=
          r@81@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              2)))
        (= _err@79@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)
        (and
          (=
            r@81@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                2)))
          (= _err@79@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)
      (and
        (=
          r@81@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              2)))
        (= _err@79@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (and
      (=
        r@81@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            2)))
      (= _err@79@01 $Ref.null)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      r@81@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
        r@81@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)
        (or
          (=
            r@81@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                2)))
          (not
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)
        (and
          (=
            r@81@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                2)))
          (= _err@79@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)
        (=
          r@81@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              2)))
        (= _err@79@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (and
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))
            (= _err@79@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (and
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (= _err@79@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (and
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))
            (= _err@79@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
          1)
        (and
          (=
            r@81@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                2)))
          (= _err@79@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      r@81@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    r@81@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@81@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
          r@81@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
            r@81@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (or
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (not
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (and
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (= _err@79@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))
            (= _err@79@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                1)
              (and
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))
                (= _err@79@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  1)
                (and
                  (=
                    r@81@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                        2)))
                  (= _err@79@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                1)
              (and
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))
                (= _err@79@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (and
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (= _err@79@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
          r@81@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
        r@81@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    r@81@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    r@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@81@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
          r@81@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
            r@81@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (or
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (not
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (and
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (= _err@79@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))
            (= _err@79@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                1)
              (and
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))
                (= _err@79@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  1)
                (and
                  (=
                    r@81@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                        2)))
                  (= _err@79@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                1)
              (and
                (=
                  r@81@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                      2)))
                (= _err@79@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
              1)
            (and
              (=
                r@81@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                    2)))
              (= _err@79@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
          r@81@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
        r@81@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    r@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@81@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
      r@81@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
        r@81@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            1)
          (and
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  2)))
            (= _err@79@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
            0)
          (and
            (not (= _err@79@01 $Ref.null))
            (=
              r@81@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    r@81@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))
    r@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 72 | _err@79@01 == Null | live]
; [else-branch: 72 | _err@79@01 != Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 72 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
; [exec]
; student := loop_target
; [exec]
; inhale _isDefined(32772479054607475)
(declare-const $t@82@01 $Snap)
(assert (= $t@82@01 $Snap.unit))
; [eval] _isDefined(32772479054607475)
(push) ; 8
(pop) ; 8
; Joined path conditions
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(set-option :timeout 0)
(push) ; 8
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 9
; [else-branch: 73 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@83@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@83@01))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@84@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@84@01))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 74 | _err@79@01 == Null | live]
; [else-branch: 74 | _err@79@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 74 | _err@79@01 == Null]
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@79@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@79@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 8
; [then-branch: 75 | _err@79@01 != Null | dead]
; [else-branch: 75 | _err@79@01 == Null | live]
(push) ; 9
; [else-branch: 75 | _err@79@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 76 | _err@79@01 == Null | live]
; [else-branch: 76 | _err@79@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 76 | _err@79@01 == Null]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (= _err@79@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= _err@79@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)))
; [eval] iter.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 77 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 77 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 77 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 78 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 78 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 78 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 79 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 79 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 79 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    _res@78@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    _res@78@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 80 | _err@79@01 == Null | live]
; [else-branch: 80 | _err@79@01 != Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 80 | _err@79@01 == Null]
; [eval] iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.list_acc[..iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 81 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 81 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 81 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), Student())
; [eval] typeof(loop_target)
; [eval] Student()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@78@01) (as Student<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@78@01) (as Student<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 82 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 82 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 82 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] student == loop_target && _isDefined(32772479054607475)
; [eval] student == loop_target
(push) ; 10
; [then-branch: 83 | False | live]
; [else-branch: 83 | True | live]
(push) ; 11
; [then-branch: 83 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 83 | True]
; [eval] _isDefined(32772479054607475)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (_isDefined $Snap.unit 32772479054607475))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (_isDefined $Snap.unit 32772479054607475)))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 8
; [then-branch: 84 | _err@79@01 != Null | dead]
; [else-branch: 84 | _err@79@01 == Null | live]
(push) ; 9
; [else-branch: 84 | _err@79@01 == Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 8
; [then-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| == 0 | dead]
; [else-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 85 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda69_35$s@85@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 9
; [then-branch: 86 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@85@01), Student[PyType])) | live]
; [else-branch: 86 | issubtype[Bool](typeof[PyType](lambda69_35$s@85@01), Student[PyType]) | live]
(push) ; 10
; [then-branch: 86 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@85@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))))
(pop) ; 10
(push) ; 10
; [else-branch: 86 | issubtype[Bool](typeof[PyType](lambda69_35$s@85@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 11
; [then-branch: 87 | !(lambda69_35$s@85@01 in First:(Second:(Second:(Second:($t@55@01))))) | live]
; [else-branch: 87 | lambda69_35$s@85@01 in First:(Second:(Second:(Second:($t@55@01)))) | live]
(push) ; 12
; [then-branch: 87 | !(lambda69_35$s@85@01 in First:(Second:(Second:(Second:($t@55@01)))))]
(assert (not
  (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(pop) ; 12
(push) ; 12
; [else-branch: 87 | lambda69_35$s@85@01 in First:(Second:(Second:(Second:($t@55@01))))]
(assert (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 13
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 13
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (and
    (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01))))
(assert (or
  (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (not
    (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (and
        (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01)))
    (or
      (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (not
        (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01)))))
(pop) ; 8
(declare-fun inv@86@01 ($Ref) $Ref)
(declare-fun img@87@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@85@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (and
              (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01)))
          (or
            (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@85@01 $Ref) (lambda69_35$s2@85@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@85@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@85@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@85@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@85@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@85@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@85@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda69_35$s1@85@01 $Ref) (lambda69_35$s2@85@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@85@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@85@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@85@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@85@01))))
      (= lambda69_35$s1@85@01 lambda69_35$s2@85@01))
    (= lambda69_35$s1@85@01 lambda69_35$s2@85@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@85@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01)))
  :pattern ((Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@87@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@86@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@86@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@86@01 self_2))))
  :pattern ((inv@86@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@85@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@85@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@85@01))))
    (and
      (= (inv@86@01 lambda69_35$s@85@01) lambda69_35$s@85@01)
      (img@87@01 lambda69_35$s@85@01)))
  :pattern ((Set_in lambda69_35$s@85@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@87@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@86@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@86@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@86@01 self_2))))))
    (= (inv@86@01 self_2) self_2))
  :pattern ((inv@86@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@88@01 ((self_2 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@86@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@86@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@86@01 self_2)))))
      (img@87@01 self_2)
      (= self_2 (inv@86@01 self_2)))
    ($Perm.min
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        (- $Perm.Write (pTaken@73@01 self_2))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        (- $Perm.Write (pTaken@73@01 self_2))
        $Perm.No)
      (pTaken@88@01 self_2))
    $Perm.No)
  
  :qid |quant-u-2337|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@86@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@86@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@86@01 self_2)))))
      (img@87@01 self_2)
      (= self_2 (inv@86@01 self_2)))
    (= (- $Perm.Write (pTaken@88@01 self_2)) $Perm.No))
  
  :qid |quant-u-2338|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda72_25$s@89@01 $Ref)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 9
; [then-branch: 88 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@89@01), Student[PyType])) | live]
; [else-branch: 88 | issubtype[Bool](typeof[PyType](lambda72_25$s@89@01), Student[PyType]) | live]
(push) ; 10
; [then-branch: 88 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@89@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))))
(pop) ; 10
(push) ; 10
; [else-branch: 88 | issubtype[Bool](typeof[PyType](lambda72_25$s@89@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 8
(declare-fun inv@90@01 ($Ref $Ref) $Ref)
(declare-fun img@91@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@89@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@89@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Set_in lambda72_25$s@89@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@89@01 $Ref) (lambda72_25$s2@89@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@89@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@89@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@89@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@89@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda72_25$s1@89@01 $Ref) (lambda72_25$s2@89@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@89@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@89@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@89@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@89@01))
      (= lambda72_25$s1@89@01 lambda72_25$s2@89@01))
    (= lambda72_25$s1@89@01 lambda72_25$s2@89@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@89@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Set_in lambda72_25$s@89@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@91@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@90@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@89@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@89@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@89@01))
    (and
      (= (inv@90@01 lambda72_25$s@89@01 course_name_3@10@01) lambda72_25$s@89@01)
      (img@91@01 lambda72_25$s@89@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@89@01))
  :pattern ((Set_in lambda72_25$s@89@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@91@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@90@01 self_1 course_name_0))))
    (and
      (= (inv@90@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@90@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@92@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@90@01 self_1 course_name_0)))
      (img@91@01 self_1 course_name_0)
      (and
        (= self_1 (inv@90@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@93@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@90@01 self_1 course_name_0)))
      (img@91@01 self_1 course_name_0)
      (and
        (= self_1 (inv@90@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (= self_1 (_checkDefined $Snap.unit student@53@01 32772479054607475))
          (= course_name_0 course_name_3@10@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@92@01 self_1 course_name_0)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      (pTaken@92@01 self_1 course_name_0))
    $Perm.No)
  
  :qid |quant-u-2341|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@90@01 self_1 course_name_0)))
      (img@91@01 self_1 course_name_0)
      (and
        (= self_1 (inv@90@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (= (- $Perm.Write (pTaken@92@01 self_1 course_name_0)) $Perm.No))
  
  :qid |quant-u-2342|))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit student@53@01 32772479054607475)
        (_checkDefined $Snap.unit student@53@01 32772479054607475))
      $Perm.Write
      $Perm.No)
    (pTaken@93@01 (_checkDefined $Snap.unit student@53@01 32772479054607475) course_name_3@10@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@90@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@90@01 self_1 course_name_0)))
      (img@91@01 self_1 course_name_0)
      (and
        (= self_1 (inv@90@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (=
      (-
        (- $Perm.Write (pTaken@92@01 self_1 course_name_0))
        (pTaken@93@01 self_1 course_name_0))
      $Perm.No))
  
  :qid |quant-u-2344|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 89 | False | dead]
; [else-branch: 89 | True | live]
(push) ; 9
; [else-branch: 89 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 90 | True | live]
; [else-branch: 90 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 90 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 10
; [then-branch: 91 | False | live]
; [else-branch: 91 | True | live]
(push) ; 11
; [then-branch: 91 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 91 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 92 | False | live]
; [else-branch: 92 | True | live]
(push) ; 13
; [then-branch: 92 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 92 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 93 | False | live]
; [else-branch: 93 | True | live]
(push) ; 15
; [then-branch: 93 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 93 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 72 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
(pop) ; 7
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 7
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= _err@79@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 94 | _err@79@01 != Null | live]
; [else-branch: 94 | _err@79@01 == Null | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 94 | _err@79@01 != Null]
(assert (not (= _err@79@01 $Ref.null)))
; [exec]
; _loop_check_before := false
; [exec]
; assert _loop_termination_flag ==> !(iter_err == null)
; [eval] _loop_termination_flag ==> !(iter_err == null)
(push) ; 8
; [then-branch: 95 | False | dead]
; [else-branch: 95 | True | live]
(push) ; 9
; [else-branch: 95 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@94@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@94@01))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@95@01 $Perm)
(assert ($Perm.isReadVar $k@95@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@95@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@95@01))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 8
; [then-branch: 96 | _err@79@01 == Null | dead]
; [else-branch: 96 | _err@79@01 != Null | live]
(push) ; 9
; [else-branch: 96 | _err@79@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 97 | _err@79@01 != Null | live]
; [else-branch: 97 | _err@79@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 97 | _err@79@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (not (= _err@79@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@79@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 8
; [then-branch: 98 | _err@79@01 == Null | dead]
; [else-branch: 98 | _err@79@01 != Null | live]
(push) ; 9
; [else-branch: 98 | _err@79@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 8
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 8
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 99 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 99 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] iter.__iter_index > 0
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 100 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 100 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 100 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] iter.list_acc[iter.__iter_index - 1]
; [eval] iter.__iter_index - 1
(push) ; 10
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (=
    _res@78@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
        1)))))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 101 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 101 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 101 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] (loop_target in iter.list_acc)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    _res@78@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    _res@78@01)))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 8
; [then-branch: 102 | _err@79@01 == Null | dead]
; [else-branch: 102 | _err@79@01 != Null | live]
(push) ; 9
; [else-branch: 102 | _err@79@01 != Null]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 103 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 103 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 103 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] issubtype(typeof(loop_target), Student())
; [eval] typeof(loop_target)
; [eval] Student()
(pop) ; 9
(pop) ; 8
; Joined path conditions
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@78@01) (as Student<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@78@01) (as Student<PyType>  PyType))))
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 104 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0 | live]
; [else-branch: 104 | !(|First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 104 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| > 0]
; [eval] student == loop_target && _isDefined(32772479054607475)
; [eval] student == loop_target
(push) ; 10
; [then-branch: 105 | student@53@01 != _res@78@01 | live]
; [else-branch: 105 | student@53@01 == _res@78@01 | live]
(push) ; 11
; [then-branch: 105 | student@53@01 != _res@78@01]
(assert (not (= student@53@01 _res@78@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 105 | student@53@01 == _res@78@01]
(assert (= student@53@01 _res@78@01))
; [eval] _isDefined(32772479054607475)
(push) ; 12
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (= student@53@01 _res@78@01) (not (= student@53@01 _res@78@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (or (= student@53@01 _res@78@01) (not (= student@53@01 _res@78@01)))))
(push) ; 8
(assert (not (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (and (= student@53@01 _res@78@01) (_isDefined $Snap.unit 32772479054607475)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    0)
  (and (= student@53@01 _res@78@01) (_isDefined $Snap.unit 32772479054607475))))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= _err@79@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 106 | _err@79@01 != Null | live]
; [else-branch: 106 | _err@79@01 == Null | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 106 | _err@79@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 8
; [then-branch: 107 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| == 0 | dead]
; [else-branch: 107 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0 | live]
(push) ; 9
; [else-branch: 107 | |First:(Second:(Second:(Second:(Second:($t@55@01)))))| != 0]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(declare-const lambda69_35$s@96@01 $Ref)
(push) ; 8
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 9
; [then-branch: 108 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@96@01), Student[PyType])) | live]
; [else-branch: 108 | issubtype[Bool](typeof[PyType](lambda69_35$s@96@01), Student[PyType]) | live]
(push) ; 10
; [then-branch: 108 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@96@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))))
(pop) ; 10
(push) ; 10
; [else-branch: 108 | issubtype[Bool](typeof[PyType](lambda69_35$s@96@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 11
; [then-branch: 109 | !(lambda69_35$s@96@01 in First:(Second:(Second:(Second:($t@55@01))))) | live]
; [else-branch: 109 | lambda69_35$s@96@01 in First:(Second:(Second:(Second:($t@55@01)))) | live]
(push) ; 12
; [then-branch: 109 | !(lambda69_35$s@96@01 in First:(Second:(Second:(Second:($t@55@01)))))]
(assert (not
  (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(pop) ; 12
(push) ; 12
; [else-branch: 109 | lambda69_35$s@96@01 in First:(Second:(Second:(Second:($t@55@01))))]
(assert (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 13
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 13
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 13
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 14
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01))
(pop) ; 13
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (and
    (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01))))
(assert (or
  (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  (not
    (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (and
        (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01)))
    (or
      (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
      (not
        (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01)))))
(pop) ; 8
(declare-fun inv@97@01 ($Ref) $Ref)
(declare-fun img@98@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@96@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (and
              (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01)))
          (or
            (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@96@01 $Ref) (lambda69_35$s2@96@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@96@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@96@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@96@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@96@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@96@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@96@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda69_35$s1@96@01 $Ref) (lambda69_35$s2@96@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@96@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@96@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@96@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@96@01))))
      (= lambda69_35$s1@96@01 lambda69_35$s2@96@01))
    (= lambda69_35$s1@96@01 lambda69_35$s2@96@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@96@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01)))
  :pattern ((Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@98@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@97@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@97@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@97@01 self_2))))
  :pattern ((inv@97@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@96@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@96@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@96@01))))
    (and
      (= (inv@97@01 lambda69_35$s@96@01) lambda69_35$s@96@01)
      (img@98@01 lambda69_35$s@96@01)))
  :pattern ((Set_in lambda69_35$s@96@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@98@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@97@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@97@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@97@01 self_2))))))
    (= (inv@97@01 self_2) self_2))
  :pattern ((inv@97@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@99@01 ((self_2 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@97@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@97@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@97@01 self_2)))))
      (img@98@01 self_2)
      (= self_2 (inv@97@01 self_2)))
    ($Perm.min
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        (- $Perm.Write (pTaken@73@01 self_2))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@60@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@59@01 self_2)) (as Student<PyType>  PyType))
            (and
              (Set_in (inv@59@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
              (not
                (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)) (inv@59@01 self_2))))))
        (- $Perm.Write (pTaken@73@01 self_2))
        $Perm.No)
      (pTaken@99@01 self_2))
    $Perm.No)
  
  :qid |quant-u-2347|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@97@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@97@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)) (inv@97@01 self_2)))))
      (img@98@01 self_2)
      (= self_2 (inv@97@01 self_2)))
    (= (- $Perm.Write (pTaken@99@01 self_2)) $Perm.No))
  
  :qid |quant-u-2348|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda72_25$s@100@01 $Ref)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 9
; [then-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@100@01), Student[PyType])) | live]
; [else-branch: 110 | issubtype[Bool](typeof[PyType](lambda72_25$s@100@01), Student[PyType]) | live]
(push) ; 10
; [then-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@100@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))))
(pop) ; 10
(push) ; 10
; [else-branch: 110 | issubtype[Bool](typeof[PyType](lambda72_25$s@100@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 11
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 11
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 11
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 12
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 11
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 8
(declare-fun inv@101@01 ($Ref $Ref) $Ref)
(declare-fun img@102@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@100@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@100@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Set_in lambda72_25$s@100@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@100@01 $Ref) (lambda72_25$s2@100@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@100@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@100@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@100@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@100@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 8
(assert (not (forall ((lambda72_25$s1@100@01 $Ref) (lambda72_25$s2@100@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@100@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@100@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@100@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@100@01))
      (= lambda72_25$s1@100@01 lambda72_25$s2@100@01))
    (= lambda72_25$s1@100@01 lambda72_25$s2@100@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@100@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Set_in lambda72_25$s@100@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@102@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@101@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@100@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@100@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@100@01))
    (and
      (=
        (inv@101@01 lambda72_25$s@100@01 course_name_3@10@01)
        lambda72_25$s@100@01)
      (img@102@01 lambda72_25$s@100@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@100@01))
  :pattern ((Set_in lambda72_25$s@100@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@102@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@101@01 self_1 course_name_0))))
    (and
      (= (inv@101@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@101@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@103@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@101@01 self_1 course_name_0)))
      (img@102@01 self_1 course_name_0)
      (and
        (= self_1 (inv@101@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@104@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@101@01 self_1 course_name_0)))
      (img@102@01 self_1 course_name_0)
      (and
        (= self_1 (inv@101@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (= self_1 (_checkDefined $Snap.unit student@53@01 32772479054607475))
          (= course_name_0 course_name_3@10@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@103@01 self_1 course_name_0)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      (pTaken@103@01 self_1 course_name_0))
    $Perm.No)
  
  :qid |quant-u-2351|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@101@01 self_1 course_name_0)))
      (img@102@01 self_1 course_name_0)
      (and
        (= self_1 (inv@101@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (= (- $Perm.Write (pTaken@103@01 self_1 course_name_0)) $Perm.No))
  
  :qid |quant-u-2352|))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (_checkDefined $Snap.unit student@53@01 32772479054607475)
        (_checkDefined $Snap.unit student@53@01 32772479054607475))
      $Perm.Write
      $Perm.No)
    (pTaken@104@01 (_checkDefined $Snap.unit student@53@01 32772479054607475) course_name_3@10@01))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@101@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))))) (as Student<PyType>  PyType)))
          (inv@101@01 self_1 course_name_0)))
      (img@102@01 self_1 course_name_0)
      (and
        (= self_1 (inv@101@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (=
      (-
        (- $Perm.Write (pTaken@103@01 self_1 course_name_0))
        (pTaken@104@01 self_1 course_name_0))
      $Perm.No))
  
  :qid |quant-u-2354|))))
(check-sat)
; unsat
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 111 | False | dead]
; [else-branch: 111 | True | live]
(push) ; 9
; [else-branch: 111 | True]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | True | live]
; [else-branch: 112 | False | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 112 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 10
; [then-branch: 113 | False | live]
; [else-branch: 113 | True | live]
(push) ; 11
; [then-branch: 113 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 113 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 12
; [then-branch: 114 | False | live]
; [else-branch: 114 | True | live]
(push) ; 13
; [then-branch: 114 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 114 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 14
; [then-branch: 115 | False | live]
; [else-branch: 115 | True | live]
(push) ; 15
; [then-branch: 115 | False]
(assert false)
(pop) ; 15
(push) ; 15
; [else-branch: 115 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 94 | _err@79@01 == Null]
(assert (= _err@79@01 $Ref.null))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 56 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
(pop) ; 6
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@52@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@52@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 116 | iter_err@52@01 != Null | live]
; [else-branch: 116 | iter_err@52@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 116 | iter_err@52@01 != Null]
(assert (not (= iter_err@52@01 $Ref.null)))
; [exec]
; exhale perm(MustTerminate(_cthread_164)) > none ==>
;   acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_164)) > none
; [eval] perm(MustTerminate(_cthread_164))
; [then-branch: 117 | False | dead]
; [else-branch: 117 | True | live]
(push) ; 7
; [else-branch: 117 | True]
; [exec]
; _cwl_164 := Iterator___del__(_cthread_164, _method_measures_164, _residue_166,
;   iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@105@01 $Perm)
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 ($Snap.combine ($Snap.first $t@106@01) ($Snap.second $t@106@01))))
(assert (= ($Snap.first $t@106@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@106@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@106@01))
    ($Snap.second ($Snap.second $t@106@01)))))
(assert (= ($Snap.first ($Snap.second $t@106@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@106@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@106@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@106@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@106@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_166@33@01 _current_wait_level_150@105@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@106@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))) | dead]
; [else-branch: 118 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 118 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 119 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1))) | dead]
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 119 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))) | live]
; [else-branch: 120 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 120 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  students@9@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@01)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label post_loop
; [exec]
; label __end
(declare-const lambda67_29$s@107@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda67_29$s), Student()) && (lambda67_29$s in students.set_acc)
; [eval] issubtype(typeof(lambda67_29$s), Student())
; [eval] typeof(lambda67_29$s)
; [eval] Student()
(push) ; 12
; [then-branch: 121 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@107@01), Student[PyType])) | live]
; [else-branch: 121 | issubtype[Bool](typeof[PyType](lambda67_29$s@107@01), Student[PyType]) | live]
(push) ; 13
; [then-branch: 121 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@107@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 121 | issubtype[Bool](typeof[PyType](lambda67_29$s@107@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType)))
; [eval] (lambda67_29$s in students.set_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))
  (Set_in lambda67_29$s@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(pop) ; 11
(declare-fun inv@108@01 ($Ref $Ref) $Ref)
(declare-fun img@109@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda67_29$s@107@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda67_29$s@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda67_29$s1@107@01 $Ref) (lambda67_29$s2@107@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s1@107@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s1@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s2@107@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s2@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (= lambda67_29$s1@107@01 lambda67_29$s2@107@01))
    (= lambda67_29$s1@107@01 lambda67_29$s2@107@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda67_29$s@107@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@107@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    (and
      (=
        (inv@108@01 lambda67_29$s@107@01 course_name_3@10@01)
        lambda67_29$s@107@01)
      (img@109@01 lambda67_29$s@107@01 course_name_3@10@01)))
  :pattern ((Set_in lambda67_29$s@107@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@109@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@108@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@108@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    (and
      (= (inv@108@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@108@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@110@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@108@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@108@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (img@109@01 self_1 course_name_0)
      (and
        (= self_1 (inv@108@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@63@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@62@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))) (as Student<PyType>  PyType)))
              (inv@62@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      (pTaken@110@01 self_1 course_name_0))
    $Perm.No)
  
  :qid |quant-u-2357|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@108@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@108@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
      (img@109@01 self_1 course_name_0)
      (and
        (= self_1 (inv@108@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (= (- $Perm.Write (pTaken@110@01 self_1 course_name_0)) $Perm.No))
  
  :qid |quant-u-2358|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 116 | iter_err@52@01 == Null]
(assert (= iter_err@52@01 $Ref.null))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 17 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
(pop) ; 3
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 3
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= _err@42@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 122 | _err@42@01 != Null | live]
; [else-branch: 122 | _err@42@01 == Null | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 122 | _err@42@01 != Null]
(assert (not (= _err@42@01 $Ref.null)))
; [exec]
; seqtmp := set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 4
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@111@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@111@01))
(declare-const seqtmp@112@01 Seq<$Ref>)
(assert (=
  seqtmp@112@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01)))
; [exec]
; _loop_original_must_terminate := perm(MustTerminate(_cthread_164))
; [eval] perm(MustTerminate(_cthread_164))
(declare-const _loop_original_must_terminate@113@01 $Perm)
(assert (= _loop_original_must_terminate@113@01 $Perm.No))
; [exec]
; _loop_termination_flag := false
; [exec]
; _loop_check_before := true
(declare-const _loop_measures@114@01 Seq<Measure$>)
(declare-const _cwl_164@115@01 $Perm)
(declare-const loop_target@116@01 $Ref)
(declare-const iter_err@117@01 $Ref)
(declare-const student@118@01 $Ref)
(declare-const _loop_check_before@119@01 Bool)
(set-option :timeout 0)
(push) ; 4
; Loop head block: Check well-definedness of invariant
(declare-const $t@120@01 $Snap)
(assert (= $t@120@01 ($Snap.combine ($Snap.first $t@120@01) ($Snap.second $t@120@01))))
(assert (= ($Snap.first $t@120@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _residue_166)
(assert (=
  ($Snap.second $t@120@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@120@01))
    ($Snap.second ($Snap.second $t@120@01)))))
(assert (= ($Snap.first ($Snap.second $t@120@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _residue_166)
(assert (=
  ($Snap.second ($Snap.second $t@120@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@120@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@120@01))) $Snap.unit))
; [eval] _residue_164 <= _residue_166
(assert (<= _residue_164@8@01 _residue_166@33@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@120@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  $Snap.unit))
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@121@01))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  $Snap.unit))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert (Seq_equal
  seqtmp@112@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | iter_err@117@01 == Null | live]
; [else-branch: 123 | iter_err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 123 | iter_err@117@01 == Null]
(assert (= iter_err@117@01 $Ref.null))
; [eval] iter.__iter_index - 1 == |iter.__previous|
; [eval] iter.__iter_index - 1
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 123 | iter_err@117@01 != Null]
(assert (not (= iter_err@117@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= iter_err@117@01 $Ref.null)) (= iter_err@117@01 $Ref.null)))
(assert (=>
  (= iter_err@117@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | iter_err@117@01 != Null | live]
; [else-branch: 124 | iter_err@117@01 == Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 124 | iter_err@117@01 != Null]
(assert (not (= iter_err@117@01 $Ref.null)))
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(push) ; 6
; [else-branch: 124 | iter_err@117@01 == Null]
(assert (= iter_err@117@01 $Ref.null))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (= iter_err@117@01 $Ref.null) (not (= iter_err@117@01 $Ref.null))))
(assert (=>
  (not (= iter_err@117@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@117@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | iter_err@117@01 == Null | live]
; [else-branch: 125 | iter_err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 125 | iter_err@117@01 == Null]
(assert (= iter_err@117@01 $Ref.null))
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(pop) ; 6
(push) ; 6
; [else-branch: 125 | iter_err@117@01 != Null]
(assert (not (= iter_err@117@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= iter_err@117@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index >= 0
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
  $Snap.unit))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0 | dead]
; [else-branch: 126 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 126 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 127 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0 | dead]
; [else-branch: 127 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 127 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 128 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0 | dead]
; [else-branch: 128 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 128 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
  $Snap.unit))
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= iter_err@117@01 $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 129 | iter_err@117@01 == Null | dead]
; [else-branch: 129 | iter_err@117@01 != Null | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 129 | iter_err@117@01 != Null]
(assert (not (= iter_err@117@01 $Ref.null)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= iter_err@117@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 130 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0 | dead]
; [else-branch: 130 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 130 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 131 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0 | dead]
; [else-branch: 131 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 131 | !(|First:(Second:(Second:(Second:(Second:($t@120@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
  $Snap.unit))
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | iter_err@117@01 != Null | live]
; [else-branch: 132 | iter_err@117@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 132 | iter_err@117@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (= iter_err@117@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
  $Snap.unit))
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| == 0 | live]
; [else-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 133 | |First:(Second:(Second:(Second:(Second:($t@120@01)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  0))
; [eval] iter_err != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  0))
(assert (=>
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)
  (not (= iter_err@117@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
(declare-const lambda69_35$s@123@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 6
; [then-branch: 134 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@123@01), Student[PyType])) | live]
; [else-branch: 134 | issubtype[Bool](typeof[PyType](lambda69_35$s@123@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 134 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@123@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 134 | issubtype[Bool](typeof[PyType](lambda69_35$s@123@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 8
; [then-branch: 135 | !(lambda69_35$s@123@01 in First:(Second:(Second:(Second:($t@120@01))))) | live]
; [else-branch: 135 | lambda69_35$s@123@01 in First:(Second:(Second:(Second:($t@120@01)))) | live]
(push) ; 9
; [then-branch: 135 | !(lambda69_35$s@123@01 in First:(Second:(Second:(Second:($t@120@01)))))]
(assert (not
  (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 135 | lambda69_35$s@123@01 in First:(Second:(Second:(Second:($t@120@01))))]
(assert (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  (and
    (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))))
(assert (or
  (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  (not
    (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
      (and
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
    (or
      (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
      (not
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))))
(pop) ; 5
(declare-fun inv@124@01 ($Ref) $Ref)
(declare-fun img@125@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (and
              (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
          (or
            (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (not
              (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@123@01 $Ref) (lambda69_35$s2@123@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@123@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@123@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@123@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@123@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@123@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@123@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda69_35$s1@123@01 $Ref) (lambda69_35$s2@123@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@123@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@123@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@123@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@123@01))))
      (= lambda69_35$s1@123@01 lambda69_35$s2@123@01))
    (= lambda69_35$s1@123@01 lambda69_35$s2@123@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2360|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@125@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@124@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@124@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) (inv@124@01 self_2))))
  :pattern ((inv@124@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))))
    (and
      (= (inv@124@01 lambda69_35$s@123@01) lambda69_35$s@123@01)
      (img@125@01 lambda69_35$s@123@01)))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2360|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@125@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@124@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@124@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) (inv@124@01 self_2))))))
    (= (inv@124@01 self_2) self_2))
  :pattern ((inv@124@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))))
(declare-const lambda72_25$s@126@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 6
; [then-branch: 136 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@126@01), Student[PyType])) | live]
; [else-branch: 136 | issubtype[Bool](typeof[PyType](lambda72_25$s@126@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 136 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@126@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 136 | issubtype[Bool](typeof[PyType](lambda72_25$s@126@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 5
(declare-fun inv@127@01 ($Ref $Ref) $Ref)
(declare-fun img@128@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@126@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@126@01 $Ref) (lambda72_25$s2@126@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@126@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@126@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@126@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@126@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda72_25$s1@126@01 $Ref) (lambda72_25$s2@126@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@126@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@126@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@126@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@126@01))
      (= lambda72_25$s1@126@01 lambda72_25$s2@126@01))
    (= lambda72_25$s1@126@01 lambda72_25$s2@126@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2362|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@128@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@127@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@126@01))
    (and
      (=
        (inv@127@01 lambda72_25$s@126@01 course_name_3@10@01)
        lambda72_25$s@126@01)
      (img@128@01 lambda72_25$s@126@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2362|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@128@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
          (inv@127@01 self_1 course_name_0))))
    (and
      (= (inv@127@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@127@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
  $Snap.unit))
(pop) ; 4
(push) ; 4
; Loop head block: Establish invariant
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] iter.list_acc == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@129@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@129@01))
; [eval] seqtmp == set___sil_seq__(iterable)
; [eval] set___sil_seq__(iterable)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@130@01 $Perm)
(assert ($Perm.isReadVar $k@130@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@130@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@130@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  seqtmp@112@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  seqtmp@112@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))) students@9@01)))
; [eval] iter_err == null ==> iter.__iter_index - 1 == |iter.__previous|
; [eval] iter_err == null
(push) ; 5
; [then-branch: 137 | _err@42@01 == Null | dead]
; [else-branch: 137 | _err@42@01 != Null | live]
(push) ; 6
; [else-branch: 137 | _err@42@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err != null ==> iter.__iter_index == |iter.__previous|
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | _err@42@01 != Null | live]
; [else-branch: 138 | _err@42@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 138 | _err@42@01 != Null]
; [eval] iter.__iter_index == |iter.__previous|
; [eval] |iter.__previous|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (not (= _err@42@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= _err@42@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01))))))))))))))
; [eval] iter_err == null ==> |iter.list_acc| > 0
; [eval] iter_err == null
(push) ; 5
; [then-branch: 139 | _err@42@01 == Null | dead]
; [else-branch: 139 | _err@42@01 != Null | live]
(push) ; 6
; [else-branch: 139 | _err@42@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter.__iter_index >= 0
(push) ; 5
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  0))
; [eval] iter.__iter_index <= |iter.list_acc|
; [eval] |iter.list_acc|
(push) ; 5
(assert (not (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
; [eval] |iter.list_acc| > 0 ==> iter.__iter_index > 0
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | dead]
; [else-branch: 140 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 140 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)))
; [eval] |iter.list_acc| > 0 ==> loop_target == iter.list_acc[iter.__iter_index - 1]
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 141 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | dead]
; [else-branch: 141 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 141 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> (loop_target in iter.list_acc)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 142 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | dead]
; [else-branch: 142 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 142 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err == null ==> iter.__previous == iter.list_acc[..iter.__iter_index - 1]
; [eval] iter_err == null
(push) ; 5
; [then-branch: 143 | _err@42@01 == Null | dead]
; [else-branch: 143 | _err@42@01 != Null | live]
(push) ; 6
; [else-branch: 143 | _err@42@01 != Null]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> issubtype(typeof(loop_target), Student())
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 144 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | dead]
; [else-branch: 144 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 144 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| > 0 ==> student == loop_target && _isDefined(32772479054607475)
; [eval] |iter.list_acc| > 0
; [eval] |iter.list_acc|
(push) ; 5
; [then-branch: 145 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0 | dead]
; [else-branch: 145 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0) | live]
(push) ; 6
; [else-branch: 145 | !(|First:(Second:(Second:(Second:(Second:($t@38@01)))))| > 0)]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] iter_err != null ==> iter.__previous == iter.list_acc
; [eval] iter_err != null
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (= _err@42@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | _err@42@01 != Null | live]
; [else-branch: 146 | _err@42@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 146 | _err@42@01 != Null]
; [eval] iter.__previous == iter.list_acc
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] |iter.list_acc| == 0 ==> iter_err != null
; [eval] |iter.list_acc| == 0
; [eval] |iter.list_acc|
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 147 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| == 0 | live]
; [else-branch: 147 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 147 | |First:(Second:(Second:(Second:(Second:($t@38@01)))))| == 0]
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
; [eval] iter_err != null
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
  0))
(push) ; 5
(assert (not (=>
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (not (= _err@42@01 $Ref.null)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
    0)
  (not (= _err@42@01 $Ref.null))))
(declare-const lambda69_35$s@131@01 $Ref)
(push) ; 5
; [eval] issubtype(typeof(lambda69_35$s), Student()) && ((lambda69_35$s in students_0.set_acc) && !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s))
; [eval] issubtype(typeof(lambda69_35$s), Student())
; [eval] typeof(lambda69_35$s)
; [eval] Student()
(push) ; 6
; [then-branch: 148 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@131@01), Student[PyType])) | live]
; [else-branch: 148 | issubtype[Bool](typeof[PyType](lambda69_35$s@131@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 148 | !(issubtype[Bool](typeof[PyType](lambda69_35$s@131@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 148 | issubtype[Bool](typeof[PyType](lambda69_35$s@131@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType)))
; [eval] (lambda69_35$s in students_0.set_acc)
(push) ; 8
; [then-branch: 149 | !(lambda69_35$s@131@01 in First:(Second:(Second:(Second:(Second:($t@12@01)))))) | live]
; [else-branch: 149 | lambda69_35$s@131@01 in First:(Second:(Second:(Second:(Second:($t@12@01))))) | live]
(push) ; 9
; [then-branch: 149 | !(lambda69_35$s@131@01 in First:(Second:(Second:(Second:(Second:($t@12@01))))))]
(assert (not
  (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(pop) ; 9
(push) ; 9
; [else-branch: 149 | lambda69_35$s@131@01 in First:(Second:(Second:(Second:(Second:($t@12@01)))))]
(assert (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
; [eval] !PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___contains__(PSeq___create__(iter.__previous, Student()), lambda69_35$s)
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 10
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 10
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 10
; [eval] issubtype(typeof(self), PSeq(PSeq_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] PSeq(PSeq_arg(typeof(self), 0))
; [eval] PSeq_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  (and
    (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01))))
(assert (or
  (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  (not
    (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
    (=>
      (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
      (and
        (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01)))
    (or
      (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
      (not
        (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
  (and
    (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    (not
      (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01)))))
(pop) ; 5
(declare-fun inv@132@01 ($Ref) $Ref)
(declare-fun img@133@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda69_35$s@131@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (and
              (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01)))
          (or
            (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (not
              (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(assert (forall ((lambda69_35$s1@131@01 $Ref) (lambda69_35$s2@131@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@131@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@131@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@131@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@131@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@131@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@131@01))))
  
  :qid |Student_undecided-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda69_35$s1@131@01 $Ref) (lambda69_35$s2@131@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@131@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s1@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@131@01))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s2@131@01) (as Student<PyType>  PyType))
        (and
          (Set_in lambda69_35$s2@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@131@01))))
      (= lambda69_35$s1@131@01 lambda69_35$s2@131@01))
    (= lambda69_35$s1@131@01 lambda69_35$s2@131@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda69_35$s@131@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01)))
  :pattern ((Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@133@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@132@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@132@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@132@01 self_2))))
  :pattern ((inv@132@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@131@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@131@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@131@01))))
    (and
      (= (inv@132@01 lambda69_35$s@131@01) lambda69_35$s@131@01)
      (img@133@01 lambda69_35$s@131@01)))
  :pattern ((Set_in lambda69_35$s@131@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@133@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@132@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@132@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@132@01 self_2))))))
    (= (inv@132@01 self_2) self_2))
  :pattern ((inv@132@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@134@01 ((self_2 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@132@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@132@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@132@01 self_2)))))
      (img@133@01 self_2)
      (= self_2 (inv@132@01 self_2)))
    ($Perm.min
      (ite
        (and
          (img@15@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@14@01 self_2)) (as Student<PyType>  PyType))
            (Set_in (inv@14@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@15@01 self_2)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@14@01 self_2)) (as Student<PyType>  PyType))
            (Set_in (inv@14@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
        $Perm.Write
        $Perm.No)
      (pTaken@134@01 self_2))
    $Perm.No)
  
  :qid |quant-u-2365|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@132@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@132@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)) (inv@132@01 self_2)))))
      (img@133@01 self_2)
      (= self_2 (inv@132@01 self_2)))
    (= (- $Perm.Write (pTaken@134@01 self_2)) $Perm.No))
  
  :qid |quant-u-2366|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const lambda72_25$s@135@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] issubtype(typeof(lambda72_25$s), Student()) && (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] issubtype(typeof(lambda72_25$s), Student())
; [eval] typeof(lambda72_25$s)
; [eval] Student()
(push) ; 6
; [then-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@135@01), Student[PyType])) | live]
; [else-branch: 150 | issubtype[Bool](typeof[PyType](lambda72_25$s@135@01), Student[PyType]) | live]
(push) ; 7
; [then-branch: 150 | !(issubtype[Bool](typeof[PyType](lambda72_25$s@135@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))))
(pop) ; 7
(push) ; 7
; [else-branch: 150 | issubtype[Bool](typeof[PyType](lambda72_25$s@135@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType)))
; [eval] (lambda72_25$s in PSeq___sil_seq__(PSeq___create__(iter.__previous, Student())))
; [eval] PSeq___sil_seq__(PSeq___create__(iter.__previous, Student()))
; [eval] PSeq___create__(iter.__previous, Student())
; [eval] Student()
(push) ; 8
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(pop) ; 8
; Joined path conditions
(assert (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
(push) ; 8
; [eval] issubtype(typeof(box), PSeq(PSeq_arg(typeof(box), 0)))
; [eval] typeof(box)
; [eval] PSeq(PSeq_arg(typeof(box), 0))
; [eval] PSeq_arg(typeof(box), 0)
; [eval] typeof(box)
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0))))
(assert (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))
(pop) ; 8
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
  (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
    (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
    (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
    (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))))
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
  (Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01)))
; [eval] (lambda72_25$s in students_0.set_acc)
(pop) ; 5
(declare-fun inv@136@01 ($Ref $Ref) $Ref)
(declare-fun img@137@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda72_25$s@135@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@135@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Set_in lambda72_25$s@135@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(assert (forall ((lambda72_25$s1@135@01 $Ref) (lambda72_25$s2@135@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@135@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@135@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@135@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@135@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(push) ; 5
(assert (not (forall ((lambda72_25$s1@135@01 $Ref) (lambda72_25$s2@135@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s1@135@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s1@135@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@135@01) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          lambda72_25$s2@135@01))
      (= lambda72_25$s1@135@01 lambda72_25$s2@135@01))
    (= lambda72_25$s1@135@01 lambda72_25$s2@135@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda72_25$s@135@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Set_in lambda72_25$s@135@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@137@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@136@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@136@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@135@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@135@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@135@01))
    (and
      (=
        (inv@136@01 lambda72_25$s@135@01 course_name_3@10@01)
        lambda72_25$s@135@01)
      (img@137@01 lambda72_25$s@135@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@135@01))
  :pattern ((Set_in lambda72_25$s@135@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@137@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@136@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          (inv@136@01 self_1 course_name_0))))
    (and
      (= (inv@136@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@136@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@136@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@43@01)))))))))) (as Student<PyType>  PyType)))
          (inv@136@01 self_1 course_name_0)))
      (img@137@01 self_1 course_name_0)
      (and
        (= self_1 (inv@136@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    false)
  
  :qid |quant-u-2368|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
; [eval] _loop_check_before ==> _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 151 | True | live]
; [else-branch: 151 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 151 | True]
; [eval] _loop_termination_flag || (!(iter_err == null) || perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))))
(push) ; 7
; [then-branch: 152 | False | live]
; [else-branch: 152 | True | live]
(push) ; 8
; [then-branch: 152 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 152 | True]
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 9
; [then-branch: 153 | _err@42@01 != Null | live]
; [else-branch: 153 | _err@42@01 == Null | live]
(push) ; 10
; [then-branch: 153 | _err@42@01 != Null]
(pop) ; 10
(push) ; 10
; [else-branch: 153 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
; [eval] perm(MustTerminate(_cthread_164)) == none && ((forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false))))
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
(push) ; 11
; [then-branch: 154 | False | live]
; [else-branch: 154 | True | live]
(push) ; 12
; [then-branch: 154 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 154 | True]
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
(push) ; 13
; [then-branch: 155 | False | live]
; [else-branch: 155 | True | live]
(push) ; 14
; [then-branch: 155 | False]
(assert false)
(pop) ; 14
(push) ; 14
; [else-branch: 155 | True]
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
(push) ; 15
; [then-branch: 156 | False | live]
; [else-branch: 156 | True | live]
(push) ; 16
; [then-branch: 156 | False]
(assert false)
(pop) ; 16
(push) ; 16
; [else-branch: 156 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
(push) ; 17
; [then-branch: 157 | False | live]
; [else-branch: 157 | True | live]
(push) ; 18
; [then-branch: 157 | False]
(assert false)
(pop) ; 18
(push) ; 18
; [else-branch: 157 | True]
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !_loop_check_before ==> (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false) && ((forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false) && ((forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false) && (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)))
; [eval] !_loop_check_before
(push) ; 5
; [then-branch: 158 | False | dead]
; [else-branch: 158 | True | live]
(push) ; 6
; [else-branch: 158 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 5
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@128@01 self_1 course_name_0)
      (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType)))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((inv@127@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@128@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Seq_contains
          (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
          (inv@127@01 self_1 course_name_0))))
    (and
      (= (inv@127@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@127@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2362|)))
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@126@01))
    (and
      (=
        (inv@127@01 lambda72_25$s@126@01 course_name_3@10@01)
        lambda72_25$s@126@01)
      (img@128@01 lambda72_25$s@126@01 course_name_3@10@01)))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2362|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
  $Snap.unit))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@125@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@124@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@124@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) (inv@124@01 self_2))))
  :pattern ((inv@124@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@125@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@124@01 self_2)) (as Student<PyType>  PyType))
        (and
          (Set_in (inv@124@01 self_2) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
          (not
            (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) (inv@124@01 self_2))))))
    (= (inv@124@01 self_2) self_2))
  :pattern ((inv@124@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    (and
      (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
      (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2360|)))
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))))
    (and
      (= (inv@124@01 lambda69_35$s@123@01) lambda69_35$s@123@01)
      (img@125@01 lambda69_35$s@123@01)))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |quant-u-2360|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))))
(assert (forall ((lambda72_25$s@126@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
      (Seq_contains
        (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
        lambda72_25$s@126@01))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
          (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
          (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
          (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda72_25$s@126@01) (as Student<PyType>  PyType))))))
  :pattern ((Seq_contains
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Seq_contains_trigger
    (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
    lambda72_25$s@126@01))
  :pattern ((Set_in lambda72_25$s@126@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_enrolled-aux|)))
(assert (forall ((lambda72_25$s1@126@01 $Ref) (lambda72_25$s2@126@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda72_25$s1@126@01) (as Student<PyType>  PyType))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda72_25$s1@126@01) (as Student<PyType>  PyType))
          (Seq_contains
            (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
            lambda72_25$s1@126@01))
        (issubtype<Bool> (typeof<PyType> lambda72_25$s2@126@01) (as Student<PyType>  PyType)))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___sil_seq__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))))))
  
  :qid |Student_enrolled-rcvrInj|)))
(assert ($Perm.isReadVar $k@121@01))
(assert ($Perm.isReadVar $k@122@01))
(assert (= $t@120@01 ($Snap.combine ($Snap.first $t@120@01) ($Snap.second $t@120@01))))
(assert (= ($Snap.first $t@120@01) $Snap.unit))
(assert (=
  ($Snap.second $t@120@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@120@01))
    ($Snap.second ($Snap.second $t@120@01)))))
(assert (= ($Snap.first ($Snap.second $t@120@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@120@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@120@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@120@01))) $Snap.unit))
(assert (<= _residue_164@8@01 _residue_166@33@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@120@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  $Snap.unit))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  $Snap.unit))
(assert (Seq_equal
  seqtmp@112@01
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) students@9@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  $Snap.unit))
(assert (or (not (= iter_err@117@01 $Ref.null)) (= iter_err@117@01 $Ref.null)))
(assert (=>
  (= iter_err@117@01 $Ref.null)
  (=
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
      1)
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
  $Snap.unit))
(assert (or (= iter_err@117@01 $Ref.null) (not (= iter_err@117@01 $Ref.null))))
(assert (=>
  (not (= iter_err@117@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
  $Snap.unit))
(assert (=>
  (= iter_err@117@01 $Ref.null)
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
  $Snap.unit))
(assert (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
  $Snap.unit))
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
  $Snap.unit))
(assert (not (= iter_err@117@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
  $Snap.unit))
(assert (=>
  (not (= iter_err@117@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  0))
(assert (=>
  (=
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    0)
  (not (= iter_err@117@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))))))))))))))))))))
(assert (forall ((lambda69_35$s@123@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
      (and
        (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
        (not
          (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01))))
    (and
      (=>
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
          (=>
            (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (and
              (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
              (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
              (issubtype<Bool> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) (PSeq<PyType> (PSeq_arg<PyType> (typeof<PyType> (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))) 0)))
              (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s@123@01)))
          (or
            (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (not
              (Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))))
      (or
        (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))
        (not
          (issubtype<Bool> (typeof<PyType> lambda69_35$s@123@01) (as Student<PyType>  PyType))))))
  :pattern ((Set_in lambda69_35$s@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_undecided-aux|)))
(assert (forall ((lambda69_35$s1@123@01 $Ref) (lambda69_35$s2@123@01 $Ref)) (!
  (and
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda69_35$s1@123@01) (as Student<PyType>  PyType))
        (Set_in lambda69_35$s1@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@123@01)))
    (=>
      (and
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s1@123@01) (as Student<PyType>  PyType))
          (and
            (Set_in lambda69_35$s1@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))
            (not
              (PSeq___contains__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s1@123@01))))
        (and
          (issubtype<Bool> (typeof<PyType> lambda69_35$s2@123@01) (as Student<PyType>  PyType))
          (Set_in lambda69_35$s2@123@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
      (and
        (PSeq___create__%precondition $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType))
        (PSeq___contains__%precondition $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)) lambda69_35$s2@123@01))))
  
  :qid |Student_undecided-rcvrInj|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 6
; [eval] iter_err == null
(pop) ; 6
(push) ; 6
; [eval] !(iter_err == null)
; [eval] iter_err == null
(pop) ; 6
; Loop head block: Follow loop-internal edges
; [eval] iter_err == null
; [then-branch: 159 | iter_err@117@01 == Null | dead]
; [else-branch: 159 | iter_err@117@01 != Null | live]
(push) ; 6
; [else-branch: 159 | iter_err@117@01 != Null]
(pop) ; 6
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
; [eval] !(iter_err == null)
; [eval] iter_err == null
(push) ; 6
(set-option :timeout 10)
(assert (not (= iter_err@117@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | iter_err@117@01 != Null | live]
; [else-branch: 160 | iter_err@117@01 == Null | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 160 | iter_err@117@01 != Null]
; [exec]
; exhale perm(MustTerminate(_cthread_164)) > none ==>
;   acc(MustTerminate(_cthread_164), perm(MustTerminate(_cthread_164)) -
;   _loop_original_must_terminate)
; [eval] perm(MustTerminate(_cthread_164)) > none
; [eval] perm(MustTerminate(_cthread_164))
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 7
; [else-branch: 161 | True]
; [exec]
; _cwl_164 := Iterator___del__(_cthread_164, _method_measures_164, _residue_166,
;   iter)
; [eval] _cthread_150 != null
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(push) ; 8
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const _current_wait_level_150@138@01 $Perm)
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 ($Snap.combine ($Snap.first $t@139@01) ($Snap.second $t@139@01))))
(assert (= ($Snap.first $t@139@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@139@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@139@01))
    ($Snap.second ($Snap.second $t@139@01)))))
(assert (= ($Snap.first ($Snap.second $t@139@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@139@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@139@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@139@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_166@33@01 _current_wait_level_150@138@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@139@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@139@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 162 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))) | dead]
; [else-branch: 162 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 162 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 1))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1))) | dead]
; [else-branch: 163 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 163 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0))) | live]
; [else-branch: 164 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 164 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@38@01))))))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))))) 0))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  students@9@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))) ($SortWrappers.$SnapToSet<$Ref> ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@139@01)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label post_loop
; [exec]
; label __end
(declare-const lambda67_29$s@140@01 $Ref)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(lambda67_29$s), Student()) && (lambda67_29$s in students.set_acc)
; [eval] issubtype(typeof(lambda67_29$s), Student())
; [eval] typeof(lambda67_29$s)
; [eval] Student()
(push) ; 12
; [then-branch: 165 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@140@01), Student[PyType])) | live]
; [else-branch: 165 | issubtype[Bool](typeof[PyType](lambda67_29$s@140@01), Student[PyType]) | live]
(push) ; 13
; [then-branch: 165 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@140@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))))
(pop) ; 13
(push) ; 13
; [else-branch: 165 | issubtype[Bool](typeof[PyType](lambda67_29$s@140@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType)))
; [eval] (lambda67_29$s in students.set_acc)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))
  (Set_in lambda67_29$s@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
(pop) ; 11
(declare-fun inv@141@01 ($Ref $Ref) $Ref)
(declare-fun img@142@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda67_29$s@140@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    (or
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda67_29$s@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(push) ; 11
(assert (not (forall ((lambda67_29$s1@140@01 $Ref) (lambda67_29$s2@140@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s1@140@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s1@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s2@140@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s2@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (= lambda67_29$s1@140@01 lambda67_29$s2@140@01))
    (= lambda67_29$s1@140@01 lambda67_29$s2@140@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda67_29$s@140@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@140@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
    (and
      (=
        (inv@141@01 lambda67_29$s@140@01 course_name_3@10@01)
        lambda67_29$s@140@01)
      (img@142@01 lambda67_29$s@140@01 course_name_3@10@01)))
  :pattern ((Set_in lambda67_29$s@140@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
  :qid |Student_enrolled-invOfFct|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@142@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@141@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@141@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01))))))))
    (and
      (= (inv@141@01 self_1 course_name_0) self_1)
      (= course_name_3@10@01 course_name_0)))
  :pattern ((inv@141@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@143@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@141@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@141@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (img@142@01 self_1 course_name_0)
      (and
        (= self_1 (inv@141@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    ($Perm.min
      (ite
        (and
          (img@128@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
              (inv@127@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@128@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@127@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Seq_contains
              (PSeq___sil_seq__ $Snap.unit (PSeq___create__ $Snap.unit ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))))) (as Student<PyType>  PyType)))
              (inv@127@01 self_1 course_name_0))))
        $Perm.Write
        $Perm.No)
      (pTaken@143@01 self_1 course_name_0))
    $Perm.No)
  
  :qid |quant-u-2371|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@141@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@141@01 self_1 course_name_0) ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@120@01)))))))
      (img@142@01 self_1 course_name_0)
      (and
        (= self_1 (inv@141@01 self_1 course_name_0))
        (= course_name_0 course_name_3@10@01)))
    (= (- $Perm.Write (pTaken@143@01 self_1 course_name_0)) $Perm.No))
  
  :qid |quant-u-2372|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forperm _r_2: Ref [MustInvokeBounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [MustInvokeUnbounded(_r_2)] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: false)
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: false)
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 122 | _err@42@01 == Null]
(assert (= _err@42@01 $Ref.null))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- client ----------
(declare-const _cthread_165@144@01 $Ref)
(declare-const _caller_measures_165@145@01 Seq<Measure$>)
(declare-const _residue_165@146@01 $Perm)
(declare-const _current_wait_level_165@147@01 $Perm)
(declare-const _cthread_165@148@01 $Ref)
(declare-const _caller_measures_165@149@01 Seq<Measure$>)
(declare-const _residue_165@150@01 $Perm)
(declare-const _current_wait_level_165@151@01 $Perm)
(push) ; 1
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 ($Snap.combine ($Snap.first $t@152@01) ($Snap.second $t@152@01))))
(assert (= ($Snap.first $t@152@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@148@01 $Ref.null)))
(assert (=
  ($Snap.second $t@152@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@152@01))
    ($Snap.second ($Snap.second $t@152@01)))))
(assert (= ($Snap.first ($Snap.second $t@152@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@148@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@152@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 ($Snap.combine ($Snap.first $t@153@01) ($Snap.second $t@153@01))))
(assert (= ($Snap.first $t@153@01) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseBounded] :: Level(_r_4) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@153@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@153@01))
    ($Snap.second ($Snap.second $t@153@01)))))
(assert (= ($Snap.first ($Snap.second $t@153@01)) $Snap.unit))
; [eval] (forperm _r_4: Ref [_r_4.MustReleaseUnbounded] :: Level(_r_4) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@153@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@153@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@153@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@153@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@150@01 _current_wait_level_165@151@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@153@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@154@01 $Ref)
; [exec]
; var s1: Ref
(declare-const s1@155@01 $Ref)
; [exec]
; var course: Ref
(declare-const course@156@01 $Ref)
; [exec]
; var Student_res: Ref
(declare-const Student_res@157@01 $Ref)
; [exec]
; var set_0: Ref
(declare-const set_0@158@01 $Ref)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@159@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@160@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; Student_res := new()
(declare-const Student_res@161@01 $Ref)
(assert (not (= Student_res@161@01 $Ref.null)))
(assert (not (= Student_res@161@01 course@156@01)))
(assert (not (= Student_res@161@01 _cthread_165@148@01)))
(assert (not (= Student_res@161@01 s1@155@01)))
(assert (not (= Student_res@161@01 set_0@158@01)))
(assert (not (= Student_res@161@01 Student_res@157@01)))
; [exec]
; inhale typeof(Student_res) == Student()
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 $Snap.unit))
; [eval] typeof(Student_res) == Student()
; [eval] typeof(Student_res)
; [eval] Student()
(assert (= (typeof<PyType> Student_res@161@01) (as Student<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Student_res, 31390219011862776897540027475), write)
(declare-const $t@163@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale acc(_MaySet(Student_res, 599171808763424592706404196382241875), write)
(declare-const $t@164@01 $Snap)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165 := Student___init__(_cthread_165, _method_measures_165, _residue_165,
;   Student_res, str___create__(4, 1668440397))
; [eval] str___create__(4, 1668440397)
(set-option :timeout 0)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 4 1668440397))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 4 1668440397))
; [eval] _cthread_156 != null
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
; [eval] self != null
; [eval] issubtype(typeof(self), Student())
; [eval] typeof(self)
; [eval] Student()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> Student_res@161@01) (as Student<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> Student_res@161@01) (as Student<PyType>  PyType)))
; [eval] issubtype(typeof(name), str())
; [eval] typeof(name)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 4 1668440397)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 4 1668440397)) (as str<PyType>  PyType)))
; [eval] self != null
; [eval] perm(MustTerminate(_cthread_156)) == none
; [eval] perm(MustTerminate(_cthread_156))
; [eval] (forperm _r_9: Ref [MustInvokeBounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [MustInvokeUnbounded(_r_9)] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseBounded] :: false)
; [eval] (forperm _r_9: Ref [_r_9.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_156@165@01 $Perm)
(declare-const $t@166@01 $Snap)
(assert (= $t@166@01 ($Snap.combine ($Snap.first $t@166@01) ($Snap.second $t@166@01))))
(assert (= ($Snap.first $t@166@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@166@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@166@01))
    ($Snap.second ($Snap.second $t@166@01)))))
(assert (= ($Snap.first ($Snap.second $t@166@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@166@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@166@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@166@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_165@150@01 _current_wait_level_156@165@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@166@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self.Student_name), str())
; [eval] typeof(self.Student_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  $Snap.unit))
; [eval] str___eq__(self.Student_name, name)
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))) (str___create__ $Snap.unit 4 1668440397)))
(pop) ; 3
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))) (str___create__ $Snap.unit 4 1668440397)))
(assert (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@166@01))))) (str___create__ $Snap.unit 4 1668440397)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01))))))))))
(declare-const sm@167@01 $PSF<Student_undecided>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($PSF.lookup_Student_undecided (as sm@167@01  $PSF<Student_undecided>) ($SortWrappers.$RefTo$Snap Student_res@161@01))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@166@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; s1 := Student_res
; [exec]
; inhale _isDefined(12659)
(declare-const $t@168@01 $Snap)
(assert (= $t@168@01 $Snap.unit))
; [eval] _isDefined(12659)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 12659))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 12659))
(assert (_isDefined $Snap.unit 12659))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; course := str___create__(4, 1347374915)
; [eval] str___create__(4, 1347374915)
(set-option :timeout 0)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 4 1347374915))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 4 1347374915))
(declare-const course@169@01 $Ref)
(assert (= course@169@01 (str___create__ $Snap.unit 4 1347374915)))
; [exec]
; inhale _isDefined(111546515943267)
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] _isDefined(111546515943267)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 111546515943267))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 111546515943267))
(assert (_isDefined $Snap.unit 111546515943267))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_165, set_0 := set___init__(_cthread_165, _method_measures_165, _residue_165)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(set-option :timeout 0)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@148@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@148@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@148@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@148@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@171@01 $Perm)
(declare-const res@172@01 $Ref)
(declare-const $t@173@01 $Snap)
(assert (= $t@173@01 ($Snap.combine ($Snap.first $t@173@01) ($Snap.second $t@173@01))))
(assert (= ($Snap.first $t@173@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@173@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@173@01))
    ($Snap.second ($Snap.second $t@173@01)))))
(assert (= ($Snap.first ($Snap.second $t@173@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@173@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@173@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@173@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@173@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_165@150@01 _current_wait_level_21@171@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@173@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@173@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01)))))))
(assert (not (= res@172@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@173@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@173@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@172@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@172@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_0), set(Student()))
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(Student()))
; [eval] typeof(set_0)
; [eval] set(Student())
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> res@172@01) (set<PyType> (as Student<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(_checkDefined(s1, 12659)), Student())
; [eval] issubtype(typeof(_checkDefined(s1, 12659)), Student())
; [eval] typeof(_checkDefined(s1, 12659))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Student_res@161@01 12659))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit Student_res@161@01 12659))
; [eval] Student()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Student_res@161@01 12659)) (as Student<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Student_res@161@01 12659)) (as Student<PyType>  PyType)))
; [exec]
; set_0.set_acc := Set(_checkDefined(s1, 12659))
; [eval] Set(_checkDefined(s1, 12659))
; [eval] _checkDefined(s1, 12659)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
(declare-const set_acc@175@01 Set<$Ref>)
(assert (=
  set_acc@175@01
  (Set_singleton (_checkDefined $Snap.unit Student_res@161@01 12659))))
; [exec]
; _cwl_165 := enroll_all(_cthread_165, _method_measures_165, _residue_165, set_0,
;   _checkDefined(course, 111546515943267))
; [eval] _checkDefined(course, 111546515943267)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit course@169@01 111546515943267))
(pop) ; 3
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit course@169@01 111546515943267))
; [eval] _cthread_164 != null
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
; [eval] issubtype(typeof(students), set(Student()))
; [eval] typeof(students)
; [eval] set(Student())
; [eval] Student()
; [eval] issubtype(typeof(course_name_3), str())
; [eval] typeof(course_name_3)
; [eval] str()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit course@169@01 111546515943267)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit course@169@01 111546515943267)) (as str<PyType>  PyType)))
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const lambda65_30$s@176@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda65_30$s), Student()) && (lambda65_30$s in students.set_acc)
; [eval] issubtype(typeof(lambda65_30$s), Student())
; [eval] typeof(lambda65_30$s)
; [eval] Student()
(push) ; 4
; [then-branch: 166 | !(issubtype[Bool](typeof[PyType](lambda65_30$s@176@01), Student[PyType])) | live]
; [else-branch: 166 | issubtype[Bool](typeof[PyType](lambda65_30$s@176@01), Student[PyType]) | live]
(push) ; 5
; [then-branch: 166 | !(issubtype[Bool](typeof[PyType](lambda65_30$s@176@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 166 | issubtype[Bool](typeof[PyType](lambda65_30$s@176@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType)))
; [eval] (lambda65_30$s in students.set_acc)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))
  (Set_in lambda65_30$s@176@01 set_acc@175@01)))
(pop) ; 3
(declare-fun inv@177@01 ($Ref) $Ref)
(declare-fun img@178@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda65_30$s@176@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))
      (Set_in lambda65_30$s@176@01 set_acc@175@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda65_30$s@176@01 set_acc@175@01))
  :qid |Student_undecided-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((lambda65_30$s1@176@01 $Ref) (lambda65_30$s2@176@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda65_30$s1@176@01) (as Student<PyType>  PyType))
        (Set_in lambda65_30$s1@176@01 set_acc@175@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda65_30$s2@176@01) (as Student<PyType>  PyType))
        (Set_in lambda65_30$s2@176@01 set_acc@175@01))
      (= lambda65_30$s1@176@01 lambda65_30$s2@176@01))
    (= lambda65_30$s1@176@01 lambda65_30$s2@176@01))
  
  :qid |Student_undecided-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda65_30$s@176@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda65_30$s@176@01) (as Student<PyType>  PyType))
      (Set_in lambda65_30$s@176@01 set_acc@175@01))
    (and
      (= (inv@177@01 lambda65_30$s@176@01) lambda65_30$s@176@01)
      (img@178@01 lambda65_30$s@176@01)))
  :pattern ((Set_in lambda65_30$s@176@01 set_acc@175@01))
  :qid |Student_undecided-invOfFct|)))
(assert (forall ((self_2 $Ref)) (!
  (=>
    (and
      (img@178@01 self_2)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@177@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@177@01 self_2) set_acc@175@01)))
    (= (inv@177@01 self_2) self_2))
  :pattern ((inv@177@01 self_2))
  :qid |Student_undecided-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@179@01 ((self_2 $Ref)) $Perm
  (ite
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@177@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@177@01 self_2) set_acc@175@01))
      (img@178@01 self_2)
      (= self_2 (inv@177@01 self_2)))
    ($Perm.min
      (ite (= self_2 Student_res@161@01) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@179@01 Student_res@161@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((self_2 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> (inv@177@01 self_2)) (as Student<PyType>  PyType))
        (Set_in (inv@177@01 self_2) set_acc@175@01))
      (img@178@01 self_2)
      (= self_2 (inv@177@01 self_2)))
    (= (- $Perm.Write (pTaken@179@01 self_2)) $Perm.No))
  
  :qid |quant-u-2376|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] perm(MustTerminate(_cthread_164)) == none
; [eval] perm(MustTerminate(_cthread_164))
; [eval] (forperm _r_3: Ref [MustInvokeBounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [MustInvokeUnbounded(_r_3)] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseBounded] :: false)
; [eval] (forperm _r_3: Ref [_r_3.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_164@180@01 $Perm)
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 ($Snap.combine ($Snap.first $t@181@01) ($Snap.second $t@181@01))))
(assert (= ($Snap.first $t@181@01) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseBounded] :: Level(_r_1) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@181@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@181@01))
    ($Snap.second ($Snap.second $t@181@01)))))
(assert (= ($Snap.first ($Snap.second $t@181@01)) $Snap.unit))
; [eval] (forperm _r_1: Ref [_r_1.MustReleaseUnbounded] :: Level(_r_1) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@181@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@181@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@181@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@181@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_165@150@01 _current_wait_level_164@180@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@181@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))))
(assert (Set_equal set_acc@175@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01)))))))))
(declare-const lambda67_29$s@182@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda67_29$s), Student()) && (lambda67_29$s in students.set_acc)
; [eval] issubtype(typeof(lambda67_29$s), Student())
; [eval] typeof(lambda67_29$s)
; [eval] Student()
(push) ; 4
; [then-branch: 167 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@182@01), Student[PyType])) | live]
; [else-branch: 167 | issubtype[Bool](typeof[PyType](lambda67_29$s@182@01), Student[PyType]) | live]
(push) ; 5
; [then-branch: 167 | !(issubtype[Bool](typeof[PyType](lambda67_29$s@182@01), Student[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 167 | issubtype[Bool](typeof[PyType](lambda67_29$s@182@01), Student[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType)))
; [eval] (lambda67_29$s in students.set_acc)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
  (not
    (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType)))))
(assert (and
  (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
  (Set_in lambda67_29$s@182@01 set_acc@175@01)))
(pop) ; 3
(declare-fun inv@183@01 ($Ref $Ref) $Ref)
(declare-fun img@184@01 ($Ref $Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((lambda67_29$s@182@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@182@01 set_acc@175@01))
    (or
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
      (not
        (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType)))))
  :pattern ((Set_in lambda67_29$s@182@01 set_acc@175@01))
  :qid |Student_enrolled-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((lambda67_29$s1@182@01 $Ref) (lambda67_29$s2@182@01 $Ref)) (!
  (=>
    (and
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s1@182@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s1@182@01 set_acc@175@01))
      (and
        (issubtype<Bool> (typeof<PyType> lambda67_29$s2@182@01) (as Student<PyType>  PyType))
        (Set_in lambda67_29$s2@182@01 set_acc@175@01))
      (= lambda67_29$s1@182@01 lambda67_29$s2@182@01))
    (= lambda67_29$s1@182@01 lambda67_29$s2@182@01))
  
  :qid |Student_enrolled-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((lambda67_29$s@182@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@182@01 set_acc@175@01))
    (and
      (_checkDefined%precondition $Snap.unit course@169@01 111546515943267)
      (=>
        (=
          (inv@183@01 lambda67_29$s@182@01 (_checkDefined $Snap.unit course@169@01 111546515943267))
          lambda67_29$s@182@01)
        (_checkDefined%precondition $Snap.unit course@169@01 111546515943267))))
  :pattern ((Set_in lambda67_29$s@182@01 set_acc@175@01))
  :qid |quant-u-2378|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (and
        (img@184@01 self_1 course_name_0)
        (and
          (issubtype<Bool> (typeof<PyType> (inv@183@01 self_1 course_name_0)) (as Student<PyType>  PyType))
          (Set_in (inv@183@01 self_1 course_name_0) set_acc@175@01)))
      (= (inv@183@01 self_1 course_name_0) self_1))
    (_checkDefined%precondition $Snap.unit course@169@01 111546515943267))
  :pattern ((inv@183@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
(assert (forall ((lambda67_29$s@182@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda67_29$s@182@01) (as Student<PyType>  PyType))
      (Set_in lambda67_29$s@182@01 set_acc@175@01))
    (and
      (=
        (inv@183@01 lambda67_29$s@182@01 (_checkDefined $Snap.unit course@169@01 111546515943267))
        lambda67_29$s@182@01)
      (img@184@01 lambda67_29$s@182@01 (_checkDefined $Snap.unit course@169@01 111546515943267))))
  :pattern ((Set_in lambda67_29$s@182@01 set_acc@175@01))
  :qid |quant-u-2378|)))
(assert (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (img@184@01 self_1 course_name_0)
      (and
        (issubtype<Bool> (typeof<PyType> (inv@183@01 self_1 course_name_0)) (as Student<PyType>  PyType))
        (Set_in (inv@183@01 self_1 course_name_0) set_acc@175@01)))
    (and
      (= (inv@183@01 self_1 course_name_0) self_1)
      (= (_checkDefined $Snap.unit course@169@01 111546515943267) course_name_0)))
  :pattern ((inv@183@01 self_1 course_name_0))
  :qid |Student_enrolled-fctOfInv|)))
; Permissions are non-negative
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; unfold acc(Student_enrolled(_checkDefined(s1, 12659), _checkDefined(course,
;   111546515943267)), write)
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; [eval] _checkDefined(course, 111546515943267)
(push) ; 3
; [eval] _isDefined(id)
(push) ; 4
(pop) ; 4
; Joined path conditions
(pop) ; 3
; Joined path conditions
; Precomputing data for removing quantified permissions
(define-fun pTaken@185@01 ((self_1 $Ref) (course_name_0 $Ref)) $Perm
  (ite
    (and
      (= self_1 (_checkDefined $Snap.unit Student_res@161@01 12659))
      (= course_name_0 (_checkDefined $Snap.unit course@169@01 111546515943267)))
    ($Perm.min
      (ite
        (and
          (img@184@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@183@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Set_in (inv@183@01 self_1 course_name_0) set_acc@175@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@184@01 self_1 course_name_0)
          (and
            (issubtype<Bool> (typeof<PyType> (inv@183@01 self_1 course_name_0)) (as Student<PyType>  PyType))
            (Set_in (inv@183@01 self_1 course_name_0) set_acc@175@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@185@01 self_1 course_name_0))
    $Perm.No)
  
  :qid |quant-u-2380|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((self_1 $Ref) (course_name_0 $Ref)) (!
  (=>
    (and
      (= self_1 (_checkDefined $Snap.unit Student_res@161@01 12659))
      (= course_name_0 (_checkDefined $Snap.unit course@169@01 111546515943267)))
    (= (- $Perm.Write (pTaken@185@01 self_1 course_name_0)) $Perm.No))
  
  :qid |quant-u-2381|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@186@01 $PSF<Student_enrolled>)
(declare-const s@187@01 $Snap)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (img@184@01 (_checkDefined $Snap.unit Student_res@161@01 12659) (_checkDefined $Snap.unit course@169@01 111546515943267))
    (and
      (issubtype<Bool> (typeof<PyType> (inv@183@01 (_checkDefined $Snap.unit Student_res@161@01 12659) (_checkDefined $Snap.unit course@169@01 111546515943267))) (as Student<PyType>  PyType))
      (Set_in (inv@183@01 (_checkDefined $Snap.unit Student_res@161@01 12659) (_checkDefined $Snap.unit course@169@01 111546515943267)) set_acc@175@01)))
  (and
    (not
      (=
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
          ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))
        $Snap.unit))
    (=
      ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
        ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
        ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))
      ($PSF.lookup_Student_enrolled ($SortWrappers.$SnapTo$PSF<Student_enrolled> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@181@01))))))) ($Snap.combine
        ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
        ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))
(assert (=
  ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))
  ($Snap.combine
    ($Snap.first ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))
    ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))
(assert (=
  ($Snap.first ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))
    ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))
(assert (=
  ($Snap.first ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
(assert (=
  ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))
    ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))
  $Snap.unit))
; [eval] issubtype(typeof(course_name_0), str())
; [eval] typeof(course_name_0)
; [eval] str()
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Student_res@161@01 12659)) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), Student[PyType]) | live]
; [else-branch: 168 | !(issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 168 | issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), Student[PyType])]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))))
(assert (not (= (_checkDefined $Snap.unit Student_res@161@01 12659) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_1.Student_courses), list(str()))
; [eval] typeof(self_1.Student_courses)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) (list<PyType> (as str<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))
  $Snap.unit))
; [eval] list___contains__(self_1.Student_courses, course_name_0)
(push) ; 4
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) 0))))
(declare-const $k@188@01 $Perm)
(assert ($Perm.isReadVar $k@188@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@188@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (_checkDefined $Snap.unit course@169@01 111546515943267)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@188@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))))) 0)))
  (list___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
      ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (_checkDefined $Snap.unit course@169@01 111546515943267))))
(assert (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (_checkDefined $Snap.unit course@169@01 111546515943267)))
; [eval] issubtype(typeof(self_1), GradStudent())
; [eval] typeof(self_1)
; [eval] GradStudent()
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Student_res@161@01 12659)) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), GradStudent[PyType]) | dead]
; [else-branch: 169 | !(issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), GradStudent[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 169 | !(issubtype[Bool](typeof[PyType](_checkDefined(_, Student_res@161@01, 12659)), GradStudent[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit Student_res@161@01 12659)) (as GradStudent<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Student_enrolled%trigger ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))) (_checkDefined $Snap.unit Student_res@161@01 12659) (_checkDefined $Snap.unit course@169@01 111546515943267)))
; [exec]
; assert list___contains__(_checkDefined(s1, 12659).Student_courses, _checkDefined(course,
;   111546515943267))
; [eval] list___contains__(_checkDefined(s1, 12659).Student_courses, _checkDefined(course, 111546515943267))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
; [eval] _checkDefined(course, 111546515943267)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@189@01 $Perm)
(assert ($Perm.isReadVar $k@189@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@189@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@189@01))
; [exec]
; assert list___contains__(_checkDefined(s1, 12659).Student_courses, str___create__(3,
;   6644083))
; [eval] list___contains__(_checkDefined(s1, 12659).Student_courses, str___create__(3, 6644083))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
; [eval] str___create__(3, 6644083)
(push) ; 5
(assert (str___create__%precondition $Snap.unit 3 6644083))
(pop) ; 5
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 3 6644083))
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@190@01 $Perm)
(assert ($Perm.isReadVar $k@190@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@190@01))
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083)))
(set-option :timeout 0)
(push) ; 5
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] list___contains__(_checkDefined(s1, 12659).Student_courses, str___create__(3, 6644083))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
; [eval] str___create__(3, 6644083)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@191@01 $Perm)
(assert ($Perm.isReadVar $k@191@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@191@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@191@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] list___contains__(_checkDefined(s1, 12659).Student_courses, str___create__(3, 6644083))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
; [eval] str___create__(3, 6644083)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@192@01 $Perm)
(assert ($Perm.isReadVar $k@192@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@192@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@192@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] list___contains__(_checkDefined(s1, 12659).Student_courses, str___create__(3, 6644083))
; [eval] _checkDefined(s1, 12659)
(set-option :timeout 0)
(push) ; 5
; [eval] _isDefined(id)
(push) ; 6
(pop) ; 6
; Joined path conditions
(pop) ; 5
; Joined path conditions
; [eval] str___create__(3, 6644083)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@193@01))
(set-option :timeout 0)
(push) ; 5
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
    ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($PSF.lookup_Student_enrolled (as sm@186@01  $PSF<Student_enrolled>) ($Snap.combine
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit Student_res@161@01 12659))
  ($SortWrappers.$RefTo$Snap (_checkDefined $Snap.unit course@169@01 111546515943267)))))))))) (str___create__ $Snap.unit 3 6644083))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Student___init__ ----------
(declare-const _cthread_156@194@01 $Ref)
(declare-const _caller_measures_156@195@01 Seq<Measure$>)
(declare-const _residue_156@196@01 $Perm)
(declare-const self@197@01 $Ref)
(declare-const name@198@01 $Ref)
(declare-const _current_wait_level_156@199@01 $Perm)
(declare-const _cthread_156@200@01 $Ref)
(declare-const _caller_measures_156@201@01 Seq<Measure$>)
(declare-const _residue_156@202@01 $Perm)
(declare-const self@203@01 $Ref)
(declare-const name@204@01 $Ref)
(declare-const _current_wait_level_156@205@01 $Perm)
(push) ; 1
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 ($Snap.combine ($Snap.first $t@206@01) ($Snap.second $t@206@01))))
(assert (= ($Snap.first $t@206@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@200@01 $Ref.null)))
(assert (=
  ($Snap.second $t@206@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@206@01))
    ($Snap.second ($Snap.second $t@206@01)))))
(assert (= ($Snap.first ($Snap.second $t@206@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@200@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@206@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@206@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@206@01))) $Snap.unit))
; [eval] self != null
(assert (not (= self@203@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@206@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@206@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self), Student())
; [eval] typeof(self)
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> self@203@01) (as Student<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(name), str())
; [eval] typeof(name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> name@204@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))))
  $Snap.unit))
; [eval] self != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@206@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@207@01 $Snap)
(assert (= $t@207@01 ($Snap.combine ($Snap.first $t@207@01) ($Snap.second $t@207@01))))
(assert (= ($Snap.first $t@207@01) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseBounded] :: Level(_r_7) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@207@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@207@01))
    ($Snap.second ($Snap.second $t@207@01)))))
(assert (= ($Snap.first ($Snap.second $t@207@01)) $Snap.unit))
; [eval] (forperm _r_7: Ref [_r_7.MustReleaseUnbounded] :: Level(_r_7) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@207@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@207@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@207@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@202@01 _current_wait_level_156@205@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@207@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self.Student_name), str())
; [eval] typeof(self.Student_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  $Snap.unit))
; [eval] str___eq__(self.Student_name, name)
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))) name@204@01))
(pop) ; 3
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))) name@204@01))
(assert (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@207@01))))) name@204@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@207@01)))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@208@01 $Ref)
; [exec]
; var self_7: Ref
(declare-const self_7@209@01 $Ref)
; [exec]
; var name_1: Ref
(declare-const name_1@210@01 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@211@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@212@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@213@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self) == Student()
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] typeof(self) == Student()
; [eval] typeof(self)
; [eval] Student()
(assert (= (typeof<PyType> self@203@01) (as Student<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_7 := self
; [exec]
; name_1 := name
; [eval] perm(_MaySet(self_7, 31390219011862776897540027475)) > none
; [eval] perm(_MaySet(self_7, 31390219011862776897540027475))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | True | live]
; [else-branch: 170 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 170 | True]
; [exec]
; exhale acc(_MaySet(self_7, 31390219011862776897540027475), write)
; [exec]
; inhale acc(self_7.Student_name, write)
(declare-const $t@215@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_7.Student_name := name_1
; [exec]
; _cwl_156, list_0 := list___init__(_cthread_156, _method_measures_156, _residue_156)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 4
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@200@01 1))
(pop) ; 4
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@200@01 1))
(push) ; 4
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@200@01 1)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_156@200@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 4
(pop) ; 4
; Joined path conditions
(declare-const _current_wait_level_8@216@01 $Perm)
(declare-const res@217@01 $Ref)
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 ($Snap.combine ($Snap.first $t@218@01) ($Snap.second $t@218@01))))
(assert (= ($Snap.first $t@218@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@218@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@218@01))
    ($Snap.second ($Snap.second $t@218@01)))))
(assert (= ($Snap.first ($Snap.second $t@218@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@218@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@218@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@218@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_156@202@01 _current_wait_level_8@216@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@218@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))
(assert (not (= res@217@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@217@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@217@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@217@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(str()))
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(str()))
; [eval] typeof(list_0)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> res@217@01) (list<PyType> (as str<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_7, 599171808763424592706404196382241875)) > none
; [eval] perm(_MaySet(self_7, 599171808763424592706404196382241875))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | True | live]
; [else-branch: 171 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 171 | True]
; [exec]
; exhale acc(_MaySet(self_7, 599171808763424592706404196382241875), write)
; [exec]
; inhale acc(self_7.Student_courses, write)
(declare-const $t@220@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_7.Student_courses := list_0
; [exec]
; fold acc(Student_undecided(self_7), write)
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (issubtype<Bool> (typeof<PyType> self@203@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 172 | issubtype[Bool](typeof[PyType](self@203@01), Student[PyType]) | live]
; [else-branch: 172 | !(issubtype[Bool](typeof[PyType](self@203@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 172 | issubtype[Bool](typeof[PyType](self@203@01), Student[PyType])]
; [eval] issubtype(typeof(self_2.Student_courses), list(str()))
; [eval] typeof(self_2.Student_courses)
; [eval] list(str())
; [eval] str()
; [eval] issubtype(typeof(self_2), GradStudent())
; [eval] typeof(self_2)
; [eval] GradStudent()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self@203@01) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 173 | issubtype[Bool](typeof[PyType](self@203@01), GradStudent[PyType]) | dead]
; [else-branch: 173 | !(issubtype[Bool](typeof[PyType](self@203@01), GradStudent[PyType])) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 173 | !(issubtype[Bool](typeof[PyType](self@203@01), GradStudent[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> self@203@01) (as GradStudent<PyType>  PyType))))
(assert (Student_undecided%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@217@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@218@01))))))
      $Snap.unit))) self@203@01))
; [exec]
; label __end
; [eval] issubtype(typeof(self.Student_name), str())
; [eval] typeof(self.Student_name)
; [eval] str()
; [eval] str___eq__(self.Student_name, name)
(push) ; 7
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit name@204@01 name@204@01))
(pop) ; 7
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit name@204@01 name@204@01))
(push) ; 7
(assert (not (str___eq__ $Snap.unit name@204@01 name@204@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (str___eq__ $Snap.unit name@204@01 name@204@01))
; [eval] (forperm _r_8: Ref [MustInvokeBounded(_r_8)] :: false)
; [eval] (forperm _r_8: Ref [MustInvokeUnbounded(_r_8)] :: false)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: false)
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(self_7, 599171808763424592706404196382241875)) > none)
; [eval] perm(_MaySet(self_7, 599171808763424592706404196382241875)) > none
; [eval] perm(_MaySet(self_7, 599171808763424592706404196382241875))
; [then-branch: 174 | False | dead]
; [else-branch: 174 | True | live]
(push) ; 4
; [else-branch: 174 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(self_7, 31390219011862776897540027475)) > none)
; [eval] perm(_MaySet(self_7, 31390219011862776897540027475)) > none
; [eval] perm(_MaySet(self_7, 31390219011862776897540027475))
; [then-branch: 175 | False | dead]
; [else-branch: 175 | True | live]
(push) ; 3
; [else-branch: 175 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Student_enroll ----------
(declare-const _cthread_157@221@01 $Ref)
(declare-const _caller_measures_157@222@01 Seq<Measure$>)
(declare-const _residue_157@223@01 $Perm)
(declare-const self_0@224@01 $Ref)
(declare-const course_name@225@01 $Ref)
(declare-const _current_wait_level_157@226@01 $Perm)
(declare-const _cthread_157@227@01 $Ref)
(declare-const _caller_measures_157@228@01 Seq<Measure$>)
(declare-const _residue_157@229@01 $Perm)
(declare-const self_0@230@01 $Ref)
(declare-const course_name@231@01 $Ref)
(declare-const _current_wait_level_157@232@01 $Perm)
(push) ; 1
(declare-const $t@233@01 $Snap)
(assert (= $t@233@01 ($Snap.combine ($Snap.first $t@233@01) ($Snap.second $t@233@01))))
(assert (= ($Snap.first $t@233@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@227@01 $Ref.null)))
(assert (=
  ($Snap.second $t@233@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@233@01))
    ($Snap.second ($Snap.second $t@233@01)))))
(assert (= ($Snap.first ($Snap.second $t@233@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@227@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@233@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@233@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@233@01))) $Snap.unit))
; [eval] issubtype(typeof(self_0), Student())
; [eval] typeof(self_0)
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> self_0@230@01) (as Student<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@233@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@233@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@233@01))))
  $Snap.unit))
; [eval] issubtype(typeof(course_name), str())
; [eval] typeof(course_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> course_name@231@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))
  $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@230@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@234@01 $Snap)
(assert (= $t@234@01 ($Snap.combine ($Snap.first $t@234@01) ($Snap.second $t@234@01))))
(assert (= ($Snap.first $t@234@01) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseBounded] :: Level(_r_10) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@234@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@234@01))
    ($Snap.second ($Snap.second $t@234@01)))))
(assert (= ($Snap.first ($Snap.second $t@234@01)) $Snap.unit))
; [eval] (forperm _r_10: Ref [_r_10.MustReleaseUnbounded] :: Level(_r_10) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@234@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@234@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@234@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@234@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@229@01 _current_wait_level_157@232@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@234@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@234@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@235@01 $Ref)
; [exec]
; var self_8: Ref
(declare-const self_8@236@01 $Ref)
; [exec]
; var course_name_5: Ref
(declare-const course_name_5@237@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@238@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@239@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_0) == Student()
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] typeof(self_0) == Student()
; [eval] typeof(self_0)
; [eval] Student()
(assert (= (typeof<PyType> self_0@230@01) (as Student<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_8 := self_0
; [exec]
; course_name_5 := course_name
; [exec]
; unfold acc(Student_undecided(self_8), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))))
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_0@230@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType]) | live]
; [else-branch: 176 | !(issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 176 | issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType])]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.Student_courses), list(str()))
; [eval] typeof(self_2.Student_courses)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) (list<PyType> (as str<PyType>  PyType))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_2), GradStudent())
; [eval] typeof(self_2)
; [eval] GradStudent()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_0@230@01) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType]) | dead]
; [else-branch: 177 | !(issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType])) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 177 | !(issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> self_0@230@01) (as GradStudent<PyType>  PyType))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Student_undecided%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))) self_0@230@01))
; [exec]
; _cwl_157 := list_append(_cthread_157, _method_measures_157, _residue_157, self_8.Student_courses,
;   course_name_5)
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(set-option :timeout 0)
(push) ; 5
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@227@01 1))
(pop) ; 5
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@227@01 1))
(push) ; 5
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@227@01 1)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_157@227@01 1))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) 0))))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> course_name@231@01) (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> course_name@231@01) (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01)))))))))))) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const _current_wait_level_9@241@01 $Perm)
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 ($Snap.combine ($Snap.first $t@242@01) ($Snap.second $t@242@01))))
(assert (= ($Snap.first $t@242@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@242@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@242@01))
    ($Snap.second ($Snap.second $t@242@01)))))
(assert (= ($Snap.first ($Snap.second $t@242@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@242@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@242@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@242@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@242@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_157@229@01 _current_wait_level_9@241@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@242@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton course_name@231@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))))
    (Seq_singleton course_name@231@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(Student_enrolled(self_8, course_name_5), write)
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
; [eval] issubtype(typeof(course_name_0), str())
; [eval] typeof(course_name_0)
; [eval] str()
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_0@230@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType]) | live]
; [else-branch: 178 | !(issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 178 | issubtype[Bool](typeof[PyType](self_0@230@01), Student[PyType])]
; [eval] issubtype(typeof(self_1.Student_courses), list(str()))
; [eval] typeof(self_1.Student_courses)
; [eval] list(str())
; [eval] str()
; [eval] list___contains__(self_1.Student_courses, course_name_0)
(push) ; 6
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@243@01 $Perm)
(assert ($Perm.isReadVar $k@243@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))) course_name@231@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@243@01))
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))) course_name@231@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))) course_name@231@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))) course_name@231@01))
; [eval] issubtype(typeof(self_1), GradStudent())
; [eval] typeof(self_1)
; [eval] GradStudent()
; [then-branch: 179 | issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType]) | dead]
; [else-branch: 179 | !(issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType])) | live]
(push) ; 6
; [else-branch: 179 | !(issubtype[Bool](typeof[PyType](self_0@230@01), GradStudent[PyType]))]
(assert (Student_enrolled%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@233@01))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@242@01))))
              $Snap.unit)))
        $Snap.unit)))) self_0@230@01 course_name@231@01))
; [exec]
; label __end
; [eval] (forperm _r_11: Ref [MustInvokeBounded(_r_11)] :: false)
; [eval] (forperm _r_11: Ref [MustInvokeUnbounded(_r_11)] :: false)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: false)
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: false)
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- GradStudent___init__ ----------
(declare-const _cthread_160@244@01 $Ref)
(declare-const _caller_measures_160@245@01 Seq<Measure$>)
(declare-const _residue_160@246@01 $Perm)
(declare-const self_3@247@01 $Ref)
(declare-const name_0@248@01 $Ref)
(declare-const advisor_name@249@01 $Ref)
(declare-const _current_wait_level_160@250@01 $Perm)
(declare-const _cthread_160@251@01 $Ref)
(declare-const _caller_measures_160@252@01 Seq<Measure$>)
(declare-const _residue_160@253@01 $Perm)
(declare-const self_3@254@01 $Ref)
(declare-const name_0@255@01 $Ref)
(declare-const advisor_name@256@01 $Ref)
(declare-const _current_wait_level_160@257@01 $Perm)
(push) ; 1
(declare-const $t@258@01 $Snap)
(assert (= $t@258@01 ($Snap.combine ($Snap.first $t@258@01) ($Snap.second $t@258@01))))
(assert (= ($Snap.first $t@258@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@251@01 $Ref.null)))
(assert (=
  ($Snap.second $t@258@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@258@01))
    ($Snap.second ($Snap.second $t@258@01)))))
(assert (= ($Snap.first ($Snap.second $t@258@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@251@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@258@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@258@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@258@01))) $Snap.unit))
; [eval] self_3 != null
(assert (not (= self_3@254@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@258@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@258@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_3), GradStudent())
; [eval] typeof(self_3)
; [eval] GradStudent()
(assert (issubtype<Bool> (typeof<PyType> self_3@254@01) (as GradStudent<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(name_0), str())
; [eval] typeof(name_0)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> name_0@255@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(advisor_name), str())
; [eval] typeof(advisor_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> advisor_name@256@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))))
  $Snap.unit))
; [eval] self_3 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@258@01)))))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 ($Snap.combine ($Snap.first $t@259@01) ($Snap.second $t@259@01))))
(assert (= ($Snap.first $t@259@01) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseBounded] :: Level(_r_13) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@259@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@259@01))
    ($Snap.second ($Snap.second $t@259@01)))))
(assert (= ($Snap.first ($Snap.second $t@259@01)) $Snap.unit))
; [eval] (forperm _r_13: Ref [_r_13.MustReleaseUnbounded] :: Level(_r_13) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@259@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@259@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@259@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@253@01 _current_wait_level_160@257@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@259@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(self_3.Student_name), str())
; [eval] typeof(self_3.Student_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
  $Snap.unit))
; [eval] str___eq__(self_3.Student_name, name_0)
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))) name_0@255@01))
(pop) ; 3
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))) name_0@255@01))
(assert (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))) name_0@255@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_3.GradStudent_advisor_name), str())
; [eval] typeof(self_3.GradStudent_advisor_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
  $Snap.unit))
; [eval] str___eq__(self_3.GradStudent_advisor_name, advisor_name)
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))) advisor_name@256@01))
(pop) ; 3
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))) advisor_name@256@01))
(assert (str___eq__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))) advisor_name@256@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@260@01 $Ref)
; [exec]
; var self_9: Ref
(declare-const self_9@261@01 $Ref)
; [exec]
; var name_2: Ref
(declare-const name_2@262@01 $Ref)
; [exec]
; var advisor_name_0: Ref
(declare-const advisor_name_0@263@01 $Ref)
; [exec]
; var arg: Ref
(declare-const arg@264@01 $Ref)
; [exec]
; var arg_13: Ref
(declare-const arg_13@265@01 $Ref)
; [exec]
; var error: Ref
(declare-const error@266@01 $Ref)
; [exec]
; var self_7_0: Ref
(declare-const self_7_0@267@01 $Ref)
; [exec]
; var name_1_0: Ref
(declare-const name_1_0@268@01 $Ref)
; [exec]
; var list_0_0: Ref
(declare-const list_0_0@269@01 $Ref)
; [exec]
; var list_1: Ref
(declare-const list_1@270@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@271@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@272@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_3) == GradStudent()
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 $Snap.unit))
; [eval] typeof(self_3) == GradStudent()
; [eval] typeof(self_3)
; [eval] GradStudent()
(assert (= (typeof<PyType> self_3@254@01) (as GradStudent<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_9 := self_3
; [exec]
; name_2 := name_0
; [exec]
; advisor_name_0 := advisor_name
; [exec]
; arg := self_3
; [exec]
; arg_13 := name_2
; [eval] perm(_MaySet(arg, 31390219011862776897540027475)) > none
; [eval] perm(_MaySet(arg, 31390219011862776897540027475))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | True | live]
; [else-branch: 180 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 180 | True]
; [exec]
; exhale acc(_MaySet(arg, 31390219011862776897540027475), write)
; [exec]
; inhale acc(arg.Student_name, write)
(declare-const $t@274@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; arg.Student_name := arg_13
; [exec]
; _cwl_160, list_1 := list___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(set-option :timeout 0)
(push) ; 4
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@251@01 1))
(pop) ; 4
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@251@01 1))
(push) ; 4
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@251@01 1)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@251@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 4
(pop) ; 4
; Joined path conditions
(declare-const _current_wait_level_8@275@01 $Perm)
(declare-const res@276@01 $Ref)
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@277@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@277@01))
    ($Snap.second ($Snap.second $t@277@01)))))
(assert (= ($Snap.first ($Snap.second $t@277@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@277@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@277@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@277@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_160@253@01 _current_wait_level_8@275@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@277@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
(assert (not (= res@276@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@276@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@276@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@276@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_1), list(str()))
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 $Snap.unit))
; [eval] issubtype(typeof(list_1), list(str()))
; [eval] typeof(list_1)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> res@276@01) (list<PyType> (as str<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] perm(_MaySet(arg, 599171808763424592706404196382241875)) > none
; [eval] perm(_MaySet(arg, 599171808763424592706404196382241875))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | True | live]
; [else-branch: 181 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 181 | True]
; [exec]
; exhale acc(_MaySet(arg, 599171808763424592706404196382241875), write)
; [exec]
; inhale acc(arg.Student_courses, write)
(declare-const $t@279@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; arg.Student_courses := list_1
; [exec]
; label __end_0
; [eval] perm(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607)) > none
; [eval] perm(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | True | live]
; [else-branch: 182 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 182 | True]
; [exec]
; exhale acc(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607), write)
; [exec]
; inhale acc(self_9.GradStudent_advisor_name, write)
(declare-const $t@280@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_9.GradStudent_advisor_name := advisor_name_0
; [eval] perm(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575)) > none
; [eval] perm(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | True | live]
; [else-branch: 183 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 183 | True]
; [exec]
; exhale acc(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575), write)
; [exec]
; inhale acc(self_9.GradStudent_research_only, write)
(declare-const $t@281@01 $Ref)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self_9.GradStudent_research_only := __prim__bool___box__(true)
; [eval] __prim__bool___box__(true)
(set-option :timeout 0)
(push) ; 7
(assert (__prim__bool___box__%precondition $Snap.unit true))
(pop) ; 7
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit true))
(declare-const GradStudent_research_only@282@01 $Ref)
(assert (= GradStudent_research_only@282@01 (__prim__bool___box__ $Snap.unit true)))
; [exec]
; fold acc(Student_undecided(self_9), write)
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> self_3@254@01) (as Student<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> self_3@254@01) (as Student<PyType>  PyType)))
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_3@254@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | issubtype[Bool](typeof[PyType](self_3@254@01), Student[PyType]) | live]
; [else-branch: 184 | !(issubtype[Bool](typeof[PyType](self_3@254@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 184 | issubtype[Bool](typeof[PyType](self_3@254@01), Student[PyType])]
; [eval] issubtype(typeof(self_2.Student_courses), list(str()))
; [eval] typeof(self_2.Student_courses)
; [eval] list(str())
; [eval] str()
; [eval] issubtype(typeof(self_2), GradStudent())
; [eval] typeof(self_2)
; [eval] GradStudent()
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_3@254@01) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | issubtype[Bool](typeof[PyType](self_3@254@01), GradStudent[PyType]) | live]
; [else-branch: 185 | !(issubtype[Bool](typeof[PyType](self_3@254@01), GradStudent[PyType])) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 185 | issubtype[Bool](typeof[PyType](self_3@254@01), GradStudent[PyType])]
; [eval] issubtype(typeof(self_2.GradStudent_research_only), bool())
; [eval] typeof(self_2.GradStudent_research_only)
; [eval] bool()
(push) ; 9
(assert (not (issubtype<Bool> (typeof<PyType> GradStudent_research_only@282@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> GradStudent_research_only@282@01) (as bool<PyType>  PyType)))
; [eval] bool___unbox__(self_2.GradStudent_research_only)
(push) ; 9
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit GradStudent_research_only@282@01))
(pop) ; 9
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit GradStudent_research_only@282@01))
(push) ; 9
(assert (not (bool___unbox__ $Snap.unit GradStudent_research_only@282@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (bool___unbox__ $Snap.unit GradStudent_research_only@282@01))
(assert (Student_undecided%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap res@276@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
      ($Snap.combine
        ($SortWrappers.$RefTo$Snap GradStudent_research_only@282@01)
        ($Snap.combine $Snap.unit $Snap.unit))))) self_3@254@01))
; [exec]
; label __end
; [eval] issubtype(typeof(self_3.Student_name), str())
; [eval] typeof(self_3.Student_name)
; [eval] str()
; [eval] str___eq__(self_3.Student_name, name_0)
(push) ; 9
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit name_0@255@01 name_0@255@01))
(pop) ; 9
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit name_0@255@01 name_0@255@01))
(push) ; 9
(assert (not (str___eq__ $Snap.unit name_0@255@01 name_0@255@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (str___eq__ $Snap.unit name_0@255@01 name_0@255@01))
; [eval] issubtype(typeof(self_3.GradStudent_advisor_name), str())
; [eval] typeof(self_3.GradStudent_advisor_name)
; [eval] str()
; [eval] str___eq__(self_3.GradStudent_advisor_name, advisor_name)
(push) ; 9
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(assert (str___eq__%precondition $Snap.unit advisor_name@256@01 advisor_name@256@01))
(pop) ; 9
; Joined path conditions
(assert (str___eq__%precondition $Snap.unit advisor_name@256@01 advisor_name@256@01))
(push) ; 9
(assert (not (str___eq__ $Snap.unit advisor_name@256@01 advisor_name@256@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (str___eq__ $Snap.unit advisor_name@256@01 advisor_name@256@01))
; [eval] (forperm _r_14: Ref [MustInvokeBounded(_r_14)] :: false)
; [eval] (forperm _r_14: Ref [MustInvokeUnbounded(_r_14)] :: false)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: false)
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: false)
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !(perm(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575)) > none)
; [eval] perm(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575)) > none
; [eval] perm(_MaySet(self_9, 762188039852717216076531229265621632574176793589167406805575))
; [then-branch: 186 | False | dead]
; [else-branch: 186 | True | live]
(push) ; 6
; [else-branch: 186 | True]
(pop) ; 6
(pop) ; 5
; [eval] !(perm(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607)) > none)
; [eval] perm(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607)) > none
; [eval] perm(_MaySet(self_9, 2486989373230169687252532404982400783411701687495547777607))
; [then-branch: 187 | False | dead]
; [else-branch: 187 | True | live]
(push) ; 5
; [else-branch: 187 | True]
(pop) ; 5
(pop) ; 4
; [eval] !(perm(_MaySet(arg, 599171808763424592706404196382241875)) > none)
; [eval] perm(_MaySet(arg, 599171808763424592706404196382241875)) > none
; [eval] perm(_MaySet(arg, 599171808763424592706404196382241875))
; [then-branch: 188 | False | dead]
; [else-branch: 188 | True | live]
(push) ; 4
; [else-branch: 188 | True]
(pop) ; 4
(pop) ; 3
; [eval] !(perm(_MaySet(arg, 31390219011862776897540027475)) > none)
; [eval] perm(_MaySet(arg, 31390219011862776897540027475)) > none
; [eval] perm(_MaySet(arg, 31390219011862776897540027475))
; [then-branch: 189 | False | dead]
; [else-branch: 189 | True | live]
(push) ; 3
; [else-branch: 189 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- GradStudent_enroll ----------
(declare-const _cthread_161@283@01 $Ref)
(declare-const _caller_measures_161@284@01 Seq<Measure$>)
(declare-const _residue_161@285@01 $Perm)
(declare-const self_4@286@01 $Ref)
(declare-const course_name_1@287@01 $Ref)
(declare-const _current_wait_level_161@288@01 $Perm)
(declare-const _cthread_161@289@01 $Ref)
(declare-const _caller_measures_161@290@01 Seq<Measure$>)
(declare-const _residue_161@291@01 $Perm)
(declare-const self_4@292@01 $Ref)
(declare-const course_name_1@293@01 $Ref)
(declare-const _current_wait_level_161@294@01 $Perm)
(push) ; 1
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 ($Snap.combine ($Snap.first $t@295@01) ($Snap.second $t@295@01))))
(assert (= ($Snap.first $t@295@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@289@01 $Ref.null)))
(assert (=
  ($Snap.second $t@295@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@295@01))
    ($Snap.second ($Snap.second $t@295@01)))))
(assert (= ($Snap.first ($Snap.second $t@295@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@289@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@295@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@295@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@295@01))) $Snap.unit))
; [eval] issubtype(typeof(self_4), GradStudent())
; [eval] typeof(self_4)
; [eval] GradStudent()
(assert (issubtype<Bool> (typeof<PyType> self_4@292@01) (as GradStudent<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@295@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@295@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@295@01))))
  $Snap.unit))
; [eval] issubtype(typeof(course_name_1), str())
; [eval] typeof(course_name_1)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> course_name_1@293@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))
  $Snap.unit))
; [eval] self_4 != null
(assert (not (= self_4@292@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@296@01 $Snap)
(assert (= $t@296@01 ($Snap.combine ($Snap.first $t@296@01) ($Snap.second $t@296@01))))
(assert (= ($Snap.first $t@296@01) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@296@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@296@01))
    ($Snap.second ($Snap.second $t@296@01)))))
(assert (= ($Snap.first ($Snap.second $t@296@01)) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@296@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@296@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@296@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@296@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_161@291@01 _current_wait_level_161@294@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@296@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@296@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@296@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@297@01 $Ref)
; [exec]
; var self_10: Ref
(declare-const self_10@298@01 $Ref)
; [exec]
; var course_name_6: Ref
(declare-const course_name_6@299@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@300@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@301@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale typeof(self_4) == GradStudent()
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] typeof(self_4) == GradStudent()
; [eval] typeof(self_4)
; [eval] GradStudent()
(assert (= (typeof<PyType> self_4@292@01) (as GradStudent<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _err := null
; [exec]
; self_10 := self_4
; [exec]
; course_name_6 := course_name_1
; [exec]
; unfold acc(Student_undecided(self_10), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
(assert (=
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> self_4@292@01) (as Student<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))))
; [eval] issubtype(typeof(self_2), Student())
; [eval] typeof(self_2)
; [eval] Student()
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_4@292@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType]) | live]
; [else-branch: 190 | !(issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 190 | issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType])]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.Student_courses), list(str()))
; [eval] typeof(self_2.Student_courses)
; [eval] list(str())
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) (list<PyType> (as str<PyType>  PyType))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
    $Ref.null)))
; [eval] issubtype(typeof(self_2), GradStudent())
; [eval] typeof(self_2)
; [eval] GradStudent()
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_4@292@01) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType]) | live]
; [else-branch: 191 | !(issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType])) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 191 | issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType])]
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(self_2.GradStudent_research_only), bool())
; [eval] typeof(self_2.GradStudent_research_only)
; [eval] bool()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) (as bool<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))
  $Snap.unit))
; [eval] bool___unbox__(self_2.GradStudent_research_only)
(push) ; 5
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))))
(pop) ; 5
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))))
(assert (bool___unbox__ $Snap.unit ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Student_undecided%trigger ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))) self_4@292@01))
; [exec]
; _cwl_161 := list_append(_cthread_161, _method_measures_161, _residue_161, self_10.Student_courses,
;   course_name_6)
; [eval] _cthread_9 != null
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(set-option :timeout 0)
(push) ; 5
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@289@01 1))
(pop) ; 5
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@289@01 1))
(push) ; 5
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@289@01 1)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@289@01 1))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) 0)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) 0))))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 5
(assert (not (issubtype<Bool> (typeof<PyType> course_name_1@293@01) (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> course_name_1@293@01) (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01)))))))))))) 0)))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const _current_wait_level_9@303@01 $Perm)
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(assert (= ($Snap.first ($Snap.second $t@304@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@304@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@304@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@304@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_161@291@01 _current_wait_level_9@303@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@304@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton course_name_1@293@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))))
    (Seq_singleton course_name_1@293@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] perm(_MaySet(self_10, 762188039852717216076531229265621632574176793589167406805575)) > none
; [eval] perm(_MaySet(self_10, 762188039852717216076531229265621632574176793589167406805575))
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 192 | True]
(pop) ; 5
; [eval] !(perm(_MaySet(self_10, 762188039852717216076531229265621632574176793589167406805575)) > none)
; [eval] perm(_MaySet(self_10, 762188039852717216076531229265621632574176793589167406805575)) > none
; [eval] perm(_MaySet(self_10, 762188039852717216076531229265621632574176793589167406805575))
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | True | live]
; [else-branch: 193 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 193 | True]
; [exec]
; self_10.GradStudent_research_only := __prim__bool___box__(false)
; [eval] __prim__bool___box__(false)
(push) ; 6
(assert (__prim__bool___box__%precondition $Snap.unit false))
(pop) ; 6
; Joined path conditions
(assert (__prim__bool___box__%precondition $Snap.unit false))
(declare-const GradStudent_research_only@305@01 $Ref)
(assert (= GradStudent_research_only@305@01 (__prim__bool___box__ $Snap.unit false)))
; [exec]
; fold acc(Student_enrolled(self_10, course_name_6), write)
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
; [eval] issubtype(typeof(course_name_0), str())
; [eval] typeof(course_name_0)
; [eval] str()
; [eval] issubtype(typeof(self_1), Student())
; [eval] typeof(self_1)
; [eval] Student()
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_4@292@01) (as Student<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType]) | live]
; [else-branch: 194 | !(issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType])) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 194 | issubtype[Bool](typeof[PyType](self_4@292@01), Student[PyType])]
; [eval] issubtype(typeof(self_1.Student_courses), list(str()))
; [eval] typeof(self_1.Student_courses)
; [eval] list(str())
; [eval] str()
; [eval] list___contains__(self_1.Student_courses, course_name_0)
(push) ; 7
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@306@01 $Perm)
(assert ($Perm.isReadVar $k@306@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))) course_name_1@293@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@306@01))
(assert (list___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))) course_name_1@293@01))
(set-option :timeout 0)
(push) ; 7
(assert (not (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))) course_name_1@293@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (list___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))) course_name_1@293@01))
; [eval] issubtype(typeof(self_1), GradStudent())
; [eval] typeof(self_1)
; [eval] GradStudent()
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> self_4@292@01) (as GradStudent<PyType>  PyType)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType]) | live]
; [else-branch: 195 | !(issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType])) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 195 | issubtype[Bool](typeof[PyType](self_4@292@01), GradStudent[PyType])]
; [eval] issubtype(typeof(self_1.GradStudent_research_only), bool())
; [eval] typeof(self_1.GradStudent_research_only)
; [eval] bool()
(push) ; 8
(assert (not (issubtype<Bool> (typeof<PyType> GradStudent_research_only@305@01) (as bool<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> GradStudent_research_only@305@01) (as bool<PyType>  PyType)))
; [eval] !bool___unbox__(self_1.GradStudent_research_only)
; [eval] bool___unbox__(self_1.GradStudent_research_only)
(push) ; 8
; [eval] issubtype(typeof(box), bool())
; [eval] typeof(box)
; [eval] bool()
(assert (bool___unbox__%precondition $Snap.unit GradStudent_research_only@305@01))
(pop) ; 8
; Joined path conditions
(assert (bool___unbox__%precondition $Snap.unit GradStudent_research_only@305@01))
(push) ; 8
(assert (not (not (bool___unbox__ $Snap.unit GradStudent_research_only@305@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (bool___unbox__ $Snap.unit GradStudent_research_only@305@01)))
(assert (Student_enrolled%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@295@01))))))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
              $Snap.unit)))
        ($Snap.combine
          ($SortWrappers.$RefTo$Snap GradStudent_research_only@305@01)
          ($Snap.combine $Snap.unit $Snap.unit)))))) self_4@292@01 course_name_1@293@01))
; [exec]
; label __end
; [eval] (forperm _r_17: Ref [MustInvokeBounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [MustInvokeUnbounded(_r_17)] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: false)
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: false)
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- GradStudent_enroll_override_check ----------
(declare-const _cthread_157@307@01 $Ref)
(declare-const _caller_measures_157@308@01 Seq<Measure$>)
(declare-const _residue_157@309@01 $Perm)
(declare-const self_0@310@01 $Ref)
(declare-const course_name@311@01 $Ref)
(declare-const _current_wait_level_157@312@01 $Perm)
(declare-const _cthread_157@313@01 $Ref)
(declare-const _caller_measures_157@314@01 Seq<Measure$>)
(declare-const _residue_157@315@01 $Perm)
(declare-const self_0@316@01 $Ref)
(declare-const course_name@317@01 $Ref)
(declare-const _current_wait_level_157@318@01 $Perm)
(push) ; 1
(declare-const $t@319@01 $Snap)
(assert (= $t@319@01 ($Snap.combine ($Snap.first $t@319@01) ($Snap.second $t@319@01))))
(assert (= ($Snap.first $t@319@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@313@01 $Ref.null)))
(assert (=
  ($Snap.second $t@319@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@319@01))
    ($Snap.second ($Snap.second $t@319@01)))))
(assert (= ($Snap.first ($Snap.second $t@319@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@313@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@319@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@319@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@319@01))) $Snap.unit))
; [eval] self_0 != null
(assert (not (= self_0@316@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@319@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@319@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@319@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self_0), Student())
; [eval] typeof(self_0)
; [eval] Student()
(assert (issubtype<Bool> (typeof<PyType> self_0@316@01) (as Student<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))
  $Snap.unit))
; [eval] issubtype(typeof(course_name), str())
; [eval] typeof(course_name)
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> course_name@317@01) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))
  $Snap.unit))
; [eval] self_0 != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@319@01)))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 ($Snap.combine ($Snap.first $t@320@01) ($Snap.second $t@320@01))))
(assert (= ($Snap.first $t@320@01) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseBounded] :: Level(_r_19) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@320@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@320@01))
    ($Snap.second ($Snap.second $t@320@01)))))
(assert (= ($Snap.first ($Snap.second $t@320@01)) $Snap.unit))
; [eval] (forperm _r_19: Ref [_r_19.MustReleaseUnbounded] :: Level(_r_19) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@320@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@320@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@320@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@320@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@315@01 _current_wait_level_157@318@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@320@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@320@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@320@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@320@01))))
  $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@321@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@322@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; inhale issubtype(typeof(self_0), GradStudent())
(declare-const $t@323@01 $Snap)
(assert (= $t@323@01 $Snap.unit))
; [eval] issubtype(typeof(self_0), GradStudent())
; [eval] typeof(self_0)
; [eval] GradStudent()
(assert (issubtype<Bool> (typeof<PyType> self_0@316@01) (as GradStudent<PyType>  PyType)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_157 := GradStudent_enroll(_cthread_157, _method_measures_157, _residue_157,
;   self_0, course_name)
; [eval] _cthread_161 != null
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
; [eval] issubtype(typeof(self_4), GradStudent())
; [eval] typeof(self_4)
; [eval] GradStudent()
; [eval] issubtype(typeof(course_name_1), str())
; [eval] typeof(course_name_1)
; [eval] str()
; [eval] self_4 != null
; [eval] perm(MustTerminate(_cthread_161)) == none
; [eval] perm(MustTerminate(_cthread_161))
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(declare-const _current_wait_level_161@324@01 $Perm)
(declare-const $t@325@01 $Snap)
(assert (= $t@325@01 ($Snap.combine ($Snap.first $t@325@01) ($Snap.second $t@325@01))))
(assert (= ($Snap.first $t@325@01) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseBounded] :: Level(_r_16) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@325@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@325@01))
    ($Snap.second ($Snap.second $t@325@01)))))
(assert (= ($Snap.first ($Snap.second $t@325@01)) $Snap.unit))
; [eval] (forperm _r_16: Ref [_r_16.MustReleaseUnbounded] :: Level(_r_16) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@325@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@325@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@325@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@325@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_157@315@01 _current_wait_level_161@324@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@325@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@325@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@325@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@325@01))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (forperm _r_20: Ref [MustInvokeBounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [MustInvokeUnbounded(_r_20)] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: false)
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_166@326@01 $Ref)
(declare-const _caller_measures_166@327@01 Seq<Measure$>)
(declare-const _residue_167@328@01 $Perm)
(declare-const _current_wait_level_166@329@01 $Perm)
(declare-const _cthread_166@330@01 $Ref)
(declare-const _caller_measures_166@331@01 Seq<Measure$>)
(declare-const _residue_167@332@01 $Perm)
(declare-const _current_wait_level_166@333@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@334@01 $Snap)
(assert (= $t@334@01 ($Snap.combine ($Snap.first $t@334@01) ($Snap.second $t@334@01))))
(assert (= ($Snap.first $t@334@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@330@01 $Ref.null)))
(assert (=
  ($Snap.second $t@334@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@334@01))
    ($Snap.second ($Snap.second $t@334@01)))))
(assert (= ($Snap.first ($Snap.second $t@334@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@330@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@334@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 ($Snap.combine ($Snap.first $t@335@01) ($Snap.second $t@335@01))))
(assert (= ($Snap.first $t@335@01) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseBounded] :: Level(_r_22) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@335@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@335@01))
    ($Snap.second ($Snap.second $t@335@01)))))
(assert (= ($Snap.first ($Snap.second $t@335@01)) $Snap.unit))
; [eval] (forperm _r_22: Ref [_r_22.MustReleaseUnbounded] :: Level(_r_22) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@335@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@335@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@335@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@335@01))) $Snap.unit))
; [eval] _residue_167 <= _current_wait_level_166
(assert (<= _residue_167@332@01 _current_wait_level_166@333@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@335@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@336@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@337@01 Set<_Name>)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@338@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@339@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@340@01 Set<_Name>)
(assert (=
  module_names_0@340@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@341@01 $Snap)
(assert (= $t@341@01 ($Snap.combine ($Snap.first $t@341@01) ($Snap.second $t@341@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@341@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@341@01))
    ($Snap.second ($Snap.second $t@341@01)))))
(assert (= ($Snap.first ($Snap.second $t@341@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@341@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@341@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@342@01 Set<_Name>)
(assert (=
  module_names_0@342@01
  (Set_union module_names_0@340@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 ($Snap.combine ($Snap.first $t@343@01) ($Snap.second $t@343@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@343@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@343@01))
    ($Snap.second ($Snap.second $t@343@01)))))
(assert (= ($Snap.first ($Snap.second $t@343@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@343@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@343@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@343@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@343@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@343@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@343@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@343@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@343@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@343@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(1953720652)))
; [eval] (module_names_0 union Set(_single(1953720652)))
; [eval] Set(_single(1953720652))
; [eval] _single(1953720652)
(declare-const module_names_0@344@01 Set<_Name>)
(assert (=
  module_names_0@344@01
  (Set_union module_names_0@342@01 (Set_singleton (_single<_Name> 1953720652)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(7628115)))
; [eval] (module_names_0 union Set(_single(7628115)))
; [eval] Set(_single(7628115))
; [eval] _single(7628115)
(declare-const module_names_0@345@01 Set<_Name>)
(assert (=
  module_names_0@345@01
  (Set_union module_names_0@344@01 (Set_singleton (_single<_Name> 7628115)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@346@01 Set<_Name>)
(assert (=
  module_names_0@346@01
  (Set_union module_names_0@345@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(119212982038117)))
; [eval] (module_names_0 union Set(_single(119212982038117)))
; [eval] Set(_single(119212982038117))
; [eval] _single(119212982038117)
(declare-const module_names_0@347@01 Set<_Name>)
(assert (=
  module_names_0@347@01
  (Set_union module_names_0@346@01 (Set_singleton (_single<_Name> 119212982038117)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(32772479054607443)))
; [eval] (module_names_0 union Set(_single(32772479054607443)))
; [eval] Set(_single(32772479054607443))
; [eval] _single(32772479054607443)
(declare-const module_names_0@348@01 Set<_Name>)
(assert (=
  module_names_0@348@01
  (Set_union module_names_0@347@01 (Set_singleton (_single<_Name> 32772479054607443)))))
; [exec]
; assert true && (_single(32772479054607443) in module_names_0)
; [eval] (_single(32772479054607443) in module_names_0)
; [eval] _single(32772479054607443)
(set-option :timeout 0)
(push) ; 3
(assert (not (Set_in (_single<_Name> 32772479054607443) module_names_0@348@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_in (_single<_Name> 32772479054607443) module_names_0@348@01))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872339552563453791)))
; [eval] (module_names_0 union Set(_single(6872339552563453791)))
; [eval] Set(_single(6872339552563453791))
; [eval] _single(6872339552563453791)
(declare-const module_names_0@349@01 Set<_Name>)
(assert (=
  module_names_0@349@01
  (Set_union module_names_0@348@01 (Set_singleton (_single<_Name> 6872339552563453791)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(119212982038117)))
; [eval] (module_names_0 union Set(_single(119212982038117)))
; [eval] Set(_single(119212982038117))
; [eval] _single(119212982038117)
(declare-const module_names_0@350@01 Set<_Name>)
(assert (=
  module_names_0@350@01
  (Set_union module_names_0@349@01 (Set_singleton (_single<_Name> 119212982038117)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(140756725748383967487291975)))
; [eval] (module_names_0 union Set(_single(140756725748383967487291975)))
; [eval] Set(_single(140756725748383967487291975))
; [eval] _single(140756725748383967487291975)
(declare-const module_names_0@351@01 Set<_Name>)
(assert (=
  module_names_0@351@01
  (Set_union module_names_0@350@01 (Set_singleton (_single<_Name> 140756725748383967487291975)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(512014844955839763213925)))
; [eval] (module_names_0 union Set(_single(512014844955839763213925)))
; [eval] Set(_single(512014844955839763213925))
; [eval] _single(512014844955839763213925)
(declare-const module_names_0@352@01 Set<_Name>)
(assert (=
  module_names_0@352@01
  (Set_union module_names_0@351@01 (Set_singleton (_single<_Name> 512014844955839763213925)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(128017496632419)))
; [eval] (module_names_0 union Set(_single(128017496632419)))
; [eval] Set(_single(128017496632419))
; [eval] _single(128017496632419)
(declare-const module_names_0@353@01 Set<_Name>)
(assert (=
  module_names_0@353@01
  (Set_union module_names_0@352@01 (Set_singleton (_single<_Name> 128017496632419)))))
; [exec]
; label __end
; [eval] (forperm _r_23: Ref [MustInvokeBounded(_r_23)] :: false)
; [eval] (forperm _r_23: Ref [MustInvokeUnbounded(_r_23)] :: false)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: false)
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- Iterator___next__ ----------
(declare-const _cthread_149@354@01 $Ref)
(declare-const _caller_measures_149@355@01 Seq<Measure$>)
(declare-const _residue_149@356@01 $Perm)
(declare-const self@357@01 $Ref)
(declare-const _current_wait_level_149@358@01 $Perm)
(declare-const _res@359@01 $Ref)
(declare-const _err@360@01 $Ref)
(declare-const _cthread_149@361@01 $Ref)
(declare-const _caller_measures_149@362@01 Seq<Measure$>)
(declare-const _residue_149@363@01 $Perm)
(declare-const self@364@01 $Ref)
(declare-const _current_wait_level_149@365@01 $Perm)
(declare-const _res@366@01 $Ref)
(declare-const _err@367@01 $Ref)
(push) ; 1
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
(assert (= ($Snap.first $t@368@01) $Snap.unit))
; [eval] _cthread_149 != null
(assert (not (= _cthread_149@361@01 $Ref.null)))
(assert (=
  ($Snap.second $t@368@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@368@01))
    ($Snap.second ($Snap.second $t@368@01)))))
(assert (= ($Snap.first ($Snap.second $t@368@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_149, _cthread_149, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@362@01 _cthread_149@361@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_149@362@01 _cthread_149@361@01 1))
(assert (Measure$check $Snap.unit _caller_measures_149@362@01 _cthread_149@361@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@368@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@368@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@368@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_149), Thread_0())
; [eval] typeof(_cthread_149)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_149@361@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@368@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@368@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
(assert (not (= self@364@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseBounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second $t@369@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@369@01))
    ($Snap.second ($Snap.second $t@369@01)))))
(assert (= ($Snap.first ($Snap.second $t@369@01)) $Snap.unit))
; [eval] (forperm _r_25: Ref [_r_25.MustReleaseUnbounded] :: Level(_r_25) <= _current_wait_level_149)
(assert (=
  ($Snap.second ($Snap.second $t@369@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@369@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@369@01))) $Snap.unit))
; [eval] _residue_149 <= _current_wait_level_149
(assert (<= _residue_149@363@01 _current_wait_level_149@365@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@369@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc)
; [eval] old(self.list_acc)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
  $Snap.unit))
; [eval] self.__iter_index <= |self.list_acc| + 1
; [eval] |self.list_acc| + 1
; [eval] |self.list_acc|
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
  (+
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
  $Snap.unit))
; [eval] old(self.__iter_index == |self.list_acc|) == (_err != null)
; [eval] old(self.__iter_index == |self.list_acc|)
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
; [eval] _err != null
(assert (=
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
  (not (= _err@367@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index == old(self.__iter_index) + 1
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@367@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@367@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | _err@367@01 == Null | live]
; [else-branch: 196 | _err@367@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 196 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
; [eval] self.__iter_index == old(self.__iter_index) + 1
; [eval] old(self.__iter_index) + 1
; [eval] old(self.__iter_index)
(pop) ; 4
(push) ; 4
; [else-branch: 196 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (= _err@367@01 $Ref.null)) (= _err@367@01 $Ref.null)))
(assert (=>
  (= _err@367@01 $Ref.null)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    (+
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__iter_index > 0
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@367@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@367@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | _err@367@01 == Null | live]
; [else-branch: 197 | _err@367@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 197 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 197 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@367@01 $Ref.null)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))
  $Snap.unit))
; [eval] _err == null ==> self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] _err == null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@367@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@367@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | _err@367@01 == Null | live]
; [else-branch: 198 | _err@367@01 != Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 198 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
; [eval] self.__previous == self.list_acc[..self.__iter_index - 1]
; [eval] self.list_acc[..self.__iter_index - 1]
; [eval] self.__iter_index - 1
(pop) ; 4
(push) ; 4
; [else-branch: 198 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (= _err@367@01 $Ref.null)
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    (Seq_take
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> self.__iter_index > 0
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | |First:(Second:(Second:(Second:($t@369@01))))| > 0 | live]
; [else-branch: 199 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 199 | |First:(Second:(Second:(Second:($t@369@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0))
; [eval] self.__iter_index > 0
(pop) ; 4
(push) ; 4
; [else-branch: 199 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
      0))
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)))
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__previous == self.list_acc
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@367@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@367@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | _err@367@01 != Null | live]
; [else-branch: 200 | _err@367@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 200 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
; [eval] self.__previous == self.list_acc
(pop) ; 4
(push) ; 4
; [else-branch: 200 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (= _err@367@01 $Ref.null) (not (= _err@367@01 $Ref.null))))
(assert (=>
  (not (= _err@367@01 $Ref.null))
  (Seq_equal
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))
  $Snap.unit))
; [eval] _err != null ==> self.__iter_index == |self.list_acc|
; [eval] _err != null
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= _err@367@01 $Ref.null)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= _err@367@01 $Ref.null))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | _err@367@01 != Null | live]
; [else-branch: 201 | _err@367@01 == Null | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 201 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
; [eval] self.__iter_index == |self.list_acc|
; [eval] |self.list_acc|
(pop) ; 4
(push) ; 4
; [else-branch: 201 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= _err@367@01 $Ref.null))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | |First:(Second:(Second:(Second:($t@369@01))))| > 0 | live]
; [else-branch: 202 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 202 | |First:(Second:(Second:(Second:($t@369@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0))
; [eval] _res == self.list_acc[self.__iter_index - 1] && (_res in self.list_acc)
; [eval] _res == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 5
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 203 | _res@366@01 != First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 1] | live]
; [else-branch: 203 | _res@366@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 1] | live]
(push) ; 6
; [then-branch: 203 | _res@366@01 != First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 1]]
(assert (not
  (=
    _res@366@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)))))
(pop) ; 6
(push) ; 6
; [else-branch: 203 | _res@366@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 1]]
(assert (=
  _res@366@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1))))
; [eval] (_res in self.list_acc)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    _res@366@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)))
  (not
    (=
      _res@366@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1))))))
(pop) ; 4
(push) ; 4
; [else-branch: 202 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)
  (and
    (>
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
      0)
    (or
      (=
        _res@366@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)))
      (not
        (=
          _res@366@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1))))))))
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)
  (and
    (=
      _res@366@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)))
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      _res@366@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))))
  $Snap.unit))
; [eval] |self.list_acc| > 0 ==> issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] |self.list_acc| > 0
; [eval] |self.list_acc|
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | |First:(Second:(Second:(Second:($t@369@01))))| > 0 | live]
; [else-branch: 204 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 204 | |First:(Second:(Second:(Second:($t@369@01))))| > 0]
(assert (>
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
  0))
; [eval] issubtype(typeof(_res), Iterator_arg(typeof(self), 0))
; [eval] typeof(_res)
; [eval] Iterator_arg(typeof(self), 0)
; [eval] typeof(self)
(pop) ; 4
(push) ; 4
; [else-branch: 204 | !(|First:(Second:(Second:(Second:($t@369@01))))| > 0)]
(assert (not
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
    0)
  (issubtype<Bool> (typeof<PyType> _res@366@01) (Iterator_arg<PyType> (typeof<PyType> self@364@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in self.__previous) } (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))))
(declare-const r@370@01 $Ref)
(push) ; 3
; [eval] (r in self.__previous) == ((r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])))
; [eval] (r in self.__previous)
; [eval] (r in old(self.__previous)) || (self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null) || self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1]))
; [eval] (r in old(self.__previous))
; [eval] old(self.__previous)
(push) ; 4
; [then-branch: 205 | r@370@01 in First:(Second:(Second:(Second:(Second:(Second:($t@368@01)))))) | live]
; [else-branch: 205 | !(r@370@01 in First:(Second:(Second:(Second:(Second:(Second:($t@368@01))))))) | live]
(push) ; 5
; [then-branch: 205 | r@370@01 in First:(Second:(Second:(Second:(Second:(Second:($t@368@01))))))]
(assert (Seq_contains
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
  r@370@01))
(pop) ; 5
(push) ; 5
; [else-branch: 205 | !(r@370@01 in First:(Second:(Second:(Second:(Second:(Second:($t@368@01)))))))]
(assert (not
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
    r@370@01)))
; [eval] self.__iter_index > 1 && (r == self.list_acc[self.__iter_index - 2] && _err == null)
; [eval] self.__iter_index > 1
(push) ; 6
; [then-branch: 206 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1) | live]
; [else-branch: 206 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1 | live]
(push) ; 7
; [then-branch: 206 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)))
(pop) ; 7
(push) ; 7
; [else-branch: 206 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
  1))
; [eval] r == self.list_acc[self.__iter_index - 2]
; [eval] self.list_acc[self.__iter_index - 2]
; [eval] self.__iter_index - 2
(push) ; 8
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    2)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 207 | r@370@01 != First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] | live]
; [else-branch: 207 | r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] | live]
(push) ; 9
; [then-branch: 207 | r@370@01 != First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2]]
(assert (not
  (=
    r@370@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        2)))))
(pop) ; 9
(push) ; 9
; [else-branch: 207 | r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2]]
(assert (=
  r@370@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
    (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      2))))
; [eval] _err == null
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    r@370@01
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
      (-
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        2)))
  (not
    (=
      r@370@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          2))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=>
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1)
    (or
      (=
        r@370@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            2)))
      (not
        (=
          r@370@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              2))))))))
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1))))
(push) ; 6
; [then-branch: 208 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1 && r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] && _err@367@01 == Null | live]
; [else-branch: 208 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1 && r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] && _err@367@01 == Null) | live]
(push) ; 7
; [then-branch: 208 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1 && r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] && _err@367@01 == Null]
(assert (and
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  (and
    (=
      r@370@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          2)))
    (= _err@367@01 $Ref.null))))
(pop) ; 7
(push) ; 7
; [else-branch: 208 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 1 && r@370@01 == First:(Second:(Second:(Second:($t@369@01))))[First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) - 2] && _err@367@01 == Null)]
(assert (not
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1)
    (and
      (=
        r@370@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            2)))
      (= _err@367@01 $Ref.null)))))
; [eval] self.__iter_index > 0 && (_err != null && r == self.list_acc[self.__iter_index - 1])
; [eval] self.__iter_index > 0
(push) ; 8
; [then-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 0) | live]
; [else-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 0 | live]
(push) ; 9
; [then-branch: 209 | !(First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 0)]
(assert (not
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    0)))
(pop) ; 9
(push) ; 9
; [else-branch: 209 | First:(Second:(Second:(Second:(Second:(Second:($t@369@01)))))) > 0]
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
  0))
; [eval] _err != null
(push) ; 10
; [then-branch: 210 | _err@367@01 == Null | live]
; [else-branch: 210 | _err@367@01 != Null | live]
(push) ; 11
; [then-branch: 210 | _err@367@01 == Null]
(assert (= _err@367@01 $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 210 | _err@367@01 != Null]
(assert (not (= _err@367@01 $Ref.null)))
; [eval] r == self.list_acc[self.__iter_index - 1]
; [eval] self.list_acc[self.__iter_index - 1]
; [eval] self.__iter_index - 1
(push) ; 12
(assert (not (>=
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (>
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
    0)
  (not
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1)
    (and
      (=
        r@370@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            2)))
      (= _err@367@01 $Ref.null)))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1)
    (=
      r@370@01
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
        (-
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          2)))
    (= _err@367@01 $Ref.null))))
; Joined path conditions
(assert (=>
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)
      (and
        (=
          r@370@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              2)))
        (= _err@367@01 $Ref.null))))
  (and
    (not
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)
        (and
          (=
            r@370@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                2)))
          (= _err@367@01 $Ref.null))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        0)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          0))))))
(assert (or
  (not
    (and
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)
      (and
        (=
          r@370@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              2)))
        (= _err@367@01 $Ref.null))))
  (and
    (>
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
      1)
    (and
      (=
        r@370@01
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
          (-
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            2)))
      (= _err@367@01 $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
      r@370@01))
  (and
    (not
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
        r@370@01))
    (=>
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)
        (or
          (=
            r@370@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                2)))
          (not
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))))))
    (or
      (>
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
        1)
      (not
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)))
    (=>
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)
        (and
          (=
            r@370@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                2)))
          (= _err@367@01 $Ref.null)))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)
        (=
          r@370@01
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
            (-
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              2)))
        (= _err@367@01 $Ref.null)))
    (=>
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (and
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))
            (= _err@367@01 $Ref.null))))
      (and
        (not
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (and
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (= _err@367@01 $Ref.null))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            0)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              0)))))
    (or
      (not
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (and
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))
            (= _err@367@01 $Ref.null))))
      (and
        (>
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
          1)
        (and
          (=
            r@370@01
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
              (-
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                2)))
          (= _err@367@01 $Ref.null)))))))
(assert (or
  (not
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
      r@370@01))
  (Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
    r@370@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@370@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
          r@370@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
            r@370@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (or
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (not
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (and
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (= _err@367@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))
            (= _err@367@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                1)
              (and
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))
                (= _err@367@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  1)
                (and
                  (=
                    r@370@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                        2)))
                  (= _err@367@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                1)
              (and
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))
                (= _err@367@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (and
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (= _err@367@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
          r@370@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
        r@370@01)))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    r@370@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    r@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@370@01 $Ref)) (!
  (and
    (=>
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
          r@370@01))
      (and
        (not
          (Seq_contains
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
            r@370@01))
        (=>
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (or
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (not
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))))))
        (or
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (not
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)))
        (=>
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (and
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (= _err@367@01 $Ref.null)))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))
            (= _err@367@01 $Ref.null)))
        (=>
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                1)
              (and
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))
                (= _err@367@01 $Ref.null))))
          (and
            (not
              (and
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  1)
                (and
                  (=
                    r@370@01
                    (Seq_index
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                      (-
                        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                        2)))
                  (= _err@367@01 $Ref.null))))
            (or
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                0)
              (not
                (>
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  0)))))
        (or
          (not
            (and
              (>
                ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                1)
              (and
                (=
                  r@370@01
                  (Seq_index
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                    (-
                      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                      2)))
                (= _err@367@01 $Ref.null))))
          (and
            (>
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
              1)
            (and
              (=
                r@370@01
                (Seq_index
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                  (-
                    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                    2)))
              (= _err@367@01 $Ref.null))))))
    (or
      (not
        (Seq_contains
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
          r@370@01))
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
        r@370@01)))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    r@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289-aux|)))
(assert (forall ((r@370@01 $Ref)) (!
  (=
    (Seq_contains
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
      r@370@01)
    (or
      (Seq_contains
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
        r@370@01)
      (or
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            1)
          (and
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  2)))
            (= _err@367@01 $Ref.null)))
        (and
          (>
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
            0)
          (and
            (not (= _err@367@01 $Ref.null))
            (=
              r@370@01
              (Seq_index
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))
                (-
                  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01)))))))
                  1))))))))
  :pattern ((Seq_contains
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    r@370@01))
  :pattern ((Seq_contains_trigger
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))))))
    r@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationexamplestest_student_enroll_preds.py.vpr@946@12@946@289|)))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_149: Perm
(declare-const _cwl_149@371@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Iterator___del__ ----------
(declare-const _cthread_150@372@01 $Ref)
(declare-const _caller_measures_150@373@01 Seq<Measure$>)
(declare-const _residue_150@374@01 $Perm)
(declare-const self@375@01 $Ref)
(declare-const _current_wait_level_150@376@01 $Perm)
(declare-const _cthread_150@377@01 $Ref)
(declare-const _caller_measures_150@378@01 Seq<Measure$>)
(declare-const _residue_150@379@01 $Perm)
(declare-const self@380@01 $Ref)
(declare-const _current_wait_level_150@381@01 $Perm)
(push) ; 1
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] _cthread_150 != null
(assert (not (= _cthread_150@377@01 $Ref.null)))
(assert (=
  ($Snap.second $t@382@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@382@01))
    ($Snap.second ($Snap.second $t@382@01)))))
(assert (= ($Snap.first ($Snap.second $t@382@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_150, _cthread_150, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@378@01 _cthread_150@377@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_150@378@01 _cthread_150@377@01 1))
(assert (Measure$check $Snap.unit _caller_measures_150@378@01 _cthread_150@377@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@382@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@382@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@382@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@382@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_150), Thread_0())
; [eval] typeof(_cthread_150)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_150@377@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@382@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@382@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))))
(assert (not (= self@380@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@382@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseBounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second $t@383@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@383@01))
    ($Snap.second ($Snap.second $t@383@01)))))
(assert (= ($Snap.first ($Snap.second $t@383@01)) $Snap.unit))
; [eval] (forperm _r_27: Ref [_r_27.MustReleaseUnbounded] :: Level(_r_27) <= _current_wait_level_150)
(assert (=
  ($Snap.second ($Snap.second $t@383@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@383@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@383@01))) $Snap.unit))
; [eval] _residue_150 <= _current_wait_level_150
(assert (<= _residue_150@379@01 _current_wait_level_150@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@383@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))))
; [eval] issubtype(typeof(self.__container), list(list_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] list(list_arg(typeof(self.__container), 0))
; [eval] list_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))) | live]
; [else-branch: 211 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 211 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1))) | dead]
; [else-branch: 212 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 212 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))) | dead]
; [else-branch: 213 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 213 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 211 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), list[PyType](list_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (list<PyType> (list_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))))
; [eval] issubtype(typeof(self.__container), dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1)))
; [eval] typeof(self.__container)
; [eval] dict(dict_arg(typeof(self.__container), 0), dict_arg(typeof(self.__container), 1))
; [eval] dict_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
; [eval] dict_arg(typeof(self.__container), 1)
; [eval] typeof(self.__container)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1))) | live]
; [else-branch: 214 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 214 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    $Ref.null)))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 215 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))) | dead]
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 215 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 214 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), dict[PyType](dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0), dict_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 1))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (dict<PyType> (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0) (dict_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 1)))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(self.__container), set(set_arg(typeof(self.__container), 0)))
; [eval] typeof(self.__container)
; [eval] set(set_arg(typeof(self.__container), 0))
; [eval] set_arg(typeof(self.__container), 0)
; [eval] typeof(self.__container)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))) | live]
; [else-branch: 216 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 216 | issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0)))]
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0))))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))
    $Ref.null)))
(pop) ; 5
(push) ; 5
; [else-branch: 216 | !(issubtype[Bool](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), set[PyType](set_arg[PyType](typeof[PyType](First:(Second:(Second:(Second:($t@383@01))))), 0))))]
(assert (not
  (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) (set<PyType> (set_arg<PyType> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@383@01)))))) 0)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@383@01))))))
  $Snap.unit))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_150: Perm
(declare-const _cwl_150@384@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list___init__ ----------
(declare-const _cthread_8@385@01 $Ref)
(declare-const _caller_measures_8@386@01 Seq<Measure$>)
(declare-const _residue_8@387@01 $Perm)
(declare-const _current_wait_level_8@388@01 $Perm)
(declare-const res@389@01 $Ref)
(declare-const _cthread_8@390@01 $Ref)
(declare-const _caller_measures_8@391@01 Seq<Measure$>)
(declare-const _residue_8@392@01 $Perm)
(declare-const _current_wait_level_8@393@01 $Perm)
(declare-const res@394@01 $Ref)
(push) ; 1
(declare-const $t@395@01 $Snap)
(assert (= $t@395@01 ($Snap.combine ($Snap.first $t@395@01) ($Snap.second $t@395@01))))
(assert (= ($Snap.first $t@395@01) $Snap.unit))
; [eval] _cthread_8 != null
(assert (not (= _cthread_8@390@01 $Ref.null)))
(assert (=
  ($Snap.second $t@395@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@395@01))
    ($Snap.second ($Snap.second $t@395@01)))))
(assert (= ($Snap.first ($Snap.second $t@395@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@391@01 _cthread_8@390@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@391@01 _cthread_8@390@01 1))
(assert (Measure$check $Snap.unit _caller_measures_8@391@01 _cthread_8@390@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@395@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@395@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@395@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@395@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_8@390@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@395@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(assert (= ($Snap.first $t@396@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@396@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@396@01))
    ($Snap.second ($Snap.second $t@396@01)))))
(assert (= ($Snap.first ($Snap.second $t@396@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@396@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@396@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@396@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_8@392@01 _current_wait_level_8@393@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@396@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
(assert (not (= res@394@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@394@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@394@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@394@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_8: Perm
(declare-const _cwl_8@397@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- list_append ----------
(declare-const _cthread_9@398@01 $Ref)
(declare-const _caller_measures_9@399@01 Seq<Measure$>)
(declare-const _residue_9@400@01 $Perm)
(declare-const self@401@01 $Ref)
(declare-const item@402@01 $Ref)
(declare-const _current_wait_level_9@403@01 $Perm)
(declare-const _cthread_9@404@01 $Ref)
(declare-const _caller_measures_9@405@01 Seq<Measure$>)
(declare-const _residue_9@406@01 $Perm)
(declare-const self@407@01 $Ref)
(declare-const item@408@01 $Ref)
(declare-const _current_wait_level_9@409@01 $Perm)
(push) ; 1
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 ($Snap.combine ($Snap.first $t@410@01) ($Snap.second $t@410@01))))
(assert (= ($Snap.first $t@410@01) $Snap.unit))
; [eval] _cthread_9 != null
(assert (not (= _cthread_9@404@01 $Ref.null)))
(assert (=
  ($Snap.second $t@410@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@410@01))
    ($Snap.second ($Snap.second $t@410@01)))))
(assert (= ($Snap.first ($Snap.second $t@410@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_9, _cthread_9, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@405@01 _cthread_9@404@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_9@405@01 _cthread_9@404@01 1))
(assert (Measure$check $Snap.unit _caller_measures_9@405@01 _cthread_9@404@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@410@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@410@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@410@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_9), Thread_0())
; [eval] typeof(_cthread_9)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_9@404@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@410@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@410@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@410@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@407@01) (list<PyType> (list_arg<PyType> (typeof<PyType> self@407@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))))
(assert (not (= self@407@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), list_arg(typeof(self), 0))
; [eval] typeof(item)
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@408@01) (list_arg<PyType> (typeof<PyType> self@407@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 ($Snap.combine ($Snap.first $t@411@01) ($Snap.second $t@411@01))))
(assert (= ($Snap.first $t@411@01) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseBounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second $t@411@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@411@01))
    ($Snap.second ($Snap.second $t@411@01)))))
(assert (= ($Snap.first ($Snap.second $t@411@01)) $Snap.unit))
; [eval] (forperm _r_31: Ref [_r_31.MustReleaseUnbounded] :: Level(_r_31) <= _current_wait_level_9)
(assert (=
  ($Snap.second ($Snap.second $t@411@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@411@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@411@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@411@01))) $Snap.unit))
; [eval] _residue_9 <= _current_wait_level_9
(assert (<= _residue_9@406@01 _current_wait_level_9@409@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@411@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@411@01))))
  $Snap.unit))
; [eval] self.list_acc == old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc) ++ Seq(item)
; [eval] old(self.list_acc)
; [eval] Seq(item)
(assert (= (Seq_length (Seq_singleton item@408@01)) 1))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@411@01)))))
  (Seq_append
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@410@01))))))
    (Seq_singleton item@408@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_9: Perm
(declare-const _cwl_9@412@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set___init__ ----------
(declare-const _cthread_21@413@01 $Ref)
(declare-const _caller_measures_21@414@01 Seq<Measure$>)
(declare-const _residue_21@415@01 $Perm)
(declare-const _current_wait_level_21@416@01 $Perm)
(declare-const res@417@01 $Ref)
(declare-const _cthread_21@418@01 $Ref)
(declare-const _caller_measures_21@419@01 Seq<Measure$>)
(declare-const _residue_21@420@01 $Perm)
(declare-const _current_wait_level_21@421@01 $Perm)
(declare-const res@422@01 $Ref)
(push) ; 1
(declare-const $t@423@01 $Snap)
(assert (= $t@423@01 ($Snap.combine ($Snap.first $t@423@01) ($Snap.second $t@423@01))))
(assert (= ($Snap.first $t@423@01) $Snap.unit))
; [eval] _cthread_21 != null
(assert (not (= _cthread_21@418@01 $Ref.null)))
(assert (=
  ($Snap.second $t@423@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@423@01))
    ($Snap.second ($Snap.second $t@423@01)))))
(assert (= ($Snap.first ($Snap.second $t@423@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@419@01 _cthread_21@418@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@419@01 _cthread_21@418@01 1))
(assert (Measure$check $Snap.unit _caller_measures_21@419@01 _cthread_21@418@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@423@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@423@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@423@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_21@418@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@424@01 $Snap)
(assert (= $t@424@01 ($Snap.combine ($Snap.first $t@424@01) ($Snap.second $t@424@01))))
(assert (= ($Snap.first $t@424@01) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseBounded] :: Level(_r_33) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@424@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@424@01))
    ($Snap.second ($Snap.second $t@424@01)))))
(assert (= ($Snap.first ($Snap.second $t@424@01)) $Snap.unit))
; [eval] (forperm _r_33: Ref [_r_33.MustReleaseUnbounded] :: Level(_r_33) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@424@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@424@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@424@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_21@420@01 _current_wait_level_21@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@424@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))))
(assert (not (= res@422@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@424@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@424@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@422@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@422@01) 0))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_21: Perm
(declare-const _cwl_21@425@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set___iter__ ----------
(declare-const _cthread_25@426@01 $Ref)
(declare-const _caller_measures_25@427@01 Seq<Measure$>)
(declare-const _residue_25@428@01 $Perm)
(declare-const self@429@01 $Ref)
(declare-const _current_wait_level_25@430@01 $Perm)
(declare-const _res@431@01 $Ref)
(declare-const _cthread_25@432@01 $Ref)
(declare-const _caller_measures_25@433@01 Seq<Measure$>)
(declare-const _residue_25@434@01 $Perm)
(declare-const self@435@01 $Ref)
(declare-const _current_wait_level_25@436@01 $Perm)
(declare-const _res@437@01 $Ref)
(push) ; 1
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
; [eval] _cthread_25 != null
(assert (not (= _cthread_25@432@01 $Ref.null)))
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_25, _cthread_25, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_25@433@01 _cthread_25@432@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_25@433@01 _cthread_25@432@01 1))
(assert (Measure$check $Snap.unit _caller_measures_25@433@01 _cthread_25@432@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_25), Thread_0())
; [eval] typeof(_cthread_25)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_25@432@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@438@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@435@01) (set<PyType> (set_arg<PyType> (typeof<PyType> self@435@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))))
(assert (not (= self@435@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@438@01)))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 ($Snap.combine ($Snap.first $t@439@01) ($Snap.second $t@439@01))))
(assert (= ($Snap.first $t@439@01) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseBounded] :: Level(_r_35) <= _current_wait_level_25)
(assert (=
  ($Snap.second $t@439@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@439@01))
    ($Snap.second ($Snap.second $t@439@01)))))
(assert (= ($Snap.first ($Snap.second $t@439@01)) $Snap.unit))
; [eval] (forperm _r_35: Ref [_r_35.MustReleaseUnbounded] :: Level(_r_35) <= _current_wait_level_25)
(assert (=
  ($Snap.second ($Snap.second $t@439@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@439@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@439@01))) $Snap.unit))
; [eval] _residue_25 <= _current_wait_level_25
(assert (<= _residue_25@434@01 _current_wait_level_25@436@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@439@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@439@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@439@01))))
  $Snap.unit))
; [eval] _res != self
(assert (not (= _res@437@01 self@435@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))
(assert (not (= _res@437@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))
  $Snap.unit))
; [eval] _res.list_acc == set___sil_seq__(self)
; [eval] set___sil_seq__(self)
(push) ; 3
; [eval] issubtype(typeof(self), set(set_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] set(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@440@01 $Perm)
(assert ($Perm.isReadVar $k@440@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@440@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))) self@435@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert (set___sil_seq__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))) self@435@01))
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))
  (set___sil_seq__ ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))) self@435@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))
  $Snap.unit))
; [eval] _res.__container == self
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))
  self@435@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))
  $Snap.unit))
; [eval] _res.__iter_index == 0
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))
  $Snap.unit))
; [eval] _res.__previous == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@439@01)))))))))))))
  $Snap.unit))
; [eval] issubtype(typeof(_res), Iterator(set_arg(typeof(self), 0)))
; [eval] typeof(_res)
; [eval] Iterator(set_arg(typeof(self), 0))
; [eval] set_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> _res@437@01) (Iterator<PyType> (set_arg<PyType> (typeof<PyType> self@435@01) 0))))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var _cwl_25: Perm
(declare-const _cwl_25@441@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
