(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-26 14:30:13
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<PyType> 0)
(declare-sort Seq<Measure$> 0)
(declare-sort Seq<$Ref> 0)
(declare-sort Seq<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<_Name> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Set<$Ref>> 0)
(declare-sort Set<$Snap> 0)
(declare-sort PyType 0)
(declare-sort SIFDomain<Ref> 0)
(declare-sort _list_ce_helper 0)
(declare-sort _Name 0)
(declare-sort _dict_ce_helper 0)
(declare-sort Measure$ 0)
(declare-sort $FVF<list_acc> 0)
(declare-sort $FVF<set_acc> 0)
(declare-sort $FVF<dict_acc> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<PyType>To$Snap (Seq<PyType>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<PyType> ($Snap) Seq<PyType>)
(assert (forall ((x Seq<PyType>)) (!
    (= x ($SortWrappers.$SnapToSeq<PyType>($SortWrappers.Seq<PyType>To$Snap x)))
    :pattern (($SortWrappers.Seq<PyType>To$Snap x))
    :qid |$Snap.$SnapToSeq<PyType>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<PyType>To$Snap($SortWrappers.$SnapToSeq<PyType> x)))
    :pattern (($SortWrappers.$SnapToSeq<PyType> x))
    :qid |$Snap.Seq<PyType>To$SnapToSeq<PyType>|
    )))
(declare-fun $SortWrappers.Seq<Measure$>To$Snap (Seq<Measure$>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Measure$> ($Snap) Seq<Measure$>)
(assert (forall ((x Seq<Measure$>)) (!
    (= x ($SortWrappers.$SnapToSeq<Measure$>($SortWrappers.Seq<Measure$>To$Snap x)))
    :pattern (($SortWrappers.Seq<Measure$>To$Snap x))
    :qid |$Snap.$SnapToSeq<Measure$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Measure$>To$Snap($SortWrappers.$SnapToSeq<Measure$> x)))
    :pattern (($SortWrappers.$SnapToSeq<Measure$> x))
    :qid |$Snap.Seq<Measure$>To$SnapToSeq<Measure$>|
    )))
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<_Name>To$Snap (Set<_Name>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<_Name> ($Snap) Set<_Name>)
(assert (forall ((x Set<_Name>)) (!
    (= x ($SortWrappers.$SnapToSet<_Name>($SortWrappers.Set<_Name>To$Snap x)))
    :pattern (($SortWrappers.Set<_Name>To$Snap x))
    :qid |$Snap.$SnapToSet<_Name>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<_Name>To$Snap($SortWrappers.$SnapToSet<_Name> x)))
    :pattern (($SortWrappers.$SnapToSet<_Name> x))
    :qid |$Snap.Set<_Name>To$SnapToSet<_Name>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Set<$Ref>>To$Snap (Set<Set<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Set<$Ref>> ($Snap) Set<Set<$Ref>>)
(assert (forall ((x Set<Set<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Set<$Ref>>($SortWrappers.Set<Set<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Set<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Set<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Set<$Ref>>To$Snap($SortWrappers.$SnapToSet<Set<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Set<$Ref>> x))
    :qid |$Snap.Set<Set<$Ref>>To$SnapToSet<Set<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.PyTypeTo$Snap (PyType) $Snap)
(declare-fun $SortWrappers.$SnapToPyType ($Snap) PyType)
(assert (forall ((x PyType)) (!
    (= x ($SortWrappers.$SnapToPyType($SortWrappers.PyTypeTo$Snap x)))
    :pattern (($SortWrappers.PyTypeTo$Snap x))
    :qid |$Snap.$SnapToPyTypeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PyTypeTo$Snap($SortWrappers.$SnapToPyType x)))
    :pattern (($SortWrappers.$SnapToPyType x))
    :qid |$Snap.PyTypeTo$SnapToPyType|
    )))
(declare-fun $SortWrappers.SIFDomain<Ref>To$Snap (SIFDomain<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSIFDomain<Ref> ($Snap) SIFDomain<Ref>)
(assert (forall ((x SIFDomain<Ref>)) (!
    (= x ($SortWrappers.$SnapToSIFDomain<Ref>($SortWrappers.SIFDomain<Ref>To$Snap x)))
    :pattern (($SortWrappers.SIFDomain<Ref>To$Snap x))
    :qid |$Snap.$SnapToSIFDomain<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.SIFDomain<Ref>To$Snap($SortWrappers.$SnapToSIFDomain<Ref> x)))
    :pattern (($SortWrappers.$SnapToSIFDomain<Ref> x))
    :qid |$Snap.SIFDomain<Ref>To$SnapToSIFDomain<Ref>|
    )))
(declare-fun $SortWrappers._list_ce_helperTo$Snap (_list_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_list_ce_helper ($Snap) _list_ce_helper)
(assert (forall ((x _list_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_list_ce_helper($SortWrappers._list_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._list_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_list_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._list_ce_helperTo$Snap($SortWrappers.$SnapTo_list_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_list_ce_helper x))
    :qid |$Snap._list_ce_helperTo$SnapTo_list_ce_helper|
    )))
(declare-fun $SortWrappers._NameTo$Snap (_Name) $Snap)
(declare-fun $SortWrappers.$SnapTo_Name ($Snap) _Name)
(assert (forall ((x _Name)) (!
    (= x ($SortWrappers.$SnapTo_Name($SortWrappers._NameTo$Snap x)))
    :pattern (($SortWrappers._NameTo$Snap x))
    :qid |$Snap.$SnapTo_NameTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._NameTo$Snap($SortWrappers.$SnapTo_Name x)))
    :pattern (($SortWrappers.$SnapTo_Name x))
    :qid |$Snap._NameTo$SnapTo_Name|
    )))
(declare-fun $SortWrappers._dict_ce_helperTo$Snap (_dict_ce_helper) $Snap)
(declare-fun $SortWrappers.$SnapTo_dict_ce_helper ($Snap) _dict_ce_helper)
(assert (forall ((x _dict_ce_helper)) (!
    (= x ($SortWrappers.$SnapTo_dict_ce_helper($SortWrappers._dict_ce_helperTo$Snap x)))
    :pattern (($SortWrappers._dict_ce_helperTo$Snap x))
    :qid |$Snap.$SnapTo_dict_ce_helperTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers._dict_ce_helperTo$Snap($SortWrappers.$SnapTo_dict_ce_helper x)))
    :pattern (($SortWrappers.$SnapTo_dict_ce_helper x))
    :qid |$Snap._dict_ce_helperTo$SnapTo_dict_ce_helper|
    )))
(declare-fun $SortWrappers.Measure$To$Snap (Measure$) $Snap)
(declare-fun $SortWrappers.$SnapToMeasure$ ($Snap) Measure$)
(assert (forall ((x Measure$)) (!
    (= x ($SortWrappers.$SnapToMeasure$($SortWrappers.Measure$To$Snap x)))
    :pattern (($SortWrappers.Measure$To$Snap x))
    :qid |$Snap.$SnapToMeasure$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Measure$To$Snap($SortWrappers.$SnapToMeasure$ x)))
    :pattern (($SortWrappers.$SnapToMeasure$ x))
    :qid |$Snap.Measure$To$SnapToMeasure$|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<list_acc>To$Snap ($FVF<list_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<list_acc> ($Snap) $FVF<list_acc>)
(assert (forall ((x $FVF<list_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<list_acc>($SortWrappers.$FVF<list_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<list_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<list_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<list_acc>To$Snap($SortWrappers.$SnapTo$FVF<list_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<list_acc> x))
    :qid |$Snap.$FVF<list_acc>To$SnapTo$FVF<list_acc>|
    )))
(declare-fun $SortWrappers.$FVF<set_acc>To$Snap ($FVF<set_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<set_acc> ($Snap) $FVF<set_acc>)
(assert (forall ((x $FVF<set_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<set_acc>($SortWrappers.$FVF<set_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<set_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<set_acc>To$Snap($SortWrappers.$SnapTo$FVF<set_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<set_acc> x))
    :qid |$Snap.$FVF<set_acc>To$SnapTo$FVF<set_acc>|
    )))
(declare-fun $SortWrappers.$FVF<dict_acc>To$Snap ($FVF<dict_acc>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<dict_acc> ($Snap) $FVF<dict_acc>)
(assert (forall ((x $FVF<dict_acc>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<dict_acc>($SortWrappers.$FVF<dict_acc>To$Snap x)))
    :pattern (($SortWrappers.$FVF<dict_acc>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<dict_acc>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<dict_acc>To$Snap($SortWrappers.$SnapTo$FVF<dict_acc> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<dict_acc> x))
    :qid |$Snap.$FVF<dict_acc>To$SnapTo$FVF<dict_acc>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<_Name>) Int)
(declare-const Set_empty Set<_Name>)
(declare-fun Set_in (_Name Set<_Name>) Bool)
(declare-fun Set_singleton (_Name) Set<_Name>)
(declare-fun Set_unionone (Set<_Name> _Name) Set<_Name>)
(declare-fun Set_union (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_intersection (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_difference (Set<_Name> Set<_Name>) Set<_Name>)
(declare-fun Set_subset (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_equal (Set<_Name> Set<_Name>) Bool)
(declare-fun Set_skolem_diff (Set<_Name> Set<_Name>) _Name)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Set<$Ref>>) Int)
(declare-const Set_empty Set<Set<$Ref>>)
(declare-fun Set_in (Set<$Ref> Set<Set<$Ref>>) Bool)
(declare-fun Set_singleton (Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_unionone (Set<Set<$Ref>> Set<$Ref>) Set<Set<$Ref>>)
(declare-fun Set_union (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_intersection (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_difference (Set<Set<$Ref>> Set<Set<$Ref>>) Set<Set<$Ref>>)
(declare-fun Set_subset (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_equal (Set<Set<$Ref>> Set<Set<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Set<$Ref>> Set<Set<$Ref>>) Set<$Ref>)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<PyType>) Int)
(declare-const Seq_empty Seq<PyType>)
(declare-fun Seq_singleton (PyType) Seq<PyType>)
(declare-fun Seq_append (Seq<PyType> Seq<PyType>) Seq<PyType>)
(declare-fun Seq_index (Seq<PyType> Int) PyType)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<PyType> Int PyType) Seq<PyType>)
(declare-fun Seq_take (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_drop (Seq<PyType> Int) Seq<PyType>)
(declare-fun Seq_contains (Seq<PyType> PyType) Bool)
(declare-fun Seq_contains_trigger (Seq<PyType> PyType) Bool)
(declare-fun Seq_skolem (Seq<PyType> PyType) Int)
(declare-fun Seq_equal (Seq<PyType> Seq<PyType>) Bool)
(declare-fun Seq_skolem_diff (Seq<PyType> Seq<PyType>) Int)
(declare-fun Seq_length (Seq<Measure$>) Int)
(declare-const Seq_empty Seq<Measure$>)
(declare-fun Seq_singleton (Measure$) Seq<Measure$>)
(declare-fun Seq_append (Seq<Measure$> Seq<Measure$>) Seq<Measure$>)
(declare-fun Seq_index (Seq<Measure$> Int) Measure$)
(declare-fun Seq_update (Seq<Measure$> Int Measure$) Seq<Measure$>)
(declare-fun Seq_take (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_drop (Seq<Measure$> Int) Seq<Measure$>)
(declare-fun Seq_contains (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_contains_trigger (Seq<Measure$> Measure$) Bool)
(declare-fun Seq_skolem (Seq<Measure$> Measure$) Int)
(declare-fun Seq_equal (Seq<Measure$> Seq<Measure$>) Bool)
(declare-fun Seq_skolem_diff (Seq<Measure$> Seq<Measure$>) Int)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun dict_get_helper<Ref> (Set<$Ref> $Ref $Ref) $Ref)
(declare-fun extends_<Bool> (PyType PyType) Bool)
(declare-fun issubtype<Bool> (PyType PyType) Bool)
(declare-fun isnotsubtype<Bool> (PyType PyType) Bool)
(declare-fun tuple_args<Seq<PyType>> (PyType) Seq<PyType>)
(declare-fun typeof<PyType> ($Ref) PyType)
(declare-fun get_basic<PyType> (PyType) PyType)
(declare-fun union_type_1<PyType> (PyType) PyType)
(declare-fun union_type_2<PyType> (PyType PyType) PyType)
(declare-fun union_type_3<PyType> (PyType PyType PyType) PyType)
(declare-fun union_type_4<PyType> (PyType PyType PyType PyType) PyType)
(declare-const object<PyType> PyType)
(declare-const list_basic<PyType> PyType)
(declare-fun list<PyType> (PyType) PyType)
(declare-fun list_arg<PyType> (PyType Int) PyType)
(declare-const set_basic<PyType> PyType)
(declare-fun set<PyType> (PyType) PyType)
(declare-fun set_arg<PyType> (PyType Int) PyType)
(declare-const dict_basic<PyType> PyType)
(declare-fun dict<PyType> (PyType PyType) PyType)
(declare-fun dict_arg<PyType> (PyType Int) PyType)
(declare-const int<PyType> PyType)
(declare-const float<PyType> PyType)
(declare-const bool<PyType> PyType)
(declare-const NoneType<PyType> PyType)
(declare-const Exception<PyType> PyType)
(declare-const ConnectionRefusedError<PyType> PyType)
(declare-const traceback<PyType> PyType)
(declare-const str<PyType> PyType)
(declare-const bytes<PyType> PyType)
(declare-const tuple_basic<PyType> PyType)
(declare-fun tuple<PyType> (Seq<PyType>) PyType)
(declare-fun tuple_arg<PyType> (PyType Int) PyType)
(declare-const PSeq_basic<PyType> PyType)
(declare-fun PSeq<PyType> (PyType) PyType)
(declare-fun PSeq_arg<PyType> (PyType Int) PyType)
(declare-const PSet_basic<PyType> PyType)
(declare-fun PSet<PyType> (PyType) PyType)
(declare-fun PSet_arg<PyType> (PyType Int) PyType)
(declare-const PMultiset_basic<PyType> PyType)
(declare-fun PMultiset<PyType> (PyType) PyType)
(declare-fun PMultiset_arg<PyType> (PyType Int) PyType)
(declare-const slice<PyType> PyType)
(declare-const py_range<PyType> PyType)
(declare-const Iterator_basic<PyType> PyType)
(declare-fun Iterator<PyType> (PyType) PyType)
(declare-fun Iterator_arg<PyType> (PyType Int) PyType)
(declare-const Thread_0<PyType> PyType)
(declare-const LevelType<PyType> PyType)
(declare-const type<PyType> PyType)
(declare-const Place<PyType> PyType)
(declare-const __prim__Seq_type<PyType> PyType)
(declare-fun Measure$create<Measure$> (Bool $Ref Int) Measure$)
(declare-fun Measure$guard<Bool> (Measure$) Bool)
(declare-fun Measure$key<Ref> (Measure$) $Ref)
(declare-fun Measure$value<Int> (Measure$) Int)
(declare-fun Low<Bool> ($Ref) Bool)
(declare-fun seq_ref_length<Int> (Seq<$Ref>) Int)
(declare-fun seq_ref_index<Ref> (Seq<$Ref> Int) $Ref)
(declare-fun _combine<_Name> (_Name _Name) _Name)
(declare-fun _single<_Name> (Int) _Name)
(declare-fun _get_combined_prefix<_Name> (_Name) _Name)
(declare-fun _get_combined_name<_Name> (_Name) _Name)
(declare-fun _get_value<Int> (_Name) Int)
(declare-fun _name_type<Bool> (_Name) Bool)
(declare-fun _is_single<Bool> (_Name) Bool)
(declare-fun _is_combined<Bool> (_Name) Bool)
; /field_value_functions_declarations.smt2 [list_acc: Seq[Ref]]
(declare-fun $FVF.domain_list_acc ($FVF<list_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_list_acc ($FVF<list_acc> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_list_acc ($FVF<list_acc> $FVF<list_acc>) Bool)
(declare-fun $FVF.loc_list_acc (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_list_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_list_acc $FVF<list_acc>)
; /field_value_functions_declarations.smt2 [set_acc: Set[Ref]]
(declare-fun $FVF.domain_set_acc ($FVF<set_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_set_acc ($FVF<set_acc> $Ref) Set<$Ref>)
(declare-fun $FVF.after_set_acc ($FVF<set_acc> $FVF<set_acc>) Bool)
(declare-fun $FVF.loc_set_acc (Set<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_set_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_set_acc $FVF<set_acc>)
; /field_value_functions_declarations.smt2 [dict_acc: Set[Ref]]
(declare-fun $FVF.domain_dict_acc ($FVF<dict_acc>) Set<$Ref>)
(declare-fun $FVF.lookup_dict_acc ($FVF<dict_acc> $Ref) Set<$Ref>)
(declare-fun $FVF.after_dict_acc ($FVF<dict_acc> $FVF<dict_acc>) Bool)
(declare-fun $FVF.loc_dict_acc (Set<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_dict_acc ($FPM $Ref) $Perm)
(declare-const $fvfTOP_dict_acc $FVF<dict_acc>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun py_range___val__ ($Snap $Ref) Seq<Int>)
(declare-fun py_range___val__%limited ($Snap $Ref) Seq<Int>)
(declare-fun py_range___val__%stateless ($Ref) Bool)
(declare-fun py_range___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___val__ ($Snap $Ref) Int)
(declare-fun str___val__%limited ($Snap $Ref) Int)
(declare-fun str___val__%stateless ($Ref) Bool)
(declare-fun str___val__%precondition ($Snap $Ref) Bool)
(declare-fun str___len__ ($Snap $Ref) Int)
(declare-fun str___len__%limited ($Snap $Ref) Int)
(declare-fun str___len__%stateless ($Ref) Bool)
(declare-fun str___len__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__bool___box__ ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%limited ($Snap Bool) $Ref)
(declare-fun __prim__bool___box__%stateless (Bool) Bool)
(declare-fun __prim__bool___box__%precondition ($Snap Bool) Bool)
(declare-fun int___unbox__ ($Snap $Ref) Int)
(declare-fun int___unbox__%limited ($Snap $Ref) Int)
(declare-fun int___unbox__%stateless ($Ref) Bool)
(declare-fun int___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun bool___unbox__ ($Snap $Ref) Bool)
(declare-fun bool___unbox__%limited ($Snap $Ref) Bool)
(declare-fun bool___unbox__%stateless ($Ref) Bool)
(declare-fun bool___unbox__%precondition ($Snap $Ref) Bool)
(declare-fun __prim__int___box__ ($Snap Int) $Ref)
(declare-fun __prim__int___box__%limited ($Snap Int) $Ref)
(declare-fun __prim__int___box__%stateless (Int) Bool)
(declare-fun __prim__int___box__%precondition ($Snap Int) Bool)
(declare-fun list___len__ ($Snap $Ref) Int)
(declare-fun list___len__%limited ($Snap $Ref) Int)
(declare-fun list___len__%stateless ($Ref) Bool)
(declare-fun list___len__%precondition ($Snap $Ref) Bool)
(declare-fun _isDefined ($Snap Int) Bool)
(declare-fun _isDefined%limited ($Snap Int) Bool)
(declare-fun _isDefined%stateless (Int) Bool)
(declare-fun _isDefined%precondition ($Snap Int) Bool)
(declare-fun py_range___len__ ($Snap $Ref) Int)
(declare-fun py_range___len__%limited ($Snap $Ref) Int)
(declare-fun py_range___len__%stateless ($Ref) Bool)
(declare-fun py_range___len__%precondition ($Snap $Ref) Bool)
(declare-fun dict___values__ ($Snap $Ref) Seq<$Ref>)
(declare-fun dict___values__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun dict___values__%stateless ($Ref) Bool)
(declare-fun dict___values__%precondition ($Snap $Ref) Bool)
(declare-fun dict___contains__ ($Snap $Ref $Ref) Bool)
(declare-fun dict___contains__%limited ($Snap $Ref $Ref) Bool)
(declare-fun dict___contains__%stateless ($Ref $Ref) Bool)
(declare-fun dict___contains__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun py_range___stop__ ($Snap $Ref) Int)
(declare-fun py_range___stop__%limited ($Snap $Ref) Int)
(declare-fun py_range___stop__%stateless ($Ref) Bool)
(declare-fun py_range___stop__%precondition ($Snap $Ref) Bool)
(declare-fun py_range___start__ ($Snap $Ref) Int)
(declare-fun py_range___start__%limited ($Snap $Ref) Int)
(declare-fun py_range___start__%stateless ($Ref) Bool)
(declare-fun py_range___start__%precondition ($Snap $Ref) Bool)
(declare-fun Level ($Snap $Ref) $Perm)
(declare-fun Level%limited ($Snap $Ref) $Perm)
(declare-fun Level%stateless ($Ref) Bool)
(declare-fun Level%precondition ($Snap $Ref) Bool)
(declare-fun str___create__ ($Snap Int Int) $Ref)
(declare-fun str___create__%limited ($Snap Int Int) $Ref)
(declare-fun str___create__%stateless (Int Int) Bool)
(declare-fun str___create__%precondition ($Snap Int Int) Bool)
(declare-fun list___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun list___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun list___getitem__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___lt__ ($Snap Int Int) Bool)
(declare-fun int___lt__%limited ($Snap Int Int) Bool)
(declare-fun int___lt__%stateless (Int Int) Bool)
(declare-fun int___lt__%precondition ($Snap Int Int) Bool)
(declare-fun __file__ ($Snap) $Ref)
(declare-fun __file__%limited ($Snap) $Ref)
(declare-const __file__%stateless Bool)
(declare-fun __file__%precondition ($Snap) Bool)
(declare-fun _checkDefined ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%limited ($Snap $Ref Int) $Ref)
(declare-fun _checkDefined%stateless ($Ref Int) Bool)
(declare-fun _checkDefined%precondition ($Snap $Ref Int) Bool)
(declare-fun py_range___sil_seq__ ($Snap $Ref) Seq<$Ref>)
(declare-fun py_range___sil_seq__%limited ($Snap $Ref) Seq<$Ref>)
(declare-fun py_range___sil_seq__%stateless ($Ref) Bool)
(declare-fun py_range___sil_seq__%precondition ($Snap $Ref) Bool)
(declare-fun Measure$check ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%limited ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%stateless (Seq<Measure$> $Ref Int) Bool)
(declare-fun Measure$check%precondition ($Snap Seq<Measure$> $Ref Int) Bool)
(declare-fun str___eq__ ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%limited ($Snap $Ref $Ref) Bool)
(declare-fun str___eq__%stateless ($Ref $Ref) Bool)
(declare-fun str___eq__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun dict___getitem__ ($Snap $Ref $Ref) $Ref)
(declare-fun dict___getitem__%limited ($Snap $Ref $Ref) $Ref)
(declare-fun dict___getitem__%stateless ($Ref $Ref) Bool)
(declare-fun dict___getitem__%precondition ($Snap $Ref $Ref) Bool)
(declare-fun int___ge__ ($Snap Int Int) Bool)
(declare-fun int___ge__%limited ($Snap Int Int) Bool)
(declare-fun int___ge__%stateless (Int Int) Bool)
(declare-fun int___ge__%precondition ($Snap Int Int) Bool)
(declare-fun py_range___create__ ($Snap Int Int Int) $Ref)
(declare-fun py_range___create__%limited ($Snap Int Int Int) $Ref)
(declare-fun py_range___create__%stateless (Int Int Int) Bool)
(declare-fun py_range___create__%precondition ($Snap Int Int Int) Bool)
(declare-fun int___gt__ ($Snap Int Int) Bool)
(declare-fun int___gt__%limited ($Snap Int Int) Bool)
(declare-fun int___gt__%stateless (Int Int) Bool)
(declare-fun int___gt__%precondition ($Snap Int Int) Bool)
(declare-fun __name__ ($Snap) $Ref)
(declare-fun __name__%limited ($Snap) $Ref)
(declare-const __name__%stateless Bool)
(declare-fun __name__%precondition ($Snap) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun MustTerminate%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeBounded%trigger ($Snap $Ref) Bool)
(declare-fun MustInvokeUnbounded%trigger ($Snap $Ref) Bool)
(declare-fun _MaySet%trigger ($Snap $Ref Int) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct bool<PyType> float<PyType> bytes<PyType> slice<PyType> list_basic<PyType> set_basic<PyType> ConnectionRefusedError<PyType> PMultiset_basic<PyType> PSet_basic<PyType> Iterator_basic<PyType> PSeq_basic<PyType> object<PyType> traceback<PyType> dict_basic<PyType> type<PyType> py_range<PyType> int<PyType> Exception<PyType> __prim__Seq_type<PyType> tuple_basic<PyType> str<PyType> Thread_0<PyType> Place<PyType> LevelType<PyType> NoneType<PyType>))
; ////////// Axioms
(assert (forall ((s Seq<PyType>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<PyType>)) 0))
(assert (forall ((s Seq<PyType>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (not (= s1 (as Seq_empty  Seq<PyType>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<PyType>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e PyType)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<PyType>)))
      (and
        (not (= s1 (as Seq_empty  Seq<PyType>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (i Int) (v PyType) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<PyType>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (t Seq<PyType>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<PyType>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<PyType>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<PyType>) (x PyType)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<PyType>) (x PyType) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<PyType>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<PyType>) (s1 Seq<PyType>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<PyType>) (b Seq<PyType>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x PyType) (y PyType)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Measure$>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Measure$>)) 0))
(assert (forall ((s Seq<Measure$>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (not (= s1 (as Seq_empty  Seq<Measure$>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Measure$>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Measure$)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Measure$>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Measure$>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (i Int) (v Measure$) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Measure$>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (t Seq<Measure$>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Measure$>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Measure$>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Measure$>) (x Measure$) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Measure$>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Measure$>) (s1 Seq<Measure$>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Measure$>) (b Seq<Measure$>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Measure$) (y Measure$)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<_Name>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o _Name)) (!
  (not (Set_in o (as Set_empty  Set<_Name>)))
  :pattern ((Set_in o (as Set_empty  Set<_Name>)))
  )))
(assert (forall ((s Set<_Name>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<_Name>)))
    (=> (not (= (Set_card s) 0)) (exists ((x _Name))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r _Name)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r _Name) (o _Name)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r _Name)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (o _Name)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<_Name>) (x _Name) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (x _Name)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (o _Name)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>) (y _Name)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=
    (Set_subset a b)
    (forall ((o _Name)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<_Name>) (b Set<_Name>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Set<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Set<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Set<$Ref>>)))
  )))
(assert (forall ((s Set<Set<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Set<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Set<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Set<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (x Set<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (o Set<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>) (y Set<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Set<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Set<$Ref>>) (b Set<Set<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (issubtype<Bool> middle super))
    (issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> sub middle) (issubtype<Bool> middle super))
  :qid |prog.issubtype_transitivity|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ type_)
  :pattern ((issubtype<Bool> type_ type_))
  :qid |prog.issubtype_reflexivity|)))
(assert (forall ((sub PyType) (sub2 PyType)) (!
  (=> (extends_<Bool> sub sub2) (issubtype<Bool> sub sub2))
  :pattern ((extends_<Bool> sub sub2))
  :qid |prog.extends_implies_subtype|)))
(assert (forall ((r $Ref)) (!
  (=
    (issubtype<Bool> (typeof<PyType> r) (as NoneType<PyType>  PyType))
    (= r $Ref.null))
  :pattern ((typeof<PyType> r))
  :qid |prog.null_nonetype|)))
(assert (forall ((type_ PyType)) (!
  (issubtype<Bool> type_ (as object<PyType>  PyType))
  :pattern ((issubtype<Bool> type_ (as object<PyType>  PyType)))
  :qid |prog.issubtype_object|)))
(assert (forall ((sub PyType) (sub2 PyType) (super PyType)) (!
  (=>
    (and
      (extends_<Bool> sub super)
      (and (extends_<Bool> sub2 super) (not (= sub sub2))))
    (and (isnotsubtype<Bool> sub sub2) (isnotsubtype<Bool> sub2 sub)))
  :pattern ((extends_<Bool> sub super) (extends_<Bool> sub2 super))
  :qid |prog.issubtype_exclusion|)))
(assert (forall ((sub PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub super) (not (= sub super)))
    (not (issubtype<Bool> super sub)))
  :pattern ((issubtype<Bool> sub super))
  :pattern ((issubtype<Bool> super sub))
  :qid |prog.issubtype_exclusion_2|)))
(assert (forall ((sub PyType) (middle PyType) (super PyType)) (!
  (=>
    (and (issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
    (not (issubtype<Bool> sub super)))
  :pattern ((issubtype<Bool> sub middle) (isnotsubtype<Bool> middle super))
  :qid |prog.issubtype_exclusion_propagation|)))
(assert (forall ((seq Seq<PyType>) (i Int) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (issubtype<Bool> (tuple_arg<PyType> Z i) (Seq_index seq i)))
  :pattern ((tuple<PyType> seq) (tuple_arg<PyType> Z i))
  :qid |prog.tuple_arg_def|)))
(assert (forall ((seq Seq<PyType>) (Z PyType)) (!
  (=>
    (issubtype<Bool> Z (tuple<PyType> seq))
    (= (Seq_length (tuple_args<Seq<PyType>> Z)) (Seq_length seq)))
  :pattern ((issubtype<Bool> Z (tuple<PyType> seq)))
  :qid |prog.tuple_args_def|)))
(assert (forall ((seq1 Seq<PyType>) (seq2 Seq<PyType>)) (!
  (=>
    (and
      (not (Seq_equal seq1 seq2))
      (and
        (= (Seq_length seq1) (Seq_length seq2))
        (forall ((i Int)) (!
          (=>
            (and (>= i 0) (< i (Seq_length seq1)))
            (issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          :pattern ((issubtype<Bool> (Seq_index seq1 i) (Seq_index seq2 i)))
          ))))
    (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq1) (Seq_length seq2))
  :pattern ((Seq_length seq1) (tuple<PyType> seq2))
  :pattern ((Seq_length seq1) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((Seq_length seq2) (Seq_length seq1))
  :pattern ((Seq_length seq2) (tuple<PyType> seq1))
  :pattern ((Seq_length seq2) (issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :pattern ((issubtype<Bool> (tuple<PyType> seq1) (tuple<PyType> seq2)))
  :qid |prog.tuple_self_subtype|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> X (union_type_1<PyType> arg_1)) (issubtype<Bool> X arg_1))
  :pattern ((issubtype<Bool> X (union_type_1<PyType> arg_1)))
  :qid |prog.union_subtype_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2))
    (or (issubtype<Bool> X arg_1) (issubtype<Bool> X arg_2)))
  :pattern ((issubtype<Bool> X (union_type_2<PyType> arg_1 arg_2)))
  :qid |prog.union_subtype_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3))
    (or
      (issubtype<Bool> X arg_1)
      (or (issubtype<Bool> X arg_2) (issubtype<Bool> X arg_3))))
  :pattern ((issubtype<Bool> X (union_type_3<PyType> arg_1 arg_2 arg_3)))
  :qid |prog.union_subtype_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4))
    (or
      (issubtype<Bool> X arg_1)
      (or
        (issubtype<Bool> X arg_2)
        (or (issubtype<Bool> X arg_3) (issubtype<Bool> X arg_4)))))
  :pattern ((issubtype<Bool> X (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4)))
  :qid |prog.union_subtype_4|)))
(assert (forall ((arg_1 PyType) (X PyType)) (!
  (= (issubtype<Bool> (union_type_1<PyType> arg_1) X) (issubtype<Bool> arg_1 X))
  :pattern ((issubtype<Bool> (union_type_1<PyType> arg_1) X))
  :qid |prog.subtype_union_1|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X)
    (and (issubtype<Bool> arg_1 X) (issubtype<Bool> arg_2 X)))
  :pattern ((issubtype<Bool> (union_type_2<PyType> arg_1 arg_2) X))
  :qid |prog.subtype_union_2|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and (issubtype<Bool> arg_2 X) (issubtype<Bool> arg_3 X))))
  :pattern ((issubtype<Bool> (union_type_3<PyType> arg_1 arg_2 arg_3) X))
  :qid |prog.subtype_union_3|)))
(assert (forall ((arg_1 PyType) (arg_2 PyType) (arg_3 PyType) (arg_4 PyType) (X PyType)) (!
  (=
    (issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X)
    (and
      (issubtype<Bool> arg_1 X)
      (and
        (issubtype<Bool> arg_2 X)
        (and (issubtype<Bool> arg_3 X) (issubtype<Bool> arg_4 X)))))
  :pattern ((issubtype<Bool> (union_type_4<PyType> arg_1 arg_2 arg_3 arg_4) X))
  :qid |prog.subtype_union_4|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (list<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (list<PyType> var0)) (as list_basic<PyType>  PyType)))
  :pattern ((list<PyType> var0))
  :qid |prog.subtype_list|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (list<PyType> arg0)) (= (list_arg<PyType> Z 0) arg0))
  :pattern ((list<PyType> arg0) (list_arg<PyType> Z 0))
  :qid |prog.list_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (set<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (set<PyType> var0)) (as set_basic<PyType>  PyType)))
  :pattern ((set<PyType> var0))
  :qid |prog.subtype_set|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (set<PyType> arg0)) (= (set_arg<PyType> Z 0) arg0))
  :pattern ((set<PyType> arg0) (set_arg<PyType> Z 0))
  :qid |prog.set_args0|)))
(assert (forall ((var0 PyType) (var1 PyType)) (!
  (and
    (extends_<Bool> (dict<PyType> var0 var1) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (dict<PyType> var0 var1))
      (as dict_basic<PyType>  PyType)))
  :pattern ((dict<PyType> var0 var1))
  :qid |prog.subtype_dict|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 0) arg0))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 0))
  :qid |prog.dict_args0|)))
(assert (forall ((Z PyType) (arg0 PyType) (arg1 PyType)) (!
  (=>
    (issubtype<Bool> Z (dict<PyType> arg0 arg1))
    (= (dict_arg<PyType> Z 1) arg1))
  :pattern ((dict<PyType> arg0 arg1) (dict_arg<PyType> Z 1))
  :qid |prog.dict_args1|)))
(assert (and
  (extends_<Bool> (as int<PyType>  PyType) (as float<PyType>  PyType))
  (= (get_basic<PyType> (as int<PyType>  PyType)) (as int<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as float<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as float<PyType>  PyType)) (as float<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bool<PyType>  PyType) (as int<PyType>  PyType))
  (= (get_basic<PyType> (as bool<PyType>  PyType)) (as bool<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as NoneType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as NoneType<PyType>  PyType))
    (as NoneType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Exception<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Exception<PyType>  PyType))
    (as Exception<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as ConnectionRefusedError<PyType>  PyType) (as Exception<PyType>  PyType))
  (=
    (get_basic<PyType> (as ConnectionRefusedError<PyType>  PyType))
    (as ConnectionRefusedError<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as traceback<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as traceback<PyType>  PyType))
    (as traceback<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as str<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as str<PyType>  PyType)) (as str<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as bytes<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as bytes<PyType>  PyType)) (as bytes<PyType>  PyType))))
(assert (forall ((args Seq<PyType>)) (!
  (and
    (=>
      (forall ((e PyType)) (!
        (=> (Seq_contains args e) (= e (as object<PyType>  PyType)))
        :pattern ((Seq_contains args e))
        :pattern ((Seq_contains_trigger args e))
        ))
      (extends_<Bool> (tuple<PyType> args) (as object<PyType>  PyType)))
    (= (get_basic<PyType> (tuple<PyType> args)) (as tuple_basic<PyType>  PyType)))
  :pattern ((tuple<PyType> args))
  :qid |prog.subtype_tuple|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSeq<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSeq<PyType> var0)) (as PSeq_basic<PyType>  PyType)))
  :pattern ((PSeq<PyType> var0))
  :qid |prog.subtype_PSeq|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSeq<PyType> arg0)) (= (PSeq_arg<PyType> Z 0) arg0))
  :pattern ((PSeq<PyType> arg0) (PSeq_arg<PyType> Z 0))
  :qid |prog.PSeq_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PSet<PyType> var0) (as object<PyType>  PyType))
    (= (get_basic<PyType> (PSet<PyType> var0)) (as PSet_basic<PyType>  PyType)))
  :pattern ((PSet<PyType> var0))
  :qid |prog.subtype_PSet|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=> (issubtype<Bool> Z (PSet<PyType> arg0)) (= (PSet_arg<PyType> Z 0) arg0))
  :pattern ((PSet<PyType> arg0) (PSet_arg<PyType> Z 0))
  :qid |prog.PSet_args0|)))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (PMultiset<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (PMultiset<PyType> var0))
      (as PMultiset_basic<PyType>  PyType)))
  :pattern ((PMultiset<PyType> var0))
  :qid |prog.subtype_PMultiset|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (PMultiset<PyType> arg0))
    (= (PMultiset_arg<PyType> Z 0) arg0))
  :pattern ((PMultiset<PyType> arg0) (PMultiset_arg<PyType> Z 0))
  :qid |prog.PMultiset_args0|)))
(assert (and
  (extends_<Bool> (as slice<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as slice<PyType>  PyType)) (as slice<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as py_range<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as py_range<PyType>  PyType))
    (as py_range<PyType>  PyType))))
(assert (forall ((var0 PyType)) (!
  (and
    (extends_<Bool> (Iterator<PyType> var0) (as object<PyType>  PyType))
    (=
      (get_basic<PyType> (Iterator<PyType> var0))
      (as Iterator_basic<PyType>  PyType)))
  :pattern ((Iterator<PyType> var0))
  :qid |prog.subtype_Iterator|)))
(assert (forall ((Z PyType) (arg0 PyType)) (!
  (=>
    (issubtype<Bool> Z (Iterator<PyType> arg0))
    (= (Iterator_arg<PyType> Z 0) arg0))
  :pattern ((Iterator<PyType> arg0) (Iterator_arg<PyType> Z 0))
  :qid |prog.Iterator_args0|)))
(assert (and
  (extends_<Bool> (as Thread_0<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as Thread_0<PyType>  PyType))
    (as Thread_0<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as LevelType<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as LevelType<PyType>  PyType))
    (as LevelType<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as type<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as type<PyType>  PyType)) (as type<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as Place<PyType>  PyType) (as object<PyType>  PyType))
  (= (get_basic<PyType> (as Place<PyType>  PyType)) (as Place<PyType>  PyType))))
(assert (and
  (extends_<Bool> (as __prim__Seq_type<PyType>  PyType) (as object<PyType>  PyType))
  (=
    (get_basic<PyType> (as __prim__Seq_type<PyType>  PyType))
    (as __prim__Seq_type<PyType>  PyType))))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$guard<Bool> (Measure$create<Measure$> g k v)) g)
  :pattern ((Measure$guard<Bool> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A0|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$key<Ref> (Measure$create<Measure$> g k v)) k)
  :pattern ((Measure$key<Ref> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A1|)))
(assert (forall ((g Bool) (k $Ref) (v Int)) (!
  (= (Measure$value<Int> (Measure$create<Measure$> g k v)) v)
  :pattern ((Measure$value<Int> (Measure$create<Measure$> g k v)))
  :qid |prog.Measure$A2|)))
(assert (forall ((x $Ref)) (!
  (Low<Bool> x)
  :pattern ((Low<Bool> x))
  :qid |prog.low_true|)))
(assert (forall ((___s Seq<$Ref>)) (!
  (= (Seq_length ___s) (seq_ref_length<Int> ___s))
  :pattern ((Seq_length ___s))
  :qid |prog.relate_length|)))
(assert (forall ((___s Seq<$Ref>) (___i Int)) (!
  (= (Seq_index ___s ___i) (seq_ref_index<Ref> ___s ___i))
  :pattern ((Seq_index ___s ___i))
  :qid |prog.relate_index|)))
(assert (forall ((i Int)) (!
  (= (_get_value<Int> (_single<_Name> i)) i)
  :pattern ((_single<_Name> i))
  :qid |prog.decompose_single|)))
(assert (forall ((n _Name)) (!
  (=> (_is_single<Bool> n) (= n (_single<_Name> (_get_value<Int> n))))
  :pattern ((_get_value<Int> n))
  :qid |prog.compose_single|)))
(assert (forall ((i Int)) (!
  (_name_type<Bool> (_single<_Name> i))
  :pattern ((_single<_Name> i))
  :qid |prog.type_of_single|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (and
    (= (_get_combined_prefix<_Name> (_combine<_Name> n1 n2)) n1)
    (= (_get_combined_name<_Name> (_combine<_Name> n1 n2)) n2))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.decompose_combined|)))
(assert (forall ((n _Name)) (!
  (=>
    (_is_combined<Bool> n)
    (=
      n
      (_combine<_Name> (_get_combined_prefix<_Name> n) (_get_combined_name<_Name> n))))
  :pattern ((_get_combined_prefix<_Name> n))
  :pattern ((_get_combined_name<_Name> n))
  :qid |prog.compose_combined|)))
(assert (forall ((n1 _Name) (n2 _Name)) (!
  (not (_name_type<Bool> (_combine<_Name> n1 n2)))
  :pattern ((_combine<_Name> n1 n2))
  :qid |prog.type_of_composed|)))
(assert (forall ((n _Name)) (!
  (= (_name_type<Bool> n) (_is_single<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_single|)))
(assert (forall ((n _Name)) (!
  (= (not (_name_type<Bool> n)) (_is_combined<Bool> n))
  :pattern ((_name_type<Bool> n))
  :qid |prog.type_is_combined|)))
; /field_value_functions_axioms.smt2 [list_acc: Seq[Ref]]
(assert (forall ((vs $FVF<list_acc>) (ws $FVF<list_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_list_acc vs) ($FVF.domain_list_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_list_acc vs))
            (= ($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x)))
          :pattern (($FVF.lookup_list_acc vs x) ($FVF.lookup_list_acc ws x))
          :qid |qp.$FVF<list_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<list_acc>To$Snap vs)
              ($SortWrappers.$FVF<list_acc>To$Snap ws)
              )
    :qid |qp.$FVF<list_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_list_acc pm r))
    :pattern (($FVF.perm_list_acc pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_list_acc f r) true)
    :pattern (($FVF.loc_list_acc f r)))))
; /field_value_functions_axioms.smt2 [set_acc: Set[Ref]]
(assert (forall ((vs $FVF<set_acc>) (ws $FVF<set_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_set_acc vs) ($FVF.domain_set_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_set_acc vs))
            (= ($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x)))
          :pattern (($FVF.lookup_set_acc vs x) ($FVF.lookup_set_acc ws x))
          :qid |qp.$FVF<set_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<set_acc>To$Snap vs)
              ($SortWrappers.$FVF<set_acc>To$Snap ws)
              )
    :qid |qp.$FVF<set_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_set_acc pm r))
    :pattern (($FVF.perm_set_acc pm r)))))
(assert (forall ((r $Ref) (f Set<$Ref>)) (!
    (= ($FVF.loc_set_acc f r) true)
    :pattern (($FVF.loc_set_acc f r)))))
; /field_value_functions_axioms.smt2 [dict_acc: Set[Ref]]
(assert (forall ((vs $FVF<dict_acc>) (ws $FVF<dict_acc>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_dict_acc vs) ($FVF.domain_dict_acc ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_dict_acc vs))
            (= ($FVF.lookup_dict_acc vs x) ($FVF.lookup_dict_acc ws x)))
          :pattern (($FVF.lookup_dict_acc vs x) ($FVF.lookup_dict_acc ws x))
          :qid |qp.$FVF<dict_acc>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<dict_acc>To$Snap vs)
              ($SortWrappers.$FVF<dict_acc>To$Snap ws)
              )
    :qid |qp.$FVF<dict_acc>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_dict_acc pm r))
    :pattern (($FVF.perm_dict_acc pm r)))))
(assert (forall ((r $Ref) (f Set<$Ref>)) (!
    (= ($FVF.loc_dict_acc f r) true)
    :pattern (($FVF.loc_dict_acc f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@72@00 () $Perm)
(declare-fun $k@74@00 () $Perm)
(declare-fun $k@75@00 () $Perm)
(declare-fun $k@77@00 () $Perm)
(declare-fun $k@78@00 () $Perm)
(declare-fun $k@81@00 () $Perm)
(declare-fun $k@82@00 () $Perm)
(declare-fun $k@85@00 () $Perm)
(declare-fun letvar@83@00 ($Snap $Ref $Ref) Int)
(declare-fun $k@91@00 () $Perm)
(declare-fun $k@92@00 () $Perm)
(declare-fun $k@93@00 () $Perm)
(declare-fun $k@94@00 () $Perm)
(declare-fun $k@96@00 () $Perm)
(declare-fun $k@97@00 () $Perm)
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (= (py_range___val__%limited s@$ self@0@00) (py_range___val__ s@$ self@0@00))
  :pattern ((py_range___val__ s@$ self@0@00))
  :qid |quant-u-4325|)))
(assert (forall ((s@$ $Snap) (self@0@00 $Ref)) (!
  (py_range___val__%stateless self@0@00)
  :pattern ((py_range___val__%limited s@$ self@0@00))
  :qid |quant-u-4326|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (= (str___val__%limited s@$ self@2@00) (str___val__ s@$ self@2@00))
  :pattern ((str___val__ s@$ self@2@00))
  :qid |quant-u-4327|)))
(assert (forall ((s@$ $Snap) (self@2@00 $Ref)) (!
  (str___val__%stateless self@2@00)
  :pattern ((str___val__%limited s@$ self@2@00))
  :qid |quant-u-4328|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (= (str___len__%limited s@$ self@4@00) (str___len__ s@$ self@4@00))
  :pattern ((str___len__ s@$ self@4@00))
  :qid |quant-u-4329|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (str___len__%stateless self@4@00)
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4330|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (str___len__%limited s@$ self@4@00))) (=>
    (str___len__%precondition s@$ self@4@00)
    (>= result@5@00 0)))
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4381|)))
(assert (forall ((s@$ $Snap) (self@4@00 $Ref)) (!
  (let ((result@5@00 (str___len__%limited s@$ self@4@00))) true)
  :pattern ((str___len__%limited s@$ self@4@00))
  :qid |quant-u-4382|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (=
    (__prim__bool___box__%limited s@$ prim@6@00)
    (__prim__bool___box__ s@$ prim@6@00))
  :pattern ((__prim__bool___box__ s@$ prim@6@00))
  :qid |quant-u-4331|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (__prim__bool___box__%stateless prim@6@00)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4332|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (and
      (= (typeof<PyType> result@7@00) (as bool<PyType>  PyType))
      (= (bool___unbox__%limited $Snap.unit result@7@00) prim@6@00)
      (= (int___unbox__%limited $Snap.unit result@7@00) (ite prim@6@00 1 0)))))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4383|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) true)
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4384|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (bool___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4385|)))
(assert (forall ((s@$ $Snap) (prim@6@00 Bool)) (!
  (let ((result@7@00 (__prim__bool___box__%limited s@$ prim@6@00))) (=>
    (__prim__bool___box__%precondition s@$ prim@6@00)
    (int___unbox__%precondition $Snap.unit result@7@00)))
  :pattern ((__prim__bool___box__%limited s@$ prim@6@00))
  :qid |quant-u-4386|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (= (int___unbox__%limited s@$ box@8@00) (int___unbox__ s@$ box@8@00))
  :pattern ((int___unbox__ s@$ box@8@00))
  :qid |quant-u-4333|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (int___unbox__%stateless box@8@00)
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4334|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (int___unbox__%precondition s@$ box@8@00)
    (and
      (=>
        (not
          (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
        (= (__prim__int___box__%limited $Snap.unit result@9@00) box@8@00))
      (=>
        (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))
        (=
          (__prim__bool___box__%limited $Snap.unit (not (= result@9@00 0)))
          box@8@00)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4387|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (not (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType))))
    (__prim__int___box__%precondition $Snap.unit result@9@00)))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4388|)))
(assert (forall ((s@$ $Snap) (box@8@00 $Ref)) (!
  (let ((result@9@00 (int___unbox__%limited s@$ box@8@00))) (=>
    (and
      (int___unbox__%precondition s@$ box@8@00)
      (issubtype<Bool> (typeof<PyType> box@8@00) (as bool<PyType>  PyType)))
    (__prim__bool___box__%precondition $Snap.unit (not (= result@9@00 0)))))
  :pattern ((int___unbox__%limited s@$ box@8@00))
  :qid |quant-u-4389|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (= (bool___unbox__%limited s@$ box@10@00) (bool___unbox__ s@$ box@10@00))
  :pattern ((bool___unbox__ s@$ box@10@00))
  :qid |quant-u-4335|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (bool___unbox__%stateless box@10@00)
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4336|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (= (__prim__bool___box__%limited $Snap.unit result@11@00) box@10@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4390|)))
(assert (forall ((s@$ $Snap) (box@10@00 $Ref)) (!
  (let ((result@11@00 (bool___unbox__%limited s@$ box@10@00))) (=>
    (bool___unbox__%precondition s@$ box@10@00)
    (__prim__bool___box__%precondition $Snap.unit result@11@00)))
  :pattern ((bool___unbox__%limited s@$ box@10@00))
  :qid |quant-u-4391|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (=
    (__prim__int___box__%limited s@$ prim@12@00)
    (__prim__int___box__ s@$ prim@12@00))
  :pattern ((__prim__int___box__ s@$ prim@12@00))
  :qid |quant-u-4337|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (__prim__int___box__%stateless prim@12@00)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4338|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (and
      (= (typeof<PyType> result@13@00) (as int<PyType>  PyType))
      (= (int___unbox__%limited $Snap.unit result@13@00) prim@12@00))))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4392|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) true)
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4393|)))
(assert (forall ((s@$ $Snap) (prim@12@00 Int)) (!
  (let ((result@13@00 (__prim__int___box__%limited s@$ prim@12@00))) (=>
    (__prim__int___box__%precondition s@$ prim@12@00)
    (int___unbox__%precondition $Snap.unit result@13@00)))
  :pattern ((__prim__int___box__%limited s@$ prim@12@00))
  :qid |quant-u-4394|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (= (list___len__%limited s@$ self@14@00) (list___len__ s@$ self@14@00))
  :pattern ((list___len__ s@$ self@14@00))
  :qid |quant-u-4339|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (list___len__%stateless self@14@00)
  :pattern ((list___len__%limited s@$ self@14@00))
  :qid |quant-u-4340|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  (and
    ($Perm.isReadVar $k@72@00)
    (=>
      (list___len__%precondition s@$ self@14@00)
      (=
        (list___len__ s@$ self@14@00)
        (Seq_length ($SortWrappers.$SnapToSeq<$Ref> ($Snap.second s@$))))))
  :pattern ((list___len__ s@$ self@14@00))
  :qid |quant-u-4395|)))
(assert (forall ((s@$ $Snap) (self@14@00 $Ref)) (!
  true
  :pattern ((list___len__ s@$ self@14@00))
  :qid |quant-u-4396|)))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (= (_isDefined%limited s@$ id@16@00) (_isDefined s@$ id@16@00))
  :pattern ((_isDefined s@$ id@16@00))
  :qid |quant-u-4341|)))
(assert (forall ((s@$ $Snap) (id@16@00 Int)) (!
  (_isDefined%stateless id@16@00)
  :pattern ((_isDefined%limited s@$ id@16@00))
  :qid |quant-u-4342|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (= (py_range___len__%limited s@$ self@18@00) (py_range___len__ s@$ self@18@00))
  :pattern ((py_range___len__ s@$ self@18@00))
  :qid |quant-u-4343|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (py_range___len__%stateless self@18@00)
  :pattern ((py_range___len__%limited s@$ self@18@00))
  :qid |quant-u-4344|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (let ((result@19@00 (py_range___len__%limited s@$ self@18@00))) (=>
    (py_range___len__%precondition s@$ self@18@00)
    (= result@19@00 (Seq_length (py_range___val__ $Snap.unit self@18@00)))))
  :pattern ((py_range___len__%limited s@$ self@18@00))
  :qid |quant-u-4397|)))
(assert (forall ((s@$ $Snap) (self@18@00 $Ref)) (!
  (let ((result@19@00 (py_range___len__%limited s@$ self@18@00))) (=>
    (py_range___len__%precondition s@$ self@18@00)
    (py_range___val__%precondition $Snap.unit self@18@00)))
  :pattern ((py_range___len__%limited s@$ self@18@00))
  :qid |quant-u-4398|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref)) (!
  (= (dict___values__%limited s@$ self@20@00) (dict___values__ s@$ self@20@00))
  :pattern ((dict___values__ s@$ self@20@00))
  :qid |quant-u-4345|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref)) (!
  (dict___values__%stateless self@20@00)
  :pattern ((dict___values__%limited s@$ self@20@00))
  :qid |quant-u-4346|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref)) (!
  (let ((result@21@00 (dict___values__%limited s@$ self@20@00))) (and
    ($Perm.isReadVar $k@74@00)
    ($Perm.isReadVar $k@75@00)
    (=>
      (dict___values__%precondition s@$ self@20@00)
      (=
        (Seq_length result@21@00)
        (Set_card ($SortWrappers.$SnapToSet<$Ref> ($Snap.first s@$)))))))
  :pattern ((dict___values__%limited s@$ self@20@00))
  :qid |quant-u-4399|)))
(assert (forall ((s@$ $Snap) (self@20@00 $Ref)) (!
  (let ((result@21@00 (dict___values__%limited s@$ self@20@00))) true)
  :pattern ((dict___values__%limited s@$ self@20@00))
  :qid |quant-u-4400|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (item@23@00 $Ref)) (!
  (=
    (dict___contains__%limited s@$ self@22@00 item@23@00)
    (dict___contains__ s@$ self@22@00 item@23@00))
  :pattern ((dict___contains__ s@$ self@22@00 item@23@00))
  :qid |quant-u-4347|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (item@23@00 $Ref)) (!
  (dict___contains__%stateless self@22@00 item@23@00)
  :pattern ((dict___contains__%limited s@$ self@22@00 item@23@00))
  :qid |quant-u-4348|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (item@23@00 $Ref)) (!
  (let ((result@24@00 (dict___contains__%limited s@$ self@22@00 item@23@00))) (and
    ($Perm.isReadVar $k@77@00)
    ($Perm.isReadVar $k@78@00)
    (=>
      (dict___contains__%precondition s@$ self@22@00 item@23@00)
      (=
        result@24@00
        (Set_in item@23@00 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second s@$))))))))
  :pattern ((dict___contains__%limited s@$ self@22@00 item@23@00))
  :qid |quant-u-4401|)))
(assert (forall ((s@$ $Snap) (self@22@00 $Ref) (item@23@00 $Ref)) (!
  (let ((result@24@00 (dict___contains__%limited s@$ self@22@00 item@23@00))) true)
  :pattern ((dict___contains__%limited s@$ self@22@00 item@23@00))
  :qid |quant-u-4402|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (=
    (py_range___stop__%limited s@$ self@25@00)
    (py_range___stop__ s@$ self@25@00))
  :pattern ((py_range___stop__ s@$ self@25@00))
  :qid |quant-u-4349|)))
(assert (forall ((s@$ $Snap) (self@25@00 $Ref)) (!
  (py_range___stop__%stateless self@25@00)
  :pattern ((py_range___stop__%limited s@$ self@25@00))
  :qid |quant-u-4350|)))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (=
    (py_range___start__%limited s@$ self@27@00)
    (py_range___start__ s@$ self@27@00))
  :pattern ((py_range___start__ s@$ self@27@00))
  :qid |quant-u-4351|)))
(assert (forall ((s@$ $Snap) (self@27@00 $Ref)) (!
  (py_range___start__%stateless self@27@00)
  :pattern ((py_range___start__%limited s@$ self@27@00))
  :qid |quant-u-4352|)))
(assert (forall ((s@$ $Snap) (r@29@00 $Ref)) (!
  (= (Level%limited s@$ r@29@00) (Level s@$ r@29@00))
  :pattern ((Level s@$ r@29@00))
  :qid |quant-u-4353|)))
(assert (forall ((s@$ $Snap) (r@29@00 $Ref)) (!
  (Level%stateless r@29@00)
  :pattern ((Level%limited s@$ r@29@00))
  :qid |quant-u-4354|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (=
    (str___create__%limited s@$ len@31@00 value@32@00)
    (str___create__ s@$ len@31@00 value@32@00))
  :pattern ((str___create__ s@$ len@31@00 value@32@00))
  :qid |quant-u-4355|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (str___create__%stateless len@31@00 value@32@00)
  :pattern ((str___create__%limited s@$ len@31@00 value@32@00))
  :qid |quant-u-4356|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (let ((result@33@00 (str___create__%limited s@$ len@31@00 value@32@00))) (=>
    (str___create__%precondition s@$ len@31@00 value@32@00)
    (and
      (= (str___len__ $Snap.unit result@33@00) len@31@00)
      (= (str___val__ $Snap.unit result@33@00) value@32@00)
      (= (typeof<PyType> result@33@00) (as str<PyType>  PyType)))))
  :pattern ((str___create__%limited s@$ len@31@00 value@32@00))
  :qid |quant-u-4403|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (let ((result@33@00 (str___create__%limited s@$ len@31@00 value@32@00))) (=>
    (str___create__%precondition s@$ len@31@00 value@32@00)
    (str___len__%precondition $Snap.unit result@33@00)))
  :pattern ((str___create__%limited s@$ len@31@00 value@32@00))
  :qid |quant-u-4404|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (let ((result@33@00 (str___create__%limited s@$ len@31@00 value@32@00))) (=>
    (str___create__%precondition s@$ len@31@00 value@32@00)
    (str___val__%precondition $Snap.unit result@33@00)))
  :pattern ((str___create__%limited s@$ len@31@00 value@32@00))
  :qid |quant-u-4405|)))
(assert (forall ((s@$ $Snap) (len@31@00 Int) (value@32@00 Int)) (!
  (let ((result@33@00 (str___create__%limited s@$ len@31@00 value@32@00))) true)
  :pattern ((str___create__%limited s@$ len@31@00 value@32@00))
  :qid |quant-u-4406|)))
(assert (forall ((s@$ $Snap) (self@34@00 $Ref) (key@35@00 $Ref)) (!
  (=
    (list___getitem__%limited s@$ self@34@00 key@35@00)
    (list___getitem__ s@$ self@34@00 key@35@00))
  :pattern ((list___getitem__ s@$ self@34@00 key@35@00))
  :qid |quant-u-4357|)))
(assert (forall ((s@$ $Snap) (self@34@00 $Ref) (key@35@00 $Ref)) (!
  (list___getitem__%stateless self@34@00 key@35@00)
  :pattern ((list___getitem__%limited s@$ self@34@00 key@35@00))
  :qid |quant-u-4358|)))
(assert (forall ((s@$ $Snap) (self@34@00 $Ref) (key@35@00 $Ref)) (!
  (let ((result@36@00 (list___getitem__%limited s@$ self@34@00 key@35@00))) (and
    ($Perm.isReadVar $k@81@00)
    ($Perm.isReadVar $k@82@00)
    ($Perm.isReadVar $k@85@00)
    (=>
      (list___getitem__%precondition s@$ self@34@00 key@35@00)
      (and
        (=
          result@36@00
          (ite
            (>= (int___unbox__ $Snap.unit key@35@00) 0)
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (int___unbox__ $Snap.unit key@35@00))
            (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
              (+
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($Snap.first ($Snap.second ($Snap.second s@$)))) self@34@00)
                (int___unbox__ $Snap.unit key@35@00)))))
        (issubtype<Bool> (typeof<PyType> result@36@00) (list_arg<PyType> (typeof<PyType> self@34@00) 0))))))
  :pattern ((list___getitem__%limited s@$ self@34@00 key@35@00))
  :qid |quant-u-4407|)))
(assert (forall ((s@$ $Snap) (self@34@00 $Ref) (key@35@00 $Ref)) (!
  (let ((result@36@00 (list___getitem__%limited s@$ self@34@00 key@35@00))) (=>
    (list___getitem__%precondition s@$ self@34@00 key@35@00)
    (and
      (int___unbox__%precondition $Snap.unit key@35@00)
      (ite
        (>= (int___unbox__ $Snap.unit key@35@00) 0)
        (int___unbox__%precondition $Snap.unit key@35@00)
        (and
          (list___len__%precondition ($Snap.combine
            $Snap.unit
            ($Snap.first ($Snap.second ($Snap.second s@$)))) self@34@00)
          (int___unbox__%precondition $Snap.unit key@35@00))))))
  :pattern ((list___getitem__%limited s@$ self@34@00 key@35@00))
  :qid |quant-u-4408|)))
(assert (forall ((s@$ $Snap) (self@34@00 $Ref) (key@35@00 $Ref)) (!
  (let ((result@36@00 (list___getitem__%limited s@$ self@34@00 key@35@00))) true)
  :pattern ((list___getitem__%limited s@$ self@34@00 key@35@00))
  :qid |quant-u-4409|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (=
    (int___lt__%limited s@$ self@37@00 other@38@00)
    (int___lt__ s@$ self@37@00 other@38@00))
  :pattern ((int___lt__ s@$ self@37@00 other@38@00))
  :qid |quant-u-4359|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (int___lt__%stateless self@37@00 other@38@00)
  :pattern ((int___lt__%limited s@$ self@37@00 other@38@00))
  :qid |quant-u-4360|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  (=>
    (int___lt__%precondition s@$ self@37@00 other@38@00)
    (= (int___lt__ s@$ self@37@00 other@38@00) (< self@37@00 other@38@00)))
  :pattern ((int___lt__ s@$ self@37@00 other@38@00))
  :qid |quant-u-4410|)))
(assert (forall ((s@$ $Snap) (self@37@00 Int) (other@38@00 Int)) (!
  true
  :pattern ((int___lt__ s@$ self@37@00 other@38@00))
  :qid |quant-u-4411|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__file__%limited s@$) (__file__ s@$))
  :pattern ((__file__ s@$))
  :qid |quant-u-4361|)))
(assert (forall ((s@$ $Snap)) (!
  (as __file__%stateless  Bool)
  :pattern ((__file__%limited s@$))
  :qid |quant-u-4362|)))
(assert (forall ((s@$ $Snap) (val@41@00 $Ref) (id@42@00 Int)) (!
  (=
    (_checkDefined%limited s@$ val@41@00 id@42@00)
    (_checkDefined s@$ val@41@00 id@42@00))
  :pattern ((_checkDefined s@$ val@41@00 id@42@00))
  :qid |quant-u-4363|)))
(assert (forall ((s@$ $Snap) (val@41@00 $Ref) (id@42@00 Int)) (!
  (_checkDefined%stateless val@41@00 id@42@00)
  :pattern ((_checkDefined%limited s@$ val@41@00 id@42@00))
  :qid |quant-u-4364|)))
(assert (forall ((s@$ $Snap) (val@41@00 $Ref) (id@42@00 Int)) (!
  (=>
    (_checkDefined%precondition s@$ val@41@00 id@42@00)
    (= (_checkDefined s@$ val@41@00 id@42@00) val@41@00))
  :pattern ((_checkDefined s@$ val@41@00 id@42@00))
  :qid |quant-u-4412|)))
(assert (forall ((s@$ $Snap) (val@41@00 $Ref) (id@42@00 Int)) (!
  true
  :pattern ((_checkDefined s@$ val@41@00 id@42@00))
  :qid |quant-u-4413|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (=
    (py_range___sil_seq__%limited s@$ self@44@00)
    (py_range___sil_seq__ s@$ self@44@00))
  :pattern ((py_range___sil_seq__ s@$ self@44@00))
  :qid |quant-u-4365|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (py_range___sil_seq__%stateless self@44@00)
  :pattern ((py_range___sil_seq__%limited s@$ self@44@00))
  :qid |quant-u-4366|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (let ((result@45@00 (py_range___sil_seq__%limited s@$ self@44@00))) (=>
    (py_range___sil_seq__%precondition s@$ self@44@00)
    (and
      (= (Seq_length result@45@00) (py_range___len__ $Snap.unit self@44@00))
      (forall ((i Int)) (!
        (=>
          (and
            (>= i 0)
            (< i (Seq_length (py_range___val__ $Snap.unit self@44@00))))
          (=
            (Seq_index result@45@00 i)
            (__prim__int___box__ $Snap.unit (Seq_index
              (py_range___val__ $Snap.unit self@44@00)
              i))))
        :pattern ((Seq_index result@45@00 i))
        ))
      (forall ((i $Ref)) (!
        (=
          (Seq_contains result@45@00 i)
          (and
            (= (typeof<PyType> i) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___val__ $Snap.unit self@44@00)
              (int___unbox__ $Snap.unit i))))
        :pattern ((Seq_contains result@45@00 i))
        :pattern ((Seq_contains_trigger result@45@00 i))
        :pattern ((Seq_contains_trigger result@45@00 i))
        )))))
  :pattern ((py_range___sil_seq__%limited s@$ self@44@00))
  :qid |quant-u-4414|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (let ((result@45@00 (py_range___sil_seq__%limited s@$ self@44@00))) (=>
    (py_range___sil_seq__%precondition s@$ self@44@00)
    (py_range___len__%precondition $Snap.unit self@44@00)))
  :pattern ((py_range___sil_seq__%limited s@$ self@44@00))
  :qid |quant-u-4415|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (let ((result@45@00 (py_range___sil_seq__%limited s@$ self@44@00))) (=>
    (py_range___sil_seq__%precondition s@$ self@44@00)
    (forall ((i Int)) (!
      (and
        (=> (>= i 0) (py_range___val__%precondition $Snap.unit self@44@00))
        (=>
          (and
            (>= i 0)
            (< i (Seq_length (py_range___val__ $Snap.unit self@44@00))))
          (and
            (py_range___val__%precondition $Snap.unit self@44@00)
            (__prim__int___box__%precondition $Snap.unit (Seq_index
              (py_range___val__ $Snap.unit self@44@00)
              i)))))
      :pattern ((Seq_index result@45@00 i))
      ))))
  :pattern ((py_range___sil_seq__%limited s@$ self@44@00))
  :qid |quant-u-4416|)))
(assert (forall ((s@$ $Snap) (self@44@00 $Ref)) (!
  (let ((result@45@00 (py_range___sil_seq__%limited s@$ self@44@00))) (=>
    (py_range___sil_seq__%precondition s@$ self@44@00)
    (forall ((i $Ref)) (!
      (=>
        (= (typeof<PyType> i) (as int<PyType>  PyType))
        (and
          (py_range___val__%precondition $Snap.unit self@44@00)
          (int___unbox__%precondition $Snap.unit i)))
      :pattern ((Seq_contains result@45@00 i))
      :pattern ((Seq_contains_trigger result@45@00 i))
      :pattern ((Seq_contains_trigger result@45@00 i))
      :pattern ((Seq_contains_trigger result@45@00 i))
      ))))
  :pattern ((py_range___sil_seq__%limited s@$ self@44@00))
  :qid |quant-u-4417|)))
(assert (forall ((s@$ $Snap) (map@46@00 Seq<Measure$>) (key@47@00 $Ref) (value@48@00 Int)) (!
  (=
    (Measure$check%limited s@$ map@46@00 key@47@00 value@48@00)
    (Measure$check s@$ map@46@00 key@47@00 value@48@00))
  :pattern ((Measure$check s@$ map@46@00 key@47@00 value@48@00))
  :qid |quant-u-4367|)))
(assert (forall ((s@$ $Snap) (map@46@00 Seq<Measure$>) (key@47@00 $Ref) (value@48@00 Int)) (!
  (Measure$check%stateless map@46@00 key@47@00 value@48@00)
  :pattern ((Measure$check%limited s@$ map@46@00 key@47@00 value@48@00))
  :qid |quant-u-4368|)))
(assert (forall ((s@$ $Snap) (map@46@00 Seq<Measure$>) (key@47@00 $Ref) (value@48@00 Int)) (!
  (=>
    (Measure$check%precondition s@$ map@46@00 key@47@00 value@48@00)
    (=
      (Measure$check s@$ map@46@00 key@47@00 value@48@00)
      (forall ((m Measure$)) (!
        (=>
          (and
            (Seq_contains map@46@00 m)
            (and (Measure$guard<Bool> m) (= (Measure$key<Ref> m) key@47@00)))
          (> (Measure$value<Int> m) value@48@00))
        :pattern ((Seq_contains map@46@00 m))
        :pattern ((Seq_contains_trigger map@46@00 m))
        :pattern ((Seq_contains_trigger map@46@00 m))
        ))))
  :pattern ((Measure$check s@$ map@46@00 key@47@00 value@48@00))
  :qid |quant-u-4418|)))
(assert (forall ((s@$ $Snap) (map@46@00 Seq<Measure$>) (key@47@00 $Ref) (value@48@00 Int)) (!
  true
  :pattern ((Measure$check s@$ map@46@00 key@47@00 value@48@00))
  :qid |quant-u-4419|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (=
    (str___eq__%limited s@$ self@50@00 other@51@00)
    (str___eq__ s@$ self@50@00 other@51@00))
  :pattern ((str___eq__ s@$ self@50@00 other@51@00))
  :qid |quant-u-4369|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (str___eq__%stateless self@50@00 other@51@00)
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-4370|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (str___eq__%precondition s@$ self@50@00 other@51@00)
    (and
      (=
        (=
          (str___val__ $Snap.unit self@50@00)
          (str___val__ $Snap.unit other@51@00))
        result@52@00)
      (=>
        result@52@00
        (=
          (str___len__ $Snap.unit self@50@00)
          (str___len__ $Snap.unit other@51@00))))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-4420|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (str___eq__%precondition s@$ self@50@00 other@51@00)
    (and
      (str___val__%precondition $Snap.unit self@50@00)
      (str___val__%precondition $Snap.unit other@51@00))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-4421|)))
(assert (forall ((s@$ $Snap) (self@50@00 $Ref) (other@51@00 $Ref)) (!
  (let ((result@52@00 (str___eq__%limited s@$ self@50@00 other@51@00))) (=>
    (and (str___eq__%precondition s@$ self@50@00 other@51@00) result@52@00)
    (and
      (str___len__%precondition $Snap.unit self@50@00)
      (str___len__%precondition $Snap.unit other@51@00))))
  :pattern ((str___eq__%limited s@$ self@50@00 other@51@00))
  :qid |quant-u-4422|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (=
    (dict___getitem__%limited s@$ self@53@00 key@54@00)
    (dict___getitem__ s@$ self@53@00 key@54@00))
  :pattern ((dict___getitem__ s@$ self@53@00 key@54@00))
  :qid |quant-u-4371|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (dict___getitem__%stateless self@53@00 key@54@00)
  :pattern ((dict___getitem__%limited s@$ self@53@00 key@54@00))
  :qid |quant-u-4372|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (let ((result@55@00 (dict___getitem__%limited s@$ self@53@00 key@54@00))) (and
    ($Perm.isReadVar $k@91@00)
    ($Perm.isReadVar $k@92@00)
    ($Perm.isReadVar $k@93@00)
    ($Perm.isReadVar $k@94@00)
    ($Perm.isReadVar $k@96@00)
    ($Perm.isReadVar $k@97@00)
    (=>
      (dict___getitem__%precondition s@$ self@53@00 key@54@00)
      (and
        (issubtype<Bool> (typeof<PyType> result@55@00) (dict_arg<PyType> (typeof<PyType> self@53@00) 1))
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second s@$))
            ($Snap.first ($Snap.second ($Snap.second s@$)))) self@53@00)
          result@55@00)
        (=
          (dict_get_helper<Ref> ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second s@$))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second s@$)))) key@54@00)
          result@55@00)))))
  :pattern ((dict___getitem__%limited s@$ self@53@00 key@54@00))
  :qid |quant-u-4423|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (let ((result@55@00 (dict___getitem__%limited s@$ self@53@00 key@54@00))) true)
  :pattern ((dict___getitem__%limited s@$ self@53@00 key@54@00))
  :qid |quant-u-4424|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (let ((result@55@00 (dict___getitem__%limited s@$ self@53@00 key@54@00))) (=>
    (dict___getitem__%precondition s@$ self@53@00 key@54@00)
    (dict___values__%precondition ($Snap.combine
      ($Snap.first ($Snap.second s@$))
      ($Snap.first ($Snap.second ($Snap.second s@$)))) self@53@00)))
  :pattern ((dict___getitem__%limited s@$ self@53@00 key@54@00))
  :qid |quant-u-4425|)))
(assert (forall ((s@$ $Snap) (self@53@00 $Ref) (key@54@00 $Ref)) (!
  (let ((result@55@00 (dict___getitem__%limited s@$ self@53@00 key@54@00))) true)
  :pattern ((dict___getitem__%limited s@$ self@53@00 key@54@00))
  :qid |quant-u-4426|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (=
    (int___ge__%limited s@$ self@56@00 other@57@00)
    (int___ge__ s@$ self@56@00 other@57@00))
  :pattern ((int___ge__ s@$ self@56@00 other@57@00))
  :qid |quant-u-4373|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (int___ge__%stateless self@56@00 other@57@00)
  :pattern ((int___ge__%limited s@$ self@56@00 other@57@00))
  :qid |quant-u-4374|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  (=>
    (int___ge__%precondition s@$ self@56@00 other@57@00)
    (= (int___ge__ s@$ self@56@00 other@57@00) (>= self@56@00 other@57@00)))
  :pattern ((int___ge__ s@$ self@56@00 other@57@00))
  :qid |quant-u-4427|)))
(assert (forall ((s@$ $Snap) (self@56@00 Int) (other@57@00 Int)) (!
  true
  :pattern ((int___ge__ s@$ self@56@00 other@57@00))
  :qid |quant-u-4428|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (=
    (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00)
    (py_range___create__ s@$ start@59@00 stop@60@00 ctr@61@00))
  :pattern ((py_range___create__ s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4375|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (py_range___create__%stateless start@59@00 stop@60@00 ctr@61@00)
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4376|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (let ((result@62@00 (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))) (=>
    (py_range___create__%precondition s@$ start@59@00 stop@60@00 ctr@61@00)
    (and
      (Seq_equal
        (py_range___val__ $Snap.unit result@62@00)
        (Seq_range start@59@00 stop@60@00))
      (= (py_range___start__ $Snap.unit result@62@00) start@59@00)
      (= (py_range___stop__ $Snap.unit result@62@00) stop@60@00)
      (= (typeof<PyType> result@62@00) (as py_range<PyType>  PyType)))))
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4429|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (let ((result@62@00 (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))) (=>
    (py_range___create__%precondition s@$ start@59@00 stop@60@00 ctr@61@00)
    (py_range___val__%precondition $Snap.unit result@62@00)))
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4430|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (let ((result@62@00 (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))) (=>
    (py_range___create__%precondition s@$ start@59@00 stop@60@00 ctr@61@00)
    (py_range___start__%precondition $Snap.unit result@62@00)))
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4431|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (let ((result@62@00 (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))) (=>
    (py_range___create__%precondition s@$ start@59@00 stop@60@00 ctr@61@00)
    (py_range___stop__%precondition $Snap.unit result@62@00)))
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4432|)))
(assert (forall ((s@$ $Snap) (start@59@00 Int) (stop@60@00 Int) (ctr@61@00 Int)) (!
  (let ((result@62@00 (py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))) true)
  :pattern ((py_range___create__%limited s@$ start@59@00 stop@60@00 ctr@61@00))
  :qid |quant-u-4433|)))
(assert (forall ((s@$ $Snap) (self@63@00 Int) (other@64@00 Int)) (!
  (=
    (int___gt__%limited s@$ self@63@00 other@64@00)
    (int___gt__ s@$ self@63@00 other@64@00))
  :pattern ((int___gt__ s@$ self@63@00 other@64@00))
  :qid |quant-u-4377|)))
(assert (forall ((s@$ $Snap) (self@63@00 Int) (other@64@00 Int)) (!
  (int___gt__%stateless self@63@00 other@64@00)
  :pattern ((int___gt__%limited s@$ self@63@00 other@64@00))
  :qid |quant-u-4378|)))
(assert (forall ((s@$ $Snap) (self@63@00 Int) (other@64@00 Int)) (!
  (=>
    (int___gt__%precondition s@$ self@63@00 other@64@00)
    (= (int___gt__ s@$ self@63@00 other@64@00) (> self@63@00 other@64@00)))
  :pattern ((int___gt__ s@$ self@63@00 other@64@00))
  :qid |quant-u-4434|)))
(assert (forall ((s@$ $Snap) (self@63@00 Int) (other@64@00 Int)) (!
  true
  :pattern ((int___gt__ s@$ self@63@00 other@64@00))
  :qid |quant-u-4435|)))
(assert (forall ((s@$ $Snap)) (!
  (= (__name__%limited s@$) (__name__ s@$))
  :pattern ((__name__ s@$))
  :qid |quant-u-4379|)))
(assert (forall ((s@$ $Snap)) (!
  (as __name__%stateless  Bool)
  :pattern ((__name__%limited s@$))
  :qid |quant-u-4380|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- test_py_range ----------
(declare-const _cthread_156@0@01 $Ref)
(declare-const _caller_measures_156@1@01 Seq<Measure$>)
(declare-const _residue_156@2@01 $Perm)
(declare-const _current_wait_level_156@3@01 $Perm)
(declare-const _cthread_156@4@01 $Ref)
(declare-const _caller_measures_156@5@01 Seq<Measure$>)
(declare-const _residue_156@6@01 $Perm)
(declare-const _current_wait_level_156@7@01 $Perm)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] _cthread_156 != null
(assert (not (= _cthread_156@4@01 $Ref.null)))
(assert (=
  ($Snap.second $t@8@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.second ($Snap.second $t@8@01)))))
(assert (= ($Snap.first ($Snap.second $t@8@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_156), Thread_0())
; [eval] typeof(_cthread_156)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_156@4@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@8@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(assert (= ($Snap.first $t@9@01) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseBounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second $t@9@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@9@01))
    ($Snap.second ($Snap.second $t@9@01)))))
(assert (= ($Snap.first ($Snap.second $t@9@01)) $Snap.unit))
; [eval] (forperm _r: Ref [_r.MustReleaseUnbounded] :: Level(_r) <= _current_wait_level_156)
(assert (=
  ($Snap.second ($Snap.second $t@9@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@9@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@9@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
; [eval] _residue_156 <= _current_wait_level_156
(assert (<= _residue_156@6@01 _current_wait_level_156@7@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@9@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@10@01 $Ref)
; [exec]
; var r: Ref
(declare-const r@11@01 $Ref)
; [exec]
; var _cwl_156: Perm
(declare-const _cwl_156@12@01 $Perm)
; [exec]
; var _method_measures_156: Seq[Measure$]
(declare-const _method_measures_156@13@01 Seq<Measure$>)
; [exec]
; _method_measures_156 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; r := py_range___create__(3, 6, 0)
; [eval] py_range___create__(3, 6, 0)
(push) ; 3
; [eval] stop >= start
(assert (py_range___create__%precondition $Snap.unit 3 6 0))
(pop) ; 3
; Joined path conditions
(assert (py_range___create__%precondition $Snap.unit 3 6 0))
(declare-const r@14@01 $Ref)
(assert (= r@14@01 (py_range___create__ $Snap.unit 3 6 0)))
; [exec]
; inhale _isDefined(114)
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] _isDefined(114)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 114))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 114))
(assert (_isDefined $Snap.unit 114))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda9_21$i: Ref ::
;     { (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) }
;     issubtype(typeof(lambda9_21$i), int()) ==>
;     (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) ==>
;     int___gt__(int___unbox__(lambda9_21$i), 1))
; [eval] (forall lambda9_21$i: Ref :: { (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) } issubtype(typeof(lambda9_21$i), int()) ==> (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) ==> int___gt__(int___unbox__(lambda9_21$i), 1))
(declare-const lambda9_21$i@16@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda9_21$i), int()) ==> (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) ==> int___gt__(int___unbox__(lambda9_21$i), 1)
; [eval] issubtype(typeof(lambda9_21$i), int())
; [eval] typeof(lambda9_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda9_21$i@16@01), int[PyType]) | live]
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda9_21$i@16@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 0 | issubtype[Bool](typeof[PyType](lambda9_21$i@16@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType)))
; [eval] (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114))) ==> int___gt__(int___unbox__(lambda9_21$i), 1)
; [eval] (lambda9_21$i in py_range___sil_seq__(_checkDefined(r, 114)))
; [eval] py_range___sil_seq__(_checkDefined(r, 114))
; [eval] _checkDefined(r, 114)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r@14@01 114))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r@14@01 114))
(push) ; 6
; [eval] issubtype(typeof(self), py_range())
; [eval] typeof(self)
; [eval] py_range()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType)))
(assert (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType))
  (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))))
(push) ; 6
; [then-branch: 1 | lambda9_21$i@16@01 in py_range___sil_seq__(_, _checkDefined(_, r@14@01, 114)) | live]
; [else-branch: 1 | !(lambda9_21$i@16@01 in py_range___sil_seq__(_, _checkDefined(_, r@14@01, 114))) | live]
(push) ; 7
; [then-branch: 1 | lambda9_21$i@16@01 in py_range___sil_seq__(_, _checkDefined(_, r@14@01, 114))]
(assert (Seq_contains
  (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
  lambda9_21$i@16@01))
; [eval] int___gt__(int___unbox__(lambda9_21$i), 1)
; [eval] int___unbox__(lambda9_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))
(pop) ; 7
(push) ; 7
; [else-branch: 1 | !(lambda9_21$i@16@01 in py_range___sil_seq__(_, _checkDefined(_, r@14@01, 114)))]
(assert (not
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01)
  (and
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
      lambda9_21$i@16@01)
    (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
      lambda9_21$i@16@01))
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(issubtype[Bool](typeof[PyType](lambda9_21$i@16@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit r@14@01 114)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType))
    (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    (=>
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
        lambda9_21$i@16@01)
      (and
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
          lambda9_21$i@16@01)
        (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1)))
    (or
      (not
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
          lambda9_21$i@16@01))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
        lambda9_21$i@16@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda9_21$i@16@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r@14@01 114)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
            lambda9_21$i@16@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
              lambda9_21$i@16@01)
            (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
              lambda9_21$i@16@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
            lambda9_21$i@16@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@602@11@602@256-aux|)))
(assert (forall ((lambda9_21$i@16@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r@14@01 114)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r@14@01 114)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
            lambda9_21$i@16@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
              lambda9_21$i@16@01)
            (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
              lambda9_21$i@16@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
            lambda9_21$i@16@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@602@11@602@256-aux|)))
(assert (forall ((lambda9_21$i@16@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
      (and
        (_checkDefined%precondition $Snap.unit r@14@01 114)
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
          lambda9_21$i@16@01))
      (and
        (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@602@11@602@256_precondition|)))
(push) ; 3
(assert (not (forall ((lambda9_21$i@16@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
          (and
            (_checkDefined%precondition $Snap.unit r@14@01 114)
            (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r@14@01 114))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
              lambda9_21$i@16@01))
          (and
            (int___unbox__%precondition $Snap.unit lambda9_21$i@16@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
          lambda9_21$i@16@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@602@11@602@256|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda9_21$i@16@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda9_21$i@16@01) (as int<PyType>  PyType))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
        lambda9_21$i@16@01))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda9_21$i@16@01) 1))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r@14@01 114))
    lambda9_21$i@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@602@11@602@256|)))
; [exec]
; label __end
; [eval] (forperm _r_0: Ref [MustInvokeBounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [MustInvokeUnbounded(_r_0)] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseBounded] :: false)
; [eval] (forperm _r_0: Ref [_r_0.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- test_py_range_2 ----------
(declare-const _cthread_157@17@01 $Ref)
(declare-const _caller_measures_157@18@01 Seq<Measure$>)
(declare-const _residue_157@19@01 $Perm)
(declare-const _current_wait_level_157@20@01 $Perm)
(declare-const _cthread_157@21@01 $Ref)
(declare-const _caller_measures_157@22@01 Seq<Measure$>)
(declare-const _residue_157@23@01 $Perm)
(declare-const _current_wait_level_157@24@01 $Perm)
(push) ; 1
(declare-const $t@25@01 $Snap)
(assert (= $t@25@01 ($Snap.combine ($Snap.first $t@25@01) ($Snap.second $t@25@01))))
(assert (= ($Snap.first $t@25@01) $Snap.unit))
; [eval] _cthread_157 != null
(assert (not (= _cthread_157@21@01 $Ref.null)))
(assert (=
  ($Snap.second $t@25@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@25@01))
    ($Snap.second ($Snap.second $t@25@01)))))
(assert (= ($Snap.first ($Snap.second $t@25@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_157), Thread_0())
; [eval] typeof(_cthread_157)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_157@21@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@25@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseBounded] :: Level(_r_2) <= _current_wait_level_157)
(assert (=
  ($Snap.second $t@26@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@26@01))
    ($Snap.second ($Snap.second $t@26@01)))))
(assert (= ($Snap.first ($Snap.second $t@26@01)) $Snap.unit))
; [eval] (forperm _r_2: Ref [_r_2.MustReleaseUnbounded] :: Level(_r_2) <= _current_wait_level_157)
(assert (=
  ($Snap.second ($Snap.second $t@26@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@26@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@26@01))) $Snap.unit))
; [eval] _residue_157 <= _current_wait_level_157
(assert (<= _residue_157@23@01 _current_wait_level_157@24@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@26@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@27@01 $Ref)
; [exec]
; var r_0: Ref
(declare-const r_0@28@01 $Ref)
; [exec]
; var _cwl_157: Perm
(declare-const _cwl_157@29@01 $Perm)
; [exec]
; var _method_measures_157: Seq[Measure$]
(declare-const _method_measures_157@30@01 Seq<Measure$>)
; [exec]
; _method_measures_157 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; r_0 := py_range___create__(3, 6, 1)
; [eval] py_range___create__(3, 6, 1)
(push) ; 3
; [eval] stop >= start
(assert (py_range___create__%precondition $Snap.unit 3 6 1))
(pop) ; 3
; Joined path conditions
(assert (py_range___create__%precondition $Snap.unit 3 6 1))
(declare-const r_0@31@01 $Ref)
(assert (= r_0@31@01 (py_range___create__ $Snap.unit 3 6 1)))
; [exec]
; inhale _isDefined(3170162)
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 $Snap.unit))
; [eval] _isDefined(3170162)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3170162))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3170162))
(assert (_isDefined $Snap.unit 3170162))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda15_21$i: Ref ::
;     { (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) }
;     issubtype(typeof(lambda15_21$i), int()) ==>
;     (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==>
;     int___gt__(int___unbox__(lambda15_21$i), 4))
; [eval] (forall lambda15_21$i: Ref :: { (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) } issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4))
(declare-const lambda15_21$i@33@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] issubtype(typeof(lambda15_21$i), int())
; [eval] typeof(lambda15_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 2 | issubtype[Bool](typeof[PyType](lambda15_21$i@33@01), int[PyType]) | live]
; [else-branch: 2 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@33@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 2 | issubtype[Bool](typeof[PyType](lambda15_21$i@33@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType)))
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162)))
; [eval] py_range___sil_seq__(_checkDefined(r_0, 3170162))
; [eval] _checkDefined(r_0, 3170162)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(push) ; 6
; [eval] issubtype(typeof(self), py_range())
; [eval] typeof(self)
; [eval] py_range()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType)))
(assert (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
  (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
(push) ; 6
; [then-branch: 3 | lambda15_21$i@33@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)) | live]
; [else-branch: 3 | !(lambda15_21$i@33@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))) | live]
(push) ; 7
; [then-branch: 3 | lambda15_21$i@33@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))]
(assert (Seq_contains
  (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
  lambda15_21$i@33@01))
; [eval] int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] int___unbox__(lambda15_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 3 | !(lambda15_21$i@33@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)))]
(assert (not
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01)
  (and
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@33@01)
    (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@33@01))
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@33@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
    (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    (=>
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@33@01)
      (and
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@33@01)
        (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4)))
    (or
      (not
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@33@01))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@33@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda15_21$i@33@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@33@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@33@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@33@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@33@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@33@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@33@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@33@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@33@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@33@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@33@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
      (and
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@33@01))
      (and
        (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273_precondition|)))
(push) ; 3
(assert (not (forall ((lambda15_21$i@33@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
          (and
            (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
            (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@33@01))
          (and
            (int___unbox__%precondition $Snap.unit lambda15_21$i@33@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@33@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@33@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@33@01) 4))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda15_21$i: Ref :: { (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) } issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4))
(declare-const lambda15_21$i@34@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] issubtype(typeof(lambda15_21$i), int())
; [eval] typeof(lambda15_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda15_21$i@34@01), int[PyType]) | live]
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@34@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 4 | issubtype[Bool](typeof[PyType](lambda15_21$i@34@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162)))
; [eval] py_range___sil_seq__(_checkDefined(r_0, 3170162))
; [eval] _checkDefined(r_0, 3170162)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(push) ; 6
; [eval] issubtype(typeof(self), py_range())
; [eval] typeof(self)
; [eval] py_range()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType)))
(assert (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
  (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
(push) ; 6
; [then-branch: 5 | lambda15_21$i@34@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)) | live]
; [else-branch: 5 | !(lambda15_21$i@34@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))) | live]
(push) ; 7
; [then-branch: 5 | lambda15_21$i@34@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))]
(assert (Seq_contains
  (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
  lambda15_21$i@34@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] int___unbox__(lambda15_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 5 | !(lambda15_21$i@34@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)))]
(assert (not
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01)
  (and
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@34@01)
    (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@34@01))
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 4 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@34@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
    (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    (=>
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@34@01)
      (and
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@34@01)
        (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4)))
    (or
      (not
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@34@01))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@34@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda15_21$i@34@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@34@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@34@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@34@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@34@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@34@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@34@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@34@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@34@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@34@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@34@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
      (and
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@34@01))
      (and
        (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda15_21$i@34@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
          (and
            (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
            (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@34@01))
          (and
            (int___unbox__%precondition $Snap.unit lambda15_21$i@34@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@34@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@34@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@34@01) 4))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda15_21$i: Ref :: { (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) } issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4))
(declare-const lambda15_21$i@35@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] issubtype(typeof(lambda15_21$i), int())
; [eval] typeof(lambda15_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda15_21$i@35@01), int[PyType]) | live]
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@35@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 6 | issubtype[Bool](typeof[PyType](lambda15_21$i@35@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162)))
; [eval] py_range___sil_seq__(_checkDefined(r_0, 3170162))
; [eval] _checkDefined(r_0, 3170162)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(push) ; 6
; [eval] issubtype(typeof(self), py_range())
; [eval] typeof(self)
; [eval] py_range()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType)))
(assert (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
  (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
(push) ; 6
; [then-branch: 7 | lambda15_21$i@35@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)) | live]
; [else-branch: 7 | !(lambda15_21$i@35@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))) | live]
(push) ; 7
; [then-branch: 7 | lambda15_21$i@35@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))]
(assert (Seq_contains
  (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
  lambda15_21$i@35@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] int___unbox__(lambda15_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 7 | !(lambda15_21$i@35@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)))]
(assert (not
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01)
  (and
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@35@01)
    (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@35@01))
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 6 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@35@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
    (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    (=>
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@35@01)
      (and
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@35@01)
        (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4)))
    (or
      (not
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@35@01))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@35@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda15_21$i@35@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@35@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@35@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@35@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@35@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@35@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@35@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@35@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@35@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@35@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@35@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
      (and
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@35@01))
      (and
        (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda15_21$i@35@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
          (and
            (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
            (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@35@01))
          (and
            (int___unbox__%precondition $Snap.unit lambda15_21$i@35@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@35@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@35@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@35@01) 4))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@35@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda15_21$i: Ref :: { (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) } issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4))
(declare-const lambda15_21$i@36@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda15_21$i), int()) ==> (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] issubtype(typeof(lambda15_21$i), int())
; [eval] typeof(lambda15_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 8 | issubtype[Bool](typeof[PyType](lambda15_21$i@36@01), int[PyType]) | live]
; [else-branch: 8 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@36@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 8 | issubtype[Bool](typeof[PyType](lambda15_21$i@36@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162))) ==> int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] (lambda15_21$i in py_range___sil_seq__(_checkDefined(r_0, 3170162)))
; [eval] py_range___sil_seq__(_checkDefined(r_0, 3170162))
; [eval] _checkDefined(r_0, 3170162)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit r_0@31@01 3170162))
(push) ; 6
; [eval] issubtype(typeof(self), py_range())
; [eval] typeof(self)
; [eval] py_range()
(push) ; 7
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType)))
(assert (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162)))
(pop) ; 6
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
  (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
(push) ; 6
; [then-branch: 9 | lambda15_21$i@36@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)) | live]
; [else-branch: 9 | !(lambda15_21$i@36@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))) | live]
(push) ; 7
; [then-branch: 9 | lambda15_21$i@36@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162))]
(assert (Seq_contains
  (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
  lambda15_21$i@36@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda15_21$i), 4)
; [eval] int___unbox__(lambda15_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(lambda15_21$i@36@01 in py_range___sil_seq__(_, _checkDefined(_, r_0@31@01, 3170162)))]
(assert (not
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01)
  (and
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@36@01)
    (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
      lambda15_21$i@36@01))
  (Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 8 | !(issubtype[Bool](typeof[PyType](lambda15_21$i@36@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
    (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    (=>
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@36@01)
      (and
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@36@01)
        (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4)))
    (or
      (not
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@36@01))
      (Seq_contains
        (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        lambda15_21$i@36@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda15_21$i@36@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@36@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@36@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@36@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@36@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@36@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit r_0@31@01 3170162)) (as py_range<PyType>  PyType))
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
        (=>
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@36@01)
          (and
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@36@01)
            (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4)))
        (or
          (not
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@36@01))
          (Seq_contains
            (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
            lambda15_21$i@36@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273-aux|)))
(assert (forall ((lambda15_21$i@36@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
      (and
        (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
        (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@36@01))
      (and
        (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda15_21$i@36@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
          (and
            (_checkDefined%precondition $Snap.unit r_0@31@01 3170162)
            (py_range___sil_seq__%precondition $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
            (Seq_contains
              (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
              lambda15_21$i@36@01))
          (and
            (int___unbox__%precondition $Snap.unit lambda15_21$i@36@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda15_21$i@36@01) (as int<PyType>  PyType))
        (Seq_contains
          (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
          lambda15_21$i@36@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda15_21$i@36@01) 4))
  :pattern ((Seq_contains
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :pattern ((Seq_contains_trigger
    (py_range___sil_seq__ $Snap.unit (_checkDefined $Snap.unit r_0@31@01 3170162))
    lambda15_21$i@36@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@622@11@622@273|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test_list ----------
(declare-const _cthread_158@37@01 $Ref)
(declare-const _caller_measures_158@38@01 Seq<Measure$>)
(declare-const _residue_158@39@01 $Perm)
(declare-const _current_wait_level_158@40@01 $Perm)
(declare-const _cthread_158@41@01 $Ref)
(declare-const _caller_measures_158@42@01 Seq<Measure$>)
(declare-const _residue_158@43@01 $Perm)
(declare-const _current_wait_level_158@44@01 $Perm)
(push) ; 1
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
; [eval] _cthread_158 != null
(assert (not (= _cthread_158@41@01 $Ref.null)))
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_158), Thread_0())
; [eval] typeof(_cthread_158)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_158@41@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@45@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 ($Snap.combine ($Snap.first $t@46@01) ($Snap.second $t@46@01))))
(assert (= ($Snap.first $t@46@01) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseBounded] :: Level(_r_5) <= _current_wait_level_158)
(assert (=
  ($Snap.second $t@46@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@46@01))
    ($Snap.second ($Snap.second $t@46@01)))))
(assert (= ($Snap.first ($Snap.second $t@46@01)) $Snap.unit))
; [eval] (forperm _r_5: Ref [_r_5.MustReleaseUnbounded] :: Level(_r_5) <= _current_wait_level_158)
(assert (=
  ($Snap.second ($Snap.second $t@46@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@46@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@46@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@46@01))) $Snap.unit))
; [eval] _residue_158 <= _current_wait_level_158
(assert (<= _residue_158@43@01 _current_wait_level_158@44@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@46@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@47@01 $Ref)
; [exec]
; var r_1: Ref
(declare-const r_1@48@01 $Ref)
; [exec]
; var list_0: Ref
(declare-const list_0@49@01 $Ref)
; [exec]
; var _cwl_158: Perm
(declare-const _cwl_158@50@01 $Perm)
; [exec]
; var _method_measures_158: Seq[Measure$]
(declare-const _method_measures_158@51@01 Seq<Measure$>)
; [exec]
; _method_measures_158 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_158, list_0 := list___init__(_cthread_158, _method_measures_158, _residue_158)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@41@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@41@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@41@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_158@41@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@52@01 $Perm)
(declare-const res@53@01 $Ref)
(declare-const $t@54@01 $Snap)
(assert (= $t@54@01 ($Snap.combine ($Snap.first $t@54@01) ($Snap.second $t@54@01))))
(assert (= ($Snap.first $t@54@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@54@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@54@01))
    ($Snap.second ($Snap.second $t@54@01)))))
(assert (= ($Snap.first ($Snap.second $t@54@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@54@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@54@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@54@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_158@43@01 _current_wait_level_8@52@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@54@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))
(assert (not (= res@53@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@53@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@53@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@54@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@53@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_0), list(int()))
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] issubtype(typeof(list_0), list(int()))
; [eval] typeof(list_0)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@53@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; list_0.list_acc := Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (__prim__int___box__ $Snap.unit 3))
        (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
      (Seq_singleton (__prim__int___box__ $Snap.unit 5))))
  3))
(declare-const list_acc@56@01 Seq<$Ref>)
(assert (=
  list_acc@56@01
  (Seq_append
    (Seq_append
      (Seq_singleton (__prim__int___box__ $Snap.unit 3))
      (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
    (Seq_singleton (__prim__int___box__ $Snap.unit 5)))))
; [exec]
; r_1 := list_0
; [exec]
; inhale _isDefined(3235698)
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 $Snap.unit))
; [eval] _isDefined(3235698)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3235698))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3235698))
(assert (_isDefined $Snap.unit 3235698))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda20_21$i: Ref ::
;     { (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) }
;     issubtype(typeof(lambda20_21$i), int()) ==>
;     (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) ==>
;     int___gt__(int___unbox__(lambda20_21$i), 1))
; [eval] (forall lambda20_21$i: Ref :: { (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) } issubtype(typeof(lambda20_21$i), int()) ==> (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) ==> int___gt__(int___unbox__(lambda20_21$i), 1))
(declare-const lambda20_21$i@58@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda20_21$i), int()) ==> (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) ==> int___gt__(int___unbox__(lambda20_21$i), 1)
; [eval] issubtype(typeof(lambda20_21$i), int())
; [eval] typeof(lambda20_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda20_21$i@58@01), int[PyType]) | live]
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda20_21$i@58@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 10 | issubtype[Bool](typeof[PyType](lambda20_21$i@58@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType)))
; [eval] (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc) ==> int___gt__(int___unbox__(lambda20_21$i), 1)
; [eval] (lambda20_21$i in _checkDefined(r_1, 3235698).list_acc)
; [eval] _checkDefined(r_1, 3235698)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@53@01 3235698))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@53@01 3235698))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@53@01 (_checkDefined $Snap.unit res@53@01 3235698))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 11 | lambda20_21$i@58@01 in list_acc@56@01 | live]
; [else-branch: 11 | !(lambda20_21$i@58@01 in list_acc@56@01) | live]
(push) ; 7
; [then-branch: 11 | lambda20_21$i@58@01 in list_acc@56@01]
(assert (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
; [eval] int___gt__(int___unbox__(lambda20_21$i), 1)
; [eval] int___unbox__(lambda20_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1))
(pop) ; 7
(push) ; 7
; [else-branch: 11 | !(lambda20_21$i@58@01 in list_acc@56@01)]
(assert (not (Seq_contains list_acc@56@01 lambda20_21$i@58@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
  (and
    (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
    (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1))))
; Joined path conditions
(assert (or
  (not (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
  (Seq_contains list_acc@56@01 lambda20_21$i@58@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(issubtype[Bool](typeof[PyType](lambda20_21$i@58@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@53@01 3235698)
    (=>
      (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
      (and
        (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
        (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1)))
    (or
      (not (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
      (Seq_contains list_acc@56@01 lambda20_21$i@58@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda20_21$i@58@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@53@01 3235698)
        (=>
          (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
          (and
            (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
            (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1)))
        (or
          (not (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
          (Seq_contains list_acc@56@01 lambda20_21$i@58@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@649@11@649@247-aux|)))
(assert (forall ((lambda20_21$i@58@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@53@01 3235698)
        (=>
          (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
          (and
            (Seq_contains list_acc@56@01 lambda20_21$i@58@01)
            (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1)))
        (or
          (not (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
          (Seq_contains list_acc@56@01 lambda20_21$i@58@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@649@11@649@247-aux|)))
(assert (forall ((lambda20_21$i@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1)))
  :pattern ((Seq_contains list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@649@11@649@247_precondition|)))
(push) ; 3
(assert (not (forall ((lambda20_21$i@58@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
          (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda20_21$i@58@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
        (Seq_contains list_acc@56@01 lambda20_21$i@58@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1))
  :pattern ((Seq_contains list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@649@11@649@247|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(assert (forall ((lambda20_21$i@58@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda20_21$i@58@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@56@01 lambda20_21$i@58@01))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda20_21$i@58@01) 1))
  :pattern ((Seq_contains list_acc@56@01 lambda20_21$i@58@01))
  :pattern ((Seq_contains_trigger list_acc@56@01 lambda20_21$i@58@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@649@11@649@247|)))
; [exec]
; label __end
; [eval] (forperm _r_6: Ref [MustInvokeBounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [MustInvokeUnbounded(_r_6)] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseBounded] :: false)
; [eval] (forperm _r_6: Ref [_r_6.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- test_list_2 ----------
(declare-const _cthread_159@59@01 $Ref)
(declare-const _caller_measures_159@60@01 Seq<Measure$>)
(declare-const _residue_159@61@01 $Perm)
(declare-const _current_wait_level_159@62@01 $Perm)
(declare-const _cthread_159@63@01 $Ref)
(declare-const _caller_measures_159@64@01 Seq<Measure$>)
(declare-const _residue_159@65@01 $Perm)
(declare-const _current_wait_level_159@66@01 $Perm)
(push) ; 1
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 ($Snap.combine ($Snap.first $t@67@01) ($Snap.second $t@67@01))))
(assert (= ($Snap.first $t@67@01) $Snap.unit))
; [eval] _cthread_159 != null
(assert (not (= _cthread_159@63@01 $Ref.null)))
(assert (=
  ($Snap.second $t@67@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@67@01))
    ($Snap.second ($Snap.second $t@67@01)))))
(assert (= ($Snap.first ($Snap.second $t@67@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_159), Thread_0())
; [eval] typeof(_cthread_159)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_159@63@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@67@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 ($Snap.combine ($Snap.first $t@68@01) ($Snap.second $t@68@01))))
(assert (= ($Snap.first $t@68@01) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseBounded] :: Level(_r_8) <= _current_wait_level_159)
(assert (=
  ($Snap.second $t@68@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@68@01))
    ($Snap.second ($Snap.second $t@68@01)))))
(assert (= ($Snap.first ($Snap.second $t@68@01)) $Snap.unit))
; [eval] (forperm _r_8: Ref [_r_8.MustReleaseUnbounded] :: Level(_r_8) <= _current_wait_level_159)
(assert (=
  ($Snap.second ($Snap.second $t@68@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@68@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@68@01))) $Snap.unit))
; [eval] _residue_159 <= _current_wait_level_159
(assert (<= _residue_159@65@01 _current_wait_level_159@66@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@68@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@69@01 $Ref)
; [exec]
; var r_2: Ref
(declare-const r_2@70@01 $Ref)
; [exec]
; var list_1: Ref
(declare-const list_1@71@01 $Ref)
; [exec]
; var _cwl_159: Perm
(declare-const _cwl_159@72@01 $Perm)
; [exec]
; var _method_measures_159: Seq[Measure$]
(declare-const _method_measures_159@73@01 Seq<Measure$>)
; [exec]
; _method_measures_159 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_159, list_1 := list___init__(_cthread_159, _method_measures_159, _residue_159)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@63@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@63@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@63@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_159@63@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@74@01 $Perm)
(declare-const res@75@01 $Ref)
(declare-const $t@76@01 $Snap)
(assert (= $t@76@01 ($Snap.combine ($Snap.first $t@76@01) ($Snap.second $t@76@01))))
(assert (= ($Snap.first $t@76@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@76@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@76@01))
    ($Snap.second ($Snap.second $t@76@01)))))
(assert (= ($Snap.first ($Snap.second $t@76@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@76@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@76@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@76@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_159@65@01 _current_wait_level_8@74@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@76@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))
(assert (not (= res@75@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@75@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@75@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@75@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_1), list(int()))
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] issubtype(typeof(list_1), list(int()))
; [eval] typeof(list_1)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@75@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; list_1.list_acc := Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (__prim__int___box__ $Snap.unit 3))
        (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
      (Seq_singleton (__prim__int___box__ $Snap.unit 5))))
  3))
(declare-const list_acc@78@01 Seq<$Ref>)
(assert (=
  list_acc@78@01
  (Seq_append
    (Seq_append
      (Seq_singleton (__prim__int___box__ $Snap.unit 3))
      (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
    (Seq_singleton (__prim__int___box__ $Snap.unit 5)))))
; [exec]
; r_2 := list_1
; [exec]
; inhale _isDefined(3301234)
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 $Snap.unit))
; [eval] _isDefined(3301234)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3301234))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3301234))
(assert (_isDefined $Snap.unit 3301234))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda26_21$i: Ref ::
;     { (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) }
;     issubtype(typeof(lambda26_21$i), int()) ==>
;     (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==>
;     int___gt__(int___unbox__(lambda26_21$i), 4))
; [eval] (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) } issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4))
(declare-const lambda26_21$i@80@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] issubtype(typeof(lambda26_21$i), int())
; [eval] typeof(lambda26_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 12 | issubtype[Bool](typeof[PyType](lambda26_21$i@80@01), int[PyType]) | live]
; [else-branch: 12 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@80@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 12 | issubtype[Bool](typeof[PyType](lambda26_21$i@80@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType)))
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc)
; [eval] _checkDefined(r_2, 3301234)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@75@01 (_checkDefined $Snap.unit res@75@01 3301234))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 13 | lambda26_21$i@80@01 in list_acc@78@01 | live]
; [else-branch: 13 | !(lambda26_21$i@80@01 in list_acc@78@01) | live]
(push) ; 7
; [then-branch: 13 | lambda26_21$i@80@01 in list_acc@78@01]
(assert (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
; [eval] int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] int___unbox__(lambda26_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 13 | !(lambda26_21$i@80@01 in list_acc@78@01)]
(assert (not (Seq_contains list_acc@78@01 lambda26_21$i@80@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
  (and
    (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
    (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4))))
; Joined path conditions
(assert (or
  (not (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
  (Seq_contains list_acc@78@01 lambda26_21$i@80@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@80@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@75@01 3301234)
    (=>
      (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
      (and
        (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
        (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4)))
    (or
      (not (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
      (Seq_contains list_acc@78@01 lambda26_21$i@80@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda26_21$i@80@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@80@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@80@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@80@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@80@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@80@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@80@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4)))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@80@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247_precondition|)))
(push) ; 3
(assert (not (forall ((lambda26_21$i@80@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
          (Seq_contains list_acc@78@01 lambda26_21$i@80@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda26_21$i@80@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@80@01) (as int<PyType>  PyType))
        (Seq_contains list_acc@78@01 lambda26_21$i@80@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@80@01) 4))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@80@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) } issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4))
(declare-const lambda26_21$i@81@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] issubtype(typeof(lambda26_21$i), int())
; [eval] typeof(lambda26_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 14 | issubtype[Bool](typeof[PyType](lambda26_21$i@81@01), int[PyType]) | live]
; [else-branch: 14 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@81@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 14 | issubtype[Bool](typeof[PyType](lambda26_21$i@81@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc)
; [eval] _checkDefined(r_2, 3301234)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@75@01 (_checkDefined $Snap.unit res@75@01 3301234))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 15 | lambda26_21$i@81@01 in list_acc@78@01 | live]
; [else-branch: 15 | !(lambda26_21$i@81@01 in list_acc@78@01) | live]
(push) ; 7
; [then-branch: 15 | lambda26_21$i@81@01 in list_acc@78@01]
(assert (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] int___unbox__(lambda26_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 15 | !(lambda26_21$i@81@01 in list_acc@78@01)]
(assert (not (Seq_contains list_acc@78@01 lambda26_21$i@81@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
  (and
    (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
    (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4))))
; Joined path conditions
(assert (or
  (not (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
  (Seq_contains list_acc@78@01 lambda26_21$i@81@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 14 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@81@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@75@01 3301234)
    (=>
      (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
      (and
        (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
        (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4)))
    (or
      (not (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
      (Seq_contains list_acc@78@01 lambda26_21$i@81@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda26_21$i@81@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@81@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@81@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@81@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@81@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@81@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@81@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4)))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@81@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda26_21$i@81@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
          (Seq_contains list_acc@78@01 lambda26_21$i@81@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda26_21$i@81@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@81@01) (as int<PyType>  PyType))
        (Seq_contains list_acc@78@01 lambda26_21$i@81@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@81@01) 4))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@81@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@81@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) } issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4))
(declare-const lambda26_21$i@82@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] issubtype(typeof(lambda26_21$i), int())
; [eval] typeof(lambda26_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 16 | issubtype[Bool](typeof[PyType](lambda26_21$i@82@01), int[PyType]) | live]
; [else-branch: 16 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@82@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 16 | issubtype[Bool](typeof[PyType](lambda26_21$i@82@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc)
; [eval] _checkDefined(r_2, 3301234)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@75@01 (_checkDefined $Snap.unit res@75@01 3301234))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 17 | lambda26_21$i@82@01 in list_acc@78@01 | live]
; [else-branch: 17 | !(lambda26_21$i@82@01 in list_acc@78@01) | live]
(push) ; 7
; [then-branch: 17 | lambda26_21$i@82@01 in list_acc@78@01]
(assert (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] int___unbox__(lambda26_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 17 | !(lambda26_21$i@82@01 in list_acc@78@01)]
(assert (not (Seq_contains list_acc@78@01 lambda26_21$i@82@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
  (and
    (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
    (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4))))
; Joined path conditions
(assert (or
  (not (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
  (Seq_contains list_acc@78@01 lambda26_21$i@82@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 16 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@82@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@75@01 3301234)
    (=>
      (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
      (and
        (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
        (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4)))
    (or
      (not (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
      (Seq_contains list_acc@78@01 lambda26_21$i@82@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda26_21$i@82@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@82@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@82@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@82@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@82@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@82@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@82@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4)))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@82@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda26_21$i@82@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
          (Seq_contains list_acc@78@01 lambda26_21$i@82@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda26_21$i@82@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@82@01) (as int<PyType>  PyType))
        (Seq_contains list_acc@78@01 lambda26_21$i@82@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@82@01) 4))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@82@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda26_21$i: Ref :: { (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) } issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4))
(declare-const lambda26_21$i@83@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda26_21$i), int()) ==> (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] issubtype(typeof(lambda26_21$i), int())
; [eval] typeof(lambda26_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 18 | issubtype[Bool](typeof[PyType](lambda26_21$i@83@01), int[PyType]) | live]
; [else-branch: 18 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@83@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 18 | issubtype[Bool](typeof[PyType](lambda26_21$i@83@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc) ==> int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] (lambda26_21$i in _checkDefined(r_2, 3301234).list_acc)
; [eval] _checkDefined(r_2, 3301234)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@75@01 3301234))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@75@01 (_checkDefined $Snap.unit res@75@01 3301234))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 19 | lambda26_21$i@83@01 in list_acc@78@01 | live]
; [else-branch: 19 | !(lambda26_21$i@83@01 in list_acc@78@01) | live]
(push) ; 7
; [then-branch: 19 | lambda26_21$i@83@01 in list_acc@78@01]
(assert (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda26_21$i), 4)
; [eval] int___unbox__(lambda26_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 19 | !(lambda26_21$i@83@01 in list_acc@78@01)]
(assert (not (Seq_contains list_acc@78@01 lambda26_21$i@83@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
  (and
    (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
    (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4))))
; Joined path conditions
(assert (or
  (not (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
  (Seq_contains list_acc@78@01 lambda26_21$i@83@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 18 | !(issubtype[Bool](typeof[PyType](lambda26_21$i@83@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@75@01 3301234)
    (=>
      (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
      (and
        (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
        (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4)))
    (or
      (not (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
      (Seq_contains list_acc@78@01 lambda26_21$i@83@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda26_21$i@83@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@83@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@83@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@83@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@75@01 3301234)
        (=>
          (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
          (and
            (Seq_contains list_acc@78@01 lambda26_21$i@83@01)
            (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4)))
        (or
          (not (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
          (Seq_contains list_acc@78@01 lambda26_21$i@83@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247-aux|)))
(assert (forall ((lambda26_21$i@83@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
      (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4)))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@83@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda26_21$i@83@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
          (Seq_contains list_acc@78@01 lambda26_21$i@83@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda26_21$i@83@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda26_21$i@83@01) (as int<PyType>  PyType))
        (Seq_contains list_acc@78@01 lambda26_21$i@83@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda26_21$i@83@01) 4))
  :pattern ((Seq_contains list_acc@78@01 lambda26_21$i@83@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :pattern ((Seq_contains_trigger list_acc@78@01 lambda26_21$i@83@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@676@11@676@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test_set ----------
(declare-const _cthread_160@84@01 $Ref)
(declare-const _caller_measures_160@85@01 Seq<Measure$>)
(declare-const _residue_160@86@01 $Perm)
(declare-const _current_wait_level_160@87@01 $Perm)
(declare-const _cthread_160@88@01 $Ref)
(declare-const _caller_measures_160@89@01 Seq<Measure$>)
(declare-const _residue_160@90@01 $Perm)
(declare-const _current_wait_level_160@91@01 $Perm)
(push) ; 1
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 ($Snap.combine ($Snap.first $t@92@01) ($Snap.second $t@92@01))))
(assert (= ($Snap.first $t@92@01) $Snap.unit))
; [eval] _cthread_160 != null
(assert (not (= _cthread_160@88@01 $Ref.null)))
(assert (=
  ($Snap.second $t@92@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@92@01))
    ($Snap.second ($Snap.second $t@92@01)))))
(assert (= ($Snap.first ($Snap.second $t@92@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_160), Thread_0())
; [eval] typeof(_cthread_160)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_160@88@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@92@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 ($Snap.combine ($Snap.first $t@93@01) ($Snap.second $t@93@01))))
(assert (= ($Snap.first $t@93@01) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseBounded] :: Level(_r_11) <= _current_wait_level_160)
(assert (=
  ($Snap.second $t@93@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@93@01))
    ($Snap.second ($Snap.second $t@93@01)))))
(assert (= ($Snap.first ($Snap.second $t@93@01)) $Snap.unit))
; [eval] (forperm _r_11: Ref [_r_11.MustReleaseUnbounded] :: Level(_r_11) <= _current_wait_level_160)
(assert (=
  ($Snap.second ($Snap.second $t@93@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@93@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@93@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@93@01))) $Snap.unit))
; [eval] _residue_160 <= _current_wait_level_160
(assert (<= _residue_160@90@01 _current_wait_level_160@91@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@93@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@94@01 $Ref)
; [exec]
; var r_3: Ref
(declare-const r_3@95@01 $Ref)
; [exec]
; var set_0: Ref
(declare-const set_0@96@01 $Ref)
; [exec]
; var _cwl_160: Perm
(declare-const _cwl_160@97@01 $Perm)
; [exec]
; var _method_measures_160: Seq[Measure$]
(declare-const _method_measures_160@98@01 Seq<Measure$>)
; [exec]
; _method_measures_160 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_160, set_0 := set___init__(_cthread_160, _method_measures_160, _residue_160)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@88@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@88@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@88@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_160@88@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@99@01 $Perm)
(declare-const res@100@01 $Ref)
(declare-const $t@101@01 $Snap)
(assert (= $t@101@01 ($Snap.combine ($Snap.first $t@101@01) ($Snap.second $t@101@01))))
(assert (= ($Snap.first $t@101@01) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@101@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@101@01))
    ($Snap.second ($Snap.second $t@101@01)))))
(assert (= ($Snap.first ($Snap.second $t@101@01)) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@101@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@101@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@101@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_160@90@01 _current_wait_level_21@99@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@101@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))))
(assert (not (= res@100@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@101@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@101@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@100@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@100@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_0), set(int()))
(declare-const $t@102@01 $Snap)
(assert (= $t@102@01 $Snap.unit))
; [eval] issubtype(typeof(set_0), set(int()))
; [eval] typeof(set_0)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@100@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_0.set_acc := Set(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const set_acc@103@01 Set<$Ref>)
(assert (=
  set_acc@103@01
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 3)) (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; r_3 := set_0
; [exec]
; inhale _isDefined(3366770)
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] _isDefined(3366770)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3366770))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3366770))
(assert (_isDefined $Snap.unit 3366770))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda31_21$i: Ref ::
;     { (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) }
;     issubtype(typeof(lambda31_21$i), int()) ==>
;     (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) ==>
;     int___gt__(int___unbox__(lambda31_21$i), 1))
; [eval] (forall lambda31_21$i: Ref :: { (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) } issubtype(typeof(lambda31_21$i), int()) ==> (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) ==> int___gt__(int___unbox__(lambda31_21$i), 1))
(declare-const lambda31_21$i@105@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda31_21$i), int()) ==> (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) ==> int___gt__(int___unbox__(lambda31_21$i), 1)
; [eval] issubtype(typeof(lambda31_21$i), int())
; [eval] typeof(lambda31_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 20 | issubtype[Bool](typeof[PyType](lambda31_21$i@105@01), int[PyType]) | live]
; [else-branch: 20 | !(issubtype[Bool](typeof[PyType](lambda31_21$i@105@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 20 | issubtype[Bool](typeof[PyType](lambda31_21$i@105@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType)))
; [eval] (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc) ==> int___gt__(int___unbox__(lambda31_21$i), 1)
; [eval] (lambda31_21$i in _checkDefined(r_3, 3366770).set_acc)
; [eval] _checkDefined(r_3, 3366770)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@100@01 3366770))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@100@01 3366770))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@100@01 (_checkDefined $Snap.unit res@100@01 3366770))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 21 | lambda31_21$i@105@01 in set_acc@103@01 | live]
; [else-branch: 21 | !(lambda31_21$i@105@01 in set_acc@103@01) | live]
(push) ; 7
; [then-branch: 21 | lambda31_21$i@105@01 in set_acc@103@01]
(assert (Set_in lambda31_21$i@105@01 set_acc@103@01))
; [eval] int___gt__(int___unbox__(lambda31_21$i), 1)
; [eval] int___unbox__(lambda31_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1))
(pop) ; 7
(push) ; 7
; [else-branch: 21 | !(lambda31_21$i@105@01 in set_acc@103@01)]
(assert (not (Set_in lambda31_21$i@105@01 set_acc@103@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda31_21$i@105@01 set_acc@103@01)
  (and
    (Set_in lambda31_21$i@105@01 set_acc@103@01)
    (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1))))
; Joined path conditions
(assert (or
  (not (Set_in lambda31_21$i@105@01 set_acc@103@01))
  (Set_in lambda31_21$i@105@01 set_acc@103@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 20 | !(issubtype[Bool](typeof[PyType](lambda31_21$i@105@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@100@01 3366770)
    (=>
      (Set_in lambda31_21$i@105@01 set_acc@103@01)
      (and
        (Set_in lambda31_21$i@105@01 set_acc@103@01)
        (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1)))
    (or
      (not (Set_in lambda31_21$i@105@01 set_acc@103@01))
      (Set_in lambda31_21$i@105@01 set_acc@103@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda31_21$i@105@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@100@01 3366770)
        (=>
          (Set_in lambda31_21$i@105@01 set_acc@103@01)
          (and
            (Set_in lambda31_21$i@105@01 set_acc@103@01)
            (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1)))
        (or
          (not (Set_in lambda31_21$i@105@01 set_acc@103@01))
          (Set_in lambda31_21$i@105@01 set_acc@103@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda31_21$i@105@01 set_acc@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@703@11@703@245-aux|)))
(assert (forall ((lambda31_21$i@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
      (Set_in lambda31_21$i@105@01 set_acc@103@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1)))
  :pattern ((Set_in lambda31_21$i@105@01 set_acc@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@703@11@703@245_precondition|)))
(push) ; 3
(assert (not (forall ((lambda31_21$i@105@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
          (Set_in lambda31_21$i@105@01 set_acc@103@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda31_21$i@105@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
        (Set_in lambda31_21$i@105@01 set_acc@103@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1))
  :pattern ((Set_in lambda31_21$i@105@01 set_acc@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@703@11@703@245|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda31_21$i@105@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda31_21$i@105@01) (as int<PyType>  PyType))
      (Set_in lambda31_21$i@105@01 set_acc@103@01))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda31_21$i@105@01) 1))
  :pattern ((Set_in lambda31_21$i@105@01 set_acc@103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@703@11@703@245|)))
; [exec]
; label __end
; [eval] (forperm _r_12: Ref [MustInvokeBounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [MustInvokeUnbounded(_r_12)] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseBounded] :: false)
; [eval] (forperm _r_12: Ref [_r_12.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- test_set_2 ----------
(declare-const _cthread_161@106@01 $Ref)
(declare-const _caller_measures_161@107@01 Seq<Measure$>)
(declare-const _residue_161@108@01 $Perm)
(declare-const _current_wait_level_161@109@01 $Perm)
(declare-const _cthread_161@110@01 $Ref)
(declare-const _caller_measures_161@111@01 Seq<Measure$>)
(declare-const _residue_161@112@01 $Perm)
(declare-const _current_wait_level_161@113@01 $Perm)
(push) ; 1
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (= ($Snap.first $t@114@01) $Snap.unit))
; [eval] _cthread_161 != null
(assert (not (= _cthread_161@110@01 $Ref.null)))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_161), Thread_0())
; [eval] typeof(_cthread_161)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_161@110@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@114@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 ($Snap.combine ($Snap.first $t@115@01) ($Snap.second $t@115@01))))
(assert (= ($Snap.first $t@115@01) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseBounded] :: Level(_r_14) <= _current_wait_level_161)
(assert (=
  ($Snap.second $t@115@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@115@01))
    ($Snap.second ($Snap.second $t@115@01)))))
(assert (= ($Snap.first ($Snap.second $t@115@01)) $Snap.unit))
; [eval] (forperm _r_14: Ref [_r_14.MustReleaseUnbounded] :: Level(_r_14) <= _current_wait_level_161)
(assert (=
  ($Snap.second ($Snap.second $t@115@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@115@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@115@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@115@01))) $Snap.unit))
; [eval] _residue_161 <= _current_wait_level_161
(assert (<= _residue_161@112@01 _current_wait_level_161@113@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@115@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@116@01 $Ref)
; [exec]
; var r_4: Ref
(declare-const r_4@117@01 $Ref)
; [exec]
; var set_1: Ref
(declare-const set_1@118@01 $Ref)
; [exec]
; var _cwl_161: Perm
(declare-const _cwl_161@119@01 $Perm)
; [exec]
; var _method_measures_161: Seq[Measure$]
(declare-const _method_measures_161@120@01 Seq<Measure$>)
; [exec]
; _method_measures_161 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_161, set_1 := set___init__(_cthread_161, _method_measures_161, _residue_161)
; [eval] _cthread_21 != null
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@110@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@110@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@110@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_161@110@01 1))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_21@121@01 $Perm)
(declare-const res@122@01 $Ref)
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 ($Snap.combine ($Snap.first $t@123@01) ($Snap.second $t@123@01))))
(assert (= ($Snap.first $t@123@01) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@123@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@123@01))
    ($Snap.second ($Snap.second $t@123@01)))))
(assert (= ($Snap.first ($Snap.second $t@123@01)) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@123@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@123@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@123@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@123@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_161@112@01 _current_wait_level_21@121@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@123@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@123@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01)))))))
(assert (not (= res@122@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@123@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@123@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@122@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@122@01) 0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(set_1), set(int()))
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 $Snap.unit))
; [eval] issubtype(typeof(set_1), set(int()))
; [eval] typeof(set_1)
; [eval] set(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@122@01) (set<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; set_1.set_acc := Set(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Set(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const set_acc@125@01 Set<$Ref>)
(assert (=
  set_acc@125@01
  (Set_unionone (Set_unionone (Set_singleton (__prim__int___box__ $Snap.unit 3)) (__prim__int___box__ $Snap.unit 4)) (__prim__int___box__ $Snap.unit 5))))
; [exec]
; r_4 := set_1
; [exec]
; inhale _isDefined(3432306)
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] _isDefined(3432306)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3432306))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3432306))
(assert (_isDefined $Snap.unit 3432306))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda37_21$i: Ref ::
;     { (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) }
;     issubtype(typeof(lambda37_21$i), int()) ==>
;     (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==>
;     int___gt__(int___unbox__(lambda37_21$i), 4))
; [eval] (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) } issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4))
(declare-const lambda37_21$i@127@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] issubtype(typeof(lambda37_21$i), int())
; [eval] typeof(lambda37_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 22 | issubtype[Bool](typeof[PyType](lambda37_21$i@127@01), int[PyType]) | live]
; [else-branch: 22 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@127@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 22 | issubtype[Bool](typeof[PyType](lambda37_21$i@127@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType)))
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc)
; [eval] _checkDefined(r_4, 3432306)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@122@01 (_checkDefined $Snap.unit res@122@01 3432306))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 23 | lambda37_21$i@127@01 in set_acc@125@01 | live]
; [else-branch: 23 | !(lambda37_21$i@127@01 in set_acc@125@01) | live]
(push) ; 7
; [then-branch: 23 | lambda37_21$i@127@01 in set_acc@125@01]
(assert (Set_in lambda37_21$i@127@01 set_acc@125@01))
; [eval] int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] int___unbox__(lambda37_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 23 | !(lambda37_21$i@127@01 in set_acc@125@01)]
(assert (not (Set_in lambda37_21$i@127@01 set_acc@125@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda37_21$i@127@01 set_acc@125@01)
  (and
    (Set_in lambda37_21$i@127@01 set_acc@125@01)
    (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4))))
; Joined path conditions
(assert (or
  (not (Set_in lambda37_21$i@127@01 set_acc@125@01))
  (Set_in lambda37_21$i@127@01 set_acc@125@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@127@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@122@01 3432306)
    (=>
      (Set_in lambda37_21$i@127@01 set_acc@125@01)
      (and
        (Set_in lambda37_21$i@127@01 set_acc@125@01)
        (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4)))
    (or
      (not (Set_in lambda37_21$i@127@01 set_acc@125@01))
      (Set_in lambda37_21$i@127@01 set_acc@125@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda37_21$i@127@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@122@01 3432306)
        (=>
          (Set_in lambda37_21$i@127@01 set_acc@125@01)
          (and
            (Set_in lambda37_21$i@127@01 set_acc@125@01)
            (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4)))
        (or
          (not (Set_in lambda37_21$i@127@01 set_acc@125@01))
          (Set_in lambda37_21$i@127@01 set_acc@125@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda37_21$i@127@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245-aux|)))
(assert (forall ((lambda37_21$i@127@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
      (Set_in lambda37_21$i@127@01 set_acc@125@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4)))
  :pattern ((Set_in lambda37_21$i@127@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245_precondition|)))
(push) ; 3
(assert (not (forall ((lambda37_21$i@127@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
          (Set_in lambda37_21$i@127@01 set_acc@125@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda37_21$i@127@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@127@01) (as int<PyType>  PyType))
        (Set_in lambda37_21$i@127@01 set_acc@125@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@127@01) 4))
  :pattern ((Set_in lambda37_21$i@127@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) } issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4))
(declare-const lambda37_21$i@128@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] issubtype(typeof(lambda37_21$i), int())
; [eval] typeof(lambda37_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 24 | issubtype[Bool](typeof[PyType](lambda37_21$i@128@01), int[PyType]) | live]
; [else-branch: 24 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@128@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 24 | issubtype[Bool](typeof[PyType](lambda37_21$i@128@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc)
; [eval] _checkDefined(r_4, 3432306)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@122@01 (_checkDefined $Snap.unit res@122@01 3432306))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 25 | lambda37_21$i@128@01 in set_acc@125@01 | live]
; [else-branch: 25 | !(lambda37_21$i@128@01 in set_acc@125@01) | live]
(push) ; 7
; [then-branch: 25 | lambda37_21$i@128@01 in set_acc@125@01]
(assert (Set_in lambda37_21$i@128@01 set_acc@125@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] int___unbox__(lambda37_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 25 | !(lambda37_21$i@128@01 in set_acc@125@01)]
(assert (not (Set_in lambda37_21$i@128@01 set_acc@125@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda37_21$i@128@01 set_acc@125@01)
  (and
    (Set_in lambda37_21$i@128@01 set_acc@125@01)
    (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4))))
; Joined path conditions
(assert (or
  (not (Set_in lambda37_21$i@128@01 set_acc@125@01))
  (Set_in lambda37_21$i@128@01 set_acc@125@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 24 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@128@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@122@01 3432306)
    (=>
      (Set_in lambda37_21$i@128@01 set_acc@125@01)
      (and
        (Set_in lambda37_21$i@128@01 set_acc@125@01)
        (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4)))
    (or
      (not (Set_in lambda37_21$i@128@01 set_acc@125@01))
      (Set_in lambda37_21$i@128@01 set_acc@125@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda37_21$i@128@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@122@01 3432306)
        (=>
          (Set_in lambda37_21$i@128@01 set_acc@125@01)
          (and
            (Set_in lambda37_21$i@128@01 set_acc@125@01)
            (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4)))
        (or
          (not (Set_in lambda37_21$i@128@01 set_acc@125@01))
          (Set_in lambda37_21$i@128@01 set_acc@125@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda37_21$i@128@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245-aux|)))
(assert (forall ((lambda37_21$i@128@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
      (Set_in lambda37_21$i@128@01 set_acc@125@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4)))
  :pattern ((Set_in lambda37_21$i@128@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda37_21$i@128@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
          (Set_in lambda37_21$i@128@01 set_acc@125@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda37_21$i@128@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@128@01) (as int<PyType>  PyType))
        (Set_in lambda37_21$i@128@01 set_acc@125@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@128@01) 4))
  :pattern ((Set_in lambda37_21$i@128@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) } issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4))
(declare-const lambda37_21$i@129@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] issubtype(typeof(lambda37_21$i), int())
; [eval] typeof(lambda37_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 26 | issubtype[Bool](typeof[PyType](lambda37_21$i@129@01), int[PyType]) | live]
; [else-branch: 26 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@129@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 26 | issubtype[Bool](typeof[PyType](lambda37_21$i@129@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc)
; [eval] _checkDefined(r_4, 3432306)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@122@01 (_checkDefined $Snap.unit res@122@01 3432306))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 27 | lambda37_21$i@129@01 in set_acc@125@01 | live]
; [else-branch: 27 | !(lambda37_21$i@129@01 in set_acc@125@01) | live]
(push) ; 7
; [then-branch: 27 | lambda37_21$i@129@01 in set_acc@125@01]
(assert (Set_in lambda37_21$i@129@01 set_acc@125@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] int___unbox__(lambda37_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(lambda37_21$i@129@01 in set_acc@125@01)]
(assert (not (Set_in lambda37_21$i@129@01 set_acc@125@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda37_21$i@129@01 set_acc@125@01)
  (and
    (Set_in lambda37_21$i@129@01 set_acc@125@01)
    (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4))))
; Joined path conditions
(assert (or
  (not (Set_in lambda37_21$i@129@01 set_acc@125@01))
  (Set_in lambda37_21$i@129@01 set_acc@125@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 26 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@129@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@122@01 3432306)
    (=>
      (Set_in lambda37_21$i@129@01 set_acc@125@01)
      (and
        (Set_in lambda37_21$i@129@01 set_acc@125@01)
        (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4)))
    (or
      (not (Set_in lambda37_21$i@129@01 set_acc@125@01))
      (Set_in lambda37_21$i@129@01 set_acc@125@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda37_21$i@129@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@122@01 3432306)
        (=>
          (Set_in lambda37_21$i@129@01 set_acc@125@01)
          (and
            (Set_in lambda37_21$i@129@01 set_acc@125@01)
            (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4)))
        (or
          (not (Set_in lambda37_21$i@129@01 set_acc@125@01))
          (Set_in lambda37_21$i@129@01 set_acc@125@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda37_21$i@129@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245-aux|)))
(assert (forall ((lambda37_21$i@129@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
      (Set_in lambda37_21$i@129@01 set_acc@125@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4)))
  :pattern ((Set_in lambda37_21$i@129@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda37_21$i@129@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
          (Set_in lambda37_21$i@129@01 set_acc@125@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda37_21$i@129@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@129@01) (as int<PyType>  PyType))
        (Set_in lambda37_21$i@129@01 set_acc@125@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@129@01) 4))
  :pattern ((Set_in lambda37_21$i@129@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda37_21$i: Ref :: { (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) } issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4))
(declare-const lambda37_21$i@130@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda37_21$i), int()) ==> (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] issubtype(typeof(lambda37_21$i), int())
; [eval] typeof(lambda37_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 28 | issubtype[Bool](typeof[PyType](lambda37_21$i@130@01), int[PyType]) | live]
; [else-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@130@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 28 | issubtype[Bool](typeof[PyType](lambda37_21$i@130@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc) ==> int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] (lambda37_21$i in _checkDefined(r_4, 3432306).set_acc)
; [eval] _checkDefined(r_4, 3432306)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@122@01 3432306))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@122@01 (_checkDefined $Snap.unit res@122@01 3432306))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 29 | lambda37_21$i@130@01 in set_acc@125@01 | live]
; [else-branch: 29 | !(lambda37_21$i@130@01 in set_acc@125@01) | live]
(push) ; 7
; [then-branch: 29 | lambda37_21$i@130@01 in set_acc@125@01]
(assert (Set_in lambda37_21$i@130@01 set_acc@125@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda37_21$i), 4)
; [eval] int___unbox__(lambda37_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 29 | !(lambda37_21$i@130@01 in set_acc@125@01)]
(assert (not (Set_in lambda37_21$i@130@01 set_acc@125@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda37_21$i@130@01 set_acc@125@01)
  (and
    (Set_in lambda37_21$i@130@01 set_acc@125@01)
    (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4))))
; Joined path conditions
(assert (or
  (not (Set_in lambda37_21$i@130@01 set_acc@125@01))
  (Set_in lambda37_21$i@130@01 set_acc@125@01)))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 28 | !(issubtype[Bool](typeof[PyType](lambda37_21$i@130@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@122@01 3432306)
    (=>
      (Set_in lambda37_21$i@130@01 set_acc@125@01)
      (and
        (Set_in lambda37_21$i@130@01 set_acc@125@01)
        (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4)))
    (or
      (not (Set_in lambda37_21$i@130@01 set_acc@125@01))
      (Set_in lambda37_21$i@130@01 set_acc@125@01)))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda37_21$i@130@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@122@01 3432306)
        (=>
          (Set_in lambda37_21$i@130@01 set_acc@125@01)
          (and
            (Set_in lambda37_21$i@130@01 set_acc@125@01)
            (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4)))
        (or
          (not (Set_in lambda37_21$i@130@01 set_acc@125@01))
          (Set_in lambda37_21$i@130@01 set_acc@125@01))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda37_21$i@130@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245-aux|)))
(assert (forall ((lambda37_21$i@130@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
      (Set_in lambda37_21$i@130@01 set_acc@125@01))
    (and
      (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4)))
  :pattern ((Set_in lambda37_21$i@130@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda37_21$i@130@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
          (Set_in lambda37_21$i@130@01 set_acc@125@01))
        (and
          (int___unbox__%precondition $Snap.unit lambda37_21$i@130@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda37_21$i@130@01) (as int<PyType>  PyType))
        (Set_in lambda37_21$i@130@01 set_acc@125@01)))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda37_21$i@130@01) 4))
  :pattern ((Set_in lambda37_21$i@130@01 set_acc@125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@730@11@730@245|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test_dict ----------
(declare-const _cthread_162@131@01 $Ref)
(declare-const _caller_measures_162@132@01 Seq<Measure$>)
(declare-const _residue_162@133@01 $Perm)
(declare-const _current_wait_level_162@134@01 $Perm)
(declare-const _cthread_162@135@01 $Ref)
(declare-const _caller_measures_162@136@01 Seq<Measure$>)
(declare-const _residue_162@137@01 $Perm)
(declare-const _current_wait_level_162@138@01 $Perm)
(push) ; 1
(declare-const $t@139@01 $Snap)
(assert (= $t@139@01 ($Snap.combine ($Snap.first $t@139@01) ($Snap.second $t@139@01))))
(assert (= ($Snap.first $t@139@01) $Snap.unit))
; [eval] _cthread_162 != null
(assert (not (= _cthread_162@135@01 $Ref.null)))
(assert (=
  ($Snap.second $t@139@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@139@01))
    ($Snap.second ($Snap.second $t@139@01)))))
(assert (= ($Snap.first ($Snap.second $t@139@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_162), Thread_0())
; [eval] typeof(_cthread_162)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_162@135@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@139@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 ($Snap.combine ($Snap.first $t@140@01) ($Snap.second $t@140@01))))
(assert (= ($Snap.first $t@140@01) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseBounded] :: Level(_r_17) <= _current_wait_level_162)
(assert (=
  ($Snap.second $t@140@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@140@01))
    ($Snap.second ($Snap.second $t@140@01)))))
(assert (= ($Snap.first ($Snap.second $t@140@01)) $Snap.unit))
; [eval] (forperm _r_17: Ref [_r_17.MustReleaseUnbounded] :: Level(_r_17) <= _current_wait_level_162)
(assert (=
  ($Snap.second ($Snap.second $t@140@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@140@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@140@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@140@01))) $Snap.unit))
; [eval] _residue_162 <= _current_wait_level_162
(assert (<= _residue_162@137@01 _current_wait_level_162@138@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@140@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@141@01 $Ref)
; [exec]
; var r_5: Ref
(declare-const r_5@142@01 $Ref)
; [exec]
; var dict_0: Ref
(declare-const dict_0@143@01 $Ref)
; [exec]
; var _cwl_162: Perm
(declare-const _cwl_162@144@01 $Perm)
; [exec]
; var _method_measures_162: Seq[Measure$]
(declare-const _method_measures_162@145@01 Seq<Measure$>)
; [exec]
; _method_measures_162 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_162, dict_0 := dict___init__(_cthread_162, _method_measures_162, _residue_162)
; [eval] _cthread_33 != null
; [eval] Measure$check(_caller_measures_33, _cthread_33, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_162@135@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_162@135@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_162@135@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_162@135@01 1))
; [eval] issubtype(typeof(_cthread_33), Thread_0())
; [eval] typeof(_cthread_33)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_33, _cthread_33, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_33@146@01 $Perm)
(declare-const res@147@01 $Ref)
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second $t@148@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@148@01))
    ($Snap.second ($Snap.second $t@148@01)))))
(assert (= ($Snap.first ($Snap.second $t@148@01)) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second ($Snap.second $t@148@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@148@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@148@01))) $Snap.unit))
; [eval] _residue_33 <= _current_wait_level_33
(assert (<= _residue_162@137@01 _current_wait_level_33@146@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@148@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
(assert (not (= res@147@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
  $Snap.unit))
; [eval] res.dict_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
  $Snap.unit))
; [eval] typeof(res) == dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] typeof(res)
; [eval] dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] dict_arg(typeof(res), 0)
; [eval] typeof(res)
; [eval] dict_arg(typeof(res), 1)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@147@01)
  (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@147@01) 0) (dict_arg<PyType> (typeof<PyType> res@147@01) 1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(dict_0), dict(int(), int()))
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] issubtype(typeof(dict_0), dict(int(), int()))
; [eval] typeof(dict_0)
; [eval] dict(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@147@01) (dict<PyType> (as int<PyType>  PyType) (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_162 := dict___setitem__(_cthread_162, _method_measures_162, _residue_162,
;   dict_0, __prim__int___box__(3), __prim__int___box__(7))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] __prim__int___box__(7)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> res@147@01) (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@147@01) 0) (dict_arg<PyType> (typeof<PyType> res@147@01) 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@147@01) (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@147@01) 0) (dict_arg<PyType> (typeof<PyType> res@147@01) 1))))
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@150@01 $Perm)
(declare-const $t@151@01 $Snap)
(assert (= $t@151@01 ($Snap.combine ($Snap.first $t@151@01) ($Snap.second $t@151@01))))
(assert (= ($Snap.first $t@151@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@151@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@151@01))
    ($Snap.second ($Snap.second $t@151@01)))))
(assert (= ($Snap.first ($Snap.second $t@151@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@151@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@151@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@151@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_162@137@01 _current_wait_level_35@150@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@151@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 3)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@152@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@153@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@154@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@155@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert ($Perm.isReadVar $k@154@01))
(assert ($Perm.isReadVar $k@155@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))
  (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@156@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@157@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@158@01 $Perm)
(assert ($Perm.isReadVar $k@158@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@158@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 30 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01)) | live]
; [else-branch: 30 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01) | live]
(push) ; 5
; [then-branch: 30 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01))))
(push) ; 4
; [then-branch: 31 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01) && k@156@01 != __prim__int___box__(_, 3) | live]
; [else-branch: 31 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01) && k@156@01 != __prim__int___box__(_, 3)) | live]
(push) ; 5
; [then-branch: 31 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01) && k@156@01 != __prim__int___box__(_, 3)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
  (not (= k@156@01 (__prim__int___box__ $Snap.unit 3)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@159@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@160@01 $Perm)
(assert ($Perm.isReadVar $k@160@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@160@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(assert ($Perm.isReadVar $k@160@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 32 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@156@01)) | live]
; [else-branch: 32 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@156@01) | live]
(push) ; 7
; [then-branch: 32 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@156@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@156@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@161@01 $Perm)
(assert ($Perm.isReadVar $k@161@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@161@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@162@01 $Perm)
(assert ($Perm.isReadVar $k@162@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@162@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@163@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@164@01 $Perm)
(assert ($Perm.isReadVar $k@164@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@164@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@163@01))
(assert ($Perm.isReadVar $k@164@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 k@156@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@161@01))
(assert ($Perm.isReadVar $k@162@01))
(assert ($Perm.isReadVar $k@163@01))
(assert ($Perm.isReadVar $k@164@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 k@156@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@165@01 $Perm)
(assert ($Perm.isReadVar $k@165@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@165@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@166@01 $Perm)
(assert ($Perm.isReadVar $k@166@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@166@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@167@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@168@01 $Perm)
(assert ($Perm.isReadVar $k@168@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@168@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@167@01))
(assert ($Perm.isReadVar $k@168@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
      $Snap.unit))) res@147@01 k@156@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@165@01))
(assert ($Perm.isReadVar $k@166@01))
(assert ($Perm.isReadVar $k@167@01))
(assert ($Perm.isReadVar $k@168@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
      $Snap.unit))) res@147@01 k@156@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@161@01))
(assert ($Perm.isReadVar $k@162@01))
(assert ($Perm.isReadVar $k@163@01))
(assert ($Perm.isReadVar $k@164@01))
(assert ($Perm.isReadVar $k@165@01))
(assert ($Perm.isReadVar $k@166@01))
(assert ($Perm.isReadVar $k@167@01))
(assert ($Perm.isReadVar $k@168@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
          $Snap.unit))) res@147@01 k@156@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
          $Snap.unit))) res@147@01 k@156@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 31 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, k@156@01) && k@156@01 != __prim__int___box__(_, 3))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
    (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@159@01))
(assert ($Perm.isReadVar $k@160@01))
(assert ($Perm.isReadVar $k@161@01))
(assert ($Perm.isReadVar $k@162@01))
(assert ($Perm.isReadVar $k@163@01))
(assert ($Perm.isReadVar $k@164@01))
(assert ($Perm.isReadVar $k@165@01))
(assert ($Perm.isReadVar $k@166@01))
(assert ($Perm.isReadVar $k@167@01))
(assert ($Perm.isReadVar $k@168@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
    (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
    (not (= k@156@01 (__prim__int___box__ $Snap.unit 3)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
              $Snap.unit))) res@147@01 k@156@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
              $Snap.unit))) res@147@01 k@156@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
      (not (= k@156@01 (__prim__int___box__ $Snap.unit 3)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
    (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@157@01))
(assert ($Perm.isReadVar $k@158@01))
(assert ($Perm.isReadVar $k@159@01))
(assert ($Perm.isReadVar $k@160@01))
(assert ($Perm.isReadVar $k@161@01))
(assert ($Perm.isReadVar $k@162@01))
(assert ($Perm.isReadVar $k@163@01))
(assert ($Perm.isReadVar $k@164@01))
(assert ($Perm.isReadVar $k@165@01))
(assert ($Perm.isReadVar $k@166@01))
(assert ($Perm.isReadVar $k@167@01))
(assert ($Perm.isReadVar $k@168@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@156@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
        (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
        (not (= k@156@01 (__prim__int___box__ $Snap.unit 3)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                  $Snap.unit))) res@147@01 k@156@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
                  $Snap.unit))) res@147@01 k@156@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
          (not (= k@156@01 (__prim__int___box__ $Snap.unit 3)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
        (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
        $Snap.unit))) res@147@01 k@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@156@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 k@156@01)
      (not (= k@156@01 (__prim__int___box__ $Snap.unit 3))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@156@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
              $Snap.unit))) res@147@01 k@156@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
              $Snap.unit))) res@147@01 k@156@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
        $Snap.unit))) res@147@01 k@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@169@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@170@01 $Perm)
(assert ($Perm.isReadVar $k@170@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@170@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@169@01))
(assert ($Perm.isReadVar $k@170@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@171@01 $Perm)
(assert ($Perm.isReadVar $k@171@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@171@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@172@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@171@01))
(assert ($Perm.isReadVar $k@172@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@173@01 $Perm)
(assert ($Perm.isReadVar $k@173@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@173@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@174@01 $Perm)
(assert ($Perm.isReadVar $k@174@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@174@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@173@01))
(assert ($Perm.isReadVar $k@174@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3)) | dead]
; [else-branch: 33 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 33 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@175@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 34 | k@175@01 == __prim__int___box__(_, 7) | live]
; [else-branch: 34 | k@175@01 != __prim__int___box__(_, 7) | live]
(push) ; 5
; [then-branch: 34 | k@175@01 == __prim__int___box__(_, 7)]
(assert (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | k@175@01 != __prim__int___box__(_, 7)]
(assert (not (= k@175@01 (__prim__int___box__ $Snap.unit 7))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@176@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@177@01 $Perm)
(assert ($Perm.isReadVar $k@177@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@177@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@176@01))
(assert ($Perm.isReadVar $k@177@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 35 | !(k@175@01 in dict___values__((First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01)))))), res@147@01)) | live]
; [else-branch: 35 | k@175@01 in dict___values__((First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01)))))), res@147@01) | live]
(push) ; 7
; [then-branch: 35 | !(k@175@01 in dict___values__((First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01)))))), res@147@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
    k@175@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 35 | k@175@01 in dict___values__((First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01)))))), res@147@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
  k@175@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@178@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 36 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3))) | live]
; [else-branch: 36 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3)) | live]
(push) ; 9
; [then-branch: 36 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3)))]
(pop) ; 9
(push) ; 9
; [else-branch: 36 | dict___contains__((_, (First:(Second:(Second:(Second:($t@148@01)))), First:(Second:(Second:(Second:(Second:($t@148@01))))))), res@147@01, __prim__int___box__(_, 3))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@180@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@181@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@182@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@183@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
          $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
    k@175@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
      k@175@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
              $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
    k@175@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
      k@175@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@176@01))
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert (=>
  (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
  (and
    (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
        k@175@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
          k@175@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
                  $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
        k@175@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
          k@175@01))))))
(assert (or
  (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
  (= k@175@01 (__prim__int___box__ $Snap.unit 7))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@184@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@185@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@176@01))
(assert ($Perm.isReadVar $k@177@01))
(assert ($Perm.isReadVar $k@178@01))
(assert ($Perm.isReadVar $k@179@01))
(assert ($Perm.isReadVar $k@180@01))
(assert ($Perm.isReadVar $k@181@01))
(assert ($Perm.isReadVar $k@182@01))
(assert ($Perm.isReadVar $k@183@01))
(assert ($Perm.isReadVar $k@184@01))
(assert ($Perm.isReadVar $k@185@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@175@01 $Ref)) (!
  (and
    (=>
      (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
      (and
        (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
            k@175@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
              k@175@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
            k@175@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
              k@175@01)))))
    (or
      (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
      (= k@175@01 (__prim__int___box__ $Snap.unit 7))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@175@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@175@01 $Ref)) (!
  (and
    (=>
      (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
      (and
        (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
            k@175@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
              k@175@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
            k@175@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
              k@175@01)))))
    (or
      (not (= k@175@01 (__prim__int___box__ $Snap.unit 7)))
      (= k@175@01 (__prim__int___box__ $Snap.unit 7))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@175@01 $Ref)) (!
  (=
    (or
      (= k@175@01 (__prim__int___box__ $Snap.unit 7))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))) res@147@01)
          k@175@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 3)))
          (not
            (=
              k@175@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
                    $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 3)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
      k@175@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@175@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_162 := dict___setitem__(_cthread_162, _method_measures_162, _residue_162,
;   dict_0, __prim__int___box__(4), __prim__int___box__(8))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] __prim__int___box__(8)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@186@01 $Perm)
(declare-const $t@187@01 $Snap)
(assert (= $t@187@01 ($Snap.combine ($Snap.first $t@187@01) ($Snap.second $t@187@01))))
(assert (= ($Snap.first $t@187@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@187@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@187@01))
    ($Snap.second ($Snap.second $t@187@01)))))
(assert (= ($Snap.first ($Snap.second $t@187@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@187@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@187@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@187@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_162@137@01 _current_wait_level_35@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@187@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 4)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@188@01 $Perm)
(assert ($Perm.isReadVar $k@188@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@188@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@189@01 $Perm)
(assert ($Perm.isReadVar $k@189@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@189@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@190@01 $Perm)
(assert ($Perm.isReadVar $k@190@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@190@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@191@01 $Perm)
(assert ($Perm.isReadVar $k@191@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@191@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@190@01))
(assert ($Perm.isReadVar $k@191@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@188@01))
(assert ($Perm.isReadVar $k@189@01))
(assert ($Perm.isReadVar $k@190@01))
(assert ($Perm.isReadVar $k@191@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))
  (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@192@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@193@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@194@01 $Perm)
(assert ($Perm.isReadVar $k@194@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@193@01))
(assert ($Perm.isReadVar $k@194@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 37 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01)) | live]
; [else-branch: 37 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01) | live]
(push) ; 5
; [then-branch: 37 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 37 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01))))
(push) ; 4
; [then-branch: 38 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01) && k@192@01 != __prim__int___box__(_, 4) | live]
; [else-branch: 38 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01) && k@192@01 != __prim__int___box__(_, 4)) | live]
(push) ; 5
; [then-branch: 38 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01) && k@192@01 != __prim__int___box__(_, 4)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
  (not (= k@192@01 (__prim__int___box__ $Snap.unit 4)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@195@01 $Perm)
(assert ($Perm.isReadVar $k@195@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@195@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@196@01 $Perm)
(assert ($Perm.isReadVar $k@196@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@196@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 39 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@192@01)) | live]
; [else-branch: 39 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@192@01) | live]
(push) ; 7
; [then-branch: 39 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@192@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 39 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@192@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@197@01 $Perm)
(assert ($Perm.isReadVar $k@197@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@197@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@199@01 $Perm)
(assert ($Perm.isReadVar $k@199@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@199@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@200@01 $Perm)
(assert ($Perm.isReadVar $k@200@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@200@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 k@192@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 k@192@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@201@01 $Perm)
(assert ($Perm.isReadVar $k@201@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@201@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@202@01 $Perm)
(assert ($Perm.isReadVar $k@202@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@202@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@203@01 $Perm)
(assert ($Perm.isReadVar $k@203@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@203@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@204@01 $Perm)
(assert ($Perm.isReadVar $k@204@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 k@192@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 k@192@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
          $Snap.unit))) res@147@01 k@192@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
          $Snap.unit))) res@147@01 k@192@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 38 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, k@192@01) && k@192@01 != __prim__int___box__(_, 4))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
    (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
    (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
    (not (= k@192@01 (__prim__int___box__ $Snap.unit 4)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
              $Snap.unit))) res@147@01 k@192@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
              $Snap.unit))) res@147@01 k@192@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
      (not (= k@192@01 (__prim__int___box__ $Snap.unit 4)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
    (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@193@01))
(assert ($Perm.isReadVar $k@194@01))
(assert ($Perm.isReadVar $k@195@01))
(assert ($Perm.isReadVar $k@196@01))
(assert ($Perm.isReadVar $k@197@01))
(assert ($Perm.isReadVar $k@198@01))
(assert ($Perm.isReadVar $k@199@01))
(assert ($Perm.isReadVar $k@200@01))
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert ($Perm.isReadVar $k@203@01))
(assert ($Perm.isReadVar $k@204@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@192@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
        (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
        (not (= k@192@01 (__prim__int___box__ $Snap.unit 4)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                  $Snap.unit))) res@147@01 k@192@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                  $Snap.unit))) res@147@01 k@192@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
          (not (= k@192@01 (__prim__int___box__ $Snap.unit 4)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
        (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
        $Snap.unit))) res@147@01 k@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@192@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 k@192@01)
      (not (= k@192@01 (__prim__int___box__ $Snap.unit 4))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@192@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
              $Snap.unit))) res@147@01 k@192@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
              $Snap.unit))) res@147@01 k@192@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
        $Snap.unit))) res@147@01 k@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@205@01 $Perm)
(assert ($Perm.isReadVar $k@205@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@205@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@206@01 $Perm)
(assert ($Perm.isReadVar $k@206@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@206@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@205@01))
(assert ($Perm.isReadVar $k@206@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@207@01 $Perm)
(assert ($Perm.isReadVar $k@207@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@207@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@208@01 $Perm)
(assert ($Perm.isReadVar $k@208@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@208@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@207@01))
(assert ($Perm.isReadVar $k@208@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@209@01 $Perm)
(assert ($Perm.isReadVar $k@209@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@209@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@210@01 $Perm)
(assert ($Perm.isReadVar $k@210@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@209@01))
(assert ($Perm.isReadVar $k@210@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4)) | dead]
; [else-branch: 40 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 40 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@211@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 41 | k@211@01 == __prim__int___box__(_, 8) | live]
; [else-branch: 41 | k@211@01 != __prim__int___box__(_, 8) | live]
(push) ; 5
; [then-branch: 41 | k@211@01 == __prim__int___box__(_, 8)]
(assert (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 5
(push) ; 5
; [else-branch: 41 | k@211@01 != __prim__int___box__(_, 8)]
(assert (not (= k@211@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@212@01 $Perm)
(assert ($Perm.isReadVar $k@212@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@212@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@213@01 $Perm)
(assert ($Perm.isReadVar $k@213@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@213@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 42 | !(k@211@01 in dict___values__((First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01)))))), res@147@01)) | live]
; [else-branch: 42 | k@211@01 in dict___values__((First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01)))))), res@147@01) | live]
(push) ; 7
; [then-branch: 42 | !(k@211@01 in dict___values__((First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01)))))), res@147@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@211@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 42 | k@211@01 in dict___values__((First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01)))))), res@147@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
  k@211@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@214@01 $Perm)
(assert ($Perm.isReadVar $k@214@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@214@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@215@01 $Perm)
(assert ($Perm.isReadVar $k@215@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@215@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 43 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4))) | live]
; [else-branch: 43 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4)) | live]
(push) ; 9
; [then-branch: 43 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4)))]
(pop) ; 9
(push) ; 9
; [else-branch: 43 | dict___contains__((_, (First:(Second:(Second:(Second:($t@151@01)))), First:(Second:(Second:(Second:(Second:($t@151@01))))))), res@147@01, __prim__int___box__(_, 4))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@216@01 $Perm)
(assert ($Perm.isReadVar $k@216@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@216@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@217@01 $Perm)
(assert ($Perm.isReadVar $k@217@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@218@01 $Perm)
(assert ($Perm.isReadVar $k@218@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@219@01 $Perm)
(assert ($Perm.isReadVar $k@219@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@219@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
          $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@211@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
      k@211@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
              $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
    k@211@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
      k@211@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert (=>
  (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
  (and
    (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
        k@211@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
          k@211@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                  $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
        k@211@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
          k@211@01))))))
(assert (or
  (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
  (= k@211@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@220@01 $Perm)
(assert ($Perm.isReadVar $k@220@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@221@01 $Perm)
(assert ($Perm.isReadVar $k@221@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@220@01))
(assert ($Perm.isReadVar $k@221@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@212@01))
(assert ($Perm.isReadVar $k@213@01))
(assert ($Perm.isReadVar $k@214@01))
(assert ($Perm.isReadVar $k@215@01))
(assert ($Perm.isReadVar $k@216@01))
(assert ($Perm.isReadVar $k@217@01))
(assert ($Perm.isReadVar $k@218@01))
(assert ($Perm.isReadVar $k@219@01))
(assert ($Perm.isReadVar $k@220@01))
(assert ($Perm.isReadVar $k@221@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@211@01 $Ref)) (!
  (and
    (=>
      (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
      (and
        (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
            k@211@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
              k@211@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
            k@211@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
              k@211@01)))))
    (or
      (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
      (= k@211@01 (__prim__int___box__ $Snap.unit 8))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@211@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@211@01 $Ref)) (!
  (and
    (=>
      (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
      (and
        (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
            k@211@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
              k@211@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
            k@211@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
              k@211@01)))))
    (or
      (not (= k@211@01 (__prim__int___box__ $Snap.unit 8)))
      (= k@211@01 (__prim__int___box__ $Snap.unit 8))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@211@01 $Ref)) (!
  (=
    (or
      (= k@211@01 (__prim__int___box__ $Snap.unit 8))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))) res@147@01)
          k@211@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 4)))
          (not
            (=
              k@211@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@151@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@151@01)))))
                    $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 4)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
      k@211@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@211@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_162 := dict___setitem__(_cthread_162, _method_measures_162, _residue_162,
;   dict_0, __prim__int___box__(5), __prim__int___box__(9))
; [eval] __prim__int___box__(5)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] __prim__int___box__(9)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (dict_arg<PyType> (typeof<PyType> res@147@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (dict_arg<PyType> (typeof<PyType> res@147@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@222@01 $Perm)
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@223@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@223@01))
    ($Snap.second ($Snap.second $t@223@01)))))
(assert (= ($Snap.first ($Snap.second $t@223@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@223@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@223@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@223@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_162@137@01 _current_wait_level_35@222@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@223@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 5)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@224@01 $Perm)
(assert ($Perm.isReadVar $k@224@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@225@01 $Perm)
(assert ($Perm.isReadVar $k@225@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@225@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@227@01 $Perm)
(assert ($Perm.isReadVar $k@227@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@226@01))
(assert ($Perm.isReadVar $k@227@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@224@01))
(assert ($Perm.isReadVar $k@225@01))
(assert ($Perm.isReadVar $k@226@01))
(assert ($Perm.isReadVar $k@227@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
        $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))
  (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@228@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@229@01 $Perm)
(assert ($Perm.isReadVar $k@229@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@230@01 $Perm)
(assert ($Perm.isReadVar $k@230@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@229@01))
(assert ($Perm.isReadVar $k@230@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 44 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01)) | live]
; [else-branch: 44 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01) | live]
(push) ; 5
; [then-branch: 44 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01))))
(push) ; 4
; [then-branch: 45 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01) && k@228@01 != __prim__int___box__(_, 5) | live]
; [else-branch: 45 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01) && k@228@01 != __prim__int___box__(_, 5)) | live]
(push) ; 5
; [then-branch: 45 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01) && k@228@01 != __prim__int___box__(_, 5)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
  (not (= k@228@01 (__prim__int___box__ $Snap.unit 5)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@231@01 $Perm)
(assert ($Perm.isReadVar $k@231@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@231@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@232@01 $Perm)
(assert ($Perm.isReadVar $k@232@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@231@01))
(assert ($Perm.isReadVar $k@232@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 46 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@223@01)))), First:(Second:(Second:(Second:(Second:($t@223@01))))))), res@147@01, k@228@01)) | live]
; [else-branch: 46 | dict___contains__((_, (First:(Second:(Second:(Second:($t@223@01)))), First:(Second:(Second:(Second:(Second:($t@223@01))))))), res@147@01, k@228@01) | live]
(push) ; 7
; [then-branch: 46 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@223@01)))), First:(Second:(Second:(Second:(Second:($t@223@01))))))), res@147@01, k@228@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 46 | dict___contains__((_, (First:(Second:(Second:(Second:($t@223@01)))), First:(Second:(Second:(Second:(Second:($t@223@01))))))), res@147@01, k@228@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@233@01 $Perm)
(assert ($Perm.isReadVar $k@233@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@234@01 $Perm)
(assert ($Perm.isReadVar $k@234@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@234@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@235@01 $Perm)
(assert ($Perm.isReadVar $k@235@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@235@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@236@01 $Perm)
(assert ($Perm.isReadVar $k@236@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@236@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@235@01))
(assert ($Perm.isReadVar $k@236@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
      $Snap.unit))) res@147@01 k@228@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@233@01))
(assert ($Perm.isReadVar $k@234@01))
(assert ($Perm.isReadVar $k@235@01))
(assert ($Perm.isReadVar $k@236@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
      $Snap.unit))) res@147@01 k@228@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@237@01 $Perm)
(assert ($Perm.isReadVar $k@237@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@237@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@238@01 $Perm)
(assert ($Perm.isReadVar $k@238@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@238@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@239@01 $Perm)
(assert ($Perm.isReadVar $k@239@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@239@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@240@01 $Perm)
(assert ($Perm.isReadVar $k@240@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@240@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@239@01))
(assert ($Perm.isReadVar $k@240@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 k@228@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@237@01))
(assert ($Perm.isReadVar $k@238@01))
(assert ($Perm.isReadVar $k@239@01))
(assert ($Perm.isReadVar $k@240@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 k@228@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@233@01))
(assert ($Perm.isReadVar $k@234@01))
(assert ($Perm.isReadVar $k@235@01))
(assert ($Perm.isReadVar $k@236@01))
(assert ($Perm.isReadVar $k@237@01))
(assert ($Perm.isReadVar $k@238@01))
(assert ($Perm.isReadVar $k@239@01))
(assert ($Perm.isReadVar $k@240@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
          $Snap.unit))) res@147@01 k@228@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
          $Snap.unit))) res@147@01 k@228@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 45 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, k@228@01) && k@228@01 != __prim__int___box__(_, 5))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
    (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@231@01))
(assert ($Perm.isReadVar $k@232@01))
(assert ($Perm.isReadVar $k@233@01))
(assert ($Perm.isReadVar $k@234@01))
(assert ($Perm.isReadVar $k@235@01))
(assert ($Perm.isReadVar $k@236@01))
(assert ($Perm.isReadVar $k@237@01))
(assert ($Perm.isReadVar $k@238@01))
(assert ($Perm.isReadVar $k@239@01))
(assert ($Perm.isReadVar $k@240@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
    (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
    (not (= k@228@01 (__prim__int___box__ $Snap.unit 5)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
              $Snap.unit))) res@147@01 k@228@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
              $Snap.unit))) res@147@01 k@228@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
      (not (= k@228@01 (__prim__int___box__ $Snap.unit 5)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
    (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@229@01))
(assert ($Perm.isReadVar $k@230@01))
(assert ($Perm.isReadVar $k@231@01))
(assert ($Perm.isReadVar $k@232@01))
(assert ($Perm.isReadVar $k@233@01))
(assert ($Perm.isReadVar $k@234@01))
(assert ($Perm.isReadVar $k@235@01))
(assert ($Perm.isReadVar $k@236@01))
(assert ($Perm.isReadVar $k@237@01))
(assert ($Perm.isReadVar $k@238@01))
(assert ($Perm.isReadVar $k@239@01))
(assert ($Perm.isReadVar $k@240@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@228@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
        (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
        (not (= k@228@01 (__prim__int___box__ $Snap.unit 5)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
                  $Snap.unit))) res@147@01 k@228@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                  $Snap.unit))) res@147@01 k@228@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
          (not (= k@228@01 (__prim__int___box__ $Snap.unit 5)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
        (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
        $Snap.unit))) res@147@01 k@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@228@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 k@228@01)
      (not (= k@228@01 (__prim__int___box__ $Snap.unit 5))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))) res@147@01 k@228@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
              $Snap.unit))) res@147@01 k@228@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
              $Snap.unit))) res@147@01 k@228@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))
        $Snap.unit))) res@147@01 k@228@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@241@01 $Perm)
(assert ($Perm.isReadVar $k@241@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@241@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@242@01 $Perm)
(assert ($Perm.isReadVar $k@242@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@242@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@241@01))
(assert ($Perm.isReadVar $k@242@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@243@01 $Perm)
(assert ($Perm.isReadVar $k@243@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@243@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@244@01 $Perm)
(assert ($Perm.isReadVar $k@244@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@243@01))
(assert ($Perm.isReadVar $k@244@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@245@01 $Perm)
(assert ($Perm.isReadVar $k@245@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@245@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@246@01 $Perm)
(assert ($Perm.isReadVar $k@246@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@246@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@245@01))
(assert ($Perm.isReadVar $k@246@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5)) | dead]
; [else-branch: 47 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 47 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@247@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 48 | k@247@01 == __prim__int___box__(_, 9) | live]
; [else-branch: 48 | k@247@01 != __prim__int___box__(_, 9) | live]
(push) ; 5
; [then-branch: 48 | k@247@01 == __prim__int___box__(_, 9)]
(assert (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 5
(push) ; 5
; [else-branch: 48 | k@247@01 != __prim__int___box__(_, 9)]
(assert (not (= k@247@01 (__prim__int___box__ $Snap.unit 9))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@248@01 $Perm)
(assert ($Perm.isReadVar $k@248@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@249@01 $Perm)
(assert ($Perm.isReadVar $k@249@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@249@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@248@01))
(assert ($Perm.isReadVar $k@249@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 49 | !(k@247@01 in dict___values__((First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01)))))), res@147@01)) | live]
; [else-branch: 49 | k@247@01 in dict___values__((First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01)))))), res@147@01) | live]
(push) ; 7
; [then-branch: 49 | !(k@247@01 in dict___values__((First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01)))))), res@147@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@247@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 49 | k@247@01 in dict___values__((First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01)))))), res@147@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
  k@247@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@250@01 $Perm)
(assert ($Perm.isReadVar $k@250@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@250@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@251@01 $Perm)
(assert ($Perm.isReadVar $k@251@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@251@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@250@01))
(assert ($Perm.isReadVar $k@251@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 50 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5))) | live]
; [else-branch: 50 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5)) | live]
(push) ; 9
; [then-branch: 50 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5)))]
(pop) ; 9
(push) ; 9
; [else-branch: 50 | dict___contains__((_, (First:(Second:(Second:(Second:($t@187@01)))), First:(Second:(Second:(Second:(Second:($t@187@01))))))), res@147@01, __prim__int___box__(_, 5))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@252@01 $Perm)
(assert ($Perm.isReadVar $k@252@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@252@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@253@01 $Perm)
(assert ($Perm.isReadVar $k@253@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@253@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@254@01 $Perm)
(assert ($Perm.isReadVar $k@254@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@254@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@255@01 $Perm)
(assert ($Perm.isReadVar $k@255@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@255@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
          $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@250@01))
(assert ($Perm.isReadVar $k@251@01))
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@247@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
      k@247@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
              $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
    k@247@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
      k@247@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@248@01))
(assert ($Perm.isReadVar $k@249@01))
(assert ($Perm.isReadVar $k@250@01))
(assert ($Perm.isReadVar $k@251@01))
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert (=>
  (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
  (and
    (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
        k@247@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
          k@247@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                  $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
        k@247@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
          k@247@01))))))
(assert (or
  (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
  (= k@247@01 (__prim__int___box__ $Snap.unit 9))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@256@01 $Perm)
(assert ($Perm.isReadVar $k@256@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@256@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@257@01 $Perm)
(assert ($Perm.isReadVar $k@257@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@257@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@256@01))
(assert ($Perm.isReadVar $k@257@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@248@01))
(assert ($Perm.isReadVar $k@249@01))
(assert ($Perm.isReadVar $k@250@01))
(assert ($Perm.isReadVar $k@251@01))
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert ($Perm.isReadVar $k@254@01))
(assert ($Perm.isReadVar $k@255@01))
(assert ($Perm.isReadVar $k@256@01))
(assert ($Perm.isReadVar $k@257@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@247@01 $Ref)) (!
  (and
    (=>
      (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
      (and
        (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
            k@247@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
              k@247@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
            k@247@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
              k@247@01)))))
    (or
      (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
      (= k@247@01 (__prim__int___box__ $Snap.unit 9))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
    k@247@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
    k@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@247@01 $Ref)) (!
  (and
    (=>
      (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
      (and
        (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
            k@247@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
              k@247@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                      $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
            k@247@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
              k@247@01)))))
    (or
      (not (= k@247@01 (__prim__int___box__ $Snap.unit 9)))
      (= k@247@01 (__prim__int___box__ $Snap.unit 9))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
    k@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@247@01 $Ref)) (!
  (=
    (or
      (= k@247@01 (__prim__int___box__ $Snap.unit 9))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))) res@147@01)
          k@247@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))) res@147@01 (__prim__int___box__ $Snap.unit 5)))
          (not
            (=
              k@247@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
                    $Snap.unit))) res@147@01 (__prim__int___box__ $Snap.unit 5)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
      k@247@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
    k@247@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))) res@147@01)
    k@247@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; r_5 := dict_0
; [exec]
; inhale _isDefined(3497842)
(declare-const $t@258@01 $Snap)
(assert (= $t@258@01 $Snap.unit))
; [eval] _isDefined(3497842)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3497842))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3497842))
(assert (_isDefined $Snap.unit 3497842))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda42_21$i: Ref ::
;     { (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) }
;     issubtype(typeof(lambda42_21$i), int()) ==>
;     (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) ==>
;     int___gt__(int___unbox__(lambda42_21$i), 1))
; [eval] (forall lambda42_21$i: Ref :: { (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) } issubtype(typeof(lambda42_21$i), int()) ==> (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) ==> int___gt__(int___unbox__(lambda42_21$i), 1))
(declare-const lambda42_21$i@259@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda42_21$i), int()) ==> (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) ==> int___gt__(int___unbox__(lambda42_21$i), 1)
; [eval] issubtype(typeof(lambda42_21$i), int())
; [eval] typeof(lambda42_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 51 | issubtype[Bool](typeof[PyType](lambda42_21$i@259@01), int[PyType]) | live]
; [else-branch: 51 | !(issubtype[Bool](typeof[PyType](lambda42_21$i@259@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 51 | issubtype[Bool](typeof[PyType](lambda42_21$i@259@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType)))
; [eval] (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc) ==> int___gt__(int___unbox__(lambda42_21$i), 1)
; [eval] (lambda42_21$i in _checkDefined(r_5, 3497842).dict_acc)
; [eval] _checkDefined(r_5, 3497842)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@147@01 3497842))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@147@01 3497842))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@147@01 (_checkDefined $Snap.unit res@147@01 3497842))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 52 | lambda42_21$i@259@01 in First:(Second:(Second:(Second:($t@223@01)))) | live]
; [else-branch: 52 | !(lambda42_21$i@259@01 in First:(Second:(Second:(Second:($t@223@01))))) | live]
(push) ; 7
; [then-branch: 52 | lambda42_21$i@259@01 in First:(Second:(Second:(Second:($t@223@01))))]
(assert (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
; [eval] int___gt__(int___unbox__(lambda42_21$i), 1)
; [eval] int___unbox__(lambda42_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1))
(pop) ; 7
(push) ; 7
; [else-branch: 52 | !(lambda42_21$i@259@01 in First:(Second:(Second:(Second:($t@223@01)))))]
(assert (not
  (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
  (and
    (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
    (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1))))
; Joined path conditions
(assert (or
  (not
    (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 51 | !(issubtype[Bool](typeof[PyType](lambda42_21$i@259@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@147@01 3497842)
    (=>
      (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
      (and
        (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
        (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1)))
    (or
      (not
        (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
      (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda42_21$i@259@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@147@01 3497842)
        (=>
          (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
          (and
            (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))
            (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1)))
        (or
          (not
            (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
          (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@756@11@756@247-aux|)))
(assert (forall ((lambda42_21$i@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
      (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
    (and
      (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1)))
  :pattern ((Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@756@11@756@247_precondition|)))
(push) ; 3
(assert (not (forall ((lambda42_21$i@259@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
          (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
        (and
          (int___unbox__%precondition $Snap.unit lambda42_21$i@259@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
        (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01))))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1))
  :pattern ((Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@756@11@756@247|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((lambda42_21$i@259@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda42_21$i@259@01) (as int<PyType>  PyType))
      (Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda42_21$i@259@01) 1))
  :pattern ((Set_in lambda42_21$i@259@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@223@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@756@11@756@247|)))
; [exec]
; label __end
; [eval] (forperm _r_18: Ref [MustInvokeBounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [MustInvokeUnbounded(_r_18)] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseBounded] :: false)
; [eval] (forperm _r_18: Ref [_r_18.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- test_dict_2 ----------
(declare-const _cthread_163@260@01 $Ref)
(declare-const _caller_measures_163@261@01 Seq<Measure$>)
(declare-const _residue_163@262@01 $Perm)
(declare-const _current_wait_level_163@263@01 $Perm)
(declare-const _cthread_163@264@01 $Ref)
(declare-const _caller_measures_163@265@01 Seq<Measure$>)
(declare-const _residue_163@266@01 $Perm)
(declare-const _current_wait_level_163@267@01 $Perm)
(push) ; 1
(declare-const $t@268@01 $Snap)
(assert (= $t@268@01 ($Snap.combine ($Snap.first $t@268@01) ($Snap.second $t@268@01))))
(assert (= ($Snap.first $t@268@01) $Snap.unit))
; [eval] _cthread_163 != null
(assert (not (= _cthread_163@264@01 $Ref.null)))
(assert (=
  ($Snap.second $t@268@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@268@01))
    ($Snap.second ($Snap.second $t@268@01)))))
(assert (= ($Snap.first ($Snap.second $t@268@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_163), Thread_0())
; [eval] typeof(_cthread_163)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_163@264@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@268@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@269@01 $Snap)
(assert (= $t@269@01 ($Snap.combine ($Snap.first $t@269@01) ($Snap.second $t@269@01))))
(assert (= ($Snap.first $t@269@01) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseBounded] :: Level(_r_20) <= _current_wait_level_163)
(assert (=
  ($Snap.second $t@269@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@269@01))
    ($Snap.second ($Snap.second $t@269@01)))))
(assert (= ($Snap.first ($Snap.second $t@269@01)) $Snap.unit))
; [eval] (forperm _r_20: Ref [_r_20.MustReleaseUnbounded] :: Level(_r_20) <= _current_wait_level_163)
(assert (=
  ($Snap.second ($Snap.second $t@269@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@269@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@269@01))) $Snap.unit))
; [eval] _residue_163 <= _current_wait_level_163
(assert (<= _residue_163@266@01 _current_wait_level_163@267@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@269@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@270@01 $Ref)
; [exec]
; var r_6: Ref
(declare-const r_6@271@01 $Ref)
; [exec]
; var dict_1: Ref
(declare-const dict_1@272@01 $Ref)
; [exec]
; var _cwl_163: Perm
(declare-const _cwl_163@273@01 $Perm)
; [exec]
; var _method_measures_163: Seq[Measure$]
(declare-const _method_measures_163@274@01 Seq<Measure$>)
; [exec]
; _method_measures_163 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_163, dict_1 := dict___init__(_cthread_163, _method_measures_163, _residue_163)
; [eval] _cthread_33 != null
; [eval] Measure$check(_caller_measures_33, _cthread_33, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_163@264@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_163@264@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_163@264@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_163@264@01 1))
; [eval] issubtype(typeof(_cthread_33), Thread_0())
; [eval] typeof(_cthread_33)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_33, _cthread_33, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_33@275@01 $Perm)
(declare-const res@276@01 $Ref)
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second $t@277@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@277@01))
    ($Snap.second ($Snap.second $t@277@01)))))
(assert (= ($Snap.first ($Snap.second $t@277@01)) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second ($Snap.second $t@277@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@277@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@277@01))) $Snap.unit))
; [eval] _residue_33 <= _current_wait_level_33
(assert (<= _residue_163@266@01 _current_wait_level_33@275@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@277@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
(assert (not (= res@276@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
  $Snap.unit))
; [eval] res.dict_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
  $Snap.unit))
; [eval] typeof(res) == dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] typeof(res)
; [eval] dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] dict_arg(typeof(res), 0)
; [eval] typeof(res)
; [eval] dict_arg(typeof(res), 1)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@276@01)
  (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@276@01) 0) (dict_arg<PyType> (typeof<PyType> res@276@01) 1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(dict_1), dict(int(), int()))
(declare-const $t@278@01 $Snap)
(assert (= $t@278@01 $Snap.unit))
; [eval] issubtype(typeof(dict_1), dict(int(), int()))
; [eval] typeof(dict_1)
; [eval] dict(int(), int())
; [eval] int()
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@276@01) (dict<PyType> (as int<PyType>  PyType) (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; _cwl_163 := dict___setitem__(_cthread_163, _method_measures_163, _residue_163,
;   dict_1, __prim__int___box__(3), __prim__int___box__(7))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] __prim__int___box__(7)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 7))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 7))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> res@276@01) (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@276@01) 0) (dict_arg<PyType> (typeof<PyType> res@276@01) 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> res@276@01) (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@276@01) 0) (dict_arg<PyType> (typeof<PyType> res@276@01) 1))))
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 7)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@279@01 $Perm)
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 ($Snap.combine ($Snap.first $t@280@01) ($Snap.second $t@280@01))))
(assert (= ($Snap.first $t@280@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@280@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@280@01))
    ($Snap.second ($Snap.second $t@280@01)))))
(assert (= ($Snap.first ($Snap.second $t@280@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@280@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@280@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@280@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_163@266@01 _current_wait_level_35@279@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@280@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 3)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@281@01 $Perm)
(assert ($Perm.isReadVar $k@281@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@281@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@282@01 $Perm)
(assert ($Perm.isReadVar $k@282@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@282@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@283@01 $Perm)
(assert ($Perm.isReadVar $k@283@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@283@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@284@01 $Perm)
(assert ($Perm.isReadVar $k@284@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@284@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@283@01))
(assert ($Perm.isReadVar $k@284@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert ($Perm.isReadVar $k@283@01))
(assert ($Perm.isReadVar $k@284@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))
  (__prim__int___box__ $Snap.unit 7)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@285@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@286@01 $Perm)
(assert ($Perm.isReadVar $k@286@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@286@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@287@01 $Perm)
(assert ($Perm.isReadVar $k@287@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@287@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@286@01))
(assert ($Perm.isReadVar $k@287@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 53 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01)) | live]
; [else-branch: 53 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01) | live]
(push) ; 5
; [then-branch: 53 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 53 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01))))
(push) ; 4
; [then-branch: 54 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01) && k@285@01 != __prim__int___box__(_, 3) | live]
; [else-branch: 54 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01) && k@285@01 != __prim__int___box__(_, 3)) | live]
(push) ; 5
; [then-branch: 54 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01) && k@285@01 != __prim__int___box__(_, 3)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
  (not (= k@285@01 (__prim__int___box__ $Snap.unit 3)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@288@01 $Perm)
(assert ($Perm.isReadVar $k@288@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@288@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@289@01 $Perm)
(assert ($Perm.isReadVar $k@289@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@289@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@288@01))
(assert ($Perm.isReadVar $k@289@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 55 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@285@01)) | live]
; [else-branch: 55 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@285@01) | live]
(push) ; 7
; [then-branch: 55 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@285@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 55 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@285@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@290@01 $Perm)
(assert ($Perm.isReadVar $k@290@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@290@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@291@01 $Perm)
(assert ($Perm.isReadVar $k@291@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@291@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@292@01 $Perm)
(assert ($Perm.isReadVar $k@292@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@293@01 $Perm)
(assert ($Perm.isReadVar $k@293@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 k@285@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@290@01))
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 k@285@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@294@01 $Perm)
(assert ($Perm.isReadVar $k@294@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@294@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@295@01 $Perm)
(assert ($Perm.isReadVar $k@295@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@295@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@296@01 $Perm)
(assert ($Perm.isReadVar $k@296@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@296@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@297@01 $Perm)
(assert ($Perm.isReadVar $k@297@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@297@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
      $Snap.unit))) res@276@01 k@285@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
      $Snap.unit))) res@276@01 k@285@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@290@01))
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
          $Snap.unit))) res@276@01 k@285@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
          $Snap.unit))) res@276@01 k@285@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 54 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, k@285@01) && k@285@01 != __prim__int___box__(_, 3))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
    (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@288@01))
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
    (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
    (not (= k@285@01 (__prim__int___box__ $Snap.unit 3)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
              $Snap.unit))) res@276@01 k@285@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
              $Snap.unit))) res@276@01 k@285@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
      (not (= k@285@01 (__prim__int___box__ $Snap.unit 3)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
    (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@286@01))
(assert ($Perm.isReadVar $k@287@01))
(assert ($Perm.isReadVar $k@288@01))
(assert ($Perm.isReadVar $k@289@01))
(assert ($Perm.isReadVar $k@290@01))
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert ($Perm.isReadVar $k@293@01))
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert ($Perm.isReadVar $k@296@01))
(assert ($Perm.isReadVar $k@297@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@285@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
        (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
        (not (= k@285@01 (__prim__int___box__ $Snap.unit 3)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                  $Snap.unit))) res@276@01 k@285@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
                  $Snap.unit))) res@276@01 k@285@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
          (not (= k@285@01 (__prim__int___box__ $Snap.unit 3)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
        (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
        $Snap.unit))) res@276@01 k@285@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@285@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 k@285@01)
      (not (= k@285@01 (__prim__int___box__ $Snap.unit 3))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@285@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
              $Snap.unit))) res@276@01 k@285@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
              $Snap.unit))) res@276@01 k@285@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
        $Snap.unit))) res@276@01 k@285@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@298@01 $Perm)
(assert ($Perm.isReadVar $k@298@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@298@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@299@01 $Perm)
(assert ($Perm.isReadVar $k@299@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@299@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@298@01))
(assert ($Perm.isReadVar $k@299@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@300@01 $Perm)
(assert ($Perm.isReadVar $k@300@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@300@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@301@01 $Perm)
(assert ($Perm.isReadVar $k@301@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@301@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@300@01))
(assert ($Perm.isReadVar $k@301@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@302@01 $Perm)
(assert ($Perm.isReadVar $k@302@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@302@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@303@01 $Perm)
(assert ($Perm.isReadVar $k@303@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@303@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@302@01))
(assert ($Perm.isReadVar $k@303@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3)) | dead]
; [else-branch: 56 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 56 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@304@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 57 | k@304@01 == __prim__int___box__(_, 7) | live]
; [else-branch: 57 | k@304@01 != __prim__int___box__(_, 7) | live]
(push) ; 5
; [then-branch: 57 | k@304@01 == __prim__int___box__(_, 7)]
(assert (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
(pop) ; 5
(push) ; 5
; [else-branch: 57 | k@304@01 != __prim__int___box__(_, 7)]
(assert (not (= k@304@01 (__prim__int___box__ $Snap.unit 7))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@305@01 $Perm)
(assert ($Perm.isReadVar $k@305@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@306@01 $Perm)
(assert ($Perm.isReadVar $k@306@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 58 | !(k@304@01 in dict___values__((First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01)))))), res@276@01)) | live]
; [else-branch: 58 | k@304@01 in dict___values__((First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01)))))), res@276@01) | live]
(push) ; 7
; [then-branch: 58 | !(k@304@01 in dict___values__((First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01)))))), res@276@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
    k@304@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 58 | k@304@01 in dict___values__((First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01)))))), res@276@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
  k@304@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@307@01 $Perm)
(assert ($Perm.isReadVar $k@307@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@307@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@308@01 $Perm)
(assert ($Perm.isReadVar $k@308@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@308@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 59 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3))) | live]
; [else-branch: 59 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3)) | live]
(push) ; 9
; [then-branch: 59 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3)))]
(pop) ; 9
(push) ; 9
; [else-branch: 59 | dict___contains__((_, (First:(Second:(Second:(Second:($t@277@01)))), First:(Second:(Second:(Second:(Second:($t@277@01))))))), res@276@01, __prim__int___box__(_, 3))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@309@01 $Perm)
(assert ($Perm.isReadVar $k@309@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@309@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@310@01 $Perm)
(assert ($Perm.isReadVar $k@310@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@310@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@311@01 $Perm)
(assert ($Perm.isReadVar $k@311@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@311@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@312@01 $Perm)
(assert ($Perm.isReadVar $k@312@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@312@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
          $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
    k@304@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
      k@304@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
              $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
    k@304@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
      k@304@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert (=>
  (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
  (and
    (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
        k@304@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
          k@304@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
                  $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
        k@304@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
          k@304@01))))))
(assert (or
  (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
  (= k@304@01 (__prim__int___box__ $Snap.unit 7))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@313@01 $Perm)
(assert ($Perm.isReadVar $k@313@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@313@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@314@01 $Perm)
(assert ($Perm.isReadVar $k@314@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@314@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@305@01))
(assert ($Perm.isReadVar $k@306@01))
(assert ($Perm.isReadVar $k@307@01))
(assert ($Perm.isReadVar $k@308@01))
(assert ($Perm.isReadVar $k@309@01))
(assert ($Perm.isReadVar $k@310@01))
(assert ($Perm.isReadVar $k@311@01))
(assert ($Perm.isReadVar $k@312@01))
(assert ($Perm.isReadVar $k@313@01))
(assert ($Perm.isReadVar $k@314@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@304@01 $Ref)) (!
  (and
    (=>
      (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
      (and
        (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
            k@304@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
              k@304@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
            k@304@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
              k@304@01)))))
    (or
      (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
      (= k@304@01 (__prim__int___box__ $Snap.unit 7))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@304@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@304@01 $Ref)) (!
  (and
    (=>
      (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
      (and
        (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
            k@304@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
              k@304@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
            k@304@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
              k@304@01)))))
    (or
      (not (= k@304@01 (__prim__int___box__ $Snap.unit 7)))
      (= k@304@01 (__prim__int___box__ $Snap.unit 7))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@304@01 $Ref)) (!
  (=
    (or
      (= k@304@01 (__prim__int___box__ $Snap.unit 7))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))) res@276@01)
          k@304@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 3)))
          (not
            (=
              k@304@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
                    $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 3)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
      k@304@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@304@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_163 := dict___setitem__(_cthread_163, _method_measures_163, _residue_163,
;   dict_1, __prim__int___box__(4), __prim__int___box__(8))
; [eval] __prim__int___box__(4)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] __prim__int___box__(8)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 8))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 8))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 8)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@315@01 $Perm)
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 ($Snap.combine ($Snap.first $t@316@01) ($Snap.second $t@316@01))))
(assert (= ($Snap.first $t@316@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@316@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@316@01))
    ($Snap.second ($Snap.second $t@316@01)))))
(assert (= ($Snap.first ($Snap.second $t@316@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@316@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@316@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@316@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_163@266@01 _current_wait_level_35@315@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@316@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 4)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@317@01 $Perm)
(assert ($Perm.isReadVar $k@317@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@317@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@318@01 $Perm)
(assert ($Perm.isReadVar $k@318@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@318@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@319@01 $Perm)
(assert ($Perm.isReadVar $k@319@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@319@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@320@01 $Perm)
(assert ($Perm.isReadVar $k@320@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@320@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@319@01))
(assert ($Perm.isReadVar $k@320@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@317@01))
(assert ($Perm.isReadVar $k@318@01))
(assert ($Perm.isReadVar $k@319@01))
(assert ($Perm.isReadVar $k@320@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))
  (__prim__int___box__ $Snap.unit 8)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@321@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@322@01 $Perm)
(assert ($Perm.isReadVar $k@322@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@323@01 $Perm)
(assert ($Perm.isReadVar $k@323@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@322@01))
(assert ($Perm.isReadVar $k@323@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 60 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01)) | live]
; [else-branch: 60 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01) | live]
(push) ; 5
; [then-branch: 60 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01))))
(push) ; 4
; [then-branch: 61 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01) && k@321@01 != __prim__int___box__(_, 4) | live]
; [else-branch: 61 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01) && k@321@01 != __prim__int___box__(_, 4)) | live]
(push) ; 5
; [then-branch: 61 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01) && k@321@01 != __prim__int___box__(_, 4)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
  (not (= k@321@01 (__prim__int___box__ $Snap.unit 4)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@324@01 $Perm)
(assert ($Perm.isReadVar $k@324@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@324@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@325@01 $Perm)
(assert ($Perm.isReadVar $k@325@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@325@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@324@01))
(assert ($Perm.isReadVar $k@325@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 62 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@321@01)) | live]
; [else-branch: 62 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@321@01) | live]
(push) ; 7
; [then-branch: 62 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@321@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 62 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@321@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@326@01 $Perm)
(assert ($Perm.isReadVar $k@326@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@326@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@327@01 $Perm)
(assert ($Perm.isReadVar $k@327@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@327@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@328@01 $Perm)
(assert ($Perm.isReadVar $k@328@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@328@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@329@01 $Perm)
(assert ($Perm.isReadVar $k@329@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@329@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@329@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 k@321@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@326@01))
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@329@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 k@321@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@330@01 $Perm)
(assert ($Perm.isReadVar $k@330@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@330@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@331@01 $Perm)
(assert ($Perm.isReadVar $k@331@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@331@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@332@01 $Perm)
(assert ($Perm.isReadVar $k@332@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@332@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@333@01 $Perm)
(assert ($Perm.isReadVar $k@333@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@333@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@332@01))
(assert ($Perm.isReadVar $k@333@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 k@321@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert ($Perm.isReadVar $k@332@01))
(assert ($Perm.isReadVar $k@333@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 k@321@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@326@01))
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@329@01))
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert ($Perm.isReadVar $k@332@01))
(assert ($Perm.isReadVar $k@333@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
          $Snap.unit))) res@276@01 k@321@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
          $Snap.unit))) res@276@01 k@321@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 61 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, k@321@01) && k@321@01 != __prim__int___box__(_, 4))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
    (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@324@01))
(assert ($Perm.isReadVar $k@325@01))
(assert ($Perm.isReadVar $k@326@01))
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@329@01))
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert ($Perm.isReadVar $k@332@01))
(assert ($Perm.isReadVar $k@333@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
    (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
    (not (= k@321@01 (__prim__int___box__ $Snap.unit 4)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
              $Snap.unit))) res@276@01 k@321@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
              $Snap.unit))) res@276@01 k@321@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
      (not (= k@321@01 (__prim__int___box__ $Snap.unit 4)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
    (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@322@01))
(assert ($Perm.isReadVar $k@323@01))
(assert ($Perm.isReadVar $k@324@01))
(assert ($Perm.isReadVar $k@325@01))
(assert ($Perm.isReadVar $k@326@01))
(assert ($Perm.isReadVar $k@327@01))
(assert ($Perm.isReadVar $k@328@01))
(assert ($Perm.isReadVar $k@329@01))
(assert ($Perm.isReadVar $k@330@01))
(assert ($Perm.isReadVar $k@331@01))
(assert ($Perm.isReadVar $k@332@01))
(assert ($Perm.isReadVar $k@333@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@321@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
        (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
        (not (= k@321@01 (__prim__int___box__ $Snap.unit 4)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                  $Snap.unit))) res@276@01 k@321@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                  $Snap.unit))) res@276@01 k@321@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
          (not (= k@321@01 (__prim__int___box__ $Snap.unit 4)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
        (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
        $Snap.unit))) res@276@01 k@321@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@321@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 k@321@01)
      (not (= k@321@01 (__prim__int___box__ $Snap.unit 4))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@321@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
              $Snap.unit))) res@276@01 k@321@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
              $Snap.unit))) res@276@01 k@321@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
        $Snap.unit))) res@276@01 k@321@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@334@01 $Perm)
(assert ($Perm.isReadVar $k@334@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@334@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@335@01 $Perm)
(assert ($Perm.isReadVar $k@335@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@335@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@334@01))
(assert ($Perm.isReadVar $k@335@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@336@01 $Perm)
(assert ($Perm.isReadVar $k@336@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@336@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@337@01 $Perm)
(assert ($Perm.isReadVar $k@337@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@336@01))
(assert ($Perm.isReadVar $k@337@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@338@01 $Perm)
(assert ($Perm.isReadVar $k@338@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@338@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@339@01 $Perm)
(assert ($Perm.isReadVar $k@339@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@339@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@338@01))
(assert ($Perm.isReadVar $k@339@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4)) | dead]
; [else-branch: 63 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 63 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@340@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 64 | k@340@01 == __prim__int___box__(_, 8) | live]
; [else-branch: 64 | k@340@01 != __prim__int___box__(_, 8) | live]
(push) ; 5
; [then-branch: 64 | k@340@01 == __prim__int___box__(_, 8)]
(assert (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
(pop) ; 5
(push) ; 5
; [else-branch: 64 | k@340@01 != __prim__int___box__(_, 8)]
(assert (not (= k@340@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@341@01 $Perm)
(assert ($Perm.isReadVar $k@341@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@342@01 $Perm)
(assert ($Perm.isReadVar $k@342@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@341@01))
(assert ($Perm.isReadVar $k@342@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 65 | !(k@340@01 in dict___values__((First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01)))))), res@276@01)) | live]
; [else-branch: 65 | k@340@01 in dict___values__((First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01)))))), res@276@01) | live]
(push) ; 7
; [then-branch: 65 | !(k@340@01 in dict___values__((First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01)))))), res@276@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@340@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 65 | k@340@01 in dict___values__((First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01)))))), res@276@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
  k@340@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@343@01 $Perm)
(assert ($Perm.isReadVar $k@343@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@343@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@344@01 $Perm)
(assert ($Perm.isReadVar $k@344@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@344@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@343@01))
(assert ($Perm.isReadVar $k@344@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 66 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4))) | live]
; [else-branch: 66 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4)) | live]
(push) ; 9
; [then-branch: 66 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4)))]
(pop) ; 9
(push) ; 9
; [else-branch: 66 | dict___contains__((_, (First:(Second:(Second:(Second:($t@280@01)))), First:(Second:(Second:(Second:(Second:($t@280@01))))))), res@276@01, __prim__int___box__(_, 4))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@345@01 $Perm)
(assert ($Perm.isReadVar $k@345@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@345@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@346@01 $Perm)
(assert ($Perm.isReadVar $k@346@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@346@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@347@01 $Perm)
(assert ($Perm.isReadVar $k@347@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@347@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@348@01 $Perm)
(assert ($Perm.isReadVar $k@348@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@348@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@345@01))
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@345@01))
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
          $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@343@01))
(assert ($Perm.isReadVar $k@344@01))
(assert ($Perm.isReadVar $k@345@01))
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@340@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
      k@340@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
              $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
    k@340@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
      k@340@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@341@01))
(assert ($Perm.isReadVar $k@342@01))
(assert ($Perm.isReadVar $k@343@01))
(assert ($Perm.isReadVar $k@344@01))
(assert ($Perm.isReadVar $k@345@01))
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert (=>
  (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
  (and
    (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
        k@340@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
          k@340@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                  $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
        k@340@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
          k@340@01))))))
(assert (or
  (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
  (= k@340@01 (__prim__int___box__ $Snap.unit 8))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@349@01 $Perm)
(assert ($Perm.isReadVar $k@349@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@349@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@350@01 $Perm)
(assert ($Perm.isReadVar $k@350@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@350@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@349@01))
(assert ($Perm.isReadVar $k@350@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@341@01))
(assert ($Perm.isReadVar $k@342@01))
(assert ($Perm.isReadVar $k@343@01))
(assert ($Perm.isReadVar $k@344@01))
(assert ($Perm.isReadVar $k@345@01))
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert ($Perm.isReadVar $k@348@01))
(assert ($Perm.isReadVar $k@349@01))
(assert ($Perm.isReadVar $k@350@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@340@01 $Ref)) (!
  (and
    (=>
      (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
      (and
        (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
            k@340@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
              k@340@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
            k@340@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
              k@340@01)))))
    (or
      (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
      (= k@340@01 (__prim__int___box__ $Snap.unit 8))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@340@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@340@01 $Ref)) (!
  (and
    (=>
      (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
      (and
        (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
            k@340@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
              k@340@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
            k@340@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
              k@340@01)))))
    (or
      (not (= k@340@01 (__prim__int___box__ $Snap.unit 8)))
      (= k@340@01 (__prim__int___box__ $Snap.unit 8))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@340@01 $Ref)) (!
  (=
    (or
      (= k@340@01 (__prim__int___box__ $Snap.unit 8))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))) res@276@01)
          k@340@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 4)))
          (not
            (=
              k@340@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@280@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@280@01)))))
                    $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 4)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
      k@340@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@340@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; _cwl_163 := dict___setitem__(_cthread_163, _method_measures_163, _residue_163,
;   dict_1, __prim__int___box__(5), __prim__int___box__(9))
; [eval] __prim__int___box__(5)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] __prim__int___box__(9)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 9))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 9))
; [eval] _cthread_35 != null
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 9)) (dict_arg<PyType> (typeof<PyType> res@276@01) 1)))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (dict_arg<PyType> (typeof<PyType> res@276@01) 0)))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_35@351@01 $Perm)
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@352@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@352@01))
    ($Snap.second ($Snap.second $t@352@01)))))
(assert (= ($Snap.first ($Snap.second $t@352@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@352@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@352@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@352@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_163@266@01 _current_wait_level_35@351@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@352@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))) (Set_singleton (__prim__int___box__ $Snap.unit 5)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@353@01 $Perm)
(assert ($Perm.isReadVar $k@353@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@353@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@354@01 $Perm)
(assert ($Perm.isReadVar $k@354@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@355@01 $Perm)
(assert ($Perm.isReadVar $k@355@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@355@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@356@01 $Perm)
(assert ($Perm.isReadVar $k@356@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@356@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@355@01))
(assert ($Perm.isReadVar $k@356@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert ($Perm.isReadVar $k@354@01))
(assert ($Perm.isReadVar $k@355@01))
(assert ($Perm.isReadVar $k@356@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
        $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))
  (__prim__int___box__ $Snap.unit 9)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@357@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@359@01 $Perm)
(assert ($Perm.isReadVar $k@359@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@358@01))
(assert ($Perm.isReadVar $k@359@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 67 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01)) | live]
; [else-branch: 67 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01) | live]
(push) ; 5
; [then-branch: 67 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 67 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01))))
(push) ; 4
; [then-branch: 68 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01) && k@357@01 != __prim__int___box__(_, 5) | live]
; [else-branch: 68 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01) && k@357@01 != __prim__int___box__(_, 5)) | live]
(push) ; 5
; [then-branch: 68 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01) && k@357@01 != __prim__int___box__(_, 5)]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
  (not (= k@357@01 (__prim__int___box__ $Snap.unit 5)))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@360@01 $Perm)
(assert ($Perm.isReadVar $k@360@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@360@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@361@01 $Perm)
(assert ($Perm.isReadVar $k@361@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@361@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@360@01))
(assert ($Perm.isReadVar $k@361@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 69 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@352@01)))), First:(Second:(Second:(Second:(Second:($t@352@01))))))), res@276@01, k@357@01)) | live]
; [else-branch: 69 | dict___contains__((_, (First:(Second:(Second:(Second:($t@352@01)))), First:(Second:(Second:(Second:(Second:($t@352@01))))))), res@276@01, k@357@01) | live]
(push) ; 7
; [then-branch: 69 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@352@01)))), First:(Second:(Second:(Second:(Second:($t@352@01))))))), res@276@01, k@357@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 69 | dict___contains__((_, (First:(Second:(Second:(Second:($t@352@01)))), First:(Second:(Second:(Second:(Second:($t@352@01))))))), res@276@01, k@357@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@362@01 $Perm)
(assert ($Perm.isReadVar $k@362@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@362@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@363@01 $Perm)
(assert ($Perm.isReadVar $k@363@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@363@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@364@01 $Perm)
(assert ($Perm.isReadVar $k@364@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@364@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@365@01 $Perm)
(assert ($Perm.isReadVar $k@365@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@365@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@364@01))
(assert ($Perm.isReadVar $k@365@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      $Snap.unit))) res@276@01 k@357@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@362@01))
(assert ($Perm.isReadVar $k@363@01))
(assert ($Perm.isReadVar $k@364@01))
(assert ($Perm.isReadVar $k@365@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
      $Snap.unit))) res@276@01 k@357@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@366@01 $Perm)
(assert ($Perm.isReadVar $k@366@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@366@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@367@01 $Perm)
(assert ($Perm.isReadVar $k@367@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@367@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@368@01 $Perm)
(assert ($Perm.isReadVar $k@368@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@368@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@369@01 $Perm)
(assert ($Perm.isReadVar $k@369@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@369@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 k@357@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@366@01))
(assert ($Perm.isReadVar $k@367@01))
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 k@357@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@362@01))
(assert ($Perm.isReadVar $k@363@01))
(assert ($Perm.isReadVar $k@364@01))
(assert ($Perm.isReadVar $k@365@01))
(assert ($Perm.isReadVar $k@366@01))
(assert ($Perm.isReadVar $k@367@01))
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
          $Snap.unit))) res@276@01 k@357@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
          $Snap.unit))) res@276@01 k@357@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 68 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, k@357@01) && k@357@01 != __prim__int___box__(_, 5))]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
    (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@360@01))
(assert ($Perm.isReadVar $k@361@01))
(assert ($Perm.isReadVar $k@362@01))
(assert ($Perm.isReadVar $k@363@01))
(assert ($Perm.isReadVar $k@364@01))
(assert ($Perm.isReadVar $k@365@01))
(assert ($Perm.isReadVar $k@366@01))
(assert ($Perm.isReadVar $k@367@01))
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
    (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
    (not (= k@357@01 (__prim__int___box__ $Snap.unit 5)))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
              $Snap.unit))) res@276@01 k@357@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
              $Snap.unit))) res@276@01 k@357@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
      (not (= k@357@01 (__prim__int___box__ $Snap.unit 5)))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
    (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@358@01))
(assert ($Perm.isReadVar $k@359@01))
(assert ($Perm.isReadVar $k@360@01))
(assert ($Perm.isReadVar $k@361@01))
(assert ($Perm.isReadVar $k@362@01))
(assert ($Perm.isReadVar $k@363@01))
(assert ($Perm.isReadVar $k@364@01))
(assert ($Perm.isReadVar $k@365@01))
(assert ($Perm.isReadVar $k@366@01))
(assert ($Perm.isReadVar $k@367@01))
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@357@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
        (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
        (not (= k@357@01 (__prim__int___box__ $Snap.unit 5)))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
                  $Snap.unit))) res@276@01 k@357@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                  $Snap.unit))) res@276@01 k@357@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
          (not (= k@357@01 (__prim__int___box__ $Snap.unit 5)))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
        (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
        $Snap.unit))) res@276@01 k@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@357@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 k@357@01)
      (not (= k@357@01 (__prim__int___box__ $Snap.unit 5))))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))) res@276@01 k@357@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
              $Snap.unit))) res@276@01 k@357@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
              $Snap.unit))) res@276@01 k@357@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))
        $Snap.unit))) res@276@01 k@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@370@01 $Perm)
(assert ($Perm.isReadVar $k@370@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@370@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@371@01 $Perm)
(assert ($Perm.isReadVar $k@371@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@371@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@370@01))
(assert ($Perm.isReadVar $k@371@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@372@01 $Perm)
(assert ($Perm.isReadVar $k@372@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@373@01 $Perm)
(assert ($Perm.isReadVar $k@373@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@373@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@372@01))
(assert ($Perm.isReadVar $k@373@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@374@01 $Perm)
(assert ($Perm.isReadVar $k@374@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@375@01 $Perm)
(assert ($Perm.isReadVar $k@375@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@374@01))
(assert ($Perm.isReadVar $k@375@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5)) | dead]
; [else-branch: 70 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5))) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 70 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5)))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@376@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 71 | k@376@01 == __prim__int___box__(_, 9) | live]
; [else-branch: 71 | k@376@01 != __prim__int___box__(_, 9) | live]
(push) ; 5
; [then-branch: 71 | k@376@01 == __prim__int___box__(_, 9)]
(assert (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
(pop) ; 5
(push) ; 5
; [else-branch: 71 | k@376@01 != __prim__int___box__(_, 9)]
(assert (not (= k@376@01 (__prim__int___box__ $Snap.unit 9))))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@377@01 $Perm)
(assert ($Perm.isReadVar $k@377@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@377@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@378@01 $Perm)
(assert ($Perm.isReadVar $k@378@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@378@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 72 | !(k@376@01 in dict___values__((First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01)))))), res@276@01)) | live]
; [else-branch: 72 | k@376@01 in dict___values__((First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01)))))), res@276@01) | live]
(push) ; 7
; [then-branch: 72 | !(k@376@01 in dict___values__((First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01)))))), res@276@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@376@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 72 | k@376@01 in dict___values__((First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01)))))), res@276@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
  k@376@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@379@01 $Perm)
(assert ($Perm.isReadVar $k@379@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@379@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@380@01 $Perm)
(assert ($Perm.isReadVar $k@380@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@380@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 73 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5))) | live]
; [else-branch: 73 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5)) | live]
(push) ; 9
; [then-branch: 73 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5)))]
(pop) ; 9
(push) ; 9
; [else-branch: 73 | dict___contains__((_, (First:(Second:(Second:(Second:($t@316@01)))), First:(Second:(Second:(Second:(Second:($t@316@01))))))), res@276@01, __prim__int___box__(_, 5))]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@381@01 $Perm)
(assert ($Perm.isReadVar $k@381@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@381@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@382@01 $Perm)
(assert ($Perm.isReadVar $k@382@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@382@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@383@01 $Perm)
(assert ($Perm.isReadVar $k@383@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@383@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@384@01 $Perm)
(assert ($Perm.isReadVar $k@384@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@384@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
          $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5)))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@376@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
      k@376@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
              $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
    k@376@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
      k@376@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert (=>
  (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
  (and
    (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
        k@376@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
          k@376@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                  $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
        k@376@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
          k@376@01))))))
(assert (or
  (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
  (= k@376@01 (__prim__int___box__ $Snap.unit 9))))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@385@01 $Perm)
(assert ($Perm.isReadVar $k@385@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@385@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@386@01 $Perm)
(assert ($Perm.isReadVar $k@386@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@386@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@385@01))
(assert ($Perm.isReadVar $k@386@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@377@01))
(assert ($Perm.isReadVar $k@378@01))
(assert ($Perm.isReadVar $k@379@01))
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert ($Perm.isReadVar $k@384@01))
(assert ($Perm.isReadVar $k@385@01))
(assert ($Perm.isReadVar $k@386@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@376@01 $Ref)) (!
  (and
    (=>
      (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
      (and
        (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
            k@376@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
              k@376@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
            k@376@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
              k@376@01)))))
    (or
      (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
      (= k@376@01 (__prim__int___box__ $Snap.unit 9))))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
    k@376@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
    k@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@376@01 $Ref)) (!
  (and
    (=>
      (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
      (and
        (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
            k@376@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
              k@376@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                      $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5))))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5))))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
            k@376@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
              k@376@01)))))
    (or
      (not (= k@376@01 (__prim__int___box__ $Snap.unit 9)))
      (= k@376@01 (__prim__int___box__ $Snap.unit 9))))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
    k@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@376@01 $Ref)) (!
  (=
    (or
      (= k@376@01 (__prim__int___box__ $Snap.unit 9))
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))) res@276@01)
          k@376@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01))))))) res@276@01 (__prim__int___box__ $Snap.unit 5)))
          (not
            (=
              k@376@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@316@01))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@316@01)))))
                    $Snap.unit))) res@276@01 (__prim__int___box__ $Snap.unit 5)))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
      k@376@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
    k@376@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))) res@276@01)
    k@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; r_6 := dict_1
; [exec]
; inhale _isDefined(3563378)
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 $Snap.unit))
; [eval] _isDefined(3563378)
(set-option :timeout 0)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3563378))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3563378))
(assert (_isDefined $Snap.unit 3563378))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda48_21$i: Ref ::
;     { (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) }
;     issubtype(typeof(lambda48_21$i), int()) ==>
;     (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==>
;     int___gt__(int___unbox__(lambda48_21$i), 4))
; [eval] (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) } issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4))
(declare-const lambda48_21$i@388@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] issubtype(typeof(lambda48_21$i), int())
; [eval] typeof(lambda48_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 74 | issubtype[Bool](typeof[PyType](lambda48_21$i@388@01), int[PyType]) | live]
; [else-branch: 74 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@388@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 74 | issubtype[Bool](typeof[PyType](lambda48_21$i@388@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType)))
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc)
; [eval] _checkDefined(r_6, 3563378)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@276@01 (_checkDefined $Snap.unit res@276@01 3563378))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 75 | lambda48_21$i@388@01 in First:(Second:(Second:(Second:($t@352@01)))) | live]
; [else-branch: 75 | !(lambda48_21$i@388@01 in First:(Second:(Second:(Second:($t@352@01))))) | live]
(push) ; 7
; [then-branch: 75 | lambda48_21$i@388@01 in First:(Second:(Second:(Second:($t@352@01))))]
(assert (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
; [eval] int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] int___unbox__(lambda48_21$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 75 | !(lambda48_21$i@388@01 in First:(Second:(Second:(Second:($t@352@01)))))]
(assert (not
  (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  (and
    (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(pop) ; 5
(push) ; 5
; [else-branch: 74 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@388@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@276@01 3563378)
    (=>
      (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
      (and
        (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
        (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4)))
    (or
      (not
        (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda48_21$i@388@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@276@01 3563378)
        (=>
          (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
          (and
            (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
            (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4)))
        (or
          (not
            (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
          (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247-aux|)))
(assert (forall ((lambda48_21$i@388@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
      (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (and
      (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4)))
  :pattern ((Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247_precondition|)))
(push) ; 3
(assert (not (forall ((lambda48_21$i@388@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
          (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
        (and
          (int___unbox__%precondition $Snap.unit lambda48_21$i@388@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@388@01) (as int<PyType>  PyType))
        (Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@388@01) 4))
  :pattern ((Set_in lambda48_21$i@388@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) } issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4))
(declare-const lambda48_21$i@389@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] issubtype(typeof(lambda48_21$i), int())
; [eval] typeof(lambda48_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 76 | issubtype[Bool](typeof[PyType](lambda48_21$i@389@01), int[PyType]) | live]
; [else-branch: 76 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@389@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 76 | issubtype[Bool](typeof[PyType](lambda48_21$i@389@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc)
; [eval] _checkDefined(r_6, 3563378)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@276@01 (_checkDefined $Snap.unit res@276@01 3563378))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 77 | lambda48_21$i@389@01 in First:(Second:(Second:(Second:($t@352@01)))) | live]
; [else-branch: 77 | !(lambda48_21$i@389@01 in First:(Second:(Second:(Second:($t@352@01))))) | live]
(push) ; 7
; [then-branch: 77 | lambda48_21$i@389@01 in First:(Second:(Second:(Second:($t@352@01))))]
(assert (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] int___unbox__(lambda48_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 77 | !(lambda48_21$i@389@01 in First:(Second:(Second:(Second:($t@352@01)))))]
(assert (not
  (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  (and
    (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 76 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@389@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@276@01 3563378)
    (=>
      (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
      (and
        (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
        (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4)))
    (or
      (not
        (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda48_21$i@389@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@276@01 3563378)
        (=>
          (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
          (and
            (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
            (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4)))
        (or
          (not
            (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
          (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247-aux|)))
(assert (forall ((lambda48_21$i@389@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
      (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (and
      (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4)))
  :pattern ((Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda48_21$i@389@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
          (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
        (and
          (int___unbox__%precondition $Snap.unit lambda48_21$i@389@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@389@01) (as int<PyType>  PyType))
        (Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@389@01) 4))
  :pattern ((Set_in lambda48_21$i@389@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) } issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4))
(declare-const lambda48_21$i@390@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] issubtype(typeof(lambda48_21$i), int())
; [eval] typeof(lambda48_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 78 | issubtype[Bool](typeof[PyType](lambda48_21$i@390@01), int[PyType]) | live]
; [else-branch: 78 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@390@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 78 | issubtype[Bool](typeof[PyType](lambda48_21$i@390@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc)
; [eval] _checkDefined(r_6, 3563378)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@276@01 (_checkDefined $Snap.unit res@276@01 3563378))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 79 | lambda48_21$i@390@01 in First:(Second:(Second:(Second:($t@352@01)))) | live]
; [else-branch: 79 | !(lambda48_21$i@390@01 in First:(Second:(Second:(Second:($t@352@01))))) | live]
(push) ; 7
; [then-branch: 79 | lambda48_21$i@390@01 in First:(Second:(Second:(Second:($t@352@01))))]
(assert (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] int___unbox__(lambda48_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 79 | !(lambda48_21$i@390@01 in First:(Second:(Second:(Second:($t@352@01)))))]
(assert (not
  (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  (and
    (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 78 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@390@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@276@01 3563378)
    (=>
      (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
      (and
        (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
        (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4)))
    (or
      (not
        (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda48_21$i@390@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@276@01 3563378)
        (=>
          (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
          (and
            (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
            (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4)))
        (or
          (not
            (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
          (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247-aux|)))
(assert (forall ((lambda48_21$i@390@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
      (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (and
      (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4)))
  :pattern ((Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda48_21$i@390@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
          (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
        (and
          (int___unbox__%precondition $Snap.unit lambda48_21$i@390@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@390@01) (as int<PyType>  PyType))
        (Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@390@01) 4))
  :pattern ((Set_in lambda48_21$i@390@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda48_21$i: Ref :: { (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) } issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4))
(declare-const lambda48_21$i@391@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda48_21$i), int()) ==> (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] issubtype(typeof(lambda48_21$i), int())
; [eval] typeof(lambda48_21$i)
; [eval] int()
(push) ; 4
; [then-branch: 80 | issubtype[Bool](typeof[PyType](lambda48_21$i@391@01), int[PyType]) | live]
; [else-branch: 80 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@391@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 80 | issubtype[Bool](typeof[PyType](lambda48_21$i@391@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc) ==> int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] (lambda48_21$i in _checkDefined(r_6, 3563378).dict_acc)
; [eval] _checkDefined(r_6, 3563378)
(set-option :timeout 0)
(push) ; 6
; [eval] _isDefined(id)
(push) ; 7
(pop) ; 7
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(pop) ; 6
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@276@01 3563378))
(push) ; 6
(set-option :timeout 10)
(assert (not (= res@276@01 (_checkDefined $Snap.unit res@276@01 3563378))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 81 | lambda48_21$i@391@01 in First:(Second:(Second:(Second:($t@352@01)))) | live]
; [else-branch: 81 | !(lambda48_21$i@391@01 in First:(Second:(Second:(Second:($t@352@01))))) | live]
(push) ; 7
; [then-branch: 81 | lambda48_21$i@391@01 in First:(Second:(Second:(Second:($t@352@01))))]
(assert (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(lambda48_21$i), 4)
; [eval] int___unbox__(lambda48_21$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01))
(push) ; 8
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4))
(pop) ; 8
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4))
(pop) ; 7
(push) ; 7
; [else-branch: 81 | !(lambda48_21$i@391@01 in First:(Second:(Second:(Second:($t@352@01)))))]
(assert (not
  (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
  (and
    (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
    (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01)
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4))))
; Joined path conditions
(assert (or
  (not
    (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 80 | !(issubtype[Bool](typeof[PyType](lambda48_21$i@391@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
    (_checkDefined%precondition $Snap.unit res@276@01 3563378)
    (=>
      (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
      (and
        (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
        (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01)
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4)))
    (or
      (not
        (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
      (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda48_21$i@391@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
        (_checkDefined%precondition $Snap.unit res@276@01 3563378)
        (=>
          (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
          (and
            (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
            (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01)
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4)))
        (or
          (not
            (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
          (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))))
  :pattern ((Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247-aux|)))
(assert (forall ((lambda48_21$i@391@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
      (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
    (and
      (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01)
      (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4)))
  :pattern ((Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda48_21$i@391@01 $Ref)) (!
  (=>
    (and
      (=>
        (and
          (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
          (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
        (and
          (int___unbox__%precondition $Snap.unit lambda48_21$i@391@01)
          (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4)))
      (and
        (issubtype<Bool> (typeof<PyType> lambda48_21$i@391@01) (as int<PyType>  PyType))
        (Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit lambda48_21$i@391@01) 4))
  :pattern ((Set_in lambda48_21$i@391@01 ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@352@01)))))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@782@11@782@247|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test_type_quantification ----------
(declare-const _cthread_164@392@01 $Ref)
(declare-const _caller_measures_164@393@01 Seq<Measure$>)
(declare-const _residue_164@394@01 $Perm)
(declare-const _current_wait_level_164@395@01 $Perm)
(declare-const _cthread_164@396@01 $Ref)
(declare-const _caller_measures_164@397@01 Seq<Measure$>)
(declare-const _residue_164@398@01 $Perm)
(declare-const _current_wait_level_164@399@01 $Perm)
(push) ; 1
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 ($Snap.combine ($Snap.first $t@400@01) ($Snap.second $t@400@01))))
(assert (= ($Snap.first $t@400@01) $Snap.unit))
; [eval] _cthread_164 != null
(assert (not (= _cthread_164@396@01 $Ref.null)))
(assert (=
  ($Snap.second $t@400@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@400@01))
    ($Snap.second ($Snap.second $t@400@01)))))
(assert (= ($Snap.first ($Snap.second $t@400@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_164), Thread_0())
; [eval] typeof(_cthread_164)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_164@396@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@400@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 ($Snap.combine ($Snap.first $t@401@01) ($Snap.second $t@401@01))))
(assert (= ($Snap.first $t@401@01) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseBounded] :: Level(_r_23) <= _current_wait_level_164)
(assert (=
  ($Snap.second $t@401@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@401@01))
    ($Snap.second ($Snap.second $t@401@01)))))
(assert (= ($Snap.first ($Snap.second $t@401@01)) $Snap.unit))
; [eval] (forperm _r_23: Ref [_r_23.MustReleaseUnbounded] :: Level(_r_23) <= _current_wait_level_164)
(assert (=
  ($Snap.second ($Snap.second $t@401@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@401@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@401@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@401@01))) $Snap.unit))
; [eval] _residue_164 <= _current_wait_level_164
(assert (<= _residue_164@398@01 _current_wait_level_164@399@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@401@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@402@01 $Ref)
; [exec]
; var r_7: Ref
(declare-const r_7@403@01 $Ref)
; [exec]
; var list_2: Ref
(declare-const list_2@404@01 $Ref)
; [exec]
; var _cwl_164: Perm
(declare-const _cwl_164@405@01 $Perm)
; [exec]
; var _method_measures_164: Seq[Measure$]
(declare-const _method_measures_164@406@01 Seq<Measure$>)
; [exec]
; _method_measures_164 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_164, list_2 := list___init__(_cthread_164, _method_measures_164, _residue_164)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@396@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@396@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@396@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_164@396@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@407@01 $Perm)
(declare-const res@408@01 $Ref)
(declare-const $t@409@01 $Snap)
(assert (= $t@409@01 ($Snap.combine ($Snap.first $t@409@01) ($Snap.second $t@409@01))))
(assert (= ($Snap.first $t@409@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@409@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@409@01))
    ($Snap.second ($Snap.second $t@409@01)))))
(assert (= ($Snap.first ($Snap.second $t@409@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@409@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@409@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@409@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@409@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_164@398@01 _current_wait_level_8@407@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@409@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@409@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))))
(assert (not (= res@408@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@408@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@408@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@409@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@408@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_2), list(int()))
(declare-const $t@410@01 $Snap)
(assert (= $t@410@01 $Snap.unit))
; [eval] issubtype(typeof(list_2), list(int()))
; [eval] typeof(list_2)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@408@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; list_2.list_acc := Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (__prim__int___box__ $Snap.unit 3))
        (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
      (Seq_singleton (__prim__int___box__ $Snap.unit 5))))
  3))
(declare-const list_acc@411@01 Seq<$Ref>)
(assert (=
  list_acc@411@01
  (Seq_append
    (Seq_append
      (Seq_singleton (__prim__int___box__ $Snap.unit 3))
      (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
    (Seq_singleton (__prim__int___box__ $Snap.unit 5)))))
; [exec]
; r_7 := list_2
; [exec]
; inhale _isDefined(3628914)
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] _isDefined(3628914)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3628914))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3628914))
(assert (_isDefined $Snap.unit 3628914))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda53_23$i: Ref ::
;     { issubtype(typeof(lambda53_23$i), int()) }
;     issubtype(typeof(lambda53_23$i), int()) ==>
;     issubtype(typeof(lambda53_23$i), int()) ==>
;     int___ge__(int___unbox__(lambda53_23$i), 0) &&
;     int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7,
;     3628914))) ==>
;     int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)),
;     1))
; [eval] (forall lambda53_23$i: Ref :: { issubtype(typeof(lambda53_23$i), int()) } issubtype(typeof(lambda53_23$i), int()) ==> issubtype(typeof(lambda53_23$i), int()) ==> int___ge__(int___unbox__(lambda53_23$i), 0) && int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)), 1))
(declare-const lambda53_23$i@413@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda53_23$i), int()) ==> issubtype(typeof(lambda53_23$i), int()) ==> int___ge__(int___unbox__(lambda53_23$i), 0) && int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)), 1)
; [eval] issubtype(typeof(lambda53_23$i), int())
; [eval] typeof(lambda53_23$i)
; [eval] int()
(push) ; 4
; [then-branch: 82 | issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType]) | live]
; [else-branch: 82 | !(issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 82 | issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(lambda53_23$i), int()) ==> int___ge__(int___unbox__(lambda53_23$i), 0) && int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)), 1)
; [eval] issubtype(typeof(lambda53_23$i), int())
; [eval] typeof(lambda53_23$i)
; [eval] int()
(push) ; 6
; [then-branch: 83 | issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType]) | live]
; [else-branch: 83 | !(issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType])) | live]
(push) ; 7
; [then-branch: 83 | issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType])]
; [eval] int___ge__(int___unbox__(lambda53_23$i), 0) && int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)), 1)
; [eval] int___ge__(int___unbox__(lambda53_23$i), 0) && int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914)))
; [eval] int___ge__(int___unbox__(lambda53_23$i), 0)
; [eval] int___unbox__(lambda53_23$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01))
(push) ; 8
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
(pop) ; 8
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
(push) ; 8
; [then-branch: 84 | !(int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0)) | live]
; [else-branch: 84 | int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0) | live]
(push) ; 9
; [then-branch: 84 | !(int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0))]
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 84 | int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
; [eval] int___lt__(int___unbox__(lambda53_23$i), list___len__(_checkDefined(r_7, 3628914)))
; [eval] int___unbox__(lambda53_23$i)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] list___len__(_checkDefined(r_7, 3628914))
; [eval] _checkDefined(r_7, 3628914)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@408@01 3628914))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@408@01 3628914))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0))))
(declare-const $k@414@01 $Perm)
(assert ($Perm.isReadVar $k@414@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@408@01 (_checkDefined $Snap.unit res@408@01 3628914))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@414@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@414@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
(set-option :timeout 0)
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@414@01))
(assert (=>
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (_checkDefined%precondition $Snap.unit res@408@01 3628914)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
(assert (or
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
  (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
(push) ; 8
; [then-branch: 85 | int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0) && int___lt__(_, int___unbox__(_, lambda53_23$i@413@01), list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914))) | live]
; [else-branch: 85 | !(int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0) && int___lt__(_, int___unbox__(_, lambda53_23$i@413@01), list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914)))) | live]
(push) ; 9
; [then-branch: 85 | int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0) && int___lt__(_, int___unbox__(_, lambda53_23$i@413@01), list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914)))]
(assert (and
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
; [eval] int___gt__(int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)), 1)
; [eval] int___unbox__(list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i))
; [eval] list___getitem__(_checkDefined(r_7, 3628914), lambda53_23$i)
; [eval] _checkDefined(r_7, 3628914)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@408@01 3628914))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@408@01 3628914))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0))))
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@415@01 $Perm)
(assert ($Perm.isReadVar $k@415@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@408@01 (_checkDefined $Snap.unit res@408@01 3628914))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@415@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@416@01 $Perm)
(assert ($Perm.isReadVar $k@416@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@408@01 (_checkDefined $Snap.unit res@408@01 3628914))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@416@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@416@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
(declare-fun letvar@417@01 ($Ref) Int)
(assert (=
  (letvar@417@01 lambda53_23$i@413@01)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 86 | int___unbox__(_, lambda53_23$i@413@01) < 0 | live]
; [else-branch: 86 | !(int___unbox__(_, lambda53_23$i@413@01) < 0) | live]
(push) ; 12
; [then-branch: 86 | int___unbox__(_, lambda53_23$i@413@01) < 0]
(assert (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
; [eval] -ln
(pop) ; 12
(push) ; 12
; [else-branch: 86 | !(int___unbox__(_, lambda53_23$i@413@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
(push) ; 11
; [then-branch: 87 | !(int___unbox__(_, lambda53_23$i@413@01) < 0 ==> int___unbox__(_, lambda53_23$i@413@01) >= 0 - list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914))) | live]
; [else-branch: 87 | int___unbox__(_, lambda53_23$i@413@01) < 0 ==> int___unbox__(_, lambda53_23$i@413@01) >= 0 - list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914)) | live]
(push) ; 12
; [then-branch: 87 | !(int___unbox__(_, lambda53_23$i@413@01) < 0 ==> int___unbox__(_, lambda53_23$i@413@01) >= 0 - list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914)))]
(assert (not
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 87 | int___unbox__(_, lambda53_23$i@413@01) < 0 ==> int___unbox__(_, lambda53_23$i@413@01) >= 0 - list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914))]
(assert (=>
  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
  (>=
    (int___unbox__ $Snap.unit lambda53_23$i@413@01)
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 88 | int___unbox__(_, lambda53_23$i@413@01) >= 0 | live]
; [else-branch: 88 | !(int___unbox__(_, lambda53_23$i@413@01) >= 0) | live]
(push) ; 14
; [then-branch: 88 | int___unbox__(_, lambda53_23$i@413@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 88 | !(int___unbox__(_, lambda53_23$i@413@01) >= 0)]
(assert (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
  (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (and
    (=>
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
    (or
      (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
      (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))))
(assert (or
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (not
    (=>
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))))
(push) ; 11
(assert (not (and
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
  (=
    (letvar@417@01 lambda53_23$i@413@01)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
  (or
    (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
  (=>
    (=>
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
    (and
      (=>
        (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda53_23$i@413@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
      (or
        (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
        (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
  (or
    (=>
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
    (not
      (=>
        (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda53_23$i@413@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
  (=>
    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))))
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01) $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))
(pop) ; 9
(push) ; 9
; [else-branch: 85 | !(int___ge__(_, int___unbox__(_, lambda53_23$i@413@01), 0) && int___lt__(_, int___unbox__(_, lambda53_23$i@413@01), list___len__((_, list_acc@411@01), _checkDefined(_, res@408@01, 3628914))))]
(assert (not
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (=>
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
    (_checkDefined%precondition $Snap.unit res@408@01 3628914)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
    (=
      (letvar@417@01 lambda53_23$i@413@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
    (or
      (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
    (=>
      (=>
        (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda53_23$i@413@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
      (and
        (=>
          (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda53_23$i@413@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
        (or
          (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
          (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
    (or
      (=>
        (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda53_23$i@413@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
      (not
        (=>
          (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda53_23$i@413@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
    (=>
      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
    (=>
      (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (<
        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))))
; Joined path conditions
(assert (or
  (not
    (and
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
(pop) ; 7
(push) ; 7
; [else-branch: 83 | !(issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
  (and
    (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
    (=>
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (_checkDefined%precondition $Snap.unit res@408@01 3628914)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
    (or
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
      (not
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
    (=>
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
        (_checkDefined%precondition $Snap.unit res@408@01 3628914)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
        (=
          (letvar@417@01 lambda53_23$i@413@01)
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
        (or
          (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
          (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
        (=>
          (=>
            (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda53_23$i@413@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
          (and
            (=>
              (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
            (or
              (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
              (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
        (or
          (=>
            (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda53_23$i@413@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
          (not
            (=>
              (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
        (=>
          (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda53_23$i@413@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
        (=>
          (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (<
            (int___unbox__ $Snap.unit lambda53_23$i@413@01)
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
        (list___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)
        (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1)))
    (or
      (not
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 82 | !(issubtype[Bool](typeof[PyType](lambda53_23$i@413@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
    (=>
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
      (and
        (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
        (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (_checkDefined%precondition $Snap.unit res@408@01 3628914)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
        (or
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (not
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
        (=>
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
            (_checkDefined%precondition $Snap.unit res@408@01 3628914)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
            (=
              (letvar@417@01 lambda53_23$i@413@01)
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
            (or
              (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
              (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
            (=>
              (=>
                (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
              (and
                (=>
                  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
                (or
                  (not (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
                  (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
            (or
              (=>
                (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
              (not
                (=>
                  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
            (=>
              (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
            (=>
              (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (<
                (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)
            (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1)))
        (or
          (not
            (and
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@414@01))
(assert ($Perm.isReadVar $k@415@01))
(assert ($Perm.isReadVar $k@416@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda53_23$i@413@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
        (=>
          (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
          (and
            (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
            (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (_checkDefined%precondition $Snap.unit res@408@01 3628914)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
            (or
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (not
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)))
            (=>
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
                (_checkDefined%precondition $Snap.unit res@408@01 3628914)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@408@01 3628914)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))
                (=
                  (letvar@417@01 lambda53_23$i@413@01)
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
                (or
                  (not (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
                  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
                (=>
                  (=>
                    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
                  (and
                    (=>
                      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
                    (or
                      (not
                        (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
                      (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))))
                (or
                  (=>
                    (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
                  (not
                    (=>
                      (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
                (=>
                  (< (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
                (=>
                  (>= (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                  (<
                    (int___unbox__ $Snap.unit lambda53_23$i@413@01)
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)
                (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1)))
            (or
              (not
                (and
                  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
        (or
          (not
            (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
          (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@809@11@809@397-aux|)))
(assert (forall ((lambda53_23$i@413@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
      (and
        (and
          (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
          (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (and
            (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
            (and
              (_checkDefined%precondition $Snap.unit res@408@01 3628914)
              (list___len__%precondition ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
      (and
        (and
          (and
            (_checkDefined%precondition $Snap.unit res@408@01 3628914)
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
          (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@809@11@809@397_precondition|)))
(push) ; 3
(assert (not (forall ((lambda53_23$i@413@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
          (and
            (and
              (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
              (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0))
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
              (and
                (int___unbox__%precondition $Snap.unit lambda53_23$i@413@01)
                (and
                  (_checkDefined%precondition $Snap.unit res@408@01 3628914)
                  (list___len__%precondition ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
            (and
              (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
          (and
            (and
              (and
                (_checkDefined%precondition $Snap.unit res@408@01 3628914)
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01))
              (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                    $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@809@11@809@397|))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(assert (forall ((lambda53_23$i@413@01 $Ref)) (!
  (=>
    (and
      (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType))
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda53_23$i@413@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)) (_checkDefined $Snap.unit res@408@01 3628914))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@411@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@408@01 3628914) lambda53_23$i@413@01)) 1))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda53_23$i@413@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@809@11@809@397|)))
; [exec]
; label __end
; [eval] (forperm _r_24: Ref [MustInvokeBounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [MustInvokeUnbounded(_r_24)] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseBounded] :: false)
; [eval] (forperm _r_24: Ref [_r_24.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- test_type_quantification_2 ----------
(declare-const _cthread_165@418@01 $Ref)
(declare-const _caller_measures_165@419@01 Seq<Measure$>)
(declare-const _residue_165@420@01 $Perm)
(declare-const _current_wait_level_165@421@01 $Perm)
(declare-const _cthread_165@422@01 $Ref)
(declare-const _caller_measures_165@423@01 Seq<Measure$>)
(declare-const _residue_165@424@01 $Perm)
(declare-const _current_wait_level_165@425@01 $Perm)
(push) ; 1
(declare-const $t@426@01 $Snap)
(assert (= $t@426@01 ($Snap.combine ($Snap.first $t@426@01) ($Snap.second $t@426@01))))
(assert (= ($Snap.first $t@426@01) $Snap.unit))
; [eval] _cthread_165 != null
(assert (not (= _cthread_165@422@01 $Ref.null)))
(assert (=
  ($Snap.second $t@426@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@426@01))
    ($Snap.second ($Snap.second $t@426@01)))))
(assert (= ($Snap.first ($Snap.second $t@426@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_165), Thread_0())
; [eval] typeof(_cthread_165)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_165@422@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@426@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 ($Snap.combine ($Snap.first $t@427@01) ($Snap.second $t@427@01))))
(assert (= ($Snap.first $t@427@01) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseBounded] :: Level(_r_26) <= _current_wait_level_165)
(assert (=
  ($Snap.second $t@427@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@427@01))
    ($Snap.second ($Snap.second $t@427@01)))))
(assert (= ($Snap.first ($Snap.second $t@427@01)) $Snap.unit))
; [eval] (forperm _r_26: Ref [_r_26.MustReleaseUnbounded] :: Level(_r_26) <= _current_wait_level_165)
(assert (=
  ($Snap.second ($Snap.second $t@427@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@427@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@427@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@427@01))) $Snap.unit))
; [eval] _residue_165 <= _current_wait_level_165
(assert (<= _residue_165@424@01 _current_wait_level_165@425@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@427@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var _err: Ref
(declare-const _err@428@01 $Ref)
; [exec]
; var r_8: Ref
(declare-const r_8@429@01 $Ref)
; [exec]
; var list_3: Ref
(declare-const list_3@430@01 $Ref)
; [exec]
; var _cwl_165: Perm
(declare-const _cwl_165@431@01 $Perm)
; [exec]
; var _method_measures_165: Seq[Measure$]
(declare-const _method_measures_165@432@01 Seq<Measure$>)
; [exec]
; _method_measures_165 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; _err := null
; [exec]
; _cwl_165, list_3 := list___init__(_cthread_165, _method_measures_165, _residue_165)
; [eval] _cthread_8 != null
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@422@01 1))
(pop) ; 3
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@422@01 1))
(push) ; 3
(assert (not (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@422@01 1)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Measure$check $Snap.unit (as Seq_empty  Seq<Measure$>) _cthread_165@422@01 1))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 3
(pop) ; 3
; Joined path conditions
(declare-const _current_wait_level_8@433@01 $Perm)
(declare-const res@434@01 $Ref)
(declare-const $t@435@01 $Snap)
(assert (= $t@435@01 ($Snap.combine ($Snap.first $t@435@01) ($Snap.second $t@435@01))))
(assert (= ($Snap.first $t@435@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@435@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@435@01))
    ($Snap.second ($Snap.second $t@435@01)))))
(assert (= ($Snap.first ($Snap.second $t@435@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@435@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@435@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@435@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_165@424@01 _current_wait_level_8@433@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@435@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))
(assert (not (= res@434@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@434@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@434@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@435@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@434@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale issubtype(typeof(list_3), list(int()))
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 $Snap.unit))
; [eval] issubtype(typeof(list_3), list(int()))
; [eval] typeof(list_3)
; [eval] list(int())
; [eval] int()
(assert (issubtype<Bool> (typeof<PyType> res@434@01) (list<PyType> (as int<PyType>  PyType))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert issubtype(typeof(__prim__int___box__(3)), int())
; [eval] issubtype(typeof(__prim__int___box__(3)), int())
; [eval] typeof(__prim__int___box__(3))
; [eval] __prim__int___box__(3)
(set-option :timeout 0)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 3))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 3))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 3)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(4)), int())
; [eval] issubtype(typeof(__prim__int___box__(4)), int())
; [eval] typeof(__prim__int___box__(4))
; [eval] __prim__int___box__(4)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 4))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 4))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 4)) (as int<PyType>  PyType)))
; [exec]
; assert issubtype(typeof(__prim__int___box__(5)), int())
; [eval] issubtype(typeof(__prim__int___box__(5)), int())
; [eval] typeof(__prim__int___box__(5))
; [eval] __prim__int___box__(5)
(push) ; 3
(assert (__prim__int___box__%precondition $Snap.unit 5))
(pop) ; 3
; Joined path conditions
(assert (__prim__int___box__%precondition $Snap.unit 5))
; [eval] int()
(push) ; 3
(assert (not (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (__prim__int___box__ $Snap.unit 5)) (as int<PyType>  PyType)))
; [exec]
; list_3.list_acc := Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] Seq(__prim__int___box__(3), __prim__int___box__(4), __prim__int___box__(5))
; [eval] __prim__int___box__(3)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(4)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] __prim__int___box__(5)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append
        (Seq_singleton (__prim__int___box__ $Snap.unit 3))
        (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
      (Seq_singleton (__prim__int___box__ $Snap.unit 5))))
  3))
(declare-const list_acc@437@01 Seq<$Ref>)
(assert (=
  list_acc@437@01
  (Seq_append
    (Seq_append
      (Seq_singleton (__prim__int___box__ $Snap.unit 3))
      (Seq_singleton (__prim__int___box__ $Snap.unit 4)))
    (Seq_singleton (__prim__int___box__ $Snap.unit 5)))))
; [exec]
; r_8 := list_3
; [exec]
; inhale _isDefined(3694450)
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 $Snap.unit))
; [eval] _isDefined(3694450)
(push) ; 3
(assert (_isDefined%precondition $Snap.unit 3694450))
(pop) ; 3
; Joined path conditions
(assert (_isDefined%precondition $Snap.unit 3694450))
(assert (_isDefined $Snap.unit 3694450))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert (forall lambda59_23$i: Ref ::
;     { issubtype(typeof(lambda59_23$i), int()) }
;     issubtype(typeof(lambda59_23$i), int()) ==>
;     issubtype(typeof(lambda59_23$i), int()) ==>
;     int___ge__(int___unbox__(lambda59_23$i), 0) &&
;     int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8,
;     3694450))) ==>
;     int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)),
;     3))
; [eval] (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i), int()) } issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3))
(declare-const lambda59_23$i@439@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(push) ; 4
; [then-branch: 89 | issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType]) | live]
; [else-branch: 89 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 89 | issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(push) ; 6
; [then-branch: 90 | issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType]) | live]
; [else-branch: 90 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType])) | live]
(push) ; 7
; [then-branch: 90 | issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType])]
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0)
; [eval] int___unbox__(lambda59_23$i)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01))
(push) ; 8
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
(pop) ; 8
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
(push) ; 8
; [then-branch: 91 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0)) | live]
; [else-branch: 91 | int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0) | live]
(push) ; 9
; [then-branch: 91 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0))]
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
(pop) ; 9
(push) ; 9
; [else-branch: 91 | int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
; [eval] int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___unbox__(lambda59_23$i)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] list___len__(_checkDefined(r_8, 3694450))
; [eval] _checkDefined(r_8, 3694450)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
(declare-const $k@440@01 $Perm)
(assert ($Perm.isReadVar $k@440@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@440@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(set-option :timeout 0)
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert (=>
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (or
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
  (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
(push) ; 8
; [then-branch: 92 | int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@439@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 92 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@439@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))) | live]
(push) ; 9
; [then-branch: 92 | int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@439@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (and
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
; [eval] int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i))
; [eval] list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)
; [eval] _checkDefined(r_8, 3694450)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@441@01 $Perm)
(assert ($Perm.isReadVar $k@441@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@441@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@442@01 $Perm)
(assert ($Perm.isReadVar $k@442@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(declare-fun letvar@443@01 ($Ref) Int)
(assert (=
  (letvar@443@01 lambda59_23$i@439@01)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 93 | int___unbox__(_, lambda59_23$i@439@01) < 0 | live]
; [else-branch: 93 | !(int___unbox__(_, lambda59_23$i@439@01) < 0) | live]
(push) ; 12
; [then-branch: 93 | int___unbox__(_, lambda59_23$i@439@01) < 0]
(assert (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
; [eval] -ln
(pop) ; 12
(push) ; 12
; [else-branch: 93 | !(int___unbox__(_, lambda59_23$i@439@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
(push) ; 11
; [then-branch: 94 | !(int___unbox__(_, lambda59_23$i@439@01) < 0 ==> int___unbox__(_, lambda59_23$i@439@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 94 | int___unbox__(_, lambda59_23$i@439@01) < 0 ==> int___unbox__(_, lambda59_23$i@439@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)) | live]
(push) ; 12
; [then-branch: 94 | !(int___unbox__(_, lambda59_23$i@439@01) < 0 ==> int___unbox__(_, lambda59_23$i@439@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (not
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
(pop) ; 12
(push) ; 12
; [else-branch: 94 | int___unbox__(_, lambda59_23$i@439@01) < 0 ==> int___unbox__(_, lambda59_23$i@439@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))]
(assert (=>
  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
  (>=
    (int___unbox__ $Snap.unit lambda59_23$i@439@01)
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 95 | int___unbox__(_, lambda59_23$i@439@01) >= 0 | live]
; [else-branch: 95 | !(int___unbox__(_, lambda59_23$i@439@01) >= 0) | live]
(push) ; 14
; [then-branch: 95 | int___unbox__(_, lambda59_23$i@439@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 95 | !(int___unbox__(_, lambda59_23$i@439@01) >= 0)]
(assert (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
  (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
      (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))))
(assert (or
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (not
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
(push) ; 11
(assert (not (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@441@01))
(assert ($Perm.isReadVar $k@442@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
  (=
    (letvar@443@01 lambda59_23$i@439@01)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
  (or
    (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
  (=>
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (and
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@439@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (or
        (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
        (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
  (or
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (not
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@439@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))))
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))
(pop) ; 9
(push) ; 9
; [else-branch: 92 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@439@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@439@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))))]
(assert (not
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@441@01))
(assert ($Perm.isReadVar $k@442@01))
(assert (=>
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (=
      (letvar@443@01 lambda59_23$i@439@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (or
      (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
    (=>
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@439@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@439@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
          (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
    (or
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@439@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (not
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@439@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (=>
      (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (<
        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))))
; Joined path conditions
(assert (or
  (not
    (and
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(pop) ; 7
(push) ; 7
; [else-branch: 90 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert ($Perm.isReadVar $k@441@01))
(assert ($Perm.isReadVar $k@442@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
  (and
    (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
    (=>
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
      (not
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
    (=>
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (=
          (letvar@443@01 lambda59_23$i@439@01)
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (or
          (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
          (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
        (=>
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@439@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
              (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
        (or
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@439@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (not
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@439@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (=>
          (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (<
            (int___unbox__ $Snap.unit lambda59_23$i@439@01)
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
        (list___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)
        (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3)))
    (or
      (not
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))
(pop) ; 5
(push) ; 5
; [else-branch: 89 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@439@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert ($Perm.isReadVar $k@441@01))
(assert ($Perm.isReadVar $k@442@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
      (and
        (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
        (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (not
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
        (=>
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (=
              (letvar@443@01 lambda59_23$i@439@01)
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (or
              (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
              (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
            (=>
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (or
                  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
            (or
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (not
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (=>
              (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (<
                (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)
            (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3)))
        (or
          (not
            (and
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@440@01))
(assert ($Perm.isReadVar $k@441@01))
(assert ($Perm.isReadVar $k@442@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda59_23$i@439@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
            (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (not
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)))
            (=>
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (=
                  (letvar@443@01 lambda59_23$i@439@01)
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (or
                  (not (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
                  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
                (=>
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (and
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                    (or
                      (not
                        (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
                      (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))))
                (or
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (not
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (=>
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                  (<
                    (int___unbox__ $Snap.unit lambda59_23$i@439@01)
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)
                (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3)))
            (or
              (not
                (and
                  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (or
          (not
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397-aux|)))
(assert (forall ((lambda59_23$i@439@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
      (and
        (and
          (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
          (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
            (and
              (_checkDefined%precondition $Snap.unit res@434@01 3694450)
              (list___len__%precondition ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
      (and
        (and
          (and
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
          (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397_precondition|)))
(push) ; 3
(assert (not (forall ((lambda59_23$i@439@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
          (and
            (and
              (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
              (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0))
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
              (and
                (int___unbox__%precondition $Snap.unit lambda59_23$i@439@01)
                (and
                  (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                  (list___len__%precondition ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
            (and
              (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
          (and
            (and
              (and
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01))
              (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                    $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@439@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@439@01)) 3))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@439@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i), int()) } issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3))
(declare-const lambda59_23$i@444@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(push) ; 4
; [then-branch: 96 | issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType]) | live]
; [else-branch: 96 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 96 | issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(set-option :timeout 0)
(push) ; 6
; [then-branch: 97 | issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType]) | live]
; [else-branch: 97 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType])) | live]
(push) ; 7
; [then-branch: 97 | issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType])]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0)
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01))
(push) ; 8
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
(pop) ; 8
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
(push) ; 8
; [then-branch: 98 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0)) | live]
; [else-branch: 98 | int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0) | live]
(push) ; 9
; [then-branch: 98 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0))]
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 98 | int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] list___len__(_checkDefined(r_8, 3694450))
; [eval] _checkDefined(r_8, 3694450)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
(declare-const $k@445@01 $Perm)
(assert ($Perm.isReadVar $k@445@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@445@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(set-option :timeout 0)
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert (=>
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (or
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
  (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
(push) ; 8
; [then-branch: 99 | int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@444@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 99 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@444@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))) | live]
(push) ; 9
; [then-branch: 99 | int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@444@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (and
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i))
; [eval] list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)
; [eval] _checkDefined(r_8, 3694450)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@446@01 $Perm)
(assert ($Perm.isReadVar $k@446@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@446@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@447@01 $Perm)
(assert ($Perm.isReadVar $k@447@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@447@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@447@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(declare-fun letvar@448@01 ($Ref) Int)
(assert (=
  (letvar@448@01 lambda59_23$i@444@01)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 100 | int___unbox__(_, lambda59_23$i@444@01) < 0 | live]
; [else-branch: 100 | !(int___unbox__(_, lambda59_23$i@444@01) < 0) | live]
(push) ; 12
; [then-branch: 100 | int___unbox__(_, lambda59_23$i@444@01) < 0]
(assert (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
; [eval] -ln
(pop) ; 12
(push) ; 12
; [else-branch: 100 | !(int___unbox__(_, lambda59_23$i@444@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 101 | !(int___unbox__(_, lambda59_23$i@444@01) < 0 ==> int___unbox__(_, lambda59_23$i@444@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 101 | int___unbox__(_, lambda59_23$i@444@01) < 0 ==> int___unbox__(_, lambda59_23$i@444@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)) | live]
(push) ; 12
; [then-branch: 101 | !(int___unbox__(_, lambda59_23$i@444@01) < 0 ==> int___unbox__(_, lambda59_23$i@444@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (not
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 101 | int___unbox__(_, lambda59_23$i@444@01) < 0 ==> int___unbox__(_, lambda59_23$i@444@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))]
(assert (=>
  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
  (>=
    (int___unbox__ $Snap.unit lambda59_23$i@444@01)
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 102 | int___unbox__(_, lambda59_23$i@444@01) >= 0 | live]
; [else-branch: 102 | !(int___unbox__(_, lambda59_23$i@444@01) >= 0) | live]
(push) ; 14
; [then-branch: 102 | int___unbox__(_, lambda59_23$i@444@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 102 | !(int___unbox__(_, lambda59_23$i@444@01) >= 0)]
(assert (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
  (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
      (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))))
(assert (or
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (not
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
  (=
    (letvar@448@01 lambda59_23$i@444@01)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
  (or
    (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
  (=>
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (and
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@444@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (or
        (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
        (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
  (or
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (not
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@444@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))))
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))
(pop) ; 9
(push) ; 9
; [else-branch: 99 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@444@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@444@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))))]
(assert (not
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (=>
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (=
      (letvar@448@01 lambda59_23$i@444@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (or
      (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
    (=>
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@444@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@444@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
          (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
    (or
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@444@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (not
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@444@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (=>
      (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (<
        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))))
; Joined path conditions
(assert (or
  (not
    (and
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 97 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
  (and
    (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
    (=>
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
      (not
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
    (=>
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (=
          (letvar@448@01 lambda59_23$i@444@01)
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (or
          (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
          (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
        (=>
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@444@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
              (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
        (or
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@444@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (not
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@444@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (=>
          (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (<
            (int___unbox__ $Snap.unit lambda59_23$i@444@01)
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
        (list___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)
        (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3)))
    (or
      (not
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 96 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@444@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
      (and
        (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
        (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (not
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
        (=>
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (=
              (letvar@448@01 lambda59_23$i@444@01)
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (or
              (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
              (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
            (=>
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (or
                  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
            (or
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (not
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (=>
              (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (<
                (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)
            (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3)))
        (or
          (not
            (and
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@445@01))
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda59_23$i@444@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
            (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (not
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)))
            (=>
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (=
                  (letvar@448@01 lambda59_23$i@444@01)
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (or
                  (not (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
                  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
                (=>
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (and
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                    (or
                      (not
                        (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
                      (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))))
                (or
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (not
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (=>
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                  (<
                    (int___unbox__ $Snap.unit lambda59_23$i@444@01)
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)
                (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3)))
            (or
              (not
                (and
                  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (or
          (not
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397-aux|)))
(assert (forall ((lambda59_23$i@444@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
      (and
        (and
          (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
          (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
            (and
              (_checkDefined%precondition $Snap.unit res@434@01 3694450)
              (list___len__%precondition ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
      (and
        (and
          (and
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
          (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda59_23$i@444@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
          (and
            (and
              (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
              (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0))
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
              (and
                (int___unbox__%precondition $Snap.unit lambda59_23$i@444@01)
                (and
                  (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                  (list___len__%precondition ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
            (and
              (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
          (and
            (and
              (and
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01))
              (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                    $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@444@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@444@01)) 3))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@444@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i), int()) } issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3))
(declare-const lambda59_23$i@449@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(push) ; 4
; [then-branch: 103 | issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType]) | live]
; [else-branch: 103 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 103 | issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(set-option :timeout 0)
(push) ; 6
; [then-branch: 104 | issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType]) | live]
; [else-branch: 104 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType])) | live]
(push) ; 7
; [then-branch: 104 | issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType])]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0)
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01))
(push) ; 8
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
(pop) ; 8
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
(push) ; 8
; [then-branch: 105 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0)) | live]
; [else-branch: 105 | int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0) | live]
(push) ; 9
; [then-branch: 105 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0))]
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 105 | int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] list___len__(_checkDefined(r_8, 3694450))
; [eval] _checkDefined(r_8, 3694450)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
(declare-const $k@450@01 $Perm)
(assert ($Perm.isReadVar $k@450@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@450@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@450@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(set-option :timeout 0)
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@450@01))
(assert (=>
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (or
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
  (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
(push) ; 8
; [then-branch: 106 | int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@449@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 106 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@449@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))) | live]
(push) ; 9
; [then-branch: 106 | int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@449@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (and
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i))
; [eval] list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)
; [eval] _checkDefined(r_8, 3694450)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@451@01 $Perm)
(assert ($Perm.isReadVar $k@451@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@451@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@452@01 $Perm)
(assert ($Perm.isReadVar $k@452@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@452@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@452@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(declare-fun letvar@453@01 ($Ref) Int)
(assert (=
  (letvar@453@01 lambda59_23$i@449@01)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 107 | int___unbox__(_, lambda59_23$i@449@01) < 0 | live]
; [else-branch: 107 | !(int___unbox__(_, lambda59_23$i@449@01) < 0) | live]
(push) ; 12
; [then-branch: 107 | int___unbox__(_, lambda59_23$i@449@01) < 0]
(assert (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
; [eval] -ln
(pop) ; 12
(push) ; 12
; [else-branch: 107 | !(int___unbox__(_, lambda59_23$i@449@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 108 | !(int___unbox__(_, lambda59_23$i@449@01) < 0 ==> int___unbox__(_, lambda59_23$i@449@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 108 | int___unbox__(_, lambda59_23$i@449@01) < 0 ==> int___unbox__(_, lambda59_23$i@449@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)) | live]
(push) ; 12
; [then-branch: 108 | !(int___unbox__(_, lambda59_23$i@449@01) < 0 ==> int___unbox__(_, lambda59_23$i@449@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (not
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 108 | int___unbox__(_, lambda59_23$i@449@01) < 0 ==> int___unbox__(_, lambda59_23$i@449@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))]
(assert (=>
  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
  (>=
    (int___unbox__ $Snap.unit lambda59_23$i@449@01)
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 109 | int___unbox__(_, lambda59_23$i@449@01) >= 0 | live]
; [else-branch: 109 | !(int___unbox__(_, lambda59_23$i@449@01) >= 0) | live]
(push) ; 14
; [then-branch: 109 | int___unbox__(_, lambda59_23$i@449@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 109 | !(int___unbox__(_, lambda59_23$i@449@01) >= 0)]
(assert (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
  (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
      (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))))
(assert (or
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (not
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
  (=
    (letvar@453@01 lambda59_23$i@449@01)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
  (or
    (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
  (=>
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (and
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@449@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (or
        (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
        (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
  (or
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (not
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@449@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))))
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))
(pop) ; 9
(push) ; 9
; [else-branch: 106 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@449@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@449@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))))]
(assert (not
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (=
      (letvar@453@01 lambda59_23$i@449@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (or
      (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
    (=>
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@449@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@449@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
          (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
    (or
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@449@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (not
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@449@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (=>
      (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (<
        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))))
; Joined path conditions
(assert (or
  (not
    (and
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 104 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
  (and
    (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
    (=>
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
      (not
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
    (=>
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (=
          (letvar@453@01 lambda59_23$i@449@01)
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (or
          (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
          (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
        (=>
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@449@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
              (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
        (or
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@449@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (not
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@449@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (=>
          (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (<
            (int___unbox__ $Snap.unit lambda59_23$i@449@01)
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
        (list___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)
        (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3)))
    (or
      (not
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 103 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@449@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
      (and
        (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
        (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (not
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
        (=>
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (=
              (letvar@453@01 lambda59_23$i@449@01)
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (or
              (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
              (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
            (=>
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (or
                  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
            (or
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (not
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (=>
              (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (<
                (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)
            (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3)))
        (or
          (not
            (and
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@450@01))
(assert ($Perm.isReadVar $k@451@01))
(assert ($Perm.isReadVar $k@452@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda59_23$i@449@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
            (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (not
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)))
            (=>
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (=
                  (letvar@453@01 lambda59_23$i@449@01)
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (or
                  (not (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
                  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
                (=>
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (and
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                    (or
                      (not
                        (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
                      (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))))
                (or
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (not
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (=>
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                  (<
                    (int___unbox__ $Snap.unit lambda59_23$i@449@01)
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)
                (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3)))
            (or
              (not
                (and
                  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (or
          (not
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397-aux|)))
(assert (forall ((lambda59_23$i@449@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
      (and
        (and
          (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
          (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
            (and
              (_checkDefined%precondition $Snap.unit res@434@01 3694450)
              (list___len__%precondition ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
      (and
        (and
          (and
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
          (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda59_23$i@449@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
          (and
            (and
              (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
              (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0))
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
              (and
                (int___unbox__%precondition $Snap.unit lambda59_23$i@449@01)
                (and
                  (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                  (list___len__%precondition ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
            (and
              (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
          (and
            (and
              (and
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01))
              (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                    $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@449@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@449@01)) 3))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@449@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397|))))
(check-sat)
; unknown
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] (forall lambda59_23$i: Ref :: { issubtype(typeof(lambda59_23$i), int()) } issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3))
(declare-const lambda59_23$i@454@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(push) ; 4
; [then-branch: 110 | issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType]) | live]
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType])) | live]
(push) ; 5
; [then-branch: 110 | issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType])]
(assert (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] issubtype(typeof(lambda59_23$i), int()) ==> int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] issubtype(typeof(lambda59_23$i), int())
; [eval] typeof(lambda59_23$i)
; [eval] int()
(set-option :timeout 0)
(push) ; 6
; [then-branch: 111 | issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType]) | live]
; [else-branch: 111 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType])) | live]
(push) ; 7
; [then-branch: 111 | issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType])]
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450))) ==> int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0) && int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___ge__(int___unbox__(lambda59_23$i), 0)
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01))
(pop) ; 8
; Joined path conditions
(assert (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01))
(push) ; 8
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
(pop) ; 8
; Joined path conditions
(assert (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
(push) ; 8
; [then-branch: 112 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0)) | live]
; [else-branch: 112 | int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0) | live]
(push) ; 9
; [then-branch: 112 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0))]
(assert (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 112 | int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0)]
(assert (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___lt__(int___unbox__(lambda59_23$i), list___len__(_checkDefined(r_8, 3694450)))
; [eval] int___unbox__(lambda59_23$i)
(set-option :timeout 0)
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 10
; Joined path conditions
; [eval] list___len__(_checkDefined(r_8, 3694450))
; [eval] _checkDefined(r_8, 3694450)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
(declare-const $k@455@01 $Perm)
(assert ($Perm.isReadVar $k@455@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@455@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(set-option :timeout 0)
(push) ; 10
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 10
; Joined path conditions
(assert (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert (=>
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (or
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
  (not (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
(push) ; 8
; [then-branch: 113 | int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@454@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 113 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@454@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))) | live]
(push) ; 9
; [then-branch: 113 | int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@454@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (and
  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___gt__(int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)), 3)
; [eval] int___unbox__(list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i))
; [eval] list___getitem__(_checkDefined(r_8, 3694450), lambda59_23$i)
; [eval] _checkDefined(r_8, 3694450)
(set-option :timeout 0)
(push) ; 10
; [eval] _isDefined(id)
(push) ; 11
(pop) ; 11
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(pop) ; 10
; Joined path conditions
(assert (_checkDefined%precondition $Snap.unit res@434@01 3694450))
(push) ; 10
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0))))
; [eval] issubtype(typeof(key), int())
; [eval] typeof(key)
; [eval] int()
(declare-const $k@456@01 $Perm)
(assert ($Perm.isReadVar $k@456@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@456@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (let ln == (list___len__(self)) in (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln))
; [eval] list___len__(self)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), list(list_arg(typeof(self), 0)))
; [eval] typeof(self)
; [eval] list(list_arg(typeof(self), 0))
; [eval] list_arg(typeof(self), 0)
; [eval] typeof(self)
(declare-const $k@457@01 $Perm)
(assert ($Perm.isReadVar $k@457@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (= res@434@01 (_checkDefined $Snap.unit res@434@01 3694450))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@457@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@457@01))
(assert (list___len__%precondition ($Snap.combine
  $Snap.unit
  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
(declare-fun letvar@458@01 ($Ref) Int)
(assert (=
  (letvar@458@01 lambda59_23$i@454@01)
  (list___len__ ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
; [eval] (int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln) && (int___unbox__(key) >= 0 ==> int___unbox__(key) < ln)
; [eval] int___unbox__(key) < 0 ==> int___unbox__(key) >= -ln
; [eval] int___unbox__(key) < 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 11
; Joined path conditions
(push) ; 11
; [then-branch: 114 | int___unbox__(_, lambda59_23$i@454@01) < 0 | live]
; [else-branch: 114 | !(int___unbox__(_, lambda59_23$i@454@01) < 0) | live]
(push) ; 12
; [then-branch: 114 | int___unbox__(_, lambda59_23$i@454@01) < 0]
(assert (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
; [eval] int___unbox__(key) >= -ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
; [eval] -ln
(pop) ; 12
(push) ; 12
; [else-branch: 114 | !(int___unbox__(_, lambda59_23$i@454@01) < 0)]
(assert (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 115 | !(int___unbox__(_, lambda59_23$i@454@01) < 0 ==> int___unbox__(_, lambda59_23$i@454@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))) | live]
; [else-branch: 115 | int___unbox__(_, lambda59_23$i@454@01) < 0 ==> int___unbox__(_, lambda59_23$i@454@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)) | live]
(push) ; 12
; [then-branch: 115 | !(int___unbox__(_, lambda59_23$i@454@01) < 0 ==> int___unbox__(_, lambda59_23$i@454@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450)))]
(assert (not
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 115 | int___unbox__(_, lambda59_23$i@454@01) < 0 ==> int___unbox__(_, lambda59_23$i@454@01) >= 0 - list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))]
(assert (=>
  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
  (>=
    (int___unbox__ $Snap.unit lambda59_23$i@454@01)
    (-
      0
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) >= 0 ==> int___unbox__(key) < ln
; [eval] int___unbox__(key) >= 0
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 13
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 13
; Joined path conditions
(push) ; 13
; [then-branch: 116 | int___unbox__(_, lambda59_23$i@454@01) >= 0 | live]
; [else-branch: 116 | !(int___unbox__(_, lambda59_23$i@454@01) >= 0) | live]
(push) ; 14
; [then-branch: 116 | int___unbox__(_, lambda59_23$i@454@01) >= 0]
(assert (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] int___unbox__(key) < ln
; [eval] int___unbox__(key)
(set-option :timeout 0)
(push) ; 15
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(pop) ; 15
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 116 | !(int___unbox__(_, lambda59_23$i@454@01) >= 0)]
(assert (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
  (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
      (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))))
(assert (or
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (not
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(assert (list___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
(assert (and
  (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
  (list___len__%precondition ($Snap.combine
    $Snap.unit
    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
  (=
    (letvar@458@01 lambda59_23$i@454@01)
    (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
  (or
    (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
  (=>
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (and
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@454@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (or
        (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
        (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
  (or
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (not
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@454@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
  (=>
    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (>=
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (-
        0
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (=>
    (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (<
      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (list___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)))
(push) ; 10
; [eval] issubtype(typeof(box), int())
; [eval] typeof(box)
; [eval] int()
(push) ; 11
(assert (not (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType)))
(assert (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)))
(pop) ; 10
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))
  (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))))
(push) ; 10
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))
(pop) ; 10
; Joined path conditions
(assert (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01) $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))
(pop) ; 9
(push) ; 9
; [else-branch: 113 | !(int___ge__(_, int___unbox__(_, lambda59_23$i@454@01), 0) && int___lt__(_, int___unbox__(_, lambda59_23$i@454@01), list___len__((_, list_acc@437@01), _checkDefined(_, res@434@01, 3694450))))]
(assert (not
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
(assert (=>
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (_checkDefined%precondition $Snap.unit res@434@01 3694450)
    (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
    (list___len__%precondition ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
    (=
      (letvar@458@01 lambda59_23$i@454@01)
      (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
    (or
      (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
    (=>
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@454@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@454@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
          (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
    (or
      (=>
        (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (>=
          (int___unbox__ $Snap.unit lambda59_23$i@454@01)
          (-
            0
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (not
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@454@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (>=
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (-
          0
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (=>
      (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (<
        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
        (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
    (list___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)
    (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))
    (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
    (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))))
; Joined path conditions
(assert (or
  (not
    (and
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
        $Snap.unit
        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
  (and
    (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
      $Snap.unit
      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 111 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unsat
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
  (and
    (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
    (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
    (=>
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
    (or
      (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
      (not
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
    (=>
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (_checkDefined%precondition $Snap.unit res@434@01 3694450)
        (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
        (list___len__%precondition ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
        (=
          (letvar@458@01 lambda59_23$i@454@01)
          (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
        (or
          (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
          (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
        (=>
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@454@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
              (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
        (or
          (=>
            (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (>=
              (int___unbox__ $Snap.unit lambda59_23$i@454@01)
              (-
                0
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (not
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (>=
            (int___unbox__ $Snap.unit lambda59_23$i@454@01)
            (-
              0
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (=>
          (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (<
            (int___unbox__ $Snap.unit lambda59_23$i@454@01)
            (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
        (list___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)
        (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))
        (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3)))
    (or
      (not
        (and
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
            $Snap.unit
            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
      (and
        (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
          $Snap.unit
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 110 | !(issubtype[Bool](typeof[PyType](lambda59_23$i@454@01), int[PyType]))]
(assert (not
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@455@01))
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
(assert (=>
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
  (and
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
      (and
        (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
        (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
        (or
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (not
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
        (=>
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
            (list___len__%precondition ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
            (=
              (letvar@458@01 lambda59_23$i@454@01)
              (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (or
              (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
              (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
            (=>
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (or
                  (not (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
            (or
              (=>
                (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (>=
                  (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                  (-
                    0
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (not
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
            (=>
              (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (>=
                (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                (-
                  0
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (=>
              (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (<
                (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)
            (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))
            (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3)))
        (or
          (not
            (and
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))))
; Joined path conditions
(assert (or
  (not
    (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
  (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@455@01))
(assert ($Perm.isReadVar $k@456@01))
(assert ($Perm.isReadVar $k@457@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((lambda59_23$i@454@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
            (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
            (or
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (not
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)))
            (=>
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (issubtype<Bool> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) (list<PyType> (list_arg<PyType> (typeof<PyType> (_checkDefined $Snap.unit res@434@01 3694450)) 0)))
                (list___len__%precondition ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))
                (=
                  (letvar@458@01 lambda59_23$i@454@01)
                  (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (or
                  (not (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
                  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
                (=>
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (and
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                    (or
                      (not
                        (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
                      (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))))
                (or
                  (=>
                    (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                    (>=
                      (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                      (-
                        0
                        (list___len__ ($Snap.combine
                          $Snap.unit
                          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                  (not
                    (=>
                      (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                      (>=
                        (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                        (-
                          0
                          (list___len__ ($Snap.combine
                            $Snap.unit
                            ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
                (=>
                  (< (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                  (>=
                    (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                    (-
                      0
                      (list___len__ ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
                (=>
                  (>= (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                  (<
                    (int___unbox__ $Snap.unit lambda59_23$i@454@01)
                    (list___len__ ($Snap.combine
                      $Snap.unit
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)
                (issubtype<Bool> (typeof<PyType> (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) (as int<PyType>  PyType))
                (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
                (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3)))
            (or
              (not
                (and
                  (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                  (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (or
          (not
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))))
    (or
      (not
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397-aux|)))
(assert (forall ((lambda59_23$i@454@01 $Ref)) (!
  (and
    (=>
      (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
      (and
        (and
          (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
          (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
        (=>
          (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
          (and
            (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
            (and
              (_checkDefined%precondition $Snap.unit res@434@01 3694450)
              (list___len__%precondition ($Snap.combine
                $Snap.unit
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
            (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (=>
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
      (and
        (and
          (and
            (_checkDefined%precondition $Snap.unit res@434@01 3694450)
            (list___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
          (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)))
        (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
              $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397_precondition|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((lambda59_23$i@454@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
          (and
            (and
              (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
              (int___ge__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0))
            (=>
              (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
              (and
                (int___unbox__%precondition $Snap.unit lambda59_23$i@454@01)
                (and
                  (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                  (list___len__%precondition ($Snap.combine
                    $Snap.unit
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))
                (int___lt__%precondition $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
        (=>
          (and
            (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
            (and
              (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
              (and
                (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
                (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
                  $Snap.unit
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450))))))
          (and
            (and
              (and
                (_checkDefined%precondition $Snap.unit res@434@01 3694450)
                (list___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                      $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01))
              (int___unbox__%precondition $Snap.unit (list___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                    $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)))
            (int___gt__%precondition $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
                  $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))))
      (and
        (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
        (and
          (issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType))
          (and
            (int___ge__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) 0)
            (int___lt__ $Snap.unit (int___unbox__ $Snap.unit lambda59_23$i@454@01) (list___len__ ($Snap.combine
              $Snap.unit
              ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)) (_checkDefined $Snap.unit res@434@01 3694450)))))))
    (int___gt__ $Snap.unit (int___unbox__ $Snap.unit (list___getitem__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.Seq<$Ref>To$Snap list_acc@437@01)
          $Snap.unit))) (_checkDefined $Snap.unit res@434@01 3694450) lambda59_23$i@454@01)) 3))
  :pattern ((issubtype<Bool> (typeof<PyType> lambda59_23$i@454@01) (as int<PyType>  PyType)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@836@11@836@397|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- main ----------
(declare-const _cthread_166@459@01 $Ref)
(declare-const _caller_measures_166@460@01 Seq<Measure$>)
(declare-const _residue_166@461@01 $Perm)
(declare-const _current_wait_level_166@462@01 $Perm)
(declare-const _cthread_166@463@01 $Ref)
(declare-const _caller_measures_166@464@01 Seq<Measure$>)
(declare-const _residue_166@465@01 $Perm)
(declare-const _current_wait_level_166@466@01 $Perm)
(push) ; 1
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] _cthread_166 != null
(assert (not (= _cthread_166@463@01 $Ref.null)))
(assert (=
  ($Snap.second $t@467@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@467@01))
    ($Snap.second ($Snap.second $t@467@01)))))
(assert (= ($Snap.first ($Snap.second $t@467@01)) $Snap.unit))
; [eval] issubtype(typeof(_cthread_166), Thread_0())
; [eval] typeof(_cthread_166)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_166@463@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@467@01)) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseBounded] :: Level(_r_29) <= _current_wait_level_166)
(assert (=
  ($Snap.second $t@468@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@468@01))
    ($Snap.second ($Snap.second $t@468@01)))))
(assert (= ($Snap.first ($Snap.second $t@468@01)) $Snap.unit))
; [eval] (forperm _r_29: Ref [_r_29.MustReleaseUnbounded] :: Level(_r_29) <= _current_wait_level_166)
(assert (=
  ($Snap.second ($Snap.second $t@468@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@468@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@468@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@468@01))) $Snap.unit))
; [eval] _residue_166 <= _current_wait_level_166
(assert (<= _residue_166@465@01 _current_wait_level_166@466@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@468@01))) $Snap.unit))
(pop) ; 2
(push) ; 2
; [exec]
; var module_defined_0: Bool
(declare-const module_defined_0@469@01 Bool)
; [exec]
; var module_names_0: Set[_Name]
(declare-const module_names_0@470@01 Set<_Name>)
; [exec]
; var _cwl_166: Perm
(declare-const _cwl_166@471@01 $Perm)
; [exec]
; var _method_measures_166: Seq[Measure$]
(declare-const _method_measures_166@472@01 Seq<Measure$>)
; [exec]
; _method_measures_166 := Seq[Measure$]()
; [eval] Seq[Measure$]()
; [exec]
; module_defined_0 := true
; [exec]
; module_names_0 := Set[_Name]()
; [eval] Set[_Name]()
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323072689856351)))
; [eval] (module_names_0 union Set(_single(6872323072689856351)))
; [eval] Set(_single(6872323072689856351))
; [eval] _single(6872323072689856351)
(declare-const module_names_0@473@01 Set<_Name>)
(assert (=
  module_names_0@473@01
  (Set_union (as Set_empty  Set<_Name>) (Set_singleton (_single<_Name> 6872323072689856351)))))
; [exec]
; inhale acc(__file__()._val, 99 / 100) &&
;   (issubtype(typeof(__file__()._val), str()) &&
;   issubtype(typeof(__file__()._val), str()))
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
; [eval] __file__()
(push) ; 3
(assert (__file__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__file__%precondition $Snap.unit))
(assert (not (= (__file__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@474@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@474@01))
    ($Snap.second ($Snap.second $t@474@01)))))
(assert (= ($Snap.first ($Snap.second $t@474@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@474@01))) (as str<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second $t@474@01)) $Snap.unit))
; [eval] issubtype(typeof(__file__()._val), str())
; [eval] typeof(__file__()._val)
; [eval] __file__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union Set(_single(6872323076851130207)))
; [eval] (module_names_0 union Set(_single(6872323076851130207)))
; [eval] Set(_single(6872323076851130207))
; [eval] _single(6872323076851130207)
(declare-const module_names_0@475@01 Set<_Name>)
(assert (=
  module_names_0@475@01
  (Set_union module_names_0@473@01 (Set_singleton (_single<_Name> 6872323076851130207)))))
; [exec]
; inhale acc(__name__()._val, 99 / 100) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   (issubtype(typeof(__name__()._val), str()) &&
;   str___eq__(str___create__(8, 6872332955275845471), __name__()._val)))
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 ($Snap.combine ($Snap.first $t@476@01) ($Snap.second $t@476@01))))
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(assert (__name__%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (__name__%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (__file__ $Snap.unit) (__name__ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (__name__ $Snap.unit) $Ref.null)))
(assert (=
  ($Snap.second $t@476@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@476@01))
    ($Snap.second ($Snap.second $t@476@01)))))
(assert (= ($Snap.first ($Snap.second $t@476@01)) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (issubtype<Bool> (typeof<PyType> ($SortWrappers.$SnapTo$Ref ($Snap.first $t@476@01))) (as str<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second $t@476@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@476@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@476@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
; [eval] issubtype(typeof(__name__()._val), str())
; [eval] typeof(__name__()._val)
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
; [eval] str()
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@476@01))) $Snap.unit))
; [eval] str___eq__(str___create__(8, 6872332955275845471), __name__()._val)
; [eval] str___create__(8, 6872332955275845471)
(push) ; 3
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
(pop) ; 3
; Joined path conditions
(assert (str___create__%precondition $Snap.unit 8 6872332955275845471))
; [eval] __name__()
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
; [eval] issubtype(typeof(self), str())
; [eval] typeof(self)
; [eval] str()
(push) ; 4
(assert (not (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType)))
(assert (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@476@01))))
(pop) ; 3
; Joined path conditions
(assert (and
  (issubtype<Bool> (typeof<PyType> (str___create__ $Snap.unit 8 6872332955275845471)) (as str<PyType>  PyType))
  (str___eq__%precondition $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@476@01)))))
(assert (str___eq__ $Snap.unit (str___create__ $Snap.unit 8 6872332955275845471) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@476@01))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(478866983173597464585588)))
; [eval] (module_names_0 union Set(_single(478866983173597464585588)))
; [eval] Set(_single(478866983173597464585588))
; [eval] _single(478866983173597464585588)
(declare-const module_names_0@477@01 Set<_Name>)
(assert (=
  module_names_0@477@01
  (Set_union module_names_0@475@01 (Set_singleton (_single<_Name> 478866983173597464585588)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(15589577310913816805300725108)))
; [eval] (module_names_0 union Set(_single(15589577310913816805300725108)))
; [eval] Set(_single(15589577310913816805300725108))
; [eval] _single(15589577310913816805300725108)
(declare-const module_names_0@478@01 Set<_Name>)
(assert (=
  module_names_0@478@01
  (Set_union module_names_0@477@01 (Set_singleton (_single<_Name> 15589577310913816805300725108)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2148138609894455731572)))
; [eval] (module_names_0 union Set(_single(2148138609894455731572)))
; [eval] Set(_single(2148138609894455731572))
; [eval] _single(2148138609894455731572)
(declare-const module_names_0@479@01 Set<_Name>)
(assert (=
  module_names_0@479@01
  (Set_union module_names_0@478@01 (Set_singleton (_single<_Name> 2148138609894455731572)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(60897063935213969486341492)))
; [eval] (module_names_0 union Set(_single(60897063935213969486341492)))
; [eval] Set(_single(60897063935213969486341492))
; [eval] _single(60897063935213969486341492)
(declare-const module_names_0@480@01 Set<_Name>)
(assert (=
  module_names_0@480@01
  (Set_union module_names_0@479@01 (Set_singleton (_single<_Name> 60897063935213969486341492)))))
; [exec]
; module_names_0 := (module_names_0 union Set(_single(8387236734860223860)))
; [eval] (module_names_0 union Set(_single(8387236734860223860)))
; [eval] Set(_single(8387236734860223860))
; [eval] _single(8387236734860223860)
(declare-const module_names_0@481@01 Set<_Name>)
(assert (=
  module_names_0@481@01
  (Set_union module_names_0@480@01 (Set_singleton (_single<_Name> 8387236734860223860)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(237879152067219528312180)))
; [eval] (module_names_0 union Set(_single(237879152067219528312180)))
; [eval] Set(_single(237879152067219528312180))
; [eval] _single(237879152067219528312180)
(declare-const module_names_0@482@01 Set<_Name>)
(assert (=
  module_names_0@482@01
  (Set_union module_names_0@481@01 (Set_singleton (_single<_Name> 237879152067219528312180)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2146985679593755862388)))
; [eval] (module_names_0 union Set(_single(2146985679593755862388)))
; [eval] Set(_single(2146985679593755862388))
; [eval] _single(2146985679593755862388)
(declare-const module_names_0@483@01 Set<_Name>)
(assert (=
  module_names_0@483@01
  (Set_union module_names_0@482@01 (Set_singleton (_single<_Name> 2146985679593755862388)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(60897062782283668786472308)))
; [eval] (module_names_0 union Set(_single(60897062782283668786472308)))
; [eval] Set(_single(60897062782283668786472308))
; [eval] _single(60897062782283668786472308)
(declare-const module_names_0@484@01 Set<_Name>)
(assert (=
  module_names_0@484@01
  (Set_union module_names_0@483@01 (Set_singleton (_single<_Name> 60897062782283668786472308)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(2707863294992911939904296338043932780425740660764983911796)))
; [eval] (module_names_0 union Set(_single(2707863294992911939904296338043932780425740660764983911796)))
; [eval] Set(_single(2707863294992911939904296338043932780425740660764983911796))
; [eval] _single(2707863294992911939904296338043932780425740660764983911796)
(declare-const module_names_0@485@01 Set<_Name>)
(assert (=
  module_names_0@485@01
  (Set_union module_names_0@484@01 (Set_singleton (_single<_Name> 2707863294992911939904296338043932780425740660764983911796)))))
; [exec]
; module_names_0 := (module_names_0 union
;   Set(_single(80945934741106241361602408908600902368420299197024490027705716)))
; [eval] (module_names_0 union Set(_single(80945934741106241361602408908600902368420299197024490027705716)))
; [eval] Set(_single(80945934741106241361602408908600902368420299197024490027705716))
; [eval] _single(80945934741106241361602408908600902368420299197024490027705716)
(declare-const module_names_0@486@01 Set<_Name>)
(assert (=
  module_names_0@486@01
  (Set_union module_names_0@485@01 (Set_singleton (_single<_Name> 80945934741106241361602408908600902368420299197024490027705716)))))
; [exec]
; label __end
; [eval] (forperm _r_30: Ref [MustInvokeBounded(_r_30)] :: false)
; [eval] (forperm _r_30: Ref [MustInvokeUnbounded(_r_30)] :: false)
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseBounded] :: false)
; [eval] (forperm _r_30: Ref [_r_30.MustReleaseUnbounded] :: false)
(pop) ; 2
(pop) ; 1
; ---------- list___init__ ----------
(declare-const _cthread_8@487@01 $Ref)
(declare-const _caller_measures_8@488@01 Seq<Measure$>)
(declare-const _residue_8@489@01 $Perm)
(declare-const _current_wait_level_8@490@01 $Perm)
(declare-const res@491@01 $Ref)
(declare-const _cthread_8@492@01 $Ref)
(declare-const _caller_measures_8@493@01 Seq<Measure$>)
(declare-const _residue_8@494@01 $Perm)
(declare-const _current_wait_level_8@495@01 $Perm)
(declare-const res@496@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@497@01 $Snap)
(assert (= $t@497@01 ($Snap.combine ($Snap.first $t@497@01) ($Snap.second $t@497@01))))
(assert (= ($Snap.first $t@497@01) $Snap.unit))
; [eval] _cthread_8 != null
(assert (not (= _cthread_8@492@01 $Ref.null)))
(assert (=
  ($Snap.second $t@497@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@497@01))
    ($Snap.second ($Snap.second $t@497@01)))))
(assert (= ($Snap.first ($Snap.second $t@497@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_8, _cthread_8, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@493@01 _cthread_8@492@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_8@493@01 _cthread_8@492@01 1))
(assert (Measure$check $Snap.unit _caller_measures_8@493@01 _cthread_8@492@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@497@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@497@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@497@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@497@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_8), Thread_0())
; [eval] typeof(_cthread_8)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_8@492@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@497@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@498@01 $Snap)
(assert (= $t@498@01 ($Snap.combine ($Snap.first $t@498@01) ($Snap.second $t@498@01))))
(assert (= ($Snap.first $t@498@01) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseBounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second $t@498@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@498@01))
    ($Snap.second ($Snap.second $t@498@01)))))
(assert (= ($Snap.first ($Snap.second $t@498@01)) $Snap.unit))
; [eval] (forperm _r_32: Ref [_r_32.MustReleaseUnbounded] :: Level(_r_32) <= _current_wait_level_8)
(assert (=
  ($Snap.second ($Snap.second $t@498@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@498@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@498@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@498@01))) $Snap.unit))
; [eval] _residue_8 <= _current_wait_level_8
(assert (<= _residue_8@494@01 _current_wait_level_8@495@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@498@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@498@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))))
(assert (not (= res@496@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))
  $Snap.unit))
; [eval] res.list_acc == Seq[Ref]()
; [eval] Seq[Ref]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))
  (as Seq_empty  Seq<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01))))))
  $Snap.unit))
; [eval] typeof(res) == list(list_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] list(list_arg(typeof(res), 0))
; [eval] list_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@496@01)
  (list<PyType> (list_arg<PyType> (typeof<PyType> res@496@01) 0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@498@01))))))
  $Snap.unit))
; [eval] (Low(res): Bool)
(assert (Low<Bool> res@496@01))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_8: Perm
(declare-const _cwl_8@499@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- set___init__ ----------
(declare-const _cthread_21@500@01 $Ref)
(declare-const _caller_measures_21@501@01 Seq<Measure$>)
(declare-const _residue_21@502@01 $Perm)
(declare-const _current_wait_level_21@503@01 $Perm)
(declare-const res@504@01 $Ref)
(declare-const _cthread_21@505@01 $Ref)
(declare-const _caller_measures_21@506@01 Seq<Measure$>)
(declare-const _residue_21@507@01 $Perm)
(declare-const _current_wait_level_21@508@01 $Perm)
(declare-const res@509@01 $Ref)
(push) ; 1
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 ($Snap.combine ($Snap.first $t@510@01) ($Snap.second $t@510@01))))
(assert (= ($Snap.first $t@510@01) $Snap.unit))
; [eval] _cthread_21 != null
(assert (not (= _cthread_21@505@01 $Ref.null)))
(assert (=
  ($Snap.second $t@510@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@510@01))
    ($Snap.second ($Snap.second $t@510@01)))))
(assert (= ($Snap.first ($Snap.second $t@510@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_21, _cthread_21, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@506@01 _cthread_21@505@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_21@506@01 _cthread_21@505@01 1))
(assert (Measure$check $Snap.unit _caller_measures_21@506@01 _cthread_21@505@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@510@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@510@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@510@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@510@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_21), Thread_0())
; [eval] typeof(_cthread_21)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_21@505@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@510@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@511@01 $Snap)
(assert (= $t@511@01 ($Snap.combine ($Snap.first $t@511@01) ($Snap.second $t@511@01))))
(assert (= ($Snap.first $t@511@01) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseBounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second $t@511@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@511@01))
    ($Snap.second ($Snap.second $t@511@01)))))
(assert (= ($Snap.first ($Snap.second $t@511@01)) $Snap.unit))
; [eval] (forperm _r_34: Ref [_r_34.MustReleaseUnbounded] :: Level(_r_34) <= _current_wait_level_21)
(assert (=
  ($Snap.second ($Snap.second $t@511@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@511@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@511@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@511@01))) $Snap.unit))
; [eval] _residue_21 <= _current_wait_level_21
(assert (<= _residue_21@507@01 _current_wait_level_21@508@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@511@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@511@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01)))))))
(assert (not (= res@509@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01)))))
  $Snap.unit))
; [eval] res.set_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@511@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@511@01)))))
  $Snap.unit))
; [eval] typeof(res) == set(set_arg(typeof(res), 0))
; [eval] typeof(res)
; [eval] set(set_arg(typeof(res), 0))
; [eval] set_arg(typeof(res), 0)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@509@01)
  (set<PyType> (set_arg<PyType> (typeof<PyType> res@509@01) 0))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_21: Perm
(declare-const _cwl_21@512@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- dict___init__ ----------
(declare-const _cthread_33@513@01 $Ref)
(declare-const _caller_measures_33@514@01 Seq<Measure$>)
(declare-const _residue_33@515@01 $Perm)
(declare-const _current_wait_level_33@516@01 $Perm)
(declare-const res@517@01 $Ref)
(declare-const _cthread_33@518@01 $Ref)
(declare-const _caller_measures_33@519@01 Seq<Measure$>)
(declare-const _residue_33@520@01 $Perm)
(declare-const _current_wait_level_33@521@01 $Perm)
(declare-const res@522@01 $Ref)
(push) ; 1
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 ($Snap.combine ($Snap.first $t@523@01) ($Snap.second $t@523@01))))
(assert (= ($Snap.first $t@523@01) $Snap.unit))
; [eval] _cthread_33 != null
(assert (not (= _cthread_33@518@01 $Ref.null)))
(assert (=
  ($Snap.second $t@523@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@523@01))
    ($Snap.second ($Snap.second $t@523@01)))))
(assert (= ($Snap.first ($Snap.second $t@523@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_33, _cthread_33, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_33@519@01 _cthread_33@518@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_33@519@01 _cthread_33@518@01 1))
(assert (Measure$check $Snap.unit _caller_measures_33@519@01 _cthread_33@518@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@523@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@523@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@523@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@523@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_33), Thread_0())
; [eval] typeof(_cthread_33)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_33@518@01) (as Thread_0<PyType>  PyType)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@523@01))) $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@524@01 $Snap)
(assert (= $t@524@01 ($Snap.combine ($Snap.first $t@524@01) ($Snap.second $t@524@01))))
(assert (= ($Snap.first $t@524@01) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseBounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second $t@524@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@524@01))
    ($Snap.second ($Snap.second $t@524@01)))))
(assert (= ($Snap.first ($Snap.second $t@524@01)) $Snap.unit))
; [eval] (forperm _r_36: Ref [_r_36.MustReleaseUnbounded] :: Level(_r_36) <= _current_wait_level_33)
(assert (=
  ($Snap.second ($Snap.second $t@524@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@524@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@524@01))) $Snap.unit))
; [eval] _residue_33 <= _current_wait_level_33
(assert (<= _residue_33@520@01 _current_wait_level_33@521@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@524@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@524@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01)))))))
(assert (not (= res@522@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))
  $Snap.unit))
; [eval] res.dict_acc == Set[Ref]()
; [eval] Set[Ref]()
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@524@01))))) (as Set_empty  Set<$Ref>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))
  $Snap.unit))
; [eval] typeof(res) == dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] typeof(res)
; [eval] dict(dict_arg(typeof(res), 0), dict_arg(typeof(res), 1))
; [eval] dict_arg(typeof(res), 0)
; [eval] typeof(res)
; [eval] dict_arg(typeof(res), 1)
; [eval] typeof(res)
(assert (=
  (typeof<PyType> res@522@01)
  (dict<PyType> (dict_arg<PyType> (typeof<PyType> res@522@01) 0) (dict_arg<PyType> (typeof<PyType> res@522@01) 1))))
(pop) ; 2
(push) ; 2
; [exec]
; var _cwl_33: Perm
(declare-const _cwl_33@525@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- dict___setitem__ ----------
(declare-const _cthread_35@526@01 $Ref)
(declare-const _caller_measures_35@527@01 Seq<Measure$>)
(declare-const _residue_35@528@01 $Perm)
(declare-const self@529@01 $Ref)
(declare-const key@530@01 $Ref)
(declare-const item@531@01 $Ref)
(declare-const _current_wait_level_35@532@01 $Perm)
(declare-const _cthread_35@533@01 $Ref)
(declare-const _caller_measures_35@534@01 Seq<Measure$>)
(declare-const _residue_35@535@01 $Perm)
(declare-const self@536@01 $Ref)
(declare-const key@537@01 $Ref)
(declare-const item@538@01 $Ref)
(declare-const _current_wait_level_35@539@01 $Perm)
(push) ; 1
(declare-const $t@540@01 $Snap)
(assert (= $t@540@01 ($Snap.combine ($Snap.first $t@540@01) ($Snap.second $t@540@01))))
(assert (= ($Snap.first $t@540@01) $Snap.unit))
; [eval] _cthread_35 != null
(assert (not (= _cthread_35@533@01 $Ref.null)))
(assert (=
  ($Snap.second $t@540@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@540@01))
    ($Snap.second ($Snap.second $t@540@01)))))
(assert (= ($Snap.first ($Snap.second $t@540@01)) $Snap.unit))
; [eval] Measure$check(_caller_measures_35, _cthread_35, 1)
(push) ; 2
(assert (Measure$check%precondition $Snap.unit _caller_measures_35@534@01 _cthread_35@533@01 1))
(pop) ; 2
; Joined path conditions
(assert (Measure$check%precondition $Snap.unit _caller_measures_35@534@01 _cthread_35@533@01 1))
(assert (Measure$check $Snap.unit _caller_measures_35@534@01 _cthread_35@533@01 1))
(assert (=
  ($Snap.second ($Snap.second $t@540@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@540@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@540@01))) $Snap.unit))
; [eval] issubtype(typeof(_cthread_35), Thread_0())
; [eval] typeof(_cthread_35)
; [eval] Thread_0()
(assert (issubtype<Bool> (typeof<PyType> _cthread_35@533@01) (as Thread_0<PyType>  PyType)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@540@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@540@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@540@01))))
  $Snap.unit))
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> self@536@01) (dict<PyType> (dict_arg<PyType> (typeof<PyType> self@536@01) 0) (dict_arg<PyType> (typeof<PyType> self@536@01) 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))))
(assert (not (= self@536@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))
  $Snap.unit))
; [eval] issubtype(typeof(item), dict_arg(typeof(self), 1))
; [eval] typeof(item)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> item@538@01) (dict_arg<PyType> (typeof<PyType> self@536@01) 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))))
  $Snap.unit))
; [eval] issubtype(typeof(key), dict_arg(typeof(self), 0))
; [eval] typeof(key)
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
(assert (issubtype<Bool> (typeof<PyType> key@537@01) (dict_arg<PyType> (typeof<PyType> self@536@01) 0)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))))
  $Snap.unit))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 ($Snap.combine ($Snap.first $t@541@01) ($Snap.second $t@541@01))))
(assert (= ($Snap.first $t@541@01) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseBounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second $t@541@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@541@01))
    ($Snap.second ($Snap.second $t@541@01)))))
(assert (= ($Snap.first ($Snap.second $t@541@01)) $Snap.unit))
; [eval] (forperm _r_38: Ref [_r_38.MustReleaseUnbounded] :: Level(_r_38) <= _current_wait_level_35)
(assert (=
  ($Snap.second ($Snap.second $t@541@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@541@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@541@01))) $Snap.unit))
; [eval] _residue_35 <= _current_wait_level_35
(assert (<= _residue_35@535@01 _current_wait_level_35@539@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@541@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  $Snap.unit))
; [eval] self.dict_acc == (old(self.dict_acc) union Set(key))
; [eval] (old(self.dict_acc) union Set(key))
; [eval] old(self.dict_acc)
; [eval] Set(key)
(assert (Set_equal ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))) (Set_union ($SortWrappers.$SnapToSet<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))) (Set_singleton key@537@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  $Snap.unit))
; [eval] dict___getitem__(self, key) == item
; [eval] dict___getitem__(self, key)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@542@01 $Perm)
(assert ($Perm.isReadVar $k@542@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@542@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@543@01 $Perm)
(assert ($Perm.isReadVar $k@543@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@543@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@544@01 $Perm)
(assert ($Perm.isReadVar $k@544@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@544@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@545@01 $Perm)
(assert ($Perm.isReadVar $k@545@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@545@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@544@01))
(assert ($Perm.isReadVar $k@545@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01))
(set-option :timeout 0)
(push) ; 4
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
      $Snap.unit))) self@536@01 key@537@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@542@01))
(assert ($Perm.isReadVar $k@543@01))
(assert ($Perm.isReadVar $k@544@01))
(assert ($Perm.isReadVar $k@545@01))
(assert (and
  (dict___contains__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01)
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 key@537@01)
  (dict___getitem__%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
        $Snap.unit))) self@536@01 key@537@01)))
(assert (=
  (dict___getitem__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
        $Snap.unit))) self@536@01 key@537@01)
  item@538@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { dict___getitem__(self, k) } old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k)))
(declare-const k@546@01 $Ref)
(push) ; 3
; [eval] old(dict___contains__(self, k)) && k != key ==> dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] old(dict___contains__(self, k)) && k != key
; [eval] old(dict___contains__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 4
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@547@01 $Perm)
(assert ($Perm.isReadVar $k@547@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@547@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@548@01 $Perm)
(assert ($Perm.isReadVar $k@548@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@548@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@547@01))
(assert ($Perm.isReadVar $k@548@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 117 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01)) | live]
; [else-branch: 117 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01) | live]
(push) ; 5
; [then-branch: 117 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 117 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01))
; [eval] k != key
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01))))
(push) ; 4
; [then-branch: 118 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01) && k@546@01 != key@537@01 | live]
; [else-branch: 118 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01) && k@546@01 != key@537@01) | live]
(push) ; 5
; [then-branch: 118 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01) && k@546@01 != key@537@01]
(assert (and
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
  (not (= k@546@01 key@537@01))))
; [eval] dict___contains__(self, k) && dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___contains__(self, k)
(push) ; 6
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@549@01 $Perm)
(assert ($Perm.isReadVar $k@549@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@549@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@550@01 $Perm)
(assert ($Perm.isReadVar $k@550@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@550@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@549@01))
(assert ($Perm.isReadVar $k@550@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 119 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@541@01)))), First:(Second:(Second:(Second:(Second:($t@541@01))))))), self@536@01, k@546@01)) | live]
; [else-branch: 119 | dict___contains__((_, (First:(Second:(Second:(Second:($t@541@01)))), First:(Second:(Second:(Second:(Second:($t@541@01))))))), self@536@01, k@546@01) | live]
(push) ; 7
; [then-branch: 119 | !(dict___contains__((_, (First:(Second:(Second:(Second:($t@541@01)))), First:(Second:(Second:(Second:(Second:($t@541@01))))))), self@536@01, k@546@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 119 | dict___contains__((_, (First:(Second:(Second:(Second:($t@541@01)))), First:(Second:(Second:(Second:(Second:($t@541@01))))))), self@536@01, k@546@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01))
; [eval] dict___getitem__(self, k) == old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@551@01 $Perm)
(assert ($Perm.isReadVar $k@551@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@551@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@552@01 $Perm)
(assert ($Perm.isReadVar $k@552@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@552@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@553@01 $Perm)
(assert ($Perm.isReadVar $k@553@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@553@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@554@01 $Perm)
(assert ($Perm.isReadVar $k@554@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@554@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
      $Snap.unit))) self@536@01 k@546@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@551@01))
(assert ($Perm.isReadVar $k@552@01))
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
      $Snap.unit))) self@536@01 k@546@01))
; [eval] old(dict___getitem__(self, k))
; [eval] dict___getitem__(self, k)
(set-option :timeout 0)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@555@01 $Perm)
(assert ($Perm.isReadVar $k@555@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@555@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@556@01 $Perm)
(assert ($Perm.isReadVar $k@556@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@556@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 9
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@557@01 $Perm)
(assert ($Perm.isReadVar $k@557@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@557@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const $k@558@01 $Perm)
(assert ($Perm.isReadVar $k@558@01))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@558@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
      $Snap.unit))) self@536@01 k@546@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@555@01))
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
      $Snap.unit))) self@536@01 k@546@01))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@551@01))
(assert ($Perm.isReadVar $k@552@01))
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert ($Perm.isReadVar $k@555@01))
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
          $Snap.unit))) self@536@01 k@546@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
          $Snap.unit))) self@536@01 k@546@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 118 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, k@546@01) && k@546@01 != key@537@01)]
(assert (not
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
    (not (= k@546@01 key@537@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@549@01))
(assert ($Perm.isReadVar $k@550@01))
(assert ($Perm.isReadVar $k@551@01))
(assert ($Perm.isReadVar $k@552@01))
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert ($Perm.isReadVar $k@555@01))
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
(assert (=>
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
    (not (= k@546@01 key@537@01)))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
    (not (= k@546@01 key@537@01))
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
              $Snap.unit))) self@536@01 k@546@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
              $Snap.unit))) self@536@01 k@546@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01))))))
; Joined path conditions
(assert (or
  (not
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
      (not (= k@546@01 key@537@01))))
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
    (not (= k@546@01 key@537@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@547@01))
(assert ($Perm.isReadVar $k@548@01))
(assert ($Perm.isReadVar $k@549@01))
(assert ($Perm.isReadVar $k@550@01))
(assert ($Perm.isReadVar $k@551@01))
(assert ($Perm.isReadVar $k@552@01))
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert ($Perm.isReadVar $k@555@01))
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert ($Perm.isReadVar $k@558@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@546@01 $Ref)) (!
  (and
    (dict___contains__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)))
    (=>
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
        (not (= k@546@01 key@537@01)))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
        (not (= k@546@01 key@537@01))
        (dict___contains__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
                  $Snap.unit))) self@536@01 k@546@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
                  $Snap.unit))) self@536@01 k@546@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)))))
    (or
      (not
        (and
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
          (not (= k@546@01 key@537@01))))
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
        (not (= k@546@01 key@537@01)))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
        $Snap.unit))) self@536@01 k@546@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196-aux|)))
(assert (forall ((k@546@01 $Ref)) (!
  (=>
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 k@546@01)
      (not (= k@546@01 key@537@01)))
    (and
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))) self@536@01 k@546@01)
      (=
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
              $Snap.unit))) self@536@01 k@546@01)
        (dict___getitem__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
              $Snap.unit))) self@536@01 k@546@01))))
  :pattern ((dict___getitem__%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))
        $Snap.unit))) self@536@01 k@546@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@929@12@929@196|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
  $Snap.unit))
; [eval] |dict___values__(self)| == old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(push) ; 3
(declare-const $k@559@01 $Perm)
(assert ($Perm.isReadVar $k@559@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@559@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@560@01 $Perm)
(assert ($Perm.isReadVar $k@560@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@560@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@559@01))
(assert ($Perm.isReadVar $k@560@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01))
; [eval] old(|dict___values__(self)|) + (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(|dict___values__(self)|)
; [eval] |dict___values__(self)|
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@561@01 $Perm)
(assert ($Perm.isReadVar $k@561@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@562@01 $Perm)
(assert ($Perm.isReadVar $k@562@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@562@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@561@01))
(assert ($Perm.isReadVar $k@562@01))
(assert (dict___values__%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01))
; [eval] (old(dict___contains__(self, key)) ? 0 : 1)
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 3
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@563@01 $Perm)
(assert ($Perm.isReadVar $k@563@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@564@01 $Perm)
(assert ($Perm.isReadVar $k@564@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@563@01))
(assert ($Perm.isReadVar $k@564@01))
(assert (dict___contains__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01) | live]
; [else-branch: 120 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 120 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
(pop) ; 4
(push) ; 4
; [else-branch: 120 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))
(assert (=
  (Seq_length
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01))
  (+
    (Seq_length
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01))
    (ite
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))))))
  $Snap.unit))
; [eval] (forall k: Ref :: { (k in dict___values__(self)) } (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self)))
(declare-const k@565@01 $Ref)
(push) ; 3
; [eval] (k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))) == (k in dict___values__(self))
; [eval] k == item || (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] k == item
(push) ; 4
; [then-branch: 121 | k@565@01 == item@538@01 | live]
; [else-branch: 121 | k@565@01 != item@538@01 | live]
(push) ; 5
; [then-branch: 121 | k@565@01 == item@538@01]
(assert (= k@565@01 item@538@01))
(pop) ; 5
(push) ; 5
; [else-branch: 121 | k@565@01 != item@538@01]
(assert (not (= k@565@01 item@538@01)))
; [eval] (k in old(dict___values__(self))) && (!old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key)))
; [eval] (k in old(dict___values__(self)))
; [eval] old(dict___values__(self))
; [eval] dict___values__(self)
(push) ; 6
(declare-const $k@566@01 $Perm)
(assert ($Perm.isReadVar $k@566@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@566@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const $k@567@01 $Perm)
(assert ($Perm.isReadVar $k@567@01))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@567@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@566@01))
(assert ($Perm.isReadVar $k@567@01))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 122 | !(k@565@01 in dict___values__((First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01))))))), self@536@01)) | live]
; [else-branch: 122 | k@565@01 in dict___values__((First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01))))))), self@536@01) | live]
(push) ; 7
; [then-branch: 122 | !(k@565@01 in dict___values__((First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01))))))), self@536@01))]
(assert (not
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
    k@565@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 122 | k@565@01 in dict___values__((First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01))))))), self@536@01)]
(assert (Seq_contains
  (dict___values__ ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
  k@565@01))
; [eval] !old(dict___contains__(self, key)) || k != old(dict___getitem__(self, key))
; [eval] !old(dict___contains__(self, key))
; [eval] old(dict___contains__(self, key))
; [eval] dict___contains__(self, key)
(push) ; 8
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@568@01 $Perm)
(assert ($Perm.isReadVar $k@568@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@568@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@569@01 $Perm)
(assert ($Perm.isReadVar $k@569@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@569@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 123 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01)) | live]
; [else-branch: 123 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01) | live]
(push) ; 9
; [then-branch: 123 | !(dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01))]
(assert (not
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 123 | dict___contains__((_, (First:(Second:(Second:(Second:(Second:($t@540@01))))), First:(Second:(Second:(Second:(Second:(Second:($t@540@01)))))))), self@536@01, key@537@01)]
(assert (dict___contains__ ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
; [eval] k != old(dict___getitem__(self, key))
; [eval] old(dict___getitem__(self, key))
; [eval] dict___getitem__(self, key)
(push) ; 10
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@570@01 $Perm)
(assert ($Perm.isReadVar $k@570@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@570@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const $k@571@01 $Perm)
(assert ($Perm.isReadVar $k@571@01))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@571@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] dict___contains__(self, key)
(set-option :timeout 0)
(push) ; 11
; [eval] issubtype(typeof(self), dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1)))
; [eval] typeof(self)
; [eval] dict(dict_arg(typeof(self), 0), dict_arg(typeof(self), 1))
; [eval] dict_arg(typeof(self), 0)
; [eval] typeof(self)
; [eval] dict_arg(typeof(self), 1)
; [eval] typeof(self)
(declare-const $k@572@01 $Perm)
(assert ($Perm.isReadVar $k@572@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@572@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $k@573@01 $Perm)
(assert ($Perm.isReadVar $k@573@01))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@573@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
      $Snap.unit))) self@536@01 key@537@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@570@01))
(assert ($Perm.isReadVar $k@571@01))
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (dict___getitem__%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
      $Snap.unit))) self@536@01 key@537@01))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@570@01))
(assert ($Perm.isReadVar $k@571@01))
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (=>
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
  (and
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
    (dict___getitem__%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
          $Snap.unit))) self@536@01 key@537@01))))
(assert (or
  (dict___contains__ ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
  (not
    (dict___contains__ ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(assert ($Perm.isReadVar $k@570@01))
(assert ($Perm.isReadVar $k@571@01))
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (=>
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
    k@565@01)
  (and
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
      k@565@01)
    (=>
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
      (and
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
        (dict___getitem__%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
              $Snap.unit))) self@536@01 key@537@01)))
    (or
      (dict___contains__ ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
      (not
        (dict___contains__ ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))))))
(assert (or
  (Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
    k@565@01)
  (not
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
      k@565@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert ($Perm.isReadVar $k@566@01))
(assert ($Perm.isReadVar $k@567@01))
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(assert ($Perm.isReadVar $k@570@01))
(assert ($Perm.isReadVar $k@571@01))
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert (=>
  (not (= k@565@01 item@538@01))
  (and
    (not (= k@565@01 item@538@01))
    (=>
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
        k@565@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
          k@565@01)
        (=>
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
          (and
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
            (dict___getitem__%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
                  $Snap.unit))) self@536@01 key@537@01)))
        (or
          (dict___contains__ ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))))
    (or
      (Seq_contains
        (dict___values__ ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
        k@565@01)
      (not
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
          k@565@01))))))
(assert (or (not (= k@565@01 item@538@01)) (= k@565@01 item@538@01)))
; [eval] (k in dict___values__(self))
; [eval] dict___values__(self)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@574@01 $Perm)
(assert ($Perm.isReadVar $k@574@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@574@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $k@575@01 $Perm)
(assert ($Perm.isReadVar $k@575@01))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@575@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@574@01))
(assert ($Perm.isReadVar $k@575@01))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@566@01))
(assert ($Perm.isReadVar $k@567@01))
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(assert ($Perm.isReadVar $k@570@01))
(assert ($Perm.isReadVar $k@571@01))
(assert ($Perm.isReadVar $k@572@01))
(assert ($Perm.isReadVar $k@573@01))
(assert ($Perm.isReadVar $k@574@01))
(assert ($Perm.isReadVar $k@575@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((k@565@01 $Ref)) (!
  (and
    (=>
      (not (= k@565@01 item@538@01))
      (and
        (not (= k@565@01 item@538@01))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
            k@565@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
              k@565@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
                      $Snap.unit))) self@536@01 key@537@01)))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
            k@565@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
              k@565@01)))))
    (or (not (= k@565@01 item@538@01)) (= k@565@01 item@538@01)))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
    k@565@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
    k@565@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@565@01 $Ref)) (!
  (and
    (=>
      (not (= k@565@01 item@538@01))
      (and
        (not (= k@565@01 item@538@01))
        (=>
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
            k@565@01)
          (and
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
              k@565@01)
            (=>
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
              (and
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
                (dict___getitem__%precondition ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
                      $Snap.unit))) self@536@01 key@537@01)))
            (or
              (dict___contains__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)
              (not
                (dict___contains__ ($Snap.combine
                  $Snap.unit
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01)))))
        (or
          (Seq_contains
            (dict___values__ ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
            k@565@01)
          (not
            (Seq_contains
              (dict___values__ ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
              k@565@01)))))
    (or (not (= k@565@01 item@538@01)) (= k@565@01 item@538@01)))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
    k@565@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223-aux|)))
(assert (forall ((k@565@01 $Ref)) (!
  (=
    (or
      (= k@565@01 item@538@01)
      (and
        (Seq_contains
          (dict___values__ ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))) self@536@01)
          k@565@01)
        (or
          (not
            (dict___contains__ ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))))) self@536@01 key@537@01))
          (not
            (=
              k@565@01
              (dict___getitem__ ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01)))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@540@01))))))
                    $Snap.unit))) self@536@01 key@537@01))))))
    (Seq_contains
      (dict___values__ ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
      k@565@01))
  :pattern ((Seq_contains
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
    k@565@01))
  :pattern ((Seq_contains_trigger
    (dict___values__ ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@541@01))))
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@541@01)))))) self@536@01)
    k@565@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/nagini/testsfunctionalverificationtest_forall.py.vpr@931@12@931@223|)))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var _cwl_35: Perm
(declare-const _cwl_35@576@01 $Perm)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
